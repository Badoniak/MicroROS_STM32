
MicroTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  0801a2b0  0801a2b0  0001b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4ec  0801b4ec  0001d500  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4ec  0801b4ec  0001c4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4f4  0801b4f4  0001d500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801b4f4  0801b4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b500  0801b500  0001c500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000500  20000000  0801b504  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000df50  20000500  0801ba04  0001d500  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e450  0801ba04  0001e450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d500  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eacc  00000000  00000000  0001d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d1  00000000  00000000  0003bffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  000409d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128f  00000000  00000000  000421f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002865c  00000000  00000000  0004347f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e90b  00000000  00000000  0006badb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8903  00000000  00000000  0008a3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00172ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f4  00000000  00000000  00172d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000500 	.word	0x20000500
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a294 	.word	0x0801a294

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000504 	.word	0x20000504
 800020c:	0801a294 	.word	0x0801a294

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c4a:	f000 b9b5 	b.w	8000fb8 <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f84d 	bl	8000cfc <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f840 	bl	8000cfc <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f82f 	bl	8000cfc <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f821 	bl	8000cfc <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	f000 b96a 	b.w	8000fb8 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f806 	bl	8000cfc <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__udivmoddi4>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	9d08      	ldr	r5, [sp, #32]
 8000d02:	460c      	mov	r4, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14e      	bne.n	8000da6 <__udivmoddi4+0xaa>
 8000d08:	4694      	mov	ip, r2
 8000d0a:	458c      	cmp	ip, r1
 8000d0c:	4686      	mov	lr, r0
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	d962      	bls.n	8000dda <__udivmoddi4+0xde>
 8000d14:	b14a      	cbz	r2, 8000d2a <__udivmoddi4+0x2e>
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	4091      	lsls	r1, r2
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d24:	4319      	orrs	r1, r3
 8000d26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f f68c 	uxth.w	r6, ip
 8000d32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb04 f106 	mul.w	r1, r4, r6
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d90a      	bls.n	8000d60 <__udivmoddi4+0x64>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d52:	f080 8112 	bcs.w	8000f7a <__udivmoddi4+0x27e>
 8000d56:	4299      	cmp	r1, r3
 8000d58:	f240 810f 	bls.w	8000f7a <__udivmoddi4+0x27e>
 8000d5c:	3c02      	subs	r4, #2
 8000d5e:	4463      	add	r3, ip
 8000d60:	1a59      	subs	r1, r3, r1
 8000d62:	fa1f f38e 	uxth.w	r3, lr
 8000d66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d72:	fb00 f606 	mul.w	r6, r0, r6
 8000d76:	429e      	cmp	r6, r3
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x94>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d82:	f080 80fc 	bcs.w	8000f7e <__udivmoddi4+0x282>
 8000d86:	429e      	cmp	r6, r3
 8000d88:	f240 80f9 	bls.w	8000f7e <__udivmoddi4+0x282>
 8000d8c:	4463      	add	r3, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	1b9b      	subs	r3, r3, r6
 8000d92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11d      	cbz	r5, 8000da2 <__udivmoddi4+0xa6>
 8000d9a:	40d3      	lsrs	r3, r2
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d905      	bls.n	8000db6 <__udivmoddi4+0xba>
 8000daa:	b10d      	cbz	r5, 8000db0 <__udivmoddi4+0xb4>
 8000dac:	e9c5 0100 	strd	r0, r1, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	4608      	mov	r0, r1
 8000db4:	e7f5      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000db6:	fab3 f183 	clz	r1, r3
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d146      	bne.n	8000e4c <__udivmoddi4+0x150>
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xcc>
 8000dc2:	4290      	cmp	r0, r2
 8000dc4:	f0c0 80f0 	bcc.w	8000fa8 <__udivmoddi4+0x2ac>
 8000dc8:	1a86      	subs	r6, r0, r2
 8000dca:	eb64 0303 	sbc.w	r3, r4, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d0e6      	beq.n	8000da2 <__udivmoddi4+0xa6>
 8000dd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd8:	e7e3      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	f040 8090 	bne.w	8000f00 <__udivmoddi4+0x204>
 8000de0:	eba1 040c 	sub.w	r4, r1, ip
 8000de4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de8:	fa1f f78c 	uxth.w	r7, ip
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000df2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfe:	fb07 f006 	mul.w	r0, r7, r6
 8000e02:	4298      	cmp	r0, r3
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x11c>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x11a>
 8000e10:	4298      	cmp	r0, r3
 8000e12:	f200 80cd 	bhi.w	8000fb0 <__udivmoddi4+0x2b4>
 8000e16:	4626      	mov	r6, r4
 8000e18:	1a1c      	subs	r4, r3, r0
 8000e1a:	fa1f f38e 	uxth.w	r3, lr
 8000e1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e22:	fb08 4410 	mls	r4, r8, r0, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb00 f707 	mul.w	r7, r0, r7
 8000e2e:	429f      	cmp	r7, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x148>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x146>
 8000e3c:	429f      	cmp	r7, r3
 8000e3e:	f200 80b0 	bhi.w	8000fa2 <__udivmoddi4+0x2a6>
 8000e42:	4620      	mov	r0, r4
 8000e44:	1bdb      	subs	r3, r3, r7
 8000e46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0x9c>
 8000e4c:	f1c1 0620 	rsb	r6, r1, #32
 8000e50:	408b      	lsls	r3, r1
 8000e52:	fa22 f706 	lsr.w	r7, r2, r6
 8000e56:	431f      	orrs	r7, r3
 8000e58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e60:	ea43 030c 	orr.w	r3, r3, ip
 8000e64:	40f4      	lsrs	r4, r6
 8000e66:	fa00 f801 	lsl.w	r8, r0, r1
 8000e6a:	0c38      	lsrs	r0, r7, #16
 8000e6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e70:	fbb4 fef0 	udiv	lr, r4, r0
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	fb00 441e 	mls	r4, r0, lr, r4
 8000e7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e80:	fb0e f90c 	mul.w	r9, lr, ip
 8000e84:	45a1      	cmp	r9, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	d90a      	bls.n	8000ea2 <__udivmoddi4+0x1a6>
 8000e8c:	193c      	adds	r4, r7, r4
 8000e8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e92:	f080 8084 	bcs.w	8000f9e <__udivmoddi4+0x2a2>
 8000e96:	45a1      	cmp	r9, r4
 8000e98:	f240 8081 	bls.w	8000f9e <__udivmoddi4+0x2a2>
 8000e9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ea0:	443c      	add	r4, r7
 8000ea2:	eba4 0409 	sub.w	r4, r4, r9
 8000ea6:	fa1f f983 	uxth.w	r9, r3
 8000eaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eae:	fb00 4413 	mls	r4, r0, r3, r4
 8000eb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eba:	45a4      	cmp	ip, r4
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x1d2>
 8000ebe:	193c      	adds	r4, r7, r4
 8000ec0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec4:	d267      	bcs.n	8000f96 <__udivmoddi4+0x29a>
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	d965      	bls.n	8000f96 <__udivmoddi4+0x29a>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ed2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed6:	eba4 040c 	sub.w	r4, r4, ip
 8000eda:	429c      	cmp	r4, r3
 8000edc:	46ce      	mov	lr, r9
 8000ede:	469c      	mov	ip, r3
 8000ee0:	d351      	bcc.n	8000f86 <__udivmoddi4+0x28a>
 8000ee2:	d04e      	beq.n	8000f82 <__udivmoddi4+0x286>
 8000ee4:	b155      	cbz	r5, 8000efc <__udivmoddi4+0x200>
 8000ee6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eea:	eb64 040c 	sbc.w	r4, r4, ip
 8000eee:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef2:	40cb      	lsrs	r3, r1
 8000ef4:	431e      	orrs	r6, r3
 8000ef6:	40cc      	lsrs	r4, r1
 8000ef8:	e9c5 6400 	strd	r6, r4, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	e750      	b.n	8000da2 <__udivmoddi4+0xa6>
 8000f00:	f1c2 0320 	rsb	r3, r2, #32
 8000f04:	fa20 f103 	lsr.w	r1, r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000f10:	4094      	lsls	r4, r2
 8000f12:	430c      	orrs	r4, r1
 8000f14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f1c:	fa1f f78c 	uxth.w	r7, ip
 8000f20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f24:	fb08 3110 	mls	r1, r8, r0, r3
 8000f28:	0c23      	lsrs	r3, r4, #16
 8000f2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2e:	fb00 f107 	mul.w	r1, r0, r7
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x24c>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3e:	d22c      	bcs.n	8000f9a <__udivmoddi4+0x29e>
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d92a      	bls.n	8000f9a <__udivmoddi4+0x29e>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1a5b      	subs	r3, r3, r1
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f50:	fb08 3311 	mls	r3, r8, r1, r3
 8000f54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f58:	fb01 f307 	mul.w	r3, r1, r7
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x276>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f68:	d213      	bcs.n	8000f92 <__udivmoddi4+0x296>
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	d911      	bls.n	8000f92 <__udivmoddi4+0x296>
 8000f6e:	3902      	subs	r1, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	1ae4      	subs	r4, r4, r3
 8000f74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f78:	e739      	b.n	8000dee <__udivmoddi4+0xf2>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	e6f0      	b.n	8000d60 <__udivmoddi4+0x64>
 8000f7e:	4608      	mov	r0, r1
 8000f80:	e706      	b.n	8000d90 <__udivmoddi4+0x94>
 8000f82:	45c8      	cmp	r8, r9
 8000f84:	d2ae      	bcs.n	8000ee4 <__udivmoddi4+0x1e8>
 8000f86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8e:	3801      	subs	r0, #1
 8000f90:	e7a8      	b.n	8000ee4 <__udivmoddi4+0x1e8>
 8000f92:	4631      	mov	r1, r6
 8000f94:	e7ed      	b.n	8000f72 <__udivmoddi4+0x276>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e799      	b.n	8000ece <__udivmoddi4+0x1d2>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e7d4      	b.n	8000f48 <__udivmoddi4+0x24c>
 8000f9e:	46d6      	mov	lr, sl
 8000fa0:	e77f      	b.n	8000ea2 <__udivmoddi4+0x1a6>
 8000fa2:	4463      	add	r3, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e74d      	b.n	8000e44 <__udivmoddi4+0x148>
 8000fa8:	4606      	mov	r6, r0
 8000faa:	4623      	mov	r3, r4
 8000fac:	4608      	mov	r0, r1
 8000fae:	e70f      	b.n	8000dd0 <__udivmoddi4+0xd4>
 8000fb0:	3e02      	subs	r6, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	e730      	b.n	8000e18 <__udivmoddi4+0x11c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fc8:	f007 fbfa 	bl	80087c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <pvPortMallocMicroROS+0x17c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fd4:	f000 f986 	bl	80012e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fd8:	4b58      	ldr	r3, [pc, #352]	@ (800113c <pvPortMallocMicroROS+0x180>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 8090 	bne.w	8001106 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d01e      	beq.n	800102a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fec:	2208      	movs	r2, #8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d015      	beq.n	800102a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f023 0307 	bic.w	r3, r3, #7
 8001004:	3308      	adds	r3, #8
 8001006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001016:	f383 8811 	msr	BASEPRI, r3
 800101a:	f3bf 8f6f 	isb	sy
 800101e:	f3bf 8f4f 	dsb	sy
 8001022:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	e7fd      	b.n	8001026 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d06a      	beq.n	8001106 <pvPortMallocMicroROS+0x14a>
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d865      	bhi.n	8001106 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800103a:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <pvPortMallocMicroROS+0x188>)
 800103c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800103e:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <pvPortMallocMicroROS+0x188>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001044:	e004      	b.n	8001050 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d903      	bls.n	8001062 <pvPortMallocMicroROS+0xa6>
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f1      	bne.n	8001046 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <pvPortMallocMicroROS+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001068:	429a      	cmp	r2, r3
 800106a:	d04c      	beq.n	8001106 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2208      	movs	r2, #8
 8001072:	4413      	add	r3, r2
 8001074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	2308      	movs	r3, #8
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	429a      	cmp	r2, r3
 800108c:	d920      	bls.n	80010d0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a4:	f383 8811 	msr	BASEPRI, r3
 80010a8:	f3bf 8f6f 	isb	sy
 80010ac:	f3bf 8f4f 	dsb	sy
 80010b0:	613b      	str	r3, [r7, #16]
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ca:	69b8      	ldr	r0, [r7, #24]
 80010cc:	f000 f96c 	bl	80013a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <pvPortMallocMicroROS+0x18c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d203      	bcs.n	80010f2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <pvPortMallocMicroROS+0x184>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <pvPortMallocMicroROS+0x18c>)
 80010f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <pvPortMallocMicroROS+0x180>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001106:	f007 fb69 	bl	80087dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	60fb      	str	r3, [r7, #12]
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800112c:	69fb      	ldr	r3, [r7, #28]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004124 	.word	0x20004124
 800113c:	20004130 	.word	0x20004130
 8001140:	20004128 	.word	0x20004128
 8001144:	2000411c 	.word	0x2000411c
 8001148:	2000412c 	.word	0x2000412c

0800114c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d04a      	beq.n	80011f4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800115e:	2308      	movs	r3, #8
 8001160:	425b      	negs	r3, r3
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10b      	bne.n	8001192 <vPortFreeMicroROS+0x46>
	__asm volatile
 800117a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	60fb      	str	r3, [r7, #12]
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	e7fd      	b.n	800118e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800119a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119e:	f383 8811 	msr	BASEPRI, r3
 80011a2:	f3bf 8f6f 	isb	sy
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	60bb      	str	r3, [r7, #8]
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	e7fd      	b.n	80011ae <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d019      	beq.n	80011f4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d115      	bne.n	80011f4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <vPortFreeMicroROS+0xb0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011d8:	f007 faf2 	bl	80087c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <vPortFreeMicroROS+0xb4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <vPortFreeMicroROS+0xb4>)
 80011e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011ea:	6938      	ldr	r0, [r7, #16]
 80011ec:	f000 f8dc 	bl	80013a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011f0:	f007 faf4 	bl	80087dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20004130 	.word	0x20004130
 8001200:	20004128 	.word	0x20004128

08001204 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001210:	2308      	movs	r3, #8
 8001212:	425b      	negs	r3, r3
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4413      	add	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <getBlockSize+0x38>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	43db      	mvns	r3, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

	return count;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20004130 	.word	0x20004130

08001240 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800124a:	f007 fab9 	bl	80087c0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff feb4 	bl	8000fbc <pvPortMallocMicroROS>
 8001254:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d017      	beq.n	800128c <pvPortReallocMicroROS+0x4c>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d014      	beq.n	800128c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffce 	bl	8001204 <getBlockSize>
 8001268:	4603      	mov	r3, r0
 800126a:	2208      	movs	r2, #8
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d201      	bcs.n	800127c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f018 f972 	bl	801956a <memcpy>

		vPortFreeMicroROS(pv);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff60 	bl	800114c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800128c:	f007 faa6 	bl	80087dc <xTaskResumeAll>

	return newmem;
 8001290:	68bb      	ldr	r3, [r7, #8]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012a4:	f007 fa8c 	bl	80087c0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff fe82 	bl	8000fbc <pvPortMallocMicroROS>
 80012b8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012be:	e004      	b.n	80012ca <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	613a      	str	r2, [r7, #16]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	617a      	str	r2, [r7, #20]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f5      	bne.n	80012c0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012d4:	f007 fa82 	bl	80087dc <xTaskResumeAll>
  	return mem;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <prvHeapInit+0xac>)
 80012f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3307      	adds	r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f023 0307 	bic.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <prvHeapInit+0xac>)
 8001314:	4413      	add	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <prvHeapInit+0xb0>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <prvHeapInit+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001330:	2208      	movs	r2, #8
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <prvHeapInit+0xb4>)
 8001344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <prvHeapInit+0xb4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <prvHeapInit+0xb4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <prvHeapInit+0xb4>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <prvHeapInit+0xb8>)
 8001372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <prvHeapInit+0xbc>)
 800137a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <prvHeapInit+0xc0>)
 800137e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	2000051c 	.word	0x2000051c
 8001394:	2000411c 	.word	0x2000411c
 8001398:	20004124 	.word	0x20004124
 800139c:	2000412c 	.word	0x2000412c
 80013a0:	20004128 	.word	0x20004128
 80013a4:	20004130 	.word	0x20004130

080013a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013b0:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <prvInsertBlockIntoFreeList+0xac>)
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e002      	b.n	80013bc <prvInsertBlockIntoFreeList+0x14>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8f7      	bhi.n	80013b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d108      	bne.n	80013ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	441a      	add	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	441a      	add	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d118      	bne.n	8001430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d00d      	beq.n	8001426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	441a      	add	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e008      	b.n	8001438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <prvInsertBlockIntoFreeList+0xb0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e003      	b.n	8001438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d002      	beq.n	8001446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000411c 	.word	0x2000411c
 8001458:	20004124 	.word	0x20004124

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_DMA_Init+0x4c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <MX_DMA_Init+0x4c>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <MX_DMA_Init+0x4c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2010      	movs	r0, #16
 8001484:	f002 f91e 	bl	80036c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001488:	2010      	movs	r0, #16
 800148a:	f002 f937 	bl	80036fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2105      	movs	r1, #5
 8001492:	2011      	movs	r0, #17
 8001494:	f002 f916 	bl	80036c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001498:	2011      	movs	r0, #17
 800149a:	f002 f92f 	bl	80036fc <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <__NVIC_SystemReset+0x24>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014be:	4904      	ldr	r1, [pc, #16]	@ (80014d0 <__NVIC_SystemReset+0x24>)
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <__NVIC_SystemReset+0x28>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c6:	f3bf 8f4f 	dsb	sy
}
 80014ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <__NVIC_SystemReset+0x20>
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0004 	.word	0x05fa0004

080014d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <MX_FREERTOS_Init+0x18>)
 80014de:	2100      	movs	r1, #0
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_FREERTOS_Init+0x1c>)
 80014e2:	f006 f825 	bl	8007530 <osThreadNew>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <MX_FREERTOS_Init+0x20>)
 80014ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	0801a410 	.word	0x0801a410
 80014f4:	08001501 	.word	0x08001501
 80014f8:	20004308 	.word	0x20004308
 80014fc:	00000000 	.word	0x00000000

08001500 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b098      	sub	sp, #96	@ 0x60
 8001504:	af02      	add	r7, sp, #8
 8001506:	6078      	str	r0, [r7, #4]
	//NVIC_SystemReset();
	 //is_connected = false;

	 rmw_uros_set_custom_transport(
 8001508:	4baf      	ldr	r3, [pc, #700]	@ (80017c8 <StartDefaultTask+0x2c8>)
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4baf      	ldr	r3, [pc, #700]	@ (80017cc <StartDefaultTask+0x2cc>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4baf      	ldr	r3, [pc, #700]	@ (80017d0 <StartDefaultTask+0x2d0>)
 8001512:	4ab0      	ldr	r2, [pc, #704]	@ (80017d4 <StartDefaultTask+0x2d4>)
 8001514:	49b0      	ldr	r1, [pc, #704]	@ (80017d8 <StartDefaultTask+0x2d8>)
 8001516:	2001      	movs	r0, #1
 8001518:	f00c fd24 	bl	800df64 <rmw_uros_set_custom_transport>
	        cubemx_transport_open,
	        cubemx_transport_close,
	        cubemx_transport_write,
	        cubemx_transport_read);

	    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f00c f949 	bl	800d7b8 <rcutils_get_zero_initialized_allocator>
	    freeRTOS_allocator.allocate = microros_allocate;
 8001526:	4bad      	ldr	r3, [pc, #692]	@ (80017dc <StartDefaultTask+0x2dc>)
 8001528:	60bb      	str	r3, [r7, #8]
	    freeRTOS_allocator.deallocate = microros_deallocate;
 800152a:	4bad      	ldr	r3, [pc, #692]	@ (80017e0 <StartDefaultTask+0x2e0>)
 800152c:	60fb      	str	r3, [r7, #12]
	    freeRTOS_allocator.reallocate = microros_reallocate;
 800152e:	4bad      	ldr	r3, [pc, #692]	@ (80017e4 <StartDefaultTask+0x2e4>)
 8001530:	613b      	str	r3, [r7, #16]
	    freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001532:	4bad      	ldr	r3, [pc, #692]	@ (80017e8 <StartDefaultTask+0x2e8>)
 8001534:	617b      	str	r3, [r7, #20]

	    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	4618      	mov	r0, r3
 800153c:	f00c f94a 	bl	800d7d4 <rcutils_set_default_allocator>
 8001540:	4603      	mov	r3, r0
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <StartDefaultTask+0x52>
	        printf("Error setting allocator\n");
 800154c:	48a7      	ldr	r0, [pc, #668]	@ (80017ec <StartDefaultTask+0x2ec>)
 800154e:	f017 fdcd 	bl	80190ec <puts>
	    }

	    HAL_Init();
 8001552:	f001 ff99 	bl	8003488 <HAL_Init>
	    SystemClock_Config();
 8001556:	f000 fe67 	bl	8002228 <SystemClock_Config>
	    Init_joint_state_msg();
 800155a:	f000 f973 	bl	8001844 <Init_joint_state_msg>
	    MX_GPIO_Init();
 800155e:	f000 fdad 	bl	80020bc <MX_GPIO_Init>
	    MX_TIM2_Init();
 8001562:	f001 fa77 	bl	8002a54 <MX_TIM2_Init>
	    MX_TIM1_Init();
 8001566:	f001 fa1d 	bl	80029a4 <MX_TIM1_Init>
	    MX_TIM3_Init();
 800156a:	f001 faed 	bl	8002b48 <MX_TIM3_Init>
	    MX_TIM5_Init();
 800156e:	f001 fb3f 	bl	8002bf0 <MX_TIM5_Init>
	    MX_TIM8_Init();
 8001572:	f001 fb91 	bl	8002c98 <MX_TIM8_Init>
	    setupPins();
 8001576:	f000 f9ef 	bl	8001958 <setupPins>


	    rmw_ret_t ret = rmw_uros_ping_agent(100, 10);
 800157a:	210a      	movs	r1, #10
 800157c:	2064      	movs	r0, #100	@ 0x64
 800157e:	f00c fd07 	bl	800df90 <rmw_uros_ping_agent>
 8001582:	6578      	str	r0, [r7, #84]	@ 0x54
	    	           if (ret == RMW_RET_OK) {
 8001584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80c2 	bne.w	8001710 <StartDefaultTask+0x210>
	    	               is_connected = true;
 800158c:	4b98      	ldr	r3, [pc, #608]	@ (80017f0 <StartDefaultTask+0x2f0>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]

	    RCCHECK(rclc_support_init(&support, 0, NULL, &freeRTOS_allocator));
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	4896      	ldr	r0, [pc, #600]	@ (80017f4 <StartDefaultTask+0x2f4>)
 800159c:	f00b ffbc 	bl	800d518 <rclc_support_init>
 80015a0:	6538      	str	r0, [r7, #80]	@ 0x50
 80015a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d007      	beq.n	80015b8 <StartDefaultTask+0xb8>
 80015a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015aa:	21d4      	movs	r1, #212	@ 0xd4
 80015ac:	4892      	ldr	r0, [pc, #584]	@ (80017f8 <StartDefaultTask+0x2f8>)
 80015ae:	f017 fd35 	bl	801901c <iprintf>
 80015b2:	2000      	movs	r0, #0
 80015b4:	f006 fff2 	bl	800859c <vTaskDelete>


	    // Tu sie wypierdala


	    RCCHECK(rclc_node_init_default(&node, "ros_stm32_diffdrive", "", &support));
 80015b8:	4b8e      	ldr	r3, [pc, #568]	@ (80017f4 <StartDefaultTask+0x2f4>)
 80015ba:	4a90      	ldr	r2, [pc, #576]	@ (80017fc <StartDefaultTask+0x2fc>)
 80015bc:	4990      	ldr	r1, [pc, #576]	@ (8001800 <StartDefaultTask+0x300>)
 80015be:	4891      	ldr	r0, [pc, #580]	@ (8001804 <StartDefaultTask+0x304>)
 80015c0:	f00c f81e 	bl	800d600 <rclc_node_init_default>
 80015c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80015c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <StartDefaultTask+0xdc>
 80015cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80015ce:	21da      	movs	r1, #218	@ 0xda
 80015d0:	4889      	ldr	r0, [pc, #548]	@ (80017f8 <StartDefaultTask+0x2f8>)
 80015d2:	f017 fd23 	bl	801901c <iprintf>
 80015d6:	2000      	movs	r0, #0
 80015d8:	f006 ffe0 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_subscription_init_default(
 80015dc:	f008 fd7c 	bl	800a0d8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b89      	ldr	r3, [pc, #548]	@ (8001808 <StartDefaultTask+0x308>)
 80015e4:	4987      	ldr	r1, [pc, #540]	@ (8001804 <StartDefaultTask+0x304>)
 80015e6:	4889      	ldr	r0, [pc, #548]	@ (800180c <StartDefaultTask+0x30c>)
 80015e8:	f00c f87a 	bl	800d6e0 <rclc_subscription_init_default>
 80015ec:	64b8      	str	r0, [r7, #72]	@ 0x48
 80015ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <StartDefaultTask+0x104>
 80015f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015f6:	21db      	movs	r1, #219	@ 0xdb
 80015f8:	487f      	ldr	r0, [pc, #508]	@ (80017f8 <StartDefaultTask+0x2f8>)
 80015fa:	f017 fd0f 	bl	801901c <iprintf>
 80015fe:	2000      	movs	r0, #0
 8001600:	f006 ffcc 	bl	800859c <vTaskDelete>
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	        "/cmd_vel"));


	    RCCHECK(rclc_publisher_init_default(
 8001604:	f00d fd76 	bl	800f0f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8001608:	4602      	mov	r2, r0
 800160a:	4b81      	ldr	r3, [pc, #516]	@ (8001810 <StartDefaultTask+0x310>)
 800160c:	497d      	ldr	r1, [pc, #500]	@ (8001804 <StartDefaultTask+0x304>)
 800160e:	4881      	ldr	r0, [pc, #516]	@ (8001814 <StartDefaultTask+0x314>)
 8001610:	f00c f832 	bl	800d678 <rclc_publisher_init_default>
 8001614:	6478      	str	r0, [r7, #68]	@ 0x44
 8001616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <StartDefaultTask+0x12c>
 800161c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800161e:	21e2      	movs	r1, #226	@ 0xe2
 8001620:	4875      	ldr	r0, [pc, #468]	@ (80017f8 <StartDefaultTask+0x2f8>)
 8001622:	f017 fcfb 	bl	801901c <iprintf>
 8001626:	2000      	movs	r0, #0
 8001628:	f006 ffb8 	bl	800859c <vTaskDelete>
	        &encoder_publisher,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
	        "/JointState"));

	    RCCHECK(rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(FRAME_TIME), timer_callback));
 800162c:	4b7a      	ldr	r3, [pc, #488]	@ (8001818 <StartDefaultTask+0x318>)
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4a7a      	ldr	r2, [pc, #488]	@ (800181c <StartDefaultTask+0x31c>)
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	496f      	ldr	r1, [pc, #444]	@ (80017f4 <StartDefaultTask+0x2f4>)
 8001638:	4879      	ldr	r0, [pc, #484]	@ (8001820 <StartDefaultTask+0x320>)
 800163a:	f00c f885 	bl	800d748 <rclc_timer_init_default>
 800163e:	6438      	str	r0, [r7, #64]	@ 0x40
 8001640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <StartDefaultTask+0x156>
 8001646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001648:	21e8      	movs	r1, #232	@ 0xe8
 800164a:	486b      	ldr	r0, [pc, #428]	@ (80017f8 <StartDefaultTask+0x2f8>)
 800164c:	f017 fce6 	bl	801901c <iprintf>
 8001650:	2000      	movs	r0, #0
 8001652:	f006 ffa3 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_timer_init_default(&encoder_timer, &support, RCL_MS_TO_NS(ENCODER_SAMPLE_TIME_MS), encoder_timer_callback));
 8001656:	4b73      	ldr	r3, [pc, #460]	@ (8001824 <StartDefaultTask+0x324>)
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	a359      	add	r3, pc, #356	@ (adr r3, 80017c0 <StartDefaultTask+0x2c0>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	4964      	ldr	r1, [pc, #400]	@ (80017f4 <StartDefaultTask+0x2f4>)
 8001662:	4871      	ldr	r0, [pc, #452]	@ (8001828 <StartDefaultTask+0x328>)
 8001664:	f00c f870 	bl	800d748 <rclc_timer_init_default>
 8001668:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800166a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <StartDefaultTask+0x180>
 8001670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001672:	21e9      	movs	r1, #233	@ 0xe9
 8001674:	4860      	ldr	r0, [pc, #384]	@ (80017f8 <StartDefaultTask+0x2f8>)
 8001676:	f017 fcd1 	bl	801901c <iprintf>
 800167a:	2000      	movs	r0, #0
 800167c:	f006 ff8e 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_executor_init(&executor, &support.context, 3, &freeRTOS_allocator));
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	2203      	movs	r2, #3
 8001686:	495b      	ldr	r1, [pc, #364]	@ (80017f4 <StartDefaultTask+0x2f4>)
 8001688:	4868      	ldr	r0, [pc, #416]	@ (800182c <StartDefaultTask+0x32c>)
 800168a:	f00b fc51 	bl	800cf30 <rclc_executor_init>
 800168e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <StartDefaultTask+0x1a6>
 8001696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001698:	21ea      	movs	r1, #234	@ 0xea
 800169a:	4857      	ldr	r0, [pc, #348]	@ (80017f8 <StartDefaultTask+0x2f8>)
 800169c:	f017 fcbe 	bl	801901c <iprintf>
 80016a0:	2000      	movs	r0, #0
 80016a2:	f006 ff7b 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_executor_add_subscription(&executor, &subscriber, &msg, &cmd_vel_callback, ON_NEW_DATA));
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <StartDefaultTask+0x330>)
 80016ac:	4a61      	ldr	r2, [pc, #388]	@ (8001834 <StartDefaultTask+0x334>)
 80016ae:	4957      	ldr	r1, [pc, #348]	@ (800180c <StartDefaultTask+0x30c>)
 80016b0:	485e      	ldr	r0, [pc, #376]	@ (800182c <StartDefaultTask+0x32c>)
 80016b2:	f00b fcad 	bl	800d010 <rclc_executor_add_subscription>
 80016b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80016b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <StartDefaultTask+0x1ce>
 80016be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016c0:	21eb      	movs	r1, #235	@ 0xeb
 80016c2:	484d      	ldr	r0, [pc, #308]	@ (80017f8 <StartDefaultTask+0x2f8>)
 80016c4:	f017 fcaa 	bl	801901c <iprintf>
 80016c8:	2000      	movs	r0, #0
 80016ca:	f006 ff67 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_executor_add_timer(&executor, &timer));
 80016ce:	4954      	ldr	r1, [pc, #336]	@ (8001820 <StartDefaultTask+0x320>)
 80016d0:	4856      	ldr	r0, [pc, #344]	@ (800182c <StartDefaultTask+0x32c>)
 80016d2:	f00b fcd1 	bl	800d078 <rclc_executor_add_timer>
 80016d6:	6338      	str	r0, [r7, #48]	@ 0x30
 80016d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <StartDefaultTask+0x1ee>
 80016de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016e0:	21ec      	movs	r1, #236	@ 0xec
 80016e2:	4845      	ldr	r0, [pc, #276]	@ (80017f8 <StartDefaultTask+0x2f8>)
 80016e4:	f017 fc9a 	bl	801901c <iprintf>
 80016e8:	2000      	movs	r0, #0
 80016ea:	f006 ff57 	bl	800859c <vTaskDelete>
	    RCCHECK(rclc_executor_add_timer(&executor, &encoder_timer));
 80016ee:	494e      	ldr	r1, [pc, #312]	@ (8001828 <StartDefaultTask+0x328>)
 80016f0:	484e      	ldr	r0, [pc, #312]	@ (800182c <StartDefaultTask+0x32c>)
 80016f2:	f00b fcc1 	bl	800d078 <rclc_executor_add_timer>
 80016f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d017      	beq.n	800172e <StartDefaultTask+0x22e>
 80016fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001700:	21ed      	movs	r1, #237	@ 0xed
 8001702:	483d      	ldr	r0, [pc, #244]	@ (80017f8 <StartDefaultTask+0x2f8>)
 8001704:	f017 fc8a 	bl	801901c <iprintf>
 8001708:	2000      	movs	r0, #0
 800170a:	f006 ff47 	bl	800859c <vTaskDelete>
 800170e:	e00e      	b.n	800172e <StartDefaultTask+0x22e>
	  }else {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8001710:	2201      	movs	r2, #1
 8001712:	2120      	movs	r1, #32
 8001714:	4848      	ldr	r0, [pc, #288]	@ (8001838 <StartDefaultTask+0x338>)
 8001716:	f002 fd95 	bl	8004244 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800171a:	20c8      	movs	r0, #200	@ 0xc8
 800171c:	f001 fef6 	bl	800350c <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2120      	movs	r1, #32
 8001724:	4844      	ldr	r0, [pc, #272]	@ (8001838 <StartDefaultTask+0x338>)
 8001726:	f002 fd8d 	bl	8004244 <HAL_GPIO_WritePin>
          NVIC_SystemReset();
 800172a:	f7ff febf 	bl	80014ac <__NVIC_SystemReset>

	    cleanup();
*/
	    while (1) {

	    	 rmw_ret_t ret = rmw_uros_ping_agent(100, 10);
 800172e:	210a      	movs	r1, #10
 8001730:	2064      	movs	r0, #100	@ 0x64
 8001732:	f00c fc2d 	bl	800df90 <rmw_uros_ping_agent>
 8001736:	62b8      	str	r0, [r7, #40]	@ 0x28
	           if (ret == RMW_RET_OK) {
 8001738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <StartDefaultTask+0x250>
	               is_connected = true;
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <StartDefaultTask+0x2f0>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
	               last_connected_time = HAL_GetTick();
 8001744:	f001 fed6 	bl	80034f4 <HAL_GetTick>
 8001748:	4603      	mov	r3, r0
 800174a:	4a3c      	ldr	r2, [pc, #240]	@ (800183c <StartDefaultTask+0x33c>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e002      	b.n	8001756 <StartDefaultTask+0x256>
	           } else {
	               is_connected = false;
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <StartDefaultTask+0x2f0>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
	           }

	           if (is_connected) {
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <StartDefaultTask+0x2f0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <StartDefaultTask+0x28a>
	               // Kontynuuj normalne operacje
	               RCSOFTCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(FRAME_TIME)));
 800175e:	4a2f      	ldr	r2, [pc, #188]	@ (800181c <StartDefaultTask+0x31c>)
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	4831      	ldr	r0, [pc, #196]	@ (800182c <StartDefaultTask+0x32c>)
 8001766:	f00b fe9d 	bl	800d4a4 <rclc_executor_spin_some>
 800176a:	61f8      	str	r0, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <StartDefaultTask+0x27e>
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	f240 110b 	movw	r1, #267	@ 0x10b
 8001778:	4831      	ldr	r0, [pc, #196]	@ (8001840 <StartDefaultTask+0x340>)
 800177a:	f017 fc4f 	bl	801901c <iprintf>
	               update_encoders();
 800177e:	f000 f949 	bl	8001a14 <update_encoders>
	               HAL_Delay(FRAME_TIME);
 8001782:	2001      	movs	r0, #1
 8001784:	f001 fec2 	bl	800350c <HAL_Delay>
 8001788:	e7d1      	b.n	800172e <StartDefaultTask+0x22e>
	           } else {
	               uint32_t current_time = HAL_GetTick();
 800178a:	f001 feb3 	bl	80034f4 <HAL_GetTick>
 800178e:	6278      	str	r0, [r7, #36]	@ 0x24
	               uint32_t time_since_last = (last_connected_time == 0) ? current_time : (current_time - last_connected_time);
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <StartDefaultTask+0x33c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <StartDefaultTask+0x2a2>
 8001798:	4b28      	ldr	r3, [pc, #160]	@ (800183c <StartDefaultTask+0x33c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	e000      	b.n	80017a4 <StartDefaultTask+0x2a4>
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	623b      	str	r3, [r7, #32]
	               if (time_since_last >= 100) {
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	2b63      	cmp	r3, #99	@ 0x63
 80017aa:	d9c0      	bls.n	800172e <StartDefaultTask+0x22e>
	            	   cleanup();
 80017ac:	f000 fc62 	bl	8002074 <cleanup>
	            	   HAL_Delay(200);
 80017b0:	20c8      	movs	r0, #200	@ 0xc8
 80017b2:	f001 feab 	bl	800350c <HAL_Delay>
	                   NVIC_SystemReset(); // Resetuj MCU po 3 sekundach bez połączenia
 80017b6:	f7ff fe79 	bl	80014ac <__NVIC_SystemReset>
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	1dcd6500 	.word	0x1dcd6500
 80017c4:	00000000 	.word	0x00000000
 80017c8:	0800338d 	.word	0x0800338d
 80017cc:	08003325 	.word	0x08003325
 80017d0:	08003305 	.word	0x08003305
 80017d4:	080032d9 	.word	0x080032d9
 80017d8:	2000452c 	.word	0x2000452c
 80017dc:	0800233d 	.word	0x0800233d
 80017e0:	08002381 	.word	0x08002381
 80017e4:	080023b9 	.word	0x080023b9
 80017e8:	08002425 	.word	0x08002425
 80017ec:	0801a2bc 	.word	0x0801a2bc
 80017f0:	20004284 	.word	0x20004284
 80017f4:	20004174 	.word	0x20004174
 80017f8:	0801a2d4 	.word	0x0801a2d4
 80017fc:	0801a300 	.word	0x0801a300
 8001800:	0801a304 	.word	0x0801a304
 8001804:	2000416c 	.word	0x2000416c
 8001808:	0801a318 	.word	0x0801a318
 800180c:	20004168 	.word	0x20004168
 8001810:	0801a324 	.word	0x0801a324
 8001814:	20004238 	.word	0x20004238
 8001818:	08001dad 	.word	0x08001dad
 800181c:	000f4240 	.word	0x000f4240
 8001820:	200041a8 	.word	0x200041a8
 8001824:	08001af1 	.word	0x08001af1
 8001828:	200041ac 	.word	0x200041ac
 800182c:	200041b0 	.word	0x200041b0
 8001830:	08001d75 	.word	0x08001d75
 8001834:	20004138 	.word	0x20004138
 8001838:	40020000 	.word	0x40020000
 800183c:	20004280 	.word	0x20004280
 8001840:	0801a330 	.word	0x0801a330

08001844 <Init_joint_state_msg>:
}


/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Init_joint_state_msg() {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
    // Nagłówek
    //joint_state_msg.header.frame_id = NULL;  // Nie wymagane dla jointów
	joint_state_msg.header.frame_id.data = (char*)"base_link";
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <Init_joint_state_msg+0xfc>)
 800184c:	4a3d      	ldr	r2, [pc, #244]	@ (8001944 <Init_joint_state_msg+0x100>)
 800184e:	609a      	str	r2, [r3, #8]
	joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fce5 	bl	8000224 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	4a38      	ldr	r2, [pc, #224]	@ (8001940 <Init_joint_state_msg+0xfc>)
 800185e:	60d3      	str	r3, [r2, #12]
	joint_state_msg.header.frame_id.capacity = joint_state_msg.header.frame_id.size + 1;
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	4a36      	ldr	r2, [pc, #216]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001868:	6113      	str	r3, [r2, #16]

	    // Nazwy jointów
	    const char* names[] = {
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <Init_joint_state_msg+0x104>)
 800186c:	1d3c      	adds	r4, r7, #4
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        "left_rear_wheel_joint",
	        "right_front_wheel_joint",
	        "right_rear_wheel_joint"
	    };

	    for(int i = 0; i < 4; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e036      	b.n	80018e8 <Init_joint_state_msg+0xa4>
	        joint_names[i].data = (char*)names[i];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3318      	adds	r3, #24
 8001880:	443b      	add	r3, r7
 8001882:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8001886:	4831      	ldr	r0, [pc, #196]	@ (800194c <Init_joint_state_msg+0x108>)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4403      	add	r3, r0
 8001894:	6019      	str	r1, [r3, #0]
	        joint_names[i].size = strlen(names[i]);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	3318      	adds	r3, #24
 800189c:	443b      	add	r3, r7
 800189e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fcbe 	bl	8000224 <strlen>
 80018a8:	4601      	mov	r1, r0
 80018aa:	4828      	ldr	r0, [pc, #160]	@ (800194c <Init_joint_state_msg+0x108>)
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4403      	add	r3, r0
 80018b8:	3304      	adds	r3, #4
 80018ba:	6019      	str	r1, [r3, #0]
	        joint_names[i].capacity = joint_names[i].size + 1;
 80018bc:	4923      	ldr	r1, [pc, #140]	@ (800194c <Init_joint_state_msg+0x108>)
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	481e      	ldr	r0, [pc, #120]	@ (800194c <Init_joint_state_msg+0x108>)
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4403      	add	r3, r0
 80018de:	3308      	adds	r3, #8
 80018e0:	6019      	str	r1, [r3, #0]
	    for(int i = 0; i < 4; i++) {
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	ddc5      	ble.n	800187a <Init_joint_state_msg+0x36>
	    }
    // Nazwy jointów
    joint_state_msg.name.data = joint_names;
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <Init_joint_state_msg+0xfc>)
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <Init_joint_state_msg+0x108>)
 80018f2:	615a      	str	r2, [r3, #20]
    joint_state_msg.name.size = 4;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <Init_joint_state_msg+0xfc>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	619a      	str	r2, [r3, #24]
    joint_state_msg.name.capacity = 4;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <Init_joint_state_msg+0xfc>)
 80018fc:	2204      	movs	r2, #4
 80018fe:	61da      	str	r2, [r3, #28]

    // Pozycje
    joint_state_msg.position.data = joint_positions;
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <Init_joint_state_msg+0x10c>)
 8001904:	621a      	str	r2, [r3, #32]
    joint_state_msg.position.size = 4;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001908:	2204      	movs	r2, #4
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24
    joint_state_msg.position.capacity = 4;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <Init_joint_state_msg+0xfc>)
 800190e:	2204      	movs	r2, #4
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28

    // Prędkości
    joint_state_msg.velocity.data = joint_velocities;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001914:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <Init_joint_state_msg+0x110>)
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
    joint_state_msg.velocity.size = 4;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <Init_joint_state_msg+0xfc>)
 800191a:	2204      	movs	r2, #4
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
    joint_state_msg.velocity.capacity = 4;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001920:	2204      	movs	r2, #4
 8001922:	635a      	str	r2, [r3, #52]	@ 0x34

    // Effort (nieużywany - inicjalizujemy jako pusty)
    joint_state_msg.effort.data = NULL;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	@ 0x38
    joint_state_msg.effort.size = 0;
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <Init_joint_state_msg+0xfc>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	@ 0x3c
    joint_state_msg.effort.capacity = 0;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <Init_joint_state_msg+0xfc>)
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	2000423c 	.word	0x2000423c
 8001944:	0801a35c 	.word	0x0801a35c
 8001948:	0801a3c8 	.word	0x0801a3c8
 800194c:	200042d8 	.word	0x200042d8
 8001950:	20004298 	.word	0x20004298
 8001954:	200042b8 	.word	0x200042b8

08001958 <setupPins>:
static void setupPins(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	enc1_total = 0;
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <setupPins+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
	enc2_total = 0;
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <setupPins+0x9c>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
	enc3_total = 0;
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <setupPins+0xa0>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	enc4_total = 0;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <setupPins+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK ||
 8001974:	2100      	movs	r1, #0
 8001976:	4822      	ldr	r0, [pc, #136]	@ (8001a00 <setupPins+0xa8>)
 8001978:	f003 fc02 	bl	8005180 <HAL_TIM_PWM_Start>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <setupPins+0x54>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK ||
 8001982:	2104      	movs	r1, #4
 8001984:	481e      	ldr	r0, [pc, #120]	@ (8001a00 <setupPins+0xa8>)
 8001986:	f003 fbfb 	bl	8005180 <HAL_TIM_PWM_Start>
 800198a:	4603      	mov	r3, r0
    if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <setupPins+0x54>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK ||
 8001990:	2108      	movs	r1, #8
 8001992:	481b      	ldr	r0, [pc, #108]	@ (8001a00 <setupPins+0xa8>)
 8001994:	f003 fbf4 	bl	8005180 <HAL_TIM_PWM_Start>
 8001998:	4603      	mov	r3, r0
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK ||
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <setupPins+0x54>
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK) {
 800199e:	210c      	movs	r1, #12
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <setupPins+0xa8>)
 80019a2:	f003 fbed 	bl	8005180 <HAL_TIM_PWM_Start>
 80019a6:	4603      	mov	r3, r0
        HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK ||
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <setupPins+0x58>
        Error_Handler();
 80019ac:	f000 fcc0 	bl	8002330 <Error_Handler>
    }
    if (HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK ||
 80019b0:	213c      	movs	r1, #60	@ 0x3c
 80019b2:	4814      	ldr	r0, [pc, #80]	@ (8001a04 <setupPins+0xac>)
 80019b4:	f003 fd52 	bl	800545c <HAL_TIM_Encoder_Start>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d114      	bne.n	80019e8 <setupPins+0x90>
        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK ||
 80019be:	213c      	movs	r1, #60	@ 0x3c
 80019c0:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <setupPins+0xb0>)
 80019c2:	f003 fd4b 	bl	800545c <HAL_TIM_Encoder_Start>
 80019c6:	4603      	mov	r3, r0
    if (HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL) != HAL_OK ||
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10d      	bne.n	80019e8 <setupPins+0x90>
        HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL) != HAL_OK ||
 80019cc:	213c      	movs	r1, #60	@ 0x3c
 80019ce:	480f      	ldr	r0, [pc, #60]	@ (8001a0c <setupPins+0xb4>)
 80019d0:	f003 fd44 	bl	800545c <HAL_TIM_Encoder_Start>
 80019d4:	4603      	mov	r3, r0
        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK ||
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <setupPins+0x90>
        HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL) != HAL_OK) {
 80019da:	213c      	movs	r1, #60	@ 0x3c
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <setupPins+0xb8>)
 80019de:	f003 fd3d 	bl	800545c <HAL_TIM_Encoder_Start>
 80019e2:	4603      	mov	r3, r0
        HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL) != HAL_OK ||
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <setupPins+0x94>
        Error_Handler();
 80019e8:	f000 fca2 	bl	8002330 <Error_Handler>
    }
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20004288 	.word	0x20004288
 80019f4:	2000428c 	.word	0x2000428c
 80019f8:	20004290 	.word	0x20004290
 80019fc:	20004294 	.word	0x20004294
 8001a00:	200043c4 	.word	0x200043c4
 8001a04:	2000437c 	.word	0x2000437c
 8001a08:	2000440c 	.word	0x2000440c
 8001a0c:	20004454 	.word	0x20004454
 8001a10:	2000449c 	.word	0x2000449c

08001a14 <update_encoders>:

static void update_encoders(void) {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
    static uint16_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;
    uint16_t current_enc1 = htim1.Instance->CNT;
 8001a1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <update_encoders+0xac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	80fb      	strh	r3, [r7, #6]
    uint16_t current_enc2 = htim3.Instance->CNT;
 8001a22:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <update_encoders+0xb0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	80bb      	strh	r3, [r7, #4]
    uint16_t current_enc3 = htim8.Instance->CNT;
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <update_encoders+0xb4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	807b      	strh	r3, [r7, #2]
    uint16_t current_enc4 = htim5.Instance->CNT;
 8001a32:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <update_encoders+0xb8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	803b      	strh	r3, [r7, #0]

    enc1_total += (int16_t)(current_enc1 - prev_enc1);
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <update_encoders+0xbc>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <update_encoders+0xc0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <update_encoders+0xc0>)
 8001a50:	6013      	str	r3, [r2, #0]
    enc2_total += (int16_t)(current_enc2 - prev_enc2);
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <update_encoders+0xc4>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	88ba      	ldrh	r2, [r7, #4]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <update_encoders+0xc8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <update_encoders+0xc8>)
 8001a68:	6013      	str	r3, [r2, #0]
    enc3_total += (int16_t)(current_enc3 - prev_enc3);
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <update_encoders+0xcc>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <update_encoders+0xd0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <update_encoders+0xd0>)
 8001a80:	6013      	str	r3, [r2, #0]
    enc4_total += (int16_t)(current_enc4 - prev_enc4);
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <update_encoders+0xd4>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	883a      	ldrh	r2, [r7, #0]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <update_encoders+0xd8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a15      	ldr	r2, [pc, #84]	@ (8001aec <update_encoders+0xd8>)
 8001a98:	6013      	str	r3, [r2, #0]

    prev_enc1 = current_enc1;
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <update_encoders+0xbc>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	8013      	strh	r3, [r2, #0]
    prev_enc2 = current_enc2;
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <update_encoders+0xc4>)
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	8013      	strh	r3, [r2, #0]
    prev_enc3 = current_enc3;
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <update_encoders+0xcc>)
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	8013      	strh	r3, [r2, #0]
    prev_enc4 = current_enc4;
 8001aac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <update_encoders+0xd4>)
 8001aae:	883b      	ldrh	r3, [r7, #0]
 8001ab0:	8013      	strh	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000437c 	.word	0x2000437c
 8001ac4:	2000440c 	.word	0x2000440c
 8001ac8:	2000449c 	.word	0x2000449c
 8001acc:	20004454 	.word	0x20004454
 8001ad0:	2000430c 	.word	0x2000430c
 8001ad4:	20004288 	.word	0x20004288
 8001ad8:	2000430e 	.word	0x2000430e
 8001adc:	2000428c 	.word	0x2000428c
 8001ae0:	20004310 	.word	0x20004310
 8001ae4:	20004290 	.word	0x20004290
 8001ae8:	20004312 	.word	0x20004312
 8001aec:	20004294 	.word	0x20004294

08001af0 <encoder_timer_callback>:

static void encoder_timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b092      	sub	sp, #72	@ 0x48
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	e9c7 2300 	strd	r2, r3, [r7]
    (void)last_call_time;
    if (!timer) return;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 810a 	beq.w	8001d18 <encoder_timer_callback+0x228>

    // Aktualizacja timestampu
    int64_t time_ns = rmw_uros_epoch_nanos();
 8001b04:	f00c ff48 	bl	800e998 <rmw_uros_epoch_nanos>
 8001b08:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    joint_state_msg.header.stamp.sec = time_ns / 1000000000;
 8001b0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b10:	a383      	add	r3, pc, #524	@ (adr r3, 8001d20 <encoder_timer_callback+0x230>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7ff f889 	bl	8000c2c <__aeabi_ldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4b84      	ldr	r3, [pc, #528]	@ (8001d30 <encoder_timer_callback+0x240>)
 8001b20:	601a      	str	r2, [r3, #0]
    joint_state_msg.header.stamp.nanosec = time_ns % 1000000000;
 8001b22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b26:	a37e      	add	r3, pc, #504	@ (adr r3, 8001d20 <encoder_timer_callback+0x230>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7ff f87e 	bl	8000c2c <__aeabi_ldivmod>
 8001b30:	4b7f      	ldr	r3, [pc, #508]	@ (8001d30 <encoder_timer_callback+0x240>)
 8001b32:	605a      	str	r2, [r3, #4]

    // Obliczenia pozycji (double precision)
    const double rad_per_count = (2 * M_PI) / ENCODER_COUNTS_PER_REV;
 8001b34:	a37c      	add	r3, pc, #496	@ (adr r3, 8001d28 <encoder_timer_callback+0x238>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    joint_positions[0] = enc1_total * rad_per_count;
 8001b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d34 <encoder_timer_callback+0x244>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd1e 	bl	8000584 <__aeabi_i2d>
 8001b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b4c:	f7fe fd84 	bl	8000658 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4978      	ldr	r1, [pc, #480]	@ (8001d38 <encoder_timer_callback+0x248>)
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
    joint_positions[1] = enc2_total * rad_per_count;
 8001b5a:	4b78      	ldr	r3, [pc, #480]	@ (8001d3c <encoder_timer_callback+0x24c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd10 	bl	8000584 <__aeabi_i2d>
 8001b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b68:	f7fe fd76 	bl	8000658 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4971      	ldr	r1, [pc, #452]	@ (8001d38 <encoder_timer_callback+0x248>)
 8001b72:	e9c1 2302 	strd	r2, r3, [r1, #8]
    joint_positions[2] = enc3_total * rad_per_count;
 8001b76:	4b72      	ldr	r3, [pc, #456]	@ (8001d40 <encoder_timer_callback+0x250>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fd02 	bl	8000584 <__aeabi_i2d>
 8001b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b84:	f7fe fd68 	bl	8000658 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	496a      	ldr	r1, [pc, #424]	@ (8001d38 <encoder_timer_callback+0x248>)
 8001b8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    joint_positions[3] = enc4_total * rad_per_count;
 8001b92:	4b6c      	ldr	r3, [pc, #432]	@ (8001d44 <encoder_timer_callback+0x254>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcf4 	bl	8000584 <__aeabi_i2d>
 8001b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ba0:	f7fe fd5a 	bl	8000658 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4963      	ldr	r1, [pc, #396]	@ (8001d38 <encoder_timer_callback+0x248>)
 8001baa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Obliczenia prędkości (double precision)
    static int32_t prev_enc0  = 0, prev_enc1  = 0, prev_enc2  = 0, prev_enc3  = 0;
    int32_t delta0 = enc1_total - prev_enc0;
 8001bae:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <encoder_timer_callback+0x244>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b65      	ldr	r3, [pc, #404]	@ (8001d48 <encoder_timer_callback+0x258>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t delta1 = enc2_total - prev_enc1;
 8001bba:	4b60      	ldr	r3, [pc, #384]	@ (8001d3c <encoder_timer_callback+0x24c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <encoder_timer_callback+0x25c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t delta2 = enc3_total - prev_enc2;
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d40 <encoder_timer_callback+0x250>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b61      	ldr	r3, [pc, #388]	@ (8001d50 <encoder_timer_callback+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t delta3 = enc4_total - prev_enc3;
 8001bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d44 <encoder_timer_callback+0x254>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <encoder_timer_callback+0x264>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28


    const double time_interval = ENCODER_SAMPLE_TIME_MS / 1000.0;
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d58 <encoder_timer_callback+0x268>)
 8001be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double rpm_factor = 60.0f / (ENCODER_COUNTS_PER_REV * time_interval);
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b5b      	ldr	r3, [pc, #364]	@ (8001d5c <encoder_timer_callback+0x26c>)
 8001bee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bf2:	f7fe fd31 	bl	8000658 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	4958      	ldr	r1, [pc, #352]	@ (8001d60 <encoder_timer_callback+0x270>)
 8001c00:	f7fe fe54 	bl	80008ac <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    const float rpm_to_rad = 0.10472;
 8001c0c:	4b55      	ldr	r3, [pc, #340]	@ (8001d64 <encoder_timer_callback+0x274>)
 8001c0e:	617b      	str	r3, [r7, #20]
    joint_velocities[0] = delta0 * rpm_factor * rpm_to_rad;
 8001c10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c12:	f7fe fcb7 	bl	8000584 <__aeabi_i2d>
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	f7fe fd1d 	bl	8000658 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4614      	mov	r4, r2
 8001c24:	461d      	mov	r5, r3
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7fe fcbe 	bl	80005a8 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fd10 	bl	8000658 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	494a      	ldr	r1, [pc, #296]	@ (8001d68 <encoder_timer_callback+0x278>)
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
    joint_velocities[1] = delta1 * rpm_factor * rpm_to_rad;
 8001c42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c44:	f7fe fc9e 	bl	8000584 <__aeabi_i2d>
 8001c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4c:	f7fe fd04 	bl	8000658 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	461d      	mov	r5, r3
 8001c58:	6978      	ldr	r0, [r7, #20]
 8001c5a:	f7fe fca5 	bl	80005a8 <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7fe fcf7 	bl	8000658 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	493e      	ldr	r1, [pc, #248]	@ (8001d68 <encoder_timer_callback+0x278>)
 8001c70:	e9c1 2302 	strd	r2, r3, [r1, #8]
    joint_velocities[2] = delta2 * rpm_factor * rpm_to_rad;
 8001c74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c76:	f7fe fc85 	bl	8000584 <__aeabi_i2d>
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fceb 	bl	8000658 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7fe fc8c 	bl	80005a8 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fcde 	bl	8000658 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4931      	ldr	r1, [pc, #196]	@ (8001d68 <encoder_timer_callback+0x278>)
 8001ca2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    joint_velocities[3] = delta3 * rpm_factor * rpm_to_rad;
 8001ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ca8:	f7fe fc6c 	bl	8000584 <__aeabi_i2d>
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	f7fe fcd2 	bl	8000658 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7fe fc73 	bl	80005a8 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fcc5 	bl	8000658 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4925      	ldr	r1, [pc, #148]	@ (8001d68 <encoder_timer_callback+0x278>)
 8001cd4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    prev_enc0 = enc1_total;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <encoder_timer_callback+0x244>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d48 <encoder_timer_callback+0x258>)
 8001cde:	6013      	str	r3, [r2, #0]
    prev_enc1 = enc2_total;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <encoder_timer_callback+0x24c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <encoder_timer_callback+0x25c>)
 8001ce6:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc3_total;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <encoder_timer_callback+0x250>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <encoder_timer_callback+0x260>)
 8001cee:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc4_total;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <encoder_timer_callback+0x254>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <encoder_timer_callback+0x264>)
 8001cf6:	6013      	str	r3, [r2, #0]


    RCSOFTCHECK(rcl_publish(&encoder_publisher, &joint_state_msg, NULL));
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	490d      	ldr	r1, [pc, #52]	@ (8001d30 <encoder_timer_callback+0x240>)
 8001cfc:	481b      	ldr	r0, [pc, #108]	@ (8001d6c <encoder_timer_callback+0x27c>)
 8001cfe:	f00a f973 	bl	800bfe8 <rcl_publish>
 8001d02:	6138      	str	r0, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <encoder_timer_callback+0x22a>
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001d10:	4817      	ldr	r0, [pc, #92]	@ (8001d70 <encoder_timer_callback+0x280>)
 8001d12:	f017 f983 	bl	801901c <iprintf>
 8001d16:	e000      	b.n	8001d1a <encoder_timer_callback+0x22a>
    if (!timer) return;
 8001d18:	bf00      	nop
}
 8001d1a:	3748      	adds	r7, #72	@ 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d20:	3b9aca00 	.word	0x3b9aca00
 8001d24:	00000000 	.word	0x00000000
 8001d28:	f37bebd5 	.word	0xf37bebd5
 8001d2c:	3faacee9 	.word	0x3faacee9
 8001d30:	2000423c 	.word	0x2000423c
 8001d34:	20004288 	.word	0x20004288
 8001d38:	20004298 	.word	0x20004298
 8001d3c:	2000428c 	.word	0x2000428c
 8001d40:	20004290 	.word	0x20004290
 8001d44:	20004294 	.word	0x20004294
 8001d48:	20004314 	.word	0x20004314
 8001d4c:	20004318 	.word	0x20004318
 8001d50:	2000431c 	.word	0x2000431c
 8001d54:	20004320 	.word	0x20004320
 8001d58:	3fe00000 	.word	0x3fe00000
 8001d5c:	405e0000 	.word	0x405e0000
 8001d60:	404e0000 	.word	0x404e0000
 8001d64:	3dd67770 	.word	0x3dd67770
 8001d68:	200042b8 	.word	0x200042b8
 8001d6c:	20004238 	.word	0x20004238
 8001d70:	0801a330 	.word	0x0801a330

08001d74 <cmd_vel_callback>:

static void cmd_vel_callback(const void *msgin) {
 8001d74:	b4b0      	push	{r4, r5, r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist *twist_msg = (const geometry_msgs__msg__Twist *)msgin;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
    if (twist_msg) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <cmd_vel_callback+0x2a>
        msg = *twist_msg;
 8001d86:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <cmd_vel_callback+0x34>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bcb0      	pop	{r4, r5, r7}
 8001da6:	4770      	bx	lr
 8001da8:	20004138 	.word	0x20004138

08001dac <timer_callback>:

static void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b08a      	sub	sp, #40	@ 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	e9c7 2300 	strd	r2, r3, [r7]
    (void)last_call_time;
    if (!timer) return;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8116 	beq.w	8001fec <timer_callback+0x240>

    float linear = constrain(msg.linear.x, -1, 1);
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <timer_callback+0x248>)
 8001dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b8b      	ldr	r3, [pc, #556]	@ (8001ff8 <timer_callback+0x24c>)
 8001dcc:	f7fe feb6 	bl	8000b3c <__aeabi_dcmplt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <timer_callback+0x2e>
 8001dd6:	4b89      	ldr	r3, [pc, #548]	@ (8001ffc <timer_callback+0x250>)
 8001dd8:	e015      	b.n	8001e06 <timer_callback+0x5a>
 8001dda:	4b86      	ldr	r3, [pc, #536]	@ (8001ff4 <timer_callback+0x248>)
 8001ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b86      	ldr	r3, [pc, #536]	@ (8002000 <timer_callback+0x254>)
 8001de6:	f7fe fec7 	bl	8000b78 <__aeabi_dcmpgt>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <timer_callback+0x4a>
 8001df0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001df4:	e007      	b.n	8001e06 <timer_callback+0x5a>
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <timer_callback+0x248>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fec4 	bl	8000b8c <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	61fb      	str	r3, [r7, #28]
    float angular = constrain(msg.angular.z, -1, 1);
 8001e08:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff4 <timer_callback+0x248>)
 8001e0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <timer_callback+0x24c>)
 8001e14:	f7fe fe92 	bl	8000b3c <__aeabi_dcmplt>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <timer_callback+0x76>
 8001e1e:	4b77      	ldr	r3, [pc, #476]	@ (8001ffc <timer_callback+0x250>)
 8001e20:	e015      	b.n	8001e4e <timer_callback+0xa2>
 8001e22:	4b74      	ldr	r3, [pc, #464]	@ (8001ff4 <timer_callback+0x248>)
 8001e24:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b74      	ldr	r3, [pc, #464]	@ (8002000 <timer_callback+0x254>)
 8001e2e:	f7fe fea3 	bl	8000b78 <__aeabi_dcmpgt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <timer_callback+0x92>
 8001e38:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e3c:	e007      	b.n	8001e4e <timer_callback+0xa2>
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff4 <timer_callback+0x248>)
 8001e40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fea0 	bl	8000b8c <__aeabi_d2f>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]
    float left = linear - angular;
 8001e50:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float right = linear + angular;
 8001e60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a08 	vstr	s15, [r7, #32]

    float max_value = fmax(fabs(left), fabs(right));
 8001e70:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e74:	eef0 7ae7 	vabs.f32	s15, s15
 8001e78:	ee17 0a90 	vmov	r0, s15
 8001e7c:	f7fe fb94 	bl	80005a8 <__aeabi_f2d>
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e88:	eef0 7ae7 	vabs.f32	s15, s15
 8001e8c:	ee17 0a90 	vmov	r0, s15
 8001e90:	f7fe fb8a 	bl	80005a8 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	ec43 2b11 	vmov	d1, r2, r3
 8001e9c:	ec45 4b10 	vmov	d0, r4, r5
 8001ea0:	f018 f9a4 	bl	801a1ec <fmax>
 8001ea4:	ec53 2b10 	vmov	r2, r3, d0
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fe6e 	bl	8000b8c <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]
    if (max_value > 1.0f) {
 8001eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	dd0f      	ble.n	8001ee6 <timer_callback+0x13a>
        left /= max_value;
 8001ec6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        right /= max_value;
 8001ed6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee2:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    uint16_t pwmValueLeft = (uint16_t)fmap(fabs(left), 0, 1, PWM_MOTOR_MIN, PWM_MOTOR_MAX);
 8001ee6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001eea:	eef0 7ae7 	vabs.f32	s15, s15
 8001eee:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 8002004 <timer_callback+0x258>
 8001ef2:	eddf 1a45 	vldr	s3, [pc, #276]	@ 8002008 <timer_callback+0x25c>
 8001ef6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001efa:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002008 <timer_callback+0x25c>
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	f000 f889 	bl	8002018 <fmap>
 8001f06:	eef0 7a40 	vmov.f32	s15, s0
 8001f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0e:	ee17 3a90 	vmov	r3, s15
 8001f12:	827b      	strh	r3, [r7, #18]
    uint16_t pwmValueRight = (uint16_t)fmap(fabs(right), 0, 1, PWM_MOTOR_MIN, PWM_MOTOR_MAX);
 8001f14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f18:	eef0 7ae7 	vabs.f32	s15, s15
 8001f1c:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 8002004 <timer_callback+0x258>
 8001f20:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8002008 <timer_callback+0x25c>
 8001f24:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001f28:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002008 <timer_callback+0x25c>
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	f000 f872 	bl	8002018 <fmap>
 8001f34:	eef0 7a40 	vmov.f32	s15, s0
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	823b      	strh	r3, [r7, #16]

    HAL_GPIO_WritePin(Direction_Left_Front_GPIO_Port, Direction_Left_Front_Pin, left >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001f42:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	bfac      	ite	ge
 8001f50:	2301      	movge	r3, #1
 8001f52:	2300      	movlt	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2102      	movs	r1, #2
 8001f62:	482a      	ldr	r0, [pc, #168]	@ (800200c <timer_callback+0x260>)
 8001f64:	f002 f96e 	bl	8004244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Direction_Left_Rear_GPIO_Port, Direction_Left_Rear_Pin, left >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001f68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	bfac      	ite	ge
 8001f76:	2301      	movge	r3, #1
 8001f78:	2300      	movlt	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	2101      	movs	r1, #1
 8001f88:	4820      	ldr	r0, [pc, #128]	@ (800200c <timer_callback+0x260>)
 8001f8a:	f002 f95b 	bl	8004244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Direction_Right_Front_GPIO_Port, Direction_Right_Front_Pin, right >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	bfac      	ite	ge
 8001f9c:	2301      	movge	r3, #1
 8001f9e:	2300      	movlt	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	481a      	ldr	r0, [pc, #104]	@ (8002010 <timer_callback+0x264>)
 8001fa8:	f002 f94c 	bl	8004244 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Direction_Right_Rear_GPIO_Port, Direction_Right_Rear_Pin, right >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001fac:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb8:	bfac      	ite	ge
 8001fba:	2301      	movge	r3, #1
 8001fbc:	2300      	movlt	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	4812      	ldr	r0, [pc, #72]	@ (8002010 <timer_callback+0x264>)
 8001fc6:	f002 f93d 	bl	8004244 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmValueLeft);
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <timer_callback+0x268>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	8a7a      	ldrh	r2, [r7, #18]
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmValueLeft);
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <timer_callback+0x268>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	8a7a      	ldrh	r2, [r7, #18]
 8001fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmValueRight);
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <timer_callback+0x268>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	8a3a      	ldrh	r2, [r7, #16]
 8001fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmValueRight);
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <timer_callback+0x268>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	8a3a      	ldrh	r2, [r7, #16]
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fea:	e000      	b.n	8001fee <timer_callback+0x242>
    if (!timer) return;
 8001fec:	bf00      	nop
}
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff4:	20004138 	.word	0x20004138
 8001ff8:	bff00000 	.word	0xbff00000
 8001ffc:	bf800000 	.word	0xbf800000
 8002000:	3ff00000 	.word	0x3ff00000
 8002004:	447a0000 	.word	0x447a0000
 8002008:	00000000 	.word	0x00000000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	200043c4 	.word	0x200043c4

08002018 <fmap>:

static float fmap(float val, float in_min, float in_max, float out_min, float out_max) {
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002022:	edc7 0a04 	vstr	s1, [r7, #16]
 8002026:	ed87 1a03 	vstr	s2, [r7, #12]
 800202a:	edc7 1a02 	vstr	s3, [r7, #8]
 800202e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002032:	ed97 7a05 	vldr	s14, [r7, #20]
 8002036:	edd7 7a04 	vldr	s15, [r7, #16]
 800203a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800203e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002042:	edd7 7a02 	vldr	s15, [r7, #8]
 8002046:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800204a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800204e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002052:	edd7 7a04 	vldr	s15, [r7, #16]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002066:	eeb0 0a67 	vmov.f32	s0, s15
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <cleanup>:

static void cleanup(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
    rcl_timer_fini(&encoder_timer);
 8002078:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <cleanup+0x30>)
 800207a:	f00a fadf 	bl	800c63c <rcl_timer_fini>
    rcl_publisher_fini(&encoder_publisher, &node);
 800207e:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <cleanup+0x34>)
 8002080:	480a      	ldr	r0, [pc, #40]	@ (80020ac <cleanup+0x38>)
 8002082:	f009 ff57 	bl	800bf34 <rcl_publisher_fini>
    rcl_timer_fini(&timer);
 8002086:	480a      	ldr	r0, [pc, #40]	@ (80020b0 <cleanup+0x3c>)
 8002088:	f00a fad8 	bl	800c63c <rcl_timer_fini>
    rcl_subscription_fini(&subscriber, &node);
 800208c:	4906      	ldr	r1, [pc, #24]	@ (80020a8 <cleanup+0x34>)
 800208e:	4809      	ldr	r0, [pc, #36]	@ (80020b4 <cleanup+0x40>)
 8002090:	f00a f89e 	bl	800c1d0 <rcl_subscription_fini>
    rcl_node_fini(&node);
 8002094:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <cleanup+0x34>)
 8002096:	f009 fe2b 	bl	800bcf0 <rcl_node_fini>
    rclc_support_fini(&support);
 800209a:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <cleanup+0x44>)
 800209c:	f00b fa86 	bl	800d5ac <rclc_support_fini>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200041ac 	.word	0x200041ac
 80020a8:	2000416c 	.word	0x2000416c
 80020ac:	20004238 	.word	0x20004238
 80020b0:	200041a8 	.word	0x200041a8
 80020b4:	20004168 	.word	0x20004168
 80020b8:	20004174 	.word	0x20004174

080020bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	@ 0x28
 80020c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a3f      	ldr	r2, [pc, #252]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a38      	ldr	r2, [pc, #224]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b2f      	ldr	r3, [pc, #188]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <MX_GPIO_Init+0x11c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Work_LF_Pin|Direction_Right_Front_Pin|Work_RF_Pin|Work_LR_Pin
 8002142:	2200      	movs	r2, #0
 8002144:	213f      	movs	r1, #63	@ 0x3f
 8002146:	4825      	ldr	r0, [pc, #148]	@ (80021dc <MX_GPIO_Init+0x120>)
 8002148:	f002 f87c 	bl	8004244 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|Direction_Right_Rear_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Work_RR_Pin|LD2_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2130      	movs	r1, #48	@ 0x30
 8002150:	4823      	ldr	r0, [pc, #140]	@ (80021e0 <MX_GPIO_Init+0x124>)
 8002152:	f002 f877 	bl	8004244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Direction_Left_Rear_Pin|Direction_Left_Front_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2103      	movs	r1, #3
 800215a:	4822      	ldr	r0, [pc, #136]	@ (80021e4 <MX_GPIO_Init+0x128>)
 800215c:	f002 f872 	bl	8004244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002166:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4819      	ldr	r0, [pc, #100]	@ (80021dc <MX_GPIO_Init+0x120>)
 8002178:	f001 fed0 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Work_LF_Pin Direction_Right_Front_Pin Work_RF_Pin Work_LR_Pin
                           PC4 Direction_Right_Rear_Pin */
  GPIO_InitStruct.Pin = Work_LF_Pin|Direction_Right_Front_Pin|Work_RF_Pin|Work_LR_Pin
 800217c:	233f      	movs	r3, #63	@ 0x3f
 800217e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|Direction_Right_Rear_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4812      	ldr	r0, [pc, #72]	@ (80021dc <MX_GPIO_Init+0x120>)
 8002194:	f001 fec2 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Work_RR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Work_RR_Pin|LD2_Pin;
 8002198:	2330      	movs	r3, #48	@ 0x30
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <MX_GPIO_Init+0x124>)
 80021b0:	f001 feb4 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Direction_Left_Rear_Pin Direction_Left_Front_Pin */
  GPIO_InitStruct.Pin = Direction_Left_Rear_Pin|Direction_Left_Front_Pin;
 80021b4:	2303      	movs	r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	@ (80021e4 <MX_GPIO_Init+0x128>)
 80021cc:	f001 fea6 	bl	8003f1c <HAL_GPIO_Init>

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	@ 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ec:	f001 f94c 	bl	8003488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f0:	f000 f81a 	bl	8002228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f4:	f7ff ff62 	bl	80020bc <MX_GPIO_Init>
  MX_DMA_Init();
 80021f8:	f7ff f930 	bl	800145c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021fc:	f000 ff2e 	bl	800305c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002200:	f000 fbd0 	bl	80029a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002204:	f000 fc26 	bl	8002a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002208:	f000 fc9e 	bl	8002b48 <MX_TIM3_Init>
  MX_TIM5_Init();
 800220c:	f000 fcf0 	bl	8002bf0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002210:	f000 fd42 	bl	8002c98 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002214:	f000 fef8 	bl	8003008 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002218:	f005 f940 	bl	800749c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800221c:	f7ff f95c 	bl	80014d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002220:	f005 f960 	bl	80074e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <main+0x3c>

08002228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b094      	sub	sp, #80	@ 0x50
 800222c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	2234      	movs	r2, #52	@ 0x34
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f017 f8ce 	bl	80193d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <SystemClock_Config+0xdc>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <SystemClock_Config+0xdc>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6413      	str	r3, [r2, #64]	@ 0x40
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <SystemClock_Config+0xdc>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002268:	2300      	movs	r3, #0
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <SystemClock_Config+0xe0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a25      	ldr	r2, [pc, #148]	@ (8002308 <SystemClock_Config+0xe0>)
 8002272:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <SystemClock_Config+0xe0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002288:	2301      	movs	r3, #1
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800228c:	2310      	movs	r3, #16
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002290:	2302      	movs	r3, #2
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002298:	2308      	movs	r3, #8
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800229c:	23b4      	movs	r3, #180	@ 0xb4
 800229e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022a0:	2302      	movs	r3, #2
 80022a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022a8:	2302      	movs	r3, #2
 80022aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fbad 	bl	8004a10 <HAL_RCC_OscConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022bc:	f000 f838 	bl	8002330 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022c0:	f001 ffda 	bl	8004278 <HAL_PWREx_EnableOverDrive>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022ca:	f000 f831 	bl	8002330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2302      	movs	r3, #2
 80022d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	2105      	movs	r1, #5
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 f813 	bl	8004318 <HAL_RCC_ClockConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80022f8:	f000 f81a 	bl	8002330 <Error_Handler>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3750      	adds	r7, #80	@ 0x50
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000

0800230c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800231e:	f001 f8d5 	bl	80034cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40001000 	.word	0x40001000

08002330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002334:	b672      	cpsid	i
}
 8002336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <Error_Handler+0x8>

0800233c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <microros_allocate+0x3c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <microros_allocate+0x3c>)
 8002354:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <microros_allocate+0x40>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <microros_allocate+0x40>)
 8002364:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fe28 	bl	8000fbc <pvPortMallocMicroROS>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20004324 	.word	0x20004324
 800237c:	20004328 	.word	0x20004328

08002380 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe ff37 	bl	8001204 <getBlockSize>
 8002396:	4603      	mov	r3, r0
 8002398:	4a06      	ldr	r2, [pc, #24]	@ (80023b4 <microros_deallocate+0x34>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <microros_deallocate+0x34>)
 80023a2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe fed1 	bl	800114c <vPortFreeMicroROS>
  }
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20004328 	.word	0x20004328

080023b8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <microros_reallocate+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <microros_reallocate+0x64>)
 80023d2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <microros_reallocate+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	461a      	mov	r2, r3
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <microros_reallocate+0x68>)
 80023e2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f7fe fde6 	bl	8000fbc <pvPortMallocMicroROS>
 80023f0:	4603      	mov	r3, r0
 80023f2:	e00e      	b.n	8002412 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7fe ff05 	bl	8001204 <getBlockSize>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <microros_reallocate+0x68>)
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <microros_reallocate+0x68>)
 8002406:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7fe ff18 	bl	8001240 <pvPortReallocMicroROS>
 8002410:	4603      	mov	r3, r0
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20004324 	.word	0x20004324
 8002420:	20004328 	.word	0x20004328

08002424 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <microros_zero_allocate+0x48>)
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	4413      	add	r3, r2
 800243e:	461a      	mov	r2, r3
 8002440:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <microros_zero_allocate+0x48>)
 8002442:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <microros_zero_allocate+0x4c>)
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	461a      	mov	r2, r3
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <microros_zero_allocate+0x4c>)
 8002456:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7fe ff1d 	bl	800129a <pvPortCallocMicroROS>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20004324 	.word	0x20004324
 8002470:	20004328 	.word	0x20004328
 8002474:	00000000 	.word	0x00000000

08002478 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800248a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248e:	a320      	add	r3, pc, #128	@ (adr r3, 8002510 <UTILS_NanosecondsToTimespec+0x98>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fe fbca 	bl	8000c2c <__aeabi_ldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80024a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002510 <UTILS_NanosecondsToTimespec+0x98>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe fbbe 	bl	8000c2c <__aeabi_ldivmod>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da20      	bge.n	80024fe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a11      	ldr	r2, [pc, #68]	@ (8002508 <UTILS_NanosecondsToTimespec+0x90>)
 80024c2:	fb82 1203 	smull	r1, r2, r2, r3
 80024c6:	1712      	asrs	r2, r2, #28
 80024c8:	17db      	asrs	r3, r3, #31
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	17c8      	asrs	r0, r1, #31
 80024da:	460c      	mov	r4, r1
 80024dc:	4605      	mov	r5, r0
 80024de:	ebb2 0804 	subs.w	r8, r2, r4
 80024e2:	eb63 0905 	sbc.w	r9, r3, r5
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4906      	ldr	r1, [pc, #24]	@ (800250c <UTILS_NanosecondsToTimespec+0x94>)
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
    }
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002508:	44b82fa1 	.word	0x44b82fa1
 800250c:	3b9aca00 	.word	0x3b9aca00
 8002510:	3b9aca00 	.word	0x3b9aca00
 8002514:	00000000 	.word	0x00000000

08002518 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800251c:	b08e      	sub	sp, #56	@ 0x38
 800251e:	af00      	add	r7, sp, #0
 8002520:	6278      	str	r0, [r7, #36]	@ 0x24
 8002522:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002524:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002528:	2300      	movs	r3, #0
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800253a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800253e:	4618      	mov	r0, r3
 8002540:	f006 fbc8 	bl	8008cd4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	17da      	asrs	r2, r3, #31
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	61fa      	str	r2, [r7, #28]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	000b      	movs	r3, r1
 8002558:	2200      	movs	r2, #0
 800255a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	2200      	movs	r2, #0
 8002562:	461c      	mov	r4, r3
 8002564:	4615      	mov	r5, r2
 8002566:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800256a:	1911      	adds	r1, r2, r4
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	416b      	adcs	r3, r5
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002576:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800257a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	f04f 0400 	mov.w	r4, #0
 8002586:	f04f 0500 	mov.w	r5, #0
 800258a:	015d      	lsls	r5, r3, #5
 800258c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002590:	0154      	lsls	r4, r2, #5
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	ebb2 0800 	subs.w	r8, r2, r0
 800259a:	eb63 0901 	sbc.w	r9, r3, r1
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80025aa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80025ae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80025b2:	4690      	mov	r8, r2
 80025b4:	4699      	mov	r9, r3
 80025b6:	eb18 0a00 	adds.w	sl, r8, r0
 80025ba:	eb49 0b01 	adc.w	fp, r9, r1
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025ca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025d2:	ebb2 040a 	subs.w	r4, r2, sl
 80025d6:	603c      	str	r4, [r7, #0]
 80025d8:	eb63 030b 	sbc.w	r3, r3, fp
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4623      	mov	r3, r4
 80025e4:	181b      	adds	r3, r3, r0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	462b      	mov	r3, r5
 80025ea:	eb41 0303 	adc.w	r3, r1, r3
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f6:	f7ff ff3f 	bl	8002478 <UTILS_NanosecondsToTimespec>

    return 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	3738      	adds	r7, #56	@ 0x38
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_MspInit+0x54>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_MspInit+0x54>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_MspInit+0x54>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_MspInit+0x54>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <HAL_MspInit+0x54>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_MspInit+0x54>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	210f      	movs	r1, #15
 800264a:	f06f 0001 	mvn.w	r0, #1
 800264e:	f001 f839 	bl	80036c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800

08002660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08e      	sub	sp, #56	@ 0x38
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <HAL_InitTick+0xe4>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a32      	ldr	r2, [pc, #200]	@ (8002744 <HAL_InitTick+0xe4>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002680:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <HAL_InitTick+0xe4>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f001 ff58 	bl	800454c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026a6:	f001 ff29 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 80026aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80026ac:	e004      	b.n	80026b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026ae:	f001 ff25 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 80026b2:	4603      	mov	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ba:	4a23      	ldr	r2, [pc, #140]	@ (8002748 <HAL_InitTick+0xe8>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	3b01      	subs	r3, #1
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026c6:	4b21      	ldr	r3, [pc, #132]	@ (800274c <HAL_InitTick+0xec>)
 80026c8:	4a21      	ldr	r2, [pc, #132]	@ (8002750 <HAL_InitTick+0xf0>)
 80026ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <HAL_InitTick+0xec>)
 80026ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026d4:	4a1d      	ldr	r2, [pc, #116]	@ (800274c <HAL_InitTick+0xec>)
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026da:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <HAL_InitTick+0xec>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_InitTick+0xec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_InitTick+0xec>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026ec:	4817      	ldr	r0, [pc, #92]	@ (800274c <HAL_InitTick+0xec>)
 80026ee:	f002 fc2d 	bl	8004f4c <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11b      	bne.n	8002738 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002700:	4812      	ldr	r0, [pc, #72]	@ (800274c <HAL_InitTick+0xec>)
 8002702:	f002 fc7d 	bl	8005000 <HAL_TIM_Base_Start_IT>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800270c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002710:	2b00      	cmp	r3, #0
 8002712:	d111      	bne.n	8002738 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002714:	2036      	movs	r0, #54	@ 0x36
 8002716:	f000 fff1 	bl	80036fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d808      	bhi.n	8002732 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2036      	movs	r0, #54	@ 0x36
 8002726:	f000 ffcd 	bl	80036c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_InitTick+0xf4>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e002      	b.n	8002738 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002738:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800273c:	4618      	mov	r0, r3
 800273e:	3738      	adds	r7, #56	@ 0x38
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	431bde83 	.word	0x431bde83
 800274c:	2000432c 	.word	0x2000432c
 8002750:	40001000 	.word	0x40001000
 8002754:	20000008 	.word	0x20000008

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <NMI_Handler+0x4>

08002760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <MemManage_Handler+0x4>

08002770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <BusFault_Handler+0x4>

08002778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <UsageFault_Handler+0x4>

08002780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <DMA1_Stream5_IRQHandler+0x10>)
 8002796:	f001 f957 	bl	8003a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20004574 	.word	0x20004574

080027a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <DMA1_Stream6_IRQHandler+0x10>)
 80027aa:	f001 f94d 	bl	8003a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200045d4 	.word	0x200045d4

080027b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <USART1_IRQHandler+0x10>)
 80027be:	f003 fd2b 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200044e4 	.word	0x200044e4

080027cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <USART2_IRQHandler+0x10>)
 80027d2:	f003 fd21 	bl	8006218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000452c 	.word	0x2000452c

080027e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <TIM6_DAC_IRQHandler+0x10>)
 80027e6:	f002 fec7 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000432c 	.word	0x2000432c

080027f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_kill>:

int _kill(int pid, int sig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800280e:	f016 fe77 	bl	8019500 <__errno>
 8002812:	4603      	mov	r3, r0
 8002814:	2216      	movs	r2, #22
 8002816:	601a      	str	r2, [r3, #0]
  return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_exit>:

void _exit (int status)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800282c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ffe7 	bl	8002804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002836:	bf00      	nop
 8002838:	e7fd      	b.n	8002836 <_exit+0x12>

0800283a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e00a      	b.n	8002862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800284c:	f3af 8000 	nop.w
 8002850:	4601      	mov	r1, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	b2ca      	uxtb	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf0      	blt.n	800284c <_read+0x12>
  }

  return len;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e009      	b.n	800289a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	60ba      	str	r2, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dbf1      	blt.n	8002886 <_write+0x12>
  }
  return len;
 80028a2:	687b      	ldr	r3, [r7, #4]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_close>:

int _close(int file)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d4:	605a      	str	r2, [r3, #4]
  return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_isatty>:

int _isatty(int file)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f016 fddc 	bl	8019500 <__errno>
 8002948:	4603      	mov	r3, r0
 800294a:	220c      	movs	r2, #12
 800294c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20020000 	.word	0x20020000
 8002974:	00000400 	.word	0x00000400
 8002978:	20004378 	.word	0x20004378
 800297c:	2000e450 	.word	0x2000e450

08002980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <SystemInit+0x20>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <SystemInit+0x20>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	@ 0x30
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	2224      	movs	r2, #36	@ 0x24
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f016 fd10 	bl	80193d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029c2:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <MX_TIM1_Init+0xac>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029c6:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ec:	2303      	movs	r3, #3
 80029ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f4:	2301      	movs	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80029fc:	2305      	movs	r3, #5
 80029fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 8002a18:	f002 fc7a 	bl	8005310 <HAL_TIM_Encoder_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002a22:	f7ff fc85 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <MX_TIM1_Init+0xa8>)
 8002a34:	f003 f9fc 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002a3e:	f7ff fc77 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	3730      	adds	r7, #48	@ 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000437c 	.word	0x2000437c
 8002a50:	40010000 	.word	0x40010000

08002a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5a:	f107 0320 	add.w	r3, r7, #32
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	615a      	str	r2, [r3, #20]
 8002a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a76:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a80:	2259      	movs	r2, #89	@ 0x59
 8002a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a84:	4b2f      	ldr	r3, [pc, #188]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a9e:	4829      	ldr	r0, [pc, #164]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002aa0:	f002 fb1e 	bl	80050e0 <HAL_TIM_PWM_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002aaa:	f7ff fc41 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ab6:	f107 0320 	add.w	r3, r7, #32
 8002aba:	4619      	mov	r1, r3
 8002abc:	4821      	ldr	r0, [pc, #132]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002abe:	f003 f9b7 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002ac8:	f7ff fc32 	bl	8002330 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002acc:	2360      	movs	r3, #96	@ 0x60
 8002ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4818      	ldr	r0, [pc, #96]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002ae4:	f002 fe38 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002aee:	f7ff fc1f 	bl	8002330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	2204      	movs	r2, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4812      	ldr	r0, [pc, #72]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002afa:	f002 fe2d 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002b04:	f7ff fc14 	bl	8002330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480d      	ldr	r0, [pc, #52]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002b10:	f002 fe22 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002b1a:	f7ff fc09 	bl	8002330 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	220c      	movs	r2, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002b26:	f002 fe17 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8002b30:	f7ff fbfe 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b34:	4803      	ldr	r0, [pc, #12]	@ (8002b44 <MX_TIM2_Init+0xf0>)
 8002b36:	f000 fa0d 	bl	8002f54 <HAL_TIM_MspPostInit>

}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	@ 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200043c4 	.word	0x200043c4

08002b48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	@ 0x30
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f016 fc3e 	bl	80193d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b64:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b66:	4a21      	ldr	r2, [pc, #132]	@ (8002bec <MX_TIM3_Init+0xa4>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b92:	2301      	movs	r3, #1
 8002b94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8002baa:	2305      	movs	r3, #5
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480c      	ldr	r0, [pc, #48]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002bb6:	f002 fbab 	bl	8005310 <HAL_TIM_Encoder_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bc0:	f7ff fbb6 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	@ (8002be8 <MX_TIM3_Init+0xa0>)
 8002bd2:	f003 f92d 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002bdc:	f7ff fba8 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	3730      	adds	r7, #48	@ 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000440c 	.word	0x2000440c
 8002bec:	40000400 	.word	0x40000400

08002bf0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	@ 0x30
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bf6:	f107 030c 	add.w	r3, r7, #12
 8002bfa:	2224      	movs	r2, #36	@ 0x24
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f016 fbea 	bl	80193d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c0c:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c0e:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <MX_TIM5_Init+0xa4>)
 8002c10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2c:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c32:	2303      	movs	r3, #3
 8002c34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002c42:	2305      	movs	r3, #5
 8002c44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c46:	2300      	movs	r3, #0
 8002c48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8002c52:	2305      	movs	r3, #5
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c5e:	f002 fb57 	bl	8005310 <HAL_TIM_Encoder_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002c68:	f7ff fb62 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <MX_TIM5_Init+0xa0>)
 8002c7a:	f003 f8d9 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002c84:	f7ff fb54 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3730      	adds	r7, #48	@ 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20004454 	.word	0x20004454
 8002c94:	40000c00 	.word	0x40000c00

08002c98 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	@ 0x30
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f016 fb96 	bl	80193d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cb6:	4a23      	ldr	r2, [pc, #140]	@ (8002d44 <MX_TIM8_Init+0xac>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002cba:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ccc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 5;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002d0c:	f002 fb00 	bl	8005310 <HAL_TIM_Encoder_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002d16:	f7ff fb0b 	bl	8002330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	@ (8002d40 <MX_TIM8_Init+0xa8>)
 8002d28:	f003 f882 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002d32:	f7ff fafd 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	3730      	adds	r7, #48	@ 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000449c 	.word	0x2000449c
 8002d44:	40010400 	.word	0x40010400

08002d48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b090      	sub	sp, #64	@ 0x40
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a64      	ldr	r2, [pc, #400]	@ (8002ef8 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12d      	bne.n	8002dc6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6e:	4b63      	ldr	r3, [pc, #396]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	4a62      	ldr	r2, [pc, #392]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7a:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d96:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENK_LF_B_Pin|ENK_LF_A_Pin;
 8002da2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4850      	ldr	r0, [pc, #320]	@ (8002f00 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002dc0:	f001 f8ac 	bl	8003f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002dc4:	e094      	b.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4e      	ldr	r2, [pc, #312]	@ (8002f04 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d12c      	bne.n	8002e2a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	4b49      	ldr	r3, [pc, #292]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a48      	ldr	r2, [pc, #288]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de0:	4b46      	ldr	r3, [pc, #280]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	4b42      	ldr	r3, [pc, #264]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENK_RF_A_Pin|ENK_RF_B_Pin;
 8002e08:	23c0      	movs	r3, #192	@ 0xc0
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e20:	4619      	mov	r1, r3
 8002e22:	4837      	ldr	r0, [pc, #220]	@ (8002f00 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002e24:	f001 f87a 	bl	8003f1c <HAL_GPIO_Init>
}
 8002e28:	e062      	b.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(tim_encoderHandle->Instance==TIM5)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	@ (8002f08 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d12c      	bne.n	8002e8e <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e44:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENK_LR_A_Pin|ENK_LR_B_Pin;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e84:	4619      	mov	r1, r3
 8002e86:	481e      	ldr	r0, [pc, #120]	@ (8002f00 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002e88:	f001 f848 	bl	8003f1c <HAL_GPIO_Init>
}
 8002e8c:	e030      	b.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(tim_encoderHandle->Instance==TIM8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1e      	ldr	r2, [pc, #120]	@ (8002f0c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d12b      	bne.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	4a16      	ldr	r2, [pc, #88]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENK_RR_A_Pin|ENK_RR_B_Pin;
 8002ed0:	23c0      	movs	r3, #192	@ 0xc0
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4809      	ldr	r0, [pc, #36]	@ (8002f10 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002eec:	f001 f816 	bl	8003f1c <HAL_GPIO_Init>
}
 8002ef0:	bf00      	nop
 8002ef2:	3740      	adds	r7, #64	@ 0x40
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40010400 	.word	0x40010400
 8002f10:	40020800 	.word	0x40020800

08002f14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f24:	d10d      	bne.n	8002f42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f74:	d13d      	bne.n	8002ff2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <HAL_TIM_MspPostInit+0xa8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_RR_Pin|PWM_RF_Pin|PWM_LR_Pin;
 8002fae:	f240 6304 	movw	r3, #1540	@ 0x604
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480d      	ldr	r0, [pc, #52]	@ (8003000 <HAL_TIM_MspPostInit+0xac>)
 8002fcc:	f000 ffa6 	bl	8003f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LF_Pin;
 8002fd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_LF_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	@ (8003004 <HAL_TIM_MspPostInit+0xb0>)
 8002fee:	f000 ff95 	bl	8003f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400
 8003004:	40020000 	.word	0x40020000

08003008 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 800300e:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <MX_USART1_UART_Init+0x50>)
 8003010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 8003014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 800302e:	220c      	movs	r2, #12
 8003030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_USART1_UART_Init+0x4c>)
 8003040:	f002 ff86 	bl	8005f50 <HAL_UART_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800304a:	f7ff f971 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200044e4 	.word	0x200044e4
 8003058:	40011000 	.word	0x40011000

0800305c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <MX_USART2_UART_Init+0x50>)
 8003064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800306c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003080:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003082:	220c      	movs	r2, #12
 8003084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <MX_USART2_UART_Init+0x4c>)
 8003094:	f002 ff5c 	bl	8005f50 <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800309e:	f7ff f947 	bl	8002330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000452c 	.word	0x2000452c
 80030ac:	40004400 	.word	0x40004400

080030b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	@ 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a79      	ldr	r2, [pc, #484]	@ (80032b4 <HAL_UART_MspInit+0x204>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d153      	bne.n	800317a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	4b78      	ldr	r3, [pc, #480]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	4a77      	ldr	r2, [pc, #476]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80030dc:	f043 0310 	orr.w	r3, r3, #16
 80030e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e2:	4b75      	ldr	r3, [pc, #468]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	4b71      	ldr	r3, [pc, #452]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a70      	ldr	r2, [pc, #448]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b6a      	ldr	r3, [pc, #424]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a69      	ldr	r2, [pc, #420]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b67      	ldr	r3, [pc, #412]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003138:	2307      	movs	r3, #7
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	485e      	ldr	r0, [pc, #376]	@ (80032bc <HAL_UART_MspInit+0x20c>)
 8003144:	f000 feea 	bl	8003f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003148:	2340      	movs	r3, #64	@ 0x40
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003158:	2307      	movs	r3, #7
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	4619      	mov	r1, r3
 8003162:	4857      	ldr	r0, [pc, #348]	@ (80032c0 <HAL_UART_MspInit+0x210>)
 8003164:	f000 feda 	bl	8003f1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2105      	movs	r1, #5
 800316c:	2025      	movs	r0, #37	@ 0x25
 800316e:	f000 faa9 	bl	80036c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003172:	2025      	movs	r0, #37	@ 0x25
 8003174:	f000 fac2 	bl	80036fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003178:	e098      	b.n	80032ac <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a51      	ldr	r2, [pc, #324]	@ (80032c4 <HAL_UART_MspInit+0x214>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f040 8093 	bne.w	80032ac <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b4b      	ldr	r3, [pc, #300]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a4a      	ldr	r2, [pc, #296]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b48      	ldr	r3, [pc, #288]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b44      	ldr	r3, [pc, #272]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a43      	ldr	r2, [pc, #268]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b41      	ldr	r3, [pc, #260]	@ (80032b8 <HAL_UART_MspInit+0x208>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031be:	230c      	movs	r3, #12
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ce:	2307      	movs	r3, #7
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	4838      	ldr	r0, [pc, #224]	@ (80032bc <HAL_UART_MspInit+0x20c>)
 80031da:	f000 fe9f 	bl	8003f1c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80031de:	4b3a      	ldr	r3, [pc, #232]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 80031e0:	4a3a      	ldr	r2, [pc, #232]	@ (80032cc <HAL_UART_MspInit+0x21c>)
 80031e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80031e4:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 80031e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ec:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f8:	4b33      	ldr	r3, [pc, #204]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 80031fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b30      	ldr	r3, [pc, #192]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800320c:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 800320e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003212:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003214:	4b2c      	ldr	r3, [pc, #176]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 8003216:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800321a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003222:	4829      	ldr	r0, [pc, #164]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 8003224:	f000 fa78 	bl	8003718 <HAL_DMA_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_UART_MspInit+0x182>
      Error_Handler();
 800322e:	f7ff f87f 	bl	8002330 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 8003236:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003238:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_UART_MspInit+0x218>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800323e:	4b24      	ldr	r3, [pc, #144]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003240:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <HAL_UART_MspInit+0x224>)
 8003242:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003244:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003246:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800324a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800324c:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 800324e:	2240      	movs	r2, #64	@ 0x40
 8003250:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003252:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003258:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 800325a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800325e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003262:	2200      	movs	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800326c:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003272:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003274:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003278:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003280:	4813      	ldr	r0, [pc, #76]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003282:	f000 fa49 	bl	8003718 <HAL_DMA_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800328c:	f7ff f850 	bl	8002330 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0f      	ldr	r2, [pc, #60]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003294:	639a      	str	r2, [r3, #56]	@ 0x38
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <HAL_UART_MspInit+0x220>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2105      	movs	r1, #5
 80032a0:	2026      	movs	r0, #38	@ 0x26
 80032a2:	f000 fa0f 	bl	80036c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032a6:	2026      	movs	r0, #38	@ 0x26
 80032a8:	f000 fa28 	bl	80036fc <HAL_NVIC_EnableIRQ>
}
 80032ac:	bf00      	nop
 80032ae:	3730      	adds	r7, #48	@ 0x30
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40004400 	.word	0x40004400
 80032c8:	20004574 	.word	0x20004574
 80032cc:	40026088 	.word	0x40026088
 80032d0:	200045d4 	.word	0x200045d4
 80032d4:	400260a0 	.word	0x400260a0

080032d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80032e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80032e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ec:	4904      	ldr	r1, [pc, #16]	@ (8003300 <cubemx_transport_open+0x28>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f002 feee 	bl	80060d0 <HAL_UART_Receive_DMA>
    return true;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20004634 	.word	0x20004634

08003304 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003312:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f002 ff00 	bl	800611a <HAL_UART_DMAStop>
    return true;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003338:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d11c      	bne.n	8003380 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f002 fe4e 	bl	8005ff0 <HAL_UART_Transmit_DMA>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003358:	e002      	b.n	8003360 <cubemx_transport_write+0x3c>
            osDelay(1);
 800335a:	2001      	movs	r0, #1
 800335c:	f004 f97a 	bl	8007654 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <cubemx_transport_write+0x4e>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d1f3      	bne.n	800335a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <cubemx_transport_write+0x58>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	e002      	b.n	8003382 <cubemx_transport_write+0x5e>
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8003380:	2300      	movs	r3, #0
    }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80033a0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a6:	b672      	cpsid	i
}
 80033a8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <cubemx_transport_read+0x9c>)
 80033b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ba:	b662      	cpsie	i
}
 80033bc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f004 f945 	bl	8007654 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <cubemx_transport_read+0xa0>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <cubemx_transport_read+0x9c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d103      	bne.n	80033de <cubemx_transport_read+0x52>
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	dbe3      	blt.n	80033a6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80033e2:	e011      	b.n	8003408 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <cubemx_transport_read+0xa0>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	440b      	add	r3, r1
 80033ee:	4910      	ldr	r1, [pc, #64]	@ (8003430 <cubemx_transport_read+0xa4>)
 80033f0:	5c8a      	ldrb	r2, [r1, r2]
 80033f2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <cubemx_transport_read+0xa0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fe:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <cubemx_transport_read+0xa0>)
 8003400:	6013      	str	r3, [r2, #0]
        wrote++;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	3301      	adds	r3, #1
 8003406:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <cubemx_transport_read+0xa0>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <cubemx_transport_read+0x9c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d003      	beq.n	800341c <cubemx_transport_read+0x90>
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	d3e3      	bcc.n	80033e4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800341c:	69bb      	ldr	r3, [r7, #24]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20004e38 	.word	0x20004e38
 800342c:	20004e34 	.word	0x20004e34
 8003430:	20004634 	.word	0x20004634

08003434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800346c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003438:	f7ff faa2 	bl	8002980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800343c:	480c      	ldr	r0, [pc, #48]	@ (8003470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800343e:	490d      	ldr	r1, [pc, #52]	@ (8003474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003444:	e002      	b.n	800344c <LoopCopyDataInit>

08003446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344a:	3304      	adds	r3, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003450:	d3f9      	bcc.n	8003446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003452:	4a0a      	ldr	r2, [pc, #40]	@ (800347c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003454:	4c0a      	ldr	r4, [pc, #40]	@ (8003480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003458:	e001      	b.n	800345e <LoopFillZerobss>

0800345a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800345c:	3204      	adds	r2, #4

0800345e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003460:	d3fb      	bcc.n	800345a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003462:	f016 f853 	bl	801950c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003466:	f7fe febf 	bl	80021e8 <main>
  bx  lr    
 800346a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800346c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003474:	20000500 	.word	0x20000500
  ldr r2, =_sidata
 8003478:	0801b504 	.word	0x0801b504
  ldr r2, =_sbss
 800347c:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 8003480:	2000e450 	.word	0x2000e450

08003484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003484:	e7fe      	b.n	8003484 <ADC_IRQHandler>
	...

08003488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800348c:	4b0e      	ldr	r3, [pc, #56]	@ (80034c8 <HAL_Init+0x40>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <HAL_Init+0x40>)
 8003492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_Init+0x40>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0a      	ldr	r2, [pc, #40]	@ (80034c8 <HAL_Init+0x40>)
 800349e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_Init+0x40>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a07      	ldr	r2, [pc, #28]	@ (80034c8 <HAL_Init+0x40>)
 80034aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b0:	2003      	movs	r0, #3
 80034b2:	f000 f8fc 	bl	80036ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b6:	200f      	movs	r0, #15
 80034b8:	f7ff f8d2 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034bc:	f7ff f8a4 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00

080034cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_IncTick+0x20>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_IncTick+0x24>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <HAL_IncTick+0x24>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	20004e3c 	.word	0x20004e3c

080034f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b03      	ldr	r3, [pc, #12]	@ (8003508 <HAL_GetTick+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20004e3c 	.word	0x20004e3c

0800350c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff ffee 	bl	80034f4 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003524:	d005      	beq.n	8003532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_Delay+0x44>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003532:	bf00      	nop
 8003534:	f7ff ffde 	bl	80034f4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d8f7      	bhi.n	8003534 <HAL_Delay+0x28>
  {
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c

08003554 <__NVIC_SetPriorityGrouping>:
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <__NVIC_EnableIRQ+0x38>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	@ (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	@ (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	@ 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	@ 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff4c 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d6:	f7ff ff61 	bl	800359c <__NVIC_GetPriorityGrouping>
 80036da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	6978      	ldr	r0, [r7, #20]
 80036e2:	f7ff ffb1 	bl	8003648 <NVIC_EncodePriority>
 80036e6:	4602      	mov	r2, r0
 80036e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff80 	bl	80035f4 <__NVIC_SetPriority>
}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff54 	bl	80035b8 <__NVIC_EnableIRQ>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff fee6 	bl	80034f4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e099      	b.n	8003868 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003754:	e00f      	b.n	8003776 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003756:	f7ff fecd 	bl	80034f4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b05      	cmp	r3, #5
 8003762:	d908      	bls.n	8003776 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e078      	b.n	8003868 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e8      	bne.n	8003756 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_DMA_Init+0x158>)
 8003790:	4013      	ands	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d107      	bne.n	80037e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d8:	4313      	orrs	r3, r2
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0307 	bic.w	r3, r3, #7
 80037f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	2b04      	cmp	r3, #4
 8003808:	d117      	bne.n	800383a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fb01 	bl	8003e24 <DMA_CheckFifoParam>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2240      	movs	r2, #64	@ 0x40
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003836:	2301      	movs	r3, #1
 8003838:	e016      	b.n	8003868 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fab8 	bl	8003db8 <DMA_CalcBaseAndBitshift>
 8003848:	4603      	mov	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	223f      	movs	r2, #63	@ 0x3f
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	f010803f 	.word	0xf010803f

08003874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_DMA_Start_IT+0x26>
 8003896:	2302      	movs	r3, #2
 8003898:	e040      	b.n	800391c <HAL_DMA_Start_IT+0xa8>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d12f      	bne.n	800390e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fa4a 	bl	8003d5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	223f      	movs	r2, #63	@ 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0216 	orr.w	r2, r2, #22
 80038e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e005      	b.n	800391a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003916:	2302      	movs	r3, #2
 8003918:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800391a:	7dfb      	ldrb	r3, [r7, #23]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003932:	f7ff fddf 	bl	80034f4 <HAL_GetTick>
 8003936:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d008      	beq.n	8003956 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2280      	movs	r2, #128	@ 0x80
 8003948:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e052      	b.n	80039fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0216 	bic.w	r2, r2, #22
 8003964:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003974:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_DMA_Abort+0x62>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0208 	bic.w	r2, r2, #8
 8003994:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a6:	e013      	b.n	80039d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a8:	f7ff fda4 	bl	80034f4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d90c      	bls.n	80039d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2203      	movs	r2, #3
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e015      	b.n	80039fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e4      	bne.n	80039a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	223f      	movs	r2, #63	@ 0x3f
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d004      	beq.n	8003a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00c      	b.n	8003a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2205      	movs	r2, #5
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a54:	4b8e      	ldr	r3, [pc, #568]	@ (8003c90 <HAL_DMA_IRQHandler+0x248>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a8e      	ldr	r2, [pc, #568]	@ (8003c94 <HAL_DMA_IRQHandler+0x24c>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0a9b      	lsrs	r3, r3, #10
 8003a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	2208      	movs	r2, #8
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0204 	bic.w	r2, r2, #4
 8003a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	2204      	movs	r2, #4
 8003af0:	409a      	lsls	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d012      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	2210      	movs	r2, #16
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d043      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	2210      	movs	r2, #16
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d024      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
 8003b76:	e01f      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e016      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0208 	bic.w	r2, r2, #8
 8003ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 808f 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8087 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	2220      	movs	r2, #32
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d136      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0216 	bic.w	r2, r2, #22
 8003c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x1da>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0208 	bic.w	r2, r2, #8
 8003c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	223f      	movs	r2, #63	@ 0x3f
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d07e      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
        }
        return;
 8003c5e:	e079      	b.n	8003d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01d      	beq.n	8003caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d031      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
 8003c8c:	e02c      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
 8003c8e:	bf00      	nop
 8003c90:	20000004 	.word	0x20000004
 8003c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d023      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
 8003ca8:	e01e      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0210 	bic.w	r2, r2, #16
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d032      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d307      	bcc.n	8003d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f2      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x2cc>
 8003d2e:	e000      	b.n	8003d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
 8003d52:	e000      	b.n	8003d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d54:	bf00      	nop
    }
  }
}
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d108      	bne.n	8003d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d9a:	e007      	b.n	8003dac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b10      	subs	r3, #16
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <DMA_CalcBaseAndBitshift+0x64>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <DMA_CalcBaseAndBitshift+0x68>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d909      	bls.n	8003dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	1d1a      	adds	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003df8:	e007      	b.n	8003e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	aaaaaaab 	.word	0xaaaaaaab
 8003e20:	0801a44c 	.word	0x0801a44c

08003e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11f      	bne.n	8003e7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d856      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xce>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <DMA_CheckFifoParam+0x28>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e6f 	.word	0x08003e6f
 8003e54:	08003e5d 	.word	0x08003e5d
 8003e58:	08003ef3 	.word	0x08003ef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d046      	beq.n	8003ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6c:	e043      	b.n	8003ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e76:	d140      	bne.n	8003efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e03d      	b.n	8003efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e86:	d121      	bne.n	8003ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d837      	bhi.n	8003efe <DMA_CheckFifoParam+0xda>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <DMA_CheckFifoParam+0x70>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eab 	.word	0x08003eab
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003ebd 	.word	0x08003ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea8:	e030      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d025      	beq.n	8003f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eba:	e022      	b.n	8003f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ec4:	d11f      	bne.n	8003f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eca:	e01c      	b.n	8003f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d903      	bls.n	8003eda <DMA_CheckFifoParam+0xb6>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d003      	beq.n	8003ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed8:	e018      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ede:	e015      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e00b      	b.n	8003f0a <DMA_CheckFifoParam+0xe6>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e00a      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e008      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e006      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop

08003f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	@ 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e165      	b.n	8004204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	f040 8154 	bne.w	80041fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d005      	beq.n	8003f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d130      	bne.n	8003fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 0201 	and.w	r2, r3, #1
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d017      	beq.n	800400c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d123      	bne.n	8004060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	69b9      	ldr	r1, [r7, #24]
 800405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2203      	movs	r2, #3
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80ae 	beq.w	80041fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	4b5d      	ldr	r3, [pc, #372]	@ (800421c <HAL_GPIO_Init+0x300>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	4a5c      	ldr	r2, [pc, #368]	@ (800421c <HAL_GPIO_Init+0x300>)
 80040ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040b2:	4b5a      	ldr	r3, [pc, #360]	@ (800421c <HAL_GPIO_Init+0x300>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040be:	4a58      	ldr	r2, [pc, #352]	@ (8004220 <HAL_GPIO_Init+0x304>)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	3302      	adds	r3, #2
 80040c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	220f      	movs	r2, #15
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a4f      	ldr	r2, [pc, #316]	@ (8004224 <HAL_GPIO_Init+0x308>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d025      	beq.n	8004136 <HAL_GPIO_Init+0x21a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004228 <HAL_GPIO_Init+0x30c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01f      	beq.n	8004132 <HAL_GPIO_Init+0x216>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a4d      	ldr	r2, [pc, #308]	@ (800422c <HAL_GPIO_Init+0x310>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d019      	beq.n	800412e <HAL_GPIO_Init+0x212>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a4c      	ldr	r2, [pc, #304]	@ (8004230 <HAL_GPIO_Init+0x314>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_GPIO_Init+0x20e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a4b      	ldr	r2, [pc, #300]	@ (8004234 <HAL_GPIO_Init+0x318>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00d      	beq.n	8004126 <HAL_GPIO_Init+0x20a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a4a      	ldr	r2, [pc, #296]	@ (8004238 <HAL_GPIO_Init+0x31c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <HAL_GPIO_Init+0x206>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a49      	ldr	r2, [pc, #292]	@ (800423c <HAL_GPIO_Init+0x320>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_GPIO_Init+0x202>
 800411a:	2306      	movs	r3, #6
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 800411e:	2307      	movs	r3, #7
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x21c>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	@ (8004220 <HAL_GPIO_Init+0x304>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b3a      	ldr	r3, [pc, #232]	@ (8004240 <HAL_GPIO_Init+0x324>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a31      	ldr	r2, [pc, #196]	@ (8004240 <HAL_GPIO_Init+0x324>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b2f      	ldr	r3, [pc, #188]	@ (8004240 <HAL_GPIO_Init+0x324>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <HAL_GPIO_Init+0x324>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b25      	ldr	r3, [pc, #148]	@ (8004240 <HAL_GPIO_Init+0x324>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_GPIO_Init+0x324>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004240 <HAL_GPIO_Init+0x324>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a11      	ldr	r2, [pc, #68]	@ (8004240 <HAL_GPIO_Init+0x324>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae96 	bls.w	8003f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40013c00 	.word	0x40013c00

08004244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	807b      	strh	r3, [r7, #2]
 8004250:	4613      	mov	r3, r2
 8004252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004254:	787b      	ldrb	r3, [r7, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004260:	e003      	b.n	800426a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004262:	887b      	ldrh	r3, [r7, #2]
 8004264:	041a      	lsls	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <HAL_PWREx_EnableOverDrive+0x90>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_PWREx_EnableOverDrive+0x90>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004290:	6413      	str	r3, [r2, #64]	@ 0x40
 8004292:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_PWREx_EnableOverDrive+0x90>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800429e:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <HAL_PWREx_EnableOverDrive+0x94>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7ff f926 	bl	80034f4 <HAL_GetTick>
 80042a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042aa:	e009      	b.n	80042c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ac:	f7ff f922 	bl	80034f4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ba:	d901      	bls.n	80042c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e01f      	b.n	8004300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042c0:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <HAL_PWREx_EnableOverDrive+0x98>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042cc:	d1ee      	bne.n	80042ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d4:	f7ff f90e 	bl	80034f4 <HAL_GetTick>
 80042d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042da:	e009      	b.n	80042f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042dc:	f7ff f90a 	bl	80034f4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ea:	d901      	bls.n	80042f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e007      	b.n	8004300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042fc:	d1ee      	bne.n	80042dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	420e0040 	.word	0x420e0040
 8004310:	40007000 	.word	0x40007000
 8004314:	420e0044 	.word	0x420e0044

08004318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0cc      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800432c:	4b68      	ldr	r3, [pc, #416]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d90c      	bls.n	8004354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b65      	ldr	r3, [pc, #404]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b63      	ldr	r3, [pc, #396]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0b8      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800436c:	4b59      	ldr	r3, [pc, #356]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a58      	ldr	r2, [pc, #352]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004376:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004384:	4b53      	ldr	r3, [pc, #332]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a52      	ldr	r2, [pc, #328]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800438e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b50      	ldr	r3, [pc, #320]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	494d      	ldr	r1, [pc, #308]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d044      	beq.n	8004438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d119      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b3f      	ldr	r3, [pc, #252]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e06f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e6:	4b3b      	ldr	r3, [pc, #236]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e067      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	4b37      	ldr	r3, [pc, #220]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4934      	ldr	r1, [pc, #208]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004408:	f7ff f874 	bl	80034f4 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7ff f870 	bl	80034f4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	4b2b      	ldr	r3, [pc, #172]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 020c 	and.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	429a      	cmp	r2, r3
 8004436:	d1eb      	bne.n	8004410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004438:	4b25      	ldr	r3, [pc, #148]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d20c      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b22      	ldr	r3, [pc, #136]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e032      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4916      	ldr	r1, [pc, #88]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448a:	4b12      	ldr	r3, [pc, #72]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	490e      	ldr	r1, [pc, #56]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800449e:	f000 f887 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	490a      	ldr	r1, [pc, #40]	@ (80044d8 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	5ccb      	ldrb	r3, [r1, r3]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a09      	ldr	r2, [pc, #36]	@ (80044dc <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044ba:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe f8ce 	bl	8002660 <HAL_InitTick>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023c00 	.word	0x40023c00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	0801a434 	.word	0x0801a434
 80044dc:	20000004 	.word	0x20000004
 80044e0:	20000008 	.word	0x20000008

080044e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000004 	.word	0x20000004

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004500:	f7ff fff0 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0a9b      	lsrs	r3, r3, #10
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	@ (8004520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	0801a444 	.word	0x0801a444

08004524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004528:	f7ff ffdc 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0b5b      	lsrs	r3, r3, #13
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	0801a444 	.word	0x0801a444

0800454c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	220f      	movs	r2, #15
 800455a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_GetClockConfig+0x5c>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0203 	and.w	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <HAL_RCC_GetClockConfig+0x5c>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004574:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800458e:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <HAL_RCC_GetClockConfig+0x60>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 020f 	and.w	r2, r3, #15
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40023c00 	.word	0x40023c00

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b0ae      	sub	sp, #184	@ 0xb8
 80045b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d6:	4bcb      	ldr	r3, [pc, #812]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	f200 8206 	bhi.w	80049f0 <HAL_RCC_GetSysClockFreq+0x440>
 80045e4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004621 	.word	0x08004621
 80045f0:	080049f1 	.word	0x080049f1
 80045f4:	080049f1 	.word	0x080049f1
 80045f8:	080049f1 	.word	0x080049f1
 80045fc:	08004629 	.word	0x08004629
 8004600:	080049f1 	.word	0x080049f1
 8004604:	080049f1 	.word	0x080049f1
 8004608:	080049f1 	.word	0x080049f1
 800460c:	08004631 	.word	0x08004631
 8004610:	080049f1 	.word	0x080049f1
 8004614:	080049f1 	.word	0x080049f1
 8004618:	080049f1 	.word	0x080049f1
 800461c:	08004821 	.word	0x08004821
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4bb9      	ldr	r3, [pc, #740]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x358>)
 8004622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004626:	e1e7      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004628:	4bb8      	ldr	r3, [pc, #736]	@ (800490c <HAL_RCC_GetSysClockFreq+0x35c>)
 800462a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800462e:	e1e3      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004630:	4bb4      	ldr	r3, [pc, #720]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800463c:	4bb1      	ldr	r3, [pc, #708]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d071      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004648:	4bae      	ldr	r3, [pc, #696]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800466a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	0159      	lsls	r1, r3, #5
 800467c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004680:	0150      	lsls	r0, r2, #5
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4621      	mov	r1, r4
 8004688:	1a51      	subs	r1, r2, r1
 800468a:	6439      	str	r1, [r7, #64]	@ 0x40
 800468c:	4629      	mov	r1, r5
 800468e:	eb63 0301 	sbc.w	r3, r3, r1
 8004692:	647b      	str	r3, [r7, #68]	@ 0x44
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046a0:	4649      	mov	r1, r9
 80046a2:	018b      	lsls	r3, r1, #6
 80046a4:	4641      	mov	r1, r8
 80046a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046aa:	4641      	mov	r1, r8
 80046ac:	018a      	lsls	r2, r1, #6
 80046ae:	4641      	mov	r1, r8
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046b4:	4649      	mov	r1, r9
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046c8:	4649      	mov	r1, r9
 80046ca:	00cb      	lsls	r3, r1, #3
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d2:	4641      	mov	r1, r8
 80046d4:	00ca      	lsls	r2, r1, #3
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	4622      	mov	r2, r4
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e2:	462b      	mov	r3, r5
 80046e4:	460a      	mov	r2, r1
 80046e6:	eb42 0303 	adc.w	r3, r2, r3
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046f8:	4629      	mov	r1, r5
 80046fa:	024b      	lsls	r3, r1, #9
 80046fc:	4621      	mov	r1, r4
 80046fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004702:	4621      	mov	r1, r4
 8004704:	024a      	lsls	r2, r1, #9
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004718:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800471c:	f7fc fad6 	bl	8000ccc <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4613      	mov	r3, r2
 8004726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800472a:	e067      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472c:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004738:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800473c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004746:	2300      	movs	r3, #0
 8004748:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800474a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	0159      	lsls	r1, r3, #5
 800475c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004760:	0150      	lsls	r0, r2, #5
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4621      	mov	r1, r4
 8004768:	1a51      	subs	r1, r2, r1
 800476a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800476c:	4629      	mov	r1, r5
 800476e:	eb63 0301 	sbc.w	r3, r3, r1
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004780:	4649      	mov	r1, r9
 8004782:	018b      	lsls	r3, r1, #6
 8004784:	4641      	mov	r1, r8
 8004786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800478a:	4641      	mov	r1, r8
 800478c:	018a      	lsls	r2, r1, #6
 800478e:	4641      	mov	r1, r8
 8004790:	ebb2 0a01 	subs.w	sl, r2, r1
 8004794:	4649      	mov	r1, r9
 8004796:	eb63 0b01 	sbc.w	fp, r3, r1
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ae:	4692      	mov	sl, r2
 80047b0:	469b      	mov	fp, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	eb1a 0303 	adds.w	r3, sl, r3
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	462b      	mov	r3, r5
 80047bc:	eb4b 0303 	adc.w	r3, fp, r3
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047ce:	4629      	mov	r1, r5
 80047d0:	028b      	lsls	r3, r1, #10
 80047d2:	4621      	mov	r1, r4
 80047d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d8:	4621      	mov	r1, r4
 80047da:	028a      	lsls	r2, r1, #10
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047e4:	2200      	movs	r2, #0
 80047e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80047ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047ee:	f7fc fa6d 	bl	8000ccc <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4613      	mov	r3, r2
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047fc:	4b41      	ldr	r3, [pc, #260]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800480e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800481e:	e0eb      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004820:	4b38      	ldr	r3, [pc, #224]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800482c:	4b35      	ldr	r3, [pc, #212]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d06b      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004838:	4b32      	ldr	r3, [pc, #200]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x354>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	2200      	movs	r2, #0
 8004840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004842:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	663b      	str	r3, [r7, #96]	@ 0x60
 800484c:	2300      	movs	r3, #0
 800484e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004850:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004854:	4622      	mov	r2, r4
 8004856:	462b      	mov	r3, r5
 8004858:	f04f 0000 	mov.w	r0, #0
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	0159      	lsls	r1, r3, #5
 8004862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004866:	0150      	lsls	r0, r2, #5
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4621      	mov	r1, r4
 800486e:	1a51      	subs	r1, r2, r1
 8004870:	61b9      	str	r1, [r7, #24]
 8004872:	4629      	mov	r1, r5
 8004874:	eb63 0301 	sbc.w	r3, r3, r1
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004886:	4659      	mov	r1, fp
 8004888:	018b      	lsls	r3, r1, #6
 800488a:	4651      	mov	r1, sl
 800488c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004890:	4651      	mov	r1, sl
 8004892:	018a      	lsls	r2, r1, #6
 8004894:	4651      	mov	r1, sl
 8004896:	ebb2 0801 	subs.w	r8, r2, r1
 800489a:	4659      	mov	r1, fp
 800489c:	eb63 0901 	sbc.w	r9, r3, r1
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b4:	4690      	mov	r8, r2
 80048b6:	4699      	mov	r9, r3
 80048b8:	4623      	mov	r3, r4
 80048ba:	eb18 0303 	adds.w	r3, r8, r3
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	462b      	mov	r3, r5
 80048c2:	eb49 0303 	adc.w	r3, r9, r3
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048d4:	4629      	mov	r1, r5
 80048d6:	024b      	lsls	r3, r1, #9
 80048d8:	4621      	mov	r1, r4
 80048da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048de:	4621      	mov	r1, r4
 80048e0:	024a      	lsls	r2, r1, #9
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ea:	2200      	movs	r2, #0
 80048ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048f4:	f7fc f9ea 	bl	8000ccc <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004902:	e065      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x420>
 8004904:	40023800 	.word	0x40023800
 8004908:	00f42400 	.word	0x00f42400
 800490c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004910:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x458>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	2200      	movs	r2, #0
 8004918:	4618      	mov	r0, r3
 800491a:	4611      	mov	r1, r2
 800491c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004920:	653b      	str	r3, [r7, #80]	@ 0x50
 8004922:	2300      	movs	r3, #0
 8004924:	657b      	str	r3, [r7, #84]	@ 0x54
 8004926:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800492a:	4642      	mov	r2, r8
 800492c:	464b      	mov	r3, r9
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493c:	0150      	lsls	r0, r2, #5
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4641      	mov	r1, r8
 8004944:	1a51      	subs	r1, r2, r1
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	4649      	mov	r1, r9
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800495c:	4659      	mov	r1, fp
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004966:	4651      	mov	r1, sl
 8004968:	018a      	lsls	r2, r1, #6
 800496a:	4651      	mov	r1, sl
 800496c:	1a54      	subs	r4, r2, r1
 800496e:	4659      	mov	r1, fp
 8004970:	eb63 0501 	sbc.w	r5, r3, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	00eb      	lsls	r3, r5, #3
 800497e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004982:	00e2      	lsls	r2, r4, #3
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	4643      	mov	r3, r8
 800498a:	18e3      	adds	r3, r4, r3
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	464b      	mov	r3, r9
 8004990:	eb45 0303 	adc.w	r3, r5, r3
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049a2:	4629      	mov	r1, r5
 80049a4:	028b      	lsls	r3, r1, #10
 80049a6:	4621      	mov	r1, r4
 80049a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ac:	4621      	mov	r1, r4
 80049ae:	028a      	lsls	r2, r1, #10
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049b8:	2200      	movs	r2, #0
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049c2:	f7fc f983 	bl	8000ccc <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4613      	mov	r3, r2
 80049cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x458>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	0f1b      	lsrs	r3, r3, #28
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049ee:	e003      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x45c>)
 80049f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	37b8      	adds	r7, #184	@ 0xb8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	00f42400 	.word	0x00f42400

08004a10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e28d      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8083 	beq.w	8004b36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a30:	4b94      	ldr	r3, [pc, #592]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a3c:	4b91      	ldr	r3, [pc, #580]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a48:	4b8e      	ldr	r3, [pc, #568]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a54:	d00c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a56:	4b8b      	ldr	r3, [pc, #556]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d112      	bne.n	8004a88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b88      	ldr	r3, [pc, #544]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6e:	d10b      	bne.n	8004a88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	4b84      	ldr	r3, [pc, #528]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d05b      	beq.n	8004b34 <HAL_RCC_OscConfig+0x124>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d157      	bne.n	8004b34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e25a      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x90>
 8004a92:	4b7c      	ldr	r3, [pc, #496]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7b      	ldr	r2, [pc, #492]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e01d      	b.n	8004adc <HAL_RCC_OscConfig+0xcc>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0xb4>
 8004aaa:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a75      	ldr	r2, [pc, #468]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4b73      	ldr	r3, [pc, #460]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a72      	ldr	r2, [pc, #456]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_OscConfig+0xcc>
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fd06 	bl	80034f4 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fe fd02 	bl	80034f4 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e21f      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b61      	ldr	r3, [pc, #388]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0xdc>
 8004b0a:	e014      	b.n	8004b36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fcf2 	bl	80034f4 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fe fcee 	bl	80034f4 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	@ 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e20b      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	4b57      	ldr	r3, [pc, #348]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x104>
 8004b32:	e000      	b.n	8004b36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d06f      	beq.n	8004c22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b42:	4b50      	ldr	r3, [pc, #320]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d105      	bne.n	8004b66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b44      	ldr	r3, [pc, #272]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x186>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1d3      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3b      	ldr	r3, [pc, #236]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4937      	ldr	r1, [pc, #220]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_OscConfig+0x278>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fe fc9b 	bl	80034f4 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe fc97 	bl	80034f4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1b4      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4925      	ldr	r1, [pc, #148]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x278>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fc7a 	bl	80034f4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fe fc76 	bl	80034f4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e193      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fc5a 	bl	80034f4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fe fc56 	bl	80034f4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e173      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x234>
 8004c62:	e01b      	b.n	8004c9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_OscConfig+0x27c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fe fc43 	bl	80034f4 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	e00e      	b.n	8004c90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c72:	f7fe fc3f 	bl	80034f4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d907      	bls.n	8004c90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e15c      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
 8004c84:	40023800 	.word	0x40023800
 8004c88:	42470000 	.word	0x42470000
 8004c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b8a      	ldr	r3, [pc, #552]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ea      	bne.n	8004c72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8097 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b83      	ldr	r3, [pc, #524]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cca:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b79      	ldr	r3, [pc, #484]	@ (8004ec0 <HAL_RCC_OscConfig+0x4b0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d118      	bne.n	8004d18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b76      	ldr	r3, [pc, #472]	@ (8004ec0 <HAL_RCC_OscConfig+0x4b0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	@ (8004ec0 <HAL_RCC_OscConfig+0x4b0>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fbff 	bl	80034f4 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fe fbfb 	bl	80034f4 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e118      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec0 <HAL_RCC_OscConfig+0x4b0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x31e>
 8004d20:	4b66      	ldr	r3, [pc, #408]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	4a65      	ldr	r2, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2c:	e01c      	b.n	8004d68 <HAL_RCC_OscConfig+0x358>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x340>
 8004d36:	4b61      	ldr	r3, [pc, #388]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	4a60      	ldr	r2, [pc, #384]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d42:	4b5e      	ldr	r3, [pc, #376]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a5d      	ldr	r2, [pc, #372]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x358>
 8004d50:	4b5a      	ldr	r3, [pc, #360]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4a59      	ldr	r2, [pc, #356]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5c:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a56      	ldr	r2, [pc, #344]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	f023 0304 	bic.w	r3, r3, #4
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fe fbc0 	bl	80034f4 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fe fbbc 	bl	80034f4 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e0d7      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ee      	beq.n	8004d78 <HAL_RCC_OscConfig+0x368>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fbaa 	bl	80034f4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fe fba6 	bl	80034f4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0c1      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dba:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ee      	bne.n	8004da4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80ad 	beq.w	8004f3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de2:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d060      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d145      	bne.n	8004e82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b33      	ldr	r3, [pc, #204]	@ (8004ec4 <HAL_RCC_OscConfig+0x4b4>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fe fb7a 	bl	80034f4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fe fb76 	bl	80034f4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e093      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	071b      	lsls	r3, r3, #28
 8004e4e:	491b      	ldr	r1, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec4 <HAL_RCC_OscConfig+0x4b4>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fe fb4b 	bl	80034f4 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fe fb47 	bl	80034f4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e064      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x452>
 8004e80:	e05c      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_RCC_OscConfig+0x4b4>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe fb34 	bl	80034f4 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe fb30 	bl	80034f4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e04d      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <HAL_RCC_OscConfig+0x4ac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x480>
 8004eae:	e045      	b.n	8004f3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e040      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f48 <HAL_RCC_OscConfig+0x538>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d030      	beq.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d129      	bne.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d122      	bne.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d119      	bne.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	3b01      	subs	r3, #1
 8004f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d10f      	bne.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e041      	b.n	8004fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f839 	bl	8004fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fcce 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04e      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a23      	ldr	r2, [pc, #140]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005042:	d01d      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1f      	ldr	r2, [pc, #124]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	@ (80050cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1b      	ldr	r2, [pc, #108]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <HAL_TIM_Base_Start_IT+0xdc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d111      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d010      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e041      	b.n	8005176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd ff04 	bl	8002f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fc04 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x24>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e022      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d109      	bne.n	80051be <HAL_TIM_PWM_Start+0x3e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	bf14      	ite	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	2300      	moveq	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e015      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x58>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e008      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07c      	b.n	80052ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0x82>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005200:	e013      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0x92>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005210:	e00b      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005220:	e003      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fdd6 	bl	8005de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <HAL_TIM_PWM_Start+0x174>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_PWM_Start+0xcc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <HAL_TIM_PWM_Start+0x178>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_TIM_PWM_Start+0xd0>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_TIM_PWM_Start+0xd2>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <HAL_TIM_PWM_Start+0x174>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005278:	d01d      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1f      	ldr	r2, [pc, #124]	@ (80052fc <HAL_TIM_PWM_Start+0x17c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <HAL_TIM_PWM_Start+0x180>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <HAL_TIM_PWM_Start+0x184>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <HAL_TIM_PWM_Start+0x178>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a18      	ldr	r2, [pc, #96]	@ (8005308 <HAL_TIM_PWM_Start+0x188>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_TIM_PWM_Start+0x18c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d010      	beq.n	80052ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	e007      	b.n	80052ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014000 	.word	0x40014000
 800530c:	40001800 	.word	0x40001800

08005310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e097      	b.n	8005454 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fd fd05 	bl	8002d48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 fae1 	bl	800592c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	4313      	orrs	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053b0:	f023 030c 	bic.w	r3, r3, #12
 80053b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	4313      	orrs	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	011a      	lsls	r2, r3, #4
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	031b      	lsls	r3, r3, #12
 80053e0:	4313      	orrs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4313      	orrs	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005474:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800547c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005484:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005492:	7b7b      	ldrb	r3, [r7, #13]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e069      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	e031      	b.n	8005512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d110      	bne.n	80054d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d102      	bne.n	80054c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ba:	7b3b      	ldrb	r3, [r7, #12]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e055      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054d4:	e01d      	b.n	8005512 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	7b7b      	ldrb	r3, [r7, #13]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054e8:	7b3b      	ldrb	r3, [r7, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e03e      	b.n	8005570 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_TIM_Encoder_Start+0xc4>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d008      	beq.n	8005530 <HAL_TIM_Encoder_Start+0xd4>
 800551e:	e00f      	b.n	8005540 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fc5b 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 800552e:	e016      	b.n	800555e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	2104      	movs	r1, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fc53 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 800553e:	e00e      	b.n	800555e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2201      	movs	r2, #1
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fc4b 	bl	8005de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2201      	movs	r2, #1
 8005554:	2104      	movs	r1, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fc44 	bl	8005de4 <TIM_CCxChannelCmd>
      break;
 800555c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0202 	mvn.w	r2, #2
 80055ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f994 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f986 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f997 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f96e 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f960 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f971 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d020      	beq.n	8005674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0208 	mvn.w	r2, #8
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2204      	movs	r2, #4
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f948 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f93a 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f94b 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d020      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01b      	beq.n	80056c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f922 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f914 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f925 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fe14 	bl	800230c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fc1a 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8f6 	bl	8005918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0220 	mvn.w	r2, #32
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fbec 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0ae      	b.n	80058d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	f200 809f 	bhi.w	80058c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005786:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080058c5 	.word	0x080058c5
 8005794:	080058c5 	.word	0x080058c5
 8005798:	080058c5 	.word	0x080058c5
 800579c:	08005801 	.word	0x08005801
 80057a0:	080058c5 	.word	0x080058c5
 80057a4:	080058c5 	.word	0x080058c5
 80057a8:	080058c5 	.word	0x080058c5
 80057ac:	08005843 	.word	0x08005843
 80057b0:	080058c5 	.word	0x080058c5
 80057b4:	080058c5 	.word	0x080058c5
 80057b8:	080058c5 	.word	0x080058c5
 80057bc:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f95c 	bl	8005a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e064      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9ac 	bl	8005b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]
      break;
 8005840:	e043      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fa01 	bl	8005c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	61da      	str	r2, [r3, #28]
      break;
 8005880:	e023      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fa55 	bl	8005d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	61da      	str	r2, [r3, #28]
      break;
 80058c2:	e002      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
      break;
 80058c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a46      	ldr	r2, [pc, #280]	@ (8005a58 <TIM_Base_SetConfig+0x12c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a43      	ldr	r2, [pc, #268]	@ (8005a5c <TIM_Base_SetConfig+0x130>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a42      	ldr	r2, [pc, #264]	@ (8005a60 <TIM_Base_SetConfig+0x134>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a41      	ldr	r2, [pc, #260]	@ (8005a64 <TIM_Base_SetConfig+0x138>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a40      	ldr	r2, [pc, #256]	@ (8005a68 <TIM_Base_SetConfig+0x13c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a35      	ldr	r2, [pc, #212]	@ (8005a58 <TIM_Base_SetConfig+0x12c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d027      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a32      	ldr	r2, [pc, #200]	@ (8005a5c <TIM_Base_SetConfig+0x130>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d023      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a31      	ldr	r2, [pc, #196]	@ (8005a60 <TIM_Base_SetConfig+0x134>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a30      	ldr	r2, [pc, #192]	@ (8005a64 <TIM_Base_SetConfig+0x138>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005a68 <TIM_Base_SetConfig+0x13c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a6c <TIM_Base_SetConfig+0x140>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a70 <TIM_Base_SetConfig+0x144>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <TIM_Base_SetConfig+0x148>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a78 <TIM_Base_SetConfig+0x14c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a7c <TIM_Base_SetConfig+0x150>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a29      	ldr	r2, [pc, #164]	@ (8005a80 <TIM_Base_SetConfig+0x154>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <TIM_Base_SetConfig+0x12c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a12      	ldr	r2, [pc, #72]	@ (8005a68 <TIM_Base_SetConfig+0x13c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d105      	bne.n	8005a4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	611a      	str	r2, [r3, #16]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40010400 	.word	0x40010400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800
 8005a78:	40001800 	.word	0x40001800
 8005a7c:	40001c00 	.word	0x40001c00
 8005a80:	40002000 	.word	0x40002000

08005a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f023 0201 	bic.w	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 0302 	bic.w	r3, r3, #2
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <TIM_OC1_SetConfig+0xd8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC1_SetConfig+0x64>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b60 <TIM_OC1_SetConfig+0xdc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10c      	bne.n	8005b02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0308 	bic.w	r3, r3, #8
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a15      	ldr	r2, [pc, #84]	@ (8005b5c <TIM_OC1_SetConfig+0xd8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC1_SetConfig+0x8e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a14      	ldr	r2, [pc, #80]	@ (8005b60 <TIM_OC1_SetConfig+0xdc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d111      	bne.n	8005b36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	621a      	str	r2, [r3, #32]
}
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40010400 	.word	0x40010400

08005b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a22      	ldr	r2, [pc, #136]	@ (8005c48 <TIM_OC2_SetConfig+0xe4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0x68>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a21      	ldr	r2, [pc, #132]	@ (8005c4c <TIM_OC2_SetConfig+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <TIM_OC2_SetConfig+0xe4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC2_SetConfig+0x94>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <TIM_OC2_SetConfig+0xe8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400

08005c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	@ (8005d30 <TIM_OC3_SetConfig+0xe0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC3_SetConfig+0x66>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	@ (8005d34 <TIM_OC3_SetConfig+0xe4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10d      	bne.n	8005cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <TIM_OC3_SetConfig+0xe0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x92>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <TIM_OC3_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d113      	bne.n	8005d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a12      	ldr	r2, [pc, #72]	@ (8005ddc <TIM_OC4_SetConfig+0xa4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC4_SetConfig+0x68>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a11      	ldr	r2, [pc, #68]	@ (8005de0 <TIM_OC4_SetConfig+0xa8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e05a      	b.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e94:	d01d      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1a      	ldr	r2, [pc, #104]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10c      	bne.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40001800 	.word	0x40001800

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e042      	b.n	8005fe8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fd f89a 	bl	80030b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	@ 0x24
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 ffc9 	bl	8006f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	@ 0x30
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b20      	cmp	r3, #32
 8006008:	d156      	bne.n	80060b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_UART_Transmit_DMA+0x26>
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e04f      	b.n	80060ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2221      	movs	r2, #33	@ 0x21
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	4a21      	ldr	r2, [pc, #132]	@ (80060c4 <HAL_UART_Transmit_DMA+0xd4>)
 8006040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <HAL_UART_Transmit_DMA+0xd8>)
 8006048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <HAL_UART_Transmit_DMA+0xdc>)
 8006050:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	2200      	movs	r2, #0
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	6819      	ldr	r1, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	461a      	mov	r2, r3
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	f7fd fbff 	bl	8003874 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800607e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	617b      	str	r3, [r7, #20]
   return(result);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80060a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	@ 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	080067b9 	.word	0x080067b9
 80060c8:	08006853 	.word	0x08006853
 80060cc:	080069d7 	.word	0x080069d7

080060d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	4613      	mov	r3, r2
 80060dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d112      	bne.n	8006110 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_UART_Receive_DMA+0x26>
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e00b      	b.n	8006112 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	461a      	mov	r2, r3
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fcb0 	bl	8006a6c <UART_Start_Receive_DMA>
 800610c:	4603      	mov	r3, r0
 800610e:	e000      	b.n	8006112 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b090      	sub	sp, #64	@ 0x40
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006122:	2300      	movs	r3, #0
 8006124:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	2b80      	cmp	r3, #128	@ 0x80
 8006132:	bf0c      	ite	eq
 8006134:	2301      	moveq	r3, #1
 8006136:	2300      	movne	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b21      	cmp	r3, #33	@ 0x21
 8006146:	d128      	bne.n	800619a <HAL_UART_DMAStop+0x80>
 8006148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d025      	beq.n	800619a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800616e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd fbc8 	bl	8003924 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fd03 	bl	8006ba0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b22      	cmp	r3, #34	@ 0x22
 80061ba:	d128      	bne.n	800620e <HAL_UART_DMAStop+0xf4>
 80061bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d025      	beq.n	800620e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061e2:	61fa      	str	r2, [r7, #28]
 80061e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	69b9      	ldr	r1, [r7, #24]
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	617b      	str	r3, [r7, #20]
   return(result);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	4618      	mov	r0, r3
 8006204:	f7fd fb8e 	bl	8003924 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fcf1 	bl	8006bf0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3740      	adds	r7, #64	@ 0x40
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b0ba      	sub	sp, #232	@ 0xe8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fd99 	bl	8006dae <UART_Receive_IT>
      return;
 800627c:	e25b      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80de 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80d1 	beq.w	8006444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	f043 0201 	orr.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f043 0202 	orr.w	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
 80062f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006306:	f043 0204 	orr.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 81f2 	beq.w	800672c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fd24 	bl	8006dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <HAL_UART_IRQHandler+0x17a>
 800638a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04f      	beq.n	8006432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fc2c 	bl	8006bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b40      	cmp	r3, #64	@ 0x40
 80063a4:	d141      	bne.n	800642a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	4a7e      	ldr	r2, [pc, #504]	@ (80065f8 <HAL_UART_IRQHandler+0x3e0>)
 8006400:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fafc 	bl	8003a04 <HAL_DMA_Abort_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	e00e      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9b2 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	e00a      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9ae 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e006      	b.n	8006440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9aa 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800643e:	e175      	b.n	800672c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	bf00      	nop
    return;
 8006442:	e173      	b.n	800672c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 814f 	bne.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8148 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8141 	beq.w	80066ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800648a:	2b40      	cmp	r3, #64	@ 0x40
 800648c:	f040 80b6 	bne.w	80065fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800649c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8145 	beq.w	8006730 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f080 813e 	bcs.w	8006730 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c6:	f000 8088 	beq.w	80065da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006502:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800650e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1d9      	bne.n	80064ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800653a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800653e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006542:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800654c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e1      	bne.n	8006516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006576:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006578:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800657c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e3      	bne.n	8006552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e3      	bne.n	8006598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd f9a5 	bl	8003924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d5 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f6:	e09b      	b.n	8006730 <HAL_UART_IRQHandler+0x518>
 80065f8:	08006cb7 	.word	0x08006cb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006604:	b29b      	uxth	r3, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808e 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8089 	beq.w	8006734 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006646:	647a      	str	r2, [r7, #68]	@ 0x44
 8006648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800664c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e3      	bne.n	8006622 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	623b      	str	r3, [r7, #32]
   return(result);
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800667e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f85b 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ea:	e023      	b.n	8006734 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 faea 	bl	8006cde <UART_Transmit_IT>
    return;
 800670a:	e014      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb2a 	bl	8006d7e <UART_EndTransmit_IT>
    return;
 800672a:	e004      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
    return;
 800672c:	bf00      	nop
 800672e:	e002      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_UART_IRQHandler+0x51e>
      return;
 8006734:	bf00      	nop
  }
}
 8006736:	37e8      	adds	r7, #232	@ 0xe8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b090      	sub	sp, #64	@ 0x40
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d137      	bne.n	8006844 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80067d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d6:	2200      	movs	r2, #0
 80067d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3314      	adds	r3, #20
 80067f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80067fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800680e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	60fb      	str	r3, [r7, #12]
   return(result);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
 8006826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800682e:	61fa      	str	r2, [r7, #28]
 8006830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	617b      	str	r3, [r7, #20]
   return(result);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006842:	e002      	b.n	800684a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006844:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006846:	f7ff ff79 	bl	800673c <HAL_UART_TxCpltCallback>
}
 800684a:	bf00      	nop
 800684c:	3740      	adds	r7, #64	@ 0x40
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff ff75 	bl	8006750 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b09c      	sub	sp, #112	@ 0x70
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d172      	bne.n	8006970 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800688a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688c:	2200      	movs	r2, #0
 800688e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	667b      	str	r3, [r7, #100]	@ 0x64
 80068dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80068e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3314      	adds	r3, #20
 80068fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	623b      	str	r3, [r7, #32]
   return(result);
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800690e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3314      	adds	r3, #20
 8006916:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006918:	633a      	str	r2, [r7, #48]	@ 0x30
 800691a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800691e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800692c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800692e:	2220      	movs	r2, #32
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	2b01      	cmp	r3, #1
 800693a:	d119      	bne.n	8006970 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	60fb      	str	r3, [r7, #12]
   return(result);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0310 	bic.w	r3, r3, #16
 8006952:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800695c:	61fa      	str	r2, [r7, #28]
 800695e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	69b9      	ldr	r1, [r7, #24]
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	617b      	str	r3, [r7, #20]
   return(result);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e5      	bne.n	800693c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006972:	2200      	movs	r2, #0
 8006974:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697a:	2b01      	cmp	r3, #1
 800697c:	d106      	bne.n	800698c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800697e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006982:	4619      	mov	r1, r3
 8006984:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006986:	f7ff ff0b 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800698a:	e002      	b.n	8006992 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800698c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800698e:	f7ff fee9 	bl	8006764 <HAL_UART_RxCpltCallback>
}
 8006992:	bf00      	nop
 8006994:	3770      	adds	r7, #112	@ 0x70
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d108      	bne.n	80069c8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff feed 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069c6:	e002      	b.n	80069ce <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff fed5 	bl	8006778 <HAL_UART_RxHalfCpltCallback>
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b80      	cmp	r3, #128	@ 0x80
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b21      	cmp	r3, #33	@ 0x21
 8006a08:	d108      	bne.n	8006a1c <UART_DMAError+0x46>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	f000 f8c2 	bl	8006ba0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b22      	cmp	r3, #34	@ 0x22
 8006a3c:	d108      	bne.n	8006a50 <UART_DMAError+0x7a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006a4a:	68b8      	ldr	r0, [r7, #8]
 8006a4c:	f000 f8d0 	bl	8006bf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5c:	68b8      	ldr	r0, [r7, #8]
 8006a5e:	f7ff fe95 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b098      	sub	sp, #96	@ 0x60
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2222      	movs	r2, #34	@ 0x22
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a98:	4a3e      	ldr	r2, [pc, #248]	@ (8006b94 <UART_Start_Receive_DMA+0x128>)
 8006a9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8006b98 <UART_Start_Receive_DMA+0x12c>)
 8006aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8006b9c <UART_Start_Receive_DMA+0x130>)
 8006aaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f7fc fed2 	bl	8003874 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d019      	beq.n	8006b22 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b42:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	617b      	str	r3, [r7, #20]
   return(result);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3314      	adds	r3, #20
 8006b74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b76:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6a39      	ldr	r1, [r7, #32]
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3760      	adds	r7, #96	@ 0x60
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	0800686f 	.word	0x0800686f
 8006b98:	0800699b 	.word	0x0800699b
 8006b9c:	080069d7 	.word	0x080069d7

08006ba0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	@ 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	61ba      	str	r2, [r7, #24]
 8006bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6979      	ldr	r1, [r7, #20]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006be4:	bf00      	nop
 8006be6:	3724      	adds	r7, #36	@ 0x24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b095      	sub	sp, #84	@ 0x54
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c18:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3314      	adds	r3, #20
 8006c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3314      	adds	r3, #20
 8006c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e5      	bne.n	8006c2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d119      	bne.n	8006c9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f023 0310 	bic.w	r3, r3, #16
 8006c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c88:	61ba      	str	r2, [r7, #24]
 8006c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	613b      	str	r3, [r7, #16]
   return(result);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006caa:	bf00      	nop
 8006cac:	3754      	adds	r7, #84	@ 0x54
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff fd5b 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b21      	cmp	r3, #33	@ 0x21
 8006cf0:	d13e      	bne.n	8006d70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cfa:	d114      	bne.n	8006d26 <UART_Transmit_IT+0x48>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d110      	bne.n	8006d26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	1c9a      	adds	r2, r3, #2
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	621a      	str	r2, [r3, #32]
 8006d24:	e008      	b.n	8006d38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6211      	str	r1, [r2, #32]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4619      	mov	r1, r3
 8006d46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10f      	bne.n	8006d6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fccc 	bl	800673c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b08c      	sub	sp, #48	@ 0x30
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b22      	cmp	r3, #34	@ 0x22
 8006dc0:	f040 80ae 	bne.w	8006f20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dcc:	d117      	bne.n	8006dfe <UART_Receive_IT+0x50>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d113      	bne.n	8006dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dfc:	e026      	b.n	8006e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e10:	d007      	beq.n	8006e22 <UART_Receive_IT+0x74>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <UART_Receive_IT+0x82>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e008      	b.n	8006e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d15d      	bne.n	8006f1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0220 	bic.w	r2, r2, #32
 8006e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d135      	bne.n	8006f12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ecc:	623a      	str	r2, [r7, #32]
 8006ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	6a3a      	ldr	r2, [r7, #32]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d10a      	bne.n	8006f04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fc48 	bl	80067a0 <HAL_UARTEx_RxEventCallback>
 8006f10:	e002      	b.n	8006f18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fc26 	bl	8006764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e002      	b.n	8006f22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3730      	adds	r7, #48	@ 0x30
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f30:	b0c0      	sub	sp, #256	@ 0x100
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	68d9      	ldr	r1, [r3, #12]
 8006f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	ea40 0301 	orr.w	r3, r0, r1
 8006f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f84:	f021 010c 	bic.w	r1, r1, #12
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f92:	430b      	orrs	r3, r1
 8006f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa6:	6999      	ldr	r1, [r3, #24]
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	ea40 0301 	orr.w	r3, r0, r1
 8006fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b8f      	ldr	r3, [pc, #572]	@ (80071f8 <UART_SetConfig+0x2cc>)
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d005      	beq.n	8006fcc <UART_SetConfig+0xa0>
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80071fc <UART_SetConfig+0x2d0>)
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d104      	bne.n	8006fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fcc:	f7fd faaa 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8006fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fd4:	e003      	b.n	8006fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fd6:	f7fd fa91 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8006fda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe8:	f040 810c 	bne.w	8007204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ffe:	4622      	mov	r2, r4
 8007000:	462b      	mov	r3, r5
 8007002:	1891      	adds	r1, r2, r2
 8007004:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007006:	415b      	adcs	r3, r3
 8007008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800700a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800700e:	4621      	mov	r1, r4
 8007010:	eb12 0801 	adds.w	r8, r2, r1
 8007014:	4629      	mov	r1, r5
 8007016:	eb43 0901 	adc.w	r9, r3, r1
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800702a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800702e:	4690      	mov	r8, r2
 8007030:	4699      	mov	r9, r3
 8007032:	4623      	mov	r3, r4
 8007034:	eb18 0303 	adds.w	r3, r8, r3
 8007038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800703c:	462b      	mov	r3, r5
 800703e:	eb49 0303 	adc.w	r3, r9, r3
 8007042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007052:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800705a:	460b      	mov	r3, r1
 800705c:	18db      	adds	r3, r3, r3
 800705e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007060:	4613      	mov	r3, r2
 8007062:	eb42 0303 	adc.w	r3, r2, r3
 8007066:	657b      	str	r3, [r7, #84]	@ 0x54
 8007068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800706c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007070:	f7f9 fe2c 	bl	8000ccc <__aeabi_uldivmod>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4b61      	ldr	r3, [pc, #388]	@ (8007200 <UART_SetConfig+0x2d4>)
 800707a:	fba3 2302 	umull	r2, r3, r3, r2
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	011c      	lsls	r4, r3, #4
 8007082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007086:	2200      	movs	r2, #0
 8007088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800708c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	1891      	adds	r1, r2, r2
 800709a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800709c:	415b      	adcs	r3, r3
 800709e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070a4:	4641      	mov	r1, r8
 80070a6:	eb12 0a01 	adds.w	sl, r2, r1
 80070aa:	4649      	mov	r1, r9
 80070ac:	eb43 0b01 	adc.w	fp, r3, r1
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	f04f 0300 	mov.w	r3, #0
 80070b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070c4:	4692      	mov	sl, r2
 80070c6:	469b      	mov	fp, r3
 80070c8:	4643      	mov	r3, r8
 80070ca:	eb1a 0303 	adds.w	r3, sl, r3
 80070ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070d2:	464b      	mov	r3, r9
 80070d4:	eb4b 0303 	adc.w	r3, fp, r3
 80070d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070f0:	460b      	mov	r3, r1
 80070f2:	18db      	adds	r3, r3, r3
 80070f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070f6:	4613      	mov	r3, r2
 80070f8:	eb42 0303 	adc.w	r3, r2, r3
 80070fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007106:	f7f9 fde1 	bl	8000ccc <__aeabi_uldivmod>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4611      	mov	r1, r2
 8007110:	4b3b      	ldr	r3, [pc, #236]	@ (8007200 <UART_SetConfig+0x2d4>)
 8007112:	fba3 2301 	umull	r2, r3, r3, r1
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	2264      	movs	r2, #100	@ 0x64
 800711a:	fb02 f303 	mul.w	r3, r2, r3
 800711e:	1acb      	subs	r3, r1, r3
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007126:	4b36      	ldr	r3, [pc, #216]	@ (8007200 <UART_SetConfig+0x2d4>)
 8007128:	fba3 2302 	umull	r2, r3, r3, r2
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007134:	441c      	add	r4, r3
 8007136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007140:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007148:	4642      	mov	r2, r8
 800714a:	464b      	mov	r3, r9
 800714c:	1891      	adds	r1, r2, r2
 800714e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007150:	415b      	adcs	r3, r3
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007158:	4641      	mov	r1, r8
 800715a:	1851      	adds	r1, r2, r1
 800715c:	6339      	str	r1, [r7, #48]	@ 0x30
 800715e:	4649      	mov	r1, r9
 8007160:	414b      	adcs	r3, r1
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007170:	4659      	mov	r1, fp
 8007172:	00cb      	lsls	r3, r1, #3
 8007174:	4651      	mov	r1, sl
 8007176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800717a:	4651      	mov	r1, sl
 800717c:	00ca      	lsls	r2, r1, #3
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	4603      	mov	r3, r0
 8007184:	4642      	mov	r2, r8
 8007186:	189b      	adds	r3, r3, r2
 8007188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800718c:	464b      	mov	r3, r9
 800718e:	460a      	mov	r2, r1
 8007190:	eb42 0303 	adc.w	r3, r2, r3
 8007194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071ac:	460b      	mov	r3, r1
 80071ae:	18db      	adds	r3, r3, r3
 80071b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071b2:	4613      	mov	r3, r2
 80071b4:	eb42 0303 	adc.w	r3, r2, r3
 80071b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071c2:	f7f9 fd83 	bl	8000ccc <__aeabi_uldivmod>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <UART_SetConfig+0x2d4>)
 80071cc:	fba3 1302 	umull	r1, r3, r3, r2
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	2164      	movs	r1, #100	@ 0x64
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	3332      	adds	r3, #50	@ 0x32
 80071de:	4a08      	ldr	r2, [pc, #32]	@ (8007200 <UART_SetConfig+0x2d4>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	f003 0207 	and.w	r2, r3, #7
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4422      	add	r2, r4
 80071f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071f4:	e106      	b.n	8007404 <UART_SetConfig+0x4d8>
 80071f6:	bf00      	nop
 80071f8:	40011000 	.word	0x40011000
 80071fc:	40011400 	.word	0x40011400
 8007200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007208:	2200      	movs	r2, #0
 800720a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800720e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007216:	4642      	mov	r2, r8
 8007218:	464b      	mov	r3, r9
 800721a:	1891      	adds	r1, r2, r2
 800721c:	6239      	str	r1, [r7, #32]
 800721e:	415b      	adcs	r3, r3
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
 8007222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007226:	4641      	mov	r1, r8
 8007228:	1854      	adds	r4, r2, r1
 800722a:	4649      	mov	r1, r9
 800722c:	eb43 0501 	adc.w	r5, r3, r1
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	00eb      	lsls	r3, r5, #3
 800723a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723e:	00e2      	lsls	r2, r4, #3
 8007240:	4614      	mov	r4, r2
 8007242:	461d      	mov	r5, r3
 8007244:	4643      	mov	r3, r8
 8007246:	18e3      	adds	r3, r4, r3
 8007248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800724c:	464b      	mov	r3, r9
 800724e:	eb45 0303 	adc.w	r3, r5, r3
 8007252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007272:	4629      	mov	r1, r5
 8007274:	008b      	lsls	r3, r1, #2
 8007276:	4621      	mov	r1, r4
 8007278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800727c:	4621      	mov	r1, r4
 800727e:	008a      	lsls	r2, r1, #2
 8007280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007284:	f7f9 fd22 	bl	8000ccc <__aeabi_uldivmod>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4b60      	ldr	r3, [pc, #384]	@ (8007410 <UART_SetConfig+0x4e4>)
 800728e:	fba3 2302 	umull	r2, r3, r3, r2
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	011c      	lsls	r4, r3, #4
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072a8:	4642      	mov	r2, r8
 80072aa:	464b      	mov	r3, r9
 80072ac:	1891      	adds	r1, r2, r2
 80072ae:	61b9      	str	r1, [r7, #24]
 80072b0:	415b      	adcs	r3, r3
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072b8:	4641      	mov	r1, r8
 80072ba:	1851      	adds	r1, r2, r1
 80072bc:	6139      	str	r1, [r7, #16]
 80072be:	4649      	mov	r1, r9
 80072c0:	414b      	adcs	r3, r1
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072d0:	4659      	mov	r1, fp
 80072d2:	00cb      	lsls	r3, r1, #3
 80072d4:	4651      	mov	r1, sl
 80072d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072da:	4651      	mov	r1, sl
 80072dc:	00ca      	lsls	r2, r1, #3
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	4642      	mov	r2, r8
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072ec:	464b      	mov	r3, r9
 80072ee:	460a      	mov	r2, r1
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007302:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007310:	4649      	mov	r1, r9
 8007312:	008b      	lsls	r3, r1, #2
 8007314:	4641      	mov	r1, r8
 8007316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800731a:	4641      	mov	r1, r8
 800731c:	008a      	lsls	r2, r1, #2
 800731e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007322:	f7f9 fcd3 	bl	8000ccc <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4611      	mov	r1, r2
 800732c:	4b38      	ldr	r3, [pc, #224]	@ (8007410 <UART_SetConfig+0x4e4>)
 800732e:	fba3 2301 	umull	r2, r3, r3, r1
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2264      	movs	r2, #100	@ 0x64
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	3332      	adds	r3, #50	@ 0x32
 8007340:	4a33      	ldr	r2, [pc, #204]	@ (8007410 <UART_SetConfig+0x4e4>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800734c:	441c      	add	r4, r3
 800734e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007352:	2200      	movs	r2, #0
 8007354:	673b      	str	r3, [r7, #112]	@ 0x70
 8007356:	677a      	str	r2, [r7, #116]	@ 0x74
 8007358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	1891      	adds	r1, r2, r2
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	415b      	adcs	r3, r3
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800736c:	4641      	mov	r1, r8
 800736e:	1851      	adds	r1, r2, r1
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	4649      	mov	r1, r9
 8007374:	414b      	adcs	r3, r1
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007384:	4659      	mov	r1, fp
 8007386:	00cb      	lsls	r3, r1, #3
 8007388:	4651      	mov	r1, sl
 800738a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800738e:	4651      	mov	r1, sl
 8007390:	00ca      	lsls	r2, r1, #3
 8007392:	4610      	mov	r0, r2
 8007394:	4619      	mov	r1, r3
 8007396:	4603      	mov	r3, r0
 8007398:	4642      	mov	r2, r8
 800739a:	189b      	adds	r3, r3, r2
 800739c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800739e:	464b      	mov	r3, r9
 80073a0:	460a      	mov	r2, r1
 80073a2:	eb42 0303 	adc.w	r3, r2, r3
 80073a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073c0:	4649      	mov	r1, r9
 80073c2:	008b      	lsls	r3, r1, #2
 80073c4:	4641      	mov	r1, r8
 80073c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ca:	4641      	mov	r1, r8
 80073cc:	008a      	lsls	r2, r1, #2
 80073ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073d2:	f7f9 fc7b 	bl	8000ccc <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <UART_SetConfig+0x4e4>)
 80073dc:	fba3 1302 	umull	r1, r3, r3, r2
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	2164      	movs	r1, #100	@ 0x64
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	3332      	adds	r3, #50	@ 0x32
 80073ee:	4a08      	ldr	r2, [pc, #32]	@ (8007410 <UART_SetConfig+0x4e4>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f003 020f 	and.w	r2, r3, #15
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4422      	add	r2, r4
 8007402:	609a      	str	r2, [r3, #8]
}
 8007404:	bf00      	nop
 8007406:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800740a:	46bd      	mov	sp, r7
 800740c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007410:	51eb851f 	.word	0x51eb851f

08007414 <__NVIC_SetPriority>:
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007424:	2b00      	cmp	r3, #0
 8007426:	db0a      	blt.n	800743e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	490c      	ldr	r1, [pc, #48]	@ (8007460 <__NVIC_SetPriority+0x4c>)
 800742e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007432:	0112      	lsls	r2, r2, #4
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	440b      	add	r3, r1
 8007438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800743c:	e00a      	b.n	8007454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4908      	ldr	r1, [pc, #32]	@ (8007464 <__NVIC_SetPriority+0x50>)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	3b04      	subs	r3, #4
 800744c:	0112      	lsls	r2, r2, #4
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	440b      	add	r3, r1
 8007452:	761a      	strb	r2, [r3, #24]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	e000e100 	.word	0xe000e100
 8007464:	e000ed00 	.word	0xe000ed00

08007468 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <SysTick_Handler+0x1c>)
 800746e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007470:	f001 fdb4 	bl	8008fdc <xTaskGetSchedulerState>
 8007474:	4603      	mov	r3, r0
 8007476:	2b01      	cmp	r3, #1
 8007478:	d001      	beq.n	800747e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800747a:	f002 fbad 	bl	8009bd8 <xPortSysTickHandler>
  }
}
 800747e:	bf00      	nop
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	e000e010 	.word	0xe000e010

08007488 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800748c:	2100      	movs	r1, #0
 800748e:	f06f 0004 	mvn.w	r0, #4
 8007492:	f7ff ffbf 	bl	8007414 <__NVIC_SetPriority>
#endif
}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a2:	f3ef 8305 	mrs	r3, IPSR
 80074a6:	603b      	str	r3, [r7, #0]
  return(result);
 80074a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074ae:	f06f 0305 	mvn.w	r3, #5
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e00c      	b.n	80074d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074b6:	4b0a      	ldr	r3, [pc, #40]	@ (80074e0 <osKernelInitialize+0x44>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <osKernelInitialize+0x44>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	e002      	b.n	80074d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074d0:	687b      	ldr	r3, [r7, #4]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20004e40 	.word	0x20004e40

080074e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ea:	f3ef 8305 	mrs	r3, IPSR
 80074ee:	603b      	str	r3, [r7, #0]
  return(result);
 80074f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80074f6:	f06f 0305 	mvn.w	r3, #5
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	e010      	b.n	8007520 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074fe:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <osKernelStart+0x48>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d109      	bne.n	800751a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007506:	f7ff ffbf 	bl	8007488 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800750a:	4b08      	ldr	r3, [pc, #32]	@ (800752c <osKernelStart+0x48>)
 800750c:	2202      	movs	r2, #2
 800750e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007510:	f001 f8ee 	bl	80086f0 <vTaskStartScheduler>
      stat = osOK;
 8007514:	2300      	movs	r3, #0
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	e002      	b.n	8007520 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800751e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007520:	687b      	ldr	r3, [r7, #4]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20004e40 	.word	0x20004e40

08007530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	@ 0x38
 8007534:	af04      	add	r7, sp, #16
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007540:	f3ef 8305 	mrs	r3, IPSR
 8007544:	617b      	str	r3, [r7, #20]
  return(result);
 8007546:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007548:	2b00      	cmp	r3, #0
 800754a:	d17e      	bne.n	800764a <osThreadNew+0x11a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d07b      	beq.n	800764a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007552:	2380      	movs	r3, #128	@ 0x80
 8007554:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007556:	2318      	movs	r3, #24
 8007558:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800755e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007562:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d045      	beq.n	80075f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <osThreadNew+0x48>
        name = attr->name;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <osThreadNew+0x6e>
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b38      	cmp	r3, #56	@ 0x38
 8007590:	d805      	bhi.n	800759e <osThreadNew+0x6e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <osThreadNew+0x72>
        return (NULL);
 800759e:	2300      	movs	r3, #0
 80075a0:	e054      	b.n	800764c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00e      	beq.n	80075d8 <osThreadNew+0xa8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b5b      	cmp	r3, #91	@ 0x5b
 80075c0:	d90a      	bls.n	80075d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d006      	beq.n	80075d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <osThreadNew+0xa8>
        mem = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e010      	b.n	80075fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <osThreadNew+0xca>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d108      	bne.n	80075fa <osThreadNew+0xca>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <osThreadNew+0xca>
          mem = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	e001      	b.n	80075fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d110      	bne.n	8007622 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fe1a 	bl	8008250 <xTaskCreateStatic>
 800761c:	4603      	mov	r3, r0
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	e013      	b.n	800764a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d110      	bne.n	800764a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	b29a      	uxth	r2, r3
 800762c:	f107 0310 	add.w	r3, r7, #16
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fe68 	bl	8008310 <xTaskCreate>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d001      	beq.n	800764a <osThreadNew+0x11a>
            hTask = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800764a:	693b      	ldr	r3, [r7, #16]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	@ 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765c:	f3ef 8305 	mrs	r3, IPSR
 8007660:	60bb      	str	r3, [r7, #8]
  return(result);
 8007662:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <osDelay+0x1c>
    stat = osErrorISR;
 8007668:	f06f 0305 	mvn.w	r3, #5
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e007      	b.n	8007680 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <osDelay+0x2c>
      vTaskDelay(ticks);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f802 	bl	8008684 <vTaskDelay>
    }
  }

  return (stat);
 8007680:	68fb      	ldr	r3, [r7, #12]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a07      	ldr	r2, [pc, #28]	@ (80076b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800769c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4a06      	ldr	r2, [pc, #24]	@ (80076bc <vApplicationGetIdleTaskMemory+0x30>)
 80076a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2280      	movs	r2, #128	@ 0x80
 80076a8:	601a      	str	r2, [r3, #0]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20004e44 	.word	0x20004e44
 80076bc:	20004ea0 	.word	0x20004ea0

080076c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a07      	ldr	r2, [pc, #28]	@ (80076ec <vApplicationGetTimerTaskMemory+0x2c>)
 80076d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4a06      	ldr	r2, [pc, #24]	@ (80076f0 <vApplicationGetTimerTaskMemory+0x30>)
 80076d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	200050a0 	.word	0x200050a0
 80076f0:	200050fc 	.word	0x200050fc

080076f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f103 0208 	add.w	r2, r3, #8
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800770c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f103 0208 	add.w	r2, r3, #8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f103 0208 	add.w	r2, r3, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
}
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ac:	d103      	bne.n	80077b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e00c      	b.n	80077d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3308      	adds	r3, #8
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e002      	b.n	80077c4 <vListInsert+0x2e>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d2f6      	bcs.n	80077be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	601a      	str	r2, [r3, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6892      	ldr	r2, [r2, #8]
 800781e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6852      	ldr	r2, [r2, #4]
 8007828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d103      	bne.n	800783c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	1e5a      	subs	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xQueueGenericReset+0x2c>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60bb      	str	r3, [r7, #8]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007888:	f002 f916 	bl	8009ab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b8:	3b01      	subs	r3, #1
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	441a      	add	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	22ff      	movs	r2, #255	@ 0xff
 80078cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	22ff      	movs	r2, #255	@ 0xff
 80078d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d114      	bne.n	8007908 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01a      	beq.n	800791c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3310      	adds	r3, #16
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 f98e 	bl	8008c0c <xTaskRemoveFromEventList>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d012      	beq.n	800791c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <xQueueGenericReset+0xd0>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	e009      	b.n	800791c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3310      	adds	r3, #16
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff fef1 	bl	80076f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3324      	adds	r3, #36	@ 0x24
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff feec 	bl	80076f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800791c:	f002 f8fe 	bl	8009b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007920:	2301      	movs	r3, #1
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	@ 0x38
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	e7fd      	b.n	8007976 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <xQueueGenericCreateStatic+0x56>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <xQueueGenericCreateStatic+0x5a>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xQueueGenericCreateStatic+0x5c>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10b      	bne.n	80079a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	623b      	str	r3, [r7, #32]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d102      	bne.n	80079b4 <xQueueGenericCreateStatic+0x84>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <xQueueGenericCreateStatic+0x88>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <xQueueGenericCreateStatic+0x8a>
 80079b8:	2300      	movs	r3, #0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079d6:	2350      	movs	r3, #80	@ 0x50
 80079d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b50      	cmp	r3, #80	@ 0x50
 80079de:	d00b      	beq.n	80079f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	61bb      	str	r3, [r7, #24]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00d      	beq.n	8007a20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4613      	mov	r3, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f805 	bl	8007a2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3730      	adds	r7, #48	@ 0x30
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e002      	b.n	8007a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a58:	2101      	movs	r1, #1
 8007a5a:	69b8      	ldr	r0, [r7, #24]
 8007a5c:	f7ff fefe 	bl	800785c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08e      	sub	sp, #56	@ 0x38
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <xQueueGenericSend+0x34>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <xQueueGenericSend+0x42>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueGenericSend+0x46>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueGenericSend+0x48>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10b      	bne.n	8007ad4 <xQueueGenericSend+0x64>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d103      	bne.n	8007ae2 <xQueueGenericSend+0x72>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <xQueueGenericSend+0x76>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <xQueueGenericSend+0x78>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <xQueueGenericSend+0x94>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	623b      	str	r3, [r7, #32]
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b04:	f001 fa6a 	bl	8008fdc <xTaskGetSchedulerState>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <xQueueGenericSend+0xa4>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <xQueueGenericSend+0xa8>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <xQueueGenericSend+0xaa>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <xQueueGenericSend+0xc6>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	61fb      	str	r3, [r7, #28]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b36:	f001 ffbf 	bl	8009ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d302      	bcc.n	8007b4c <xQueueGenericSend+0xdc>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d129      	bne.n	8007ba0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b52:	f000 fa0f 	bl	8007f74 <prvCopyDataToQueue>
 8007b56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d010      	beq.n	8007b82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	3324      	adds	r3, #36	@ 0x24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 f851 	bl	8008c0c <xTaskRemoveFromEventList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d013      	beq.n	8007b98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b70:	4b3f      	ldr	r3, [pc, #252]	@ (8007c70 <xQueueGenericSend+0x200>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	e00a      	b.n	8007b98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b88:	4b39      	ldr	r3, [pc, #228]	@ (8007c70 <xQueueGenericSend+0x200>)
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b98:	f001 ffc0 	bl	8009b1c <vPortExitCritical>
				return pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e063      	b.n	8007c68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ba6:	f001 ffb9 	bl	8009b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e05c      	b.n	8007c68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f8b3 	bl	8008d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc2:	f001 ffab 	bl	8009b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bc6:	f000 fdfb 	bl	80087c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bca:	f001 ff75 	bl	8009ab8 <vPortEnterCritical>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bda:	d103      	bne.n	8007be4 <xQueueGenericSend+0x174>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bf0:	d103      	bne.n	8007bfa <xQueueGenericSend+0x18a>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bfa:	f001 ff8f 	bl	8009b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bfe:	1d3a      	adds	r2, r7, #4
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f8a2 	bl	8008d50 <xTaskCheckForTimeOut>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d124      	bne.n	8007c5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c14:	f000 faa6 	bl	8008164 <prvIsQueueFull>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d018      	beq.n	8007c50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	3310      	adds	r3, #16
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 ff9e 	bl	8008b68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c2e:	f000 fa31 	bl	8008094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c32:	f000 fdd3 	bl	80087dc <xTaskResumeAll>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f af7c 	bne.w	8007b36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <xQueueGenericSend+0x200>)
 8007c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	e772      	b.n	8007b36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c52:	f000 fa1f 	bl	8008094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c56:	f000 fdc1 	bl	80087dc <xTaskResumeAll>
 8007c5a:	e76c      	b.n	8007b36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c5e:	f000 fa19 	bl	8008094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c62:	f000 fdbb 	bl	80087dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3738      	adds	r7, #56	@ 0x38
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b090      	sub	sp, #64	@ 0x40
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <xQueueGenericSendFromISR+0x3e>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <xQueueGenericSendFromISR+0x42>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <xQueueGenericSendFromISR+0x44>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSendFromISR+0x6e>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSendFromISR+0x72>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSendFromISR+0x74>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	623b      	str	r3, [r7, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d04:	f001 ffb8 	bl	8009c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d08:	f3ef 8211 	mrs	r2, BASEPRI
 8007d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	61fa      	str	r2, [r7, #28]
 8007d1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <xQueueGenericSendFromISR+0xc2>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d12f      	bne.n	8007d96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d4c:	f000 f912 	bl	8007f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d58:	d112      	bne.n	8007d80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d016      	beq.n	8007d90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	3324      	adds	r3, #36	@ 0x24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 ff50 	bl	8008c0c <xTaskRemoveFromEventList>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00e      	beq.n	8007d90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e007      	b.n	8007d90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d84:	3301      	adds	r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	b25a      	sxtb	r2, r3
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d90:	2301      	movs	r3, #1
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d94:	e001      	b.n	8007d9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007da4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3740      	adds	r7, #64	@ 0x40
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	@ 0x30
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <xQueueReceive+0x32>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	623b      	str	r3, [r7, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d103      	bne.n	8007df0 <xQueueReceive+0x40>
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <xQueueReceive+0x44>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <xQueueReceive+0x46>
 8007df4:	2300      	movs	r3, #0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <xQueueReceive+0x62>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	61fb      	str	r3, [r7, #28]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e12:	f001 f8e3 	bl	8008fdc <xTaskGetSchedulerState>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <xQueueReceive+0x72>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <xQueueReceive+0x76>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <xQueueReceive+0x78>
 8007e26:	2300      	movs	r3, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <xQueueReceive+0x94>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	61bb      	str	r3, [r7, #24]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e44:	f001 fe38 	bl	8009ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01f      	beq.n	8007e94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e58:	f000 f8f6 	bl	8008048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	1e5a      	subs	r2, r3, #1
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00f      	beq.n	8007e8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	3310      	adds	r3, #16
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fecb 	bl	8008c0c <xTaskRemoveFromEventList>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f70 <xQueueReceive+0x1c0>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e8c:	f001 fe46 	bl	8009b1c <vPortExitCritical>
				return pdPASS;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e069      	b.n	8007f68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e9a:	f001 fe3f 	bl	8009b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e062      	b.n	8007f68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea8:	f107 0310 	add.w	r3, r7, #16
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 ff39 	bl	8008d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb6:	f001 fe31 	bl	8009b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eba:	f000 fc81 	bl	80087c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ebe:	f001 fdfb 	bl	8009ab8 <vPortEnterCritical>
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ece:	d103      	bne.n	8007ed8 <xQueueReceive+0x128>
 8007ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ee4:	d103      	bne.n	8007eee <xQueueReceive+0x13e>
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eee:	f001 fe15 	bl	8009b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef2:	1d3a      	adds	r2, r7, #4
 8007ef4:	f107 0310 	add.w	r3, r7, #16
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 ff28 	bl	8008d50 <xTaskCheckForTimeOut>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d123      	bne.n	8007f4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f08:	f000 f916 	bl	8008138 <prvIsQueueEmpty>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d017      	beq.n	8007f42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f14:	3324      	adds	r3, #36	@ 0x24
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fe24 	bl	8008b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f22:	f000 f8b7 	bl	8008094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f26:	f000 fc59 	bl	80087dc <xTaskResumeAll>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d189      	bne.n	8007e44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <xQueueReceive+0x1c0>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	e780      	b.n	8007e44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f44:	f000 f8a6 	bl	8008094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f48:	f000 fc48 	bl	80087dc <xTaskResumeAll>
 8007f4c:	e77a      	b.n	8007e44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f50:	f000 f8a0 	bl	8008094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f54:	f000 fc42 	bl	80087dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f5a:	f000 f8ed 	bl	8008138 <prvIsQueueEmpty>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f43f af6f 	beq.w	8007e44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3730      	adds	r7, #48	@ 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10d      	bne.n	8007fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d14d      	bne.n	8008036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 f83a 	bl	8009018 <xTaskPriorityDisinherit>
 8007fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	e043      	b.n	8008036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d119      	bne.n	8007fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6858      	ldr	r0, [r3, #4]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	f011 fad3 	bl	801956a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d32b      	bcc.n	8008036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	605a      	str	r2, [r3, #4]
 8007fe6:	e026      	b.n	8008036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68d8      	ldr	r0, [r3, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	f011 fab9 	bl	801956a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	425b      	negs	r3, r3
 8008002:	441a      	add	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d207      	bcs.n	8008024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	425b      	negs	r3, r3
 800801e:	441a      	add	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d105      	bne.n	8008036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	3b01      	subs	r3, #1
 8008034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800803e:	697b      	ldr	r3, [r7, #20]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d018      	beq.n	800808c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008062:	441a      	add	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	d303      	bcc.n	800807c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68d9      	ldr	r1, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	461a      	mov	r2, r3
 8008086:	6838      	ldr	r0, [r7, #0]
 8008088:	f011 fa6f 	bl	801956a <memcpy>
	}
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800809c:	f001 fd0c 	bl	8009ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a8:	e011      	b.n	80080ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d012      	beq.n	80080d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3324      	adds	r3, #36	@ 0x24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fda8 	bl	8008c0c <xTaskRemoveFromEventList>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080c2:	f000 fea9 	bl	8008e18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dce9      	bgt.n	80080aa <prvUnlockQueue+0x16>
 80080d6:	e000      	b.n	80080da <prvUnlockQueue+0x46>
					break;
 80080d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	22ff      	movs	r2, #255	@ 0xff
 80080de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080e2:	f001 fd1b 	bl	8009b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080e6:	f001 fce7 	bl	8009ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080f2:	e011      	b.n	8008118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d012      	beq.n	8008122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3310      	adds	r3, #16
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fd83 	bl	8008c0c <xTaskRemoveFromEventList>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800810c:	f000 fe84 	bl	8008e18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	3b01      	subs	r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dce9      	bgt.n	80080f4 <prvUnlockQueue+0x60>
 8008120:	e000      	b.n	8008124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	22ff      	movs	r2, #255	@ 0xff
 8008128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800812c:	f001 fcf6 	bl	8009b1c <vPortExitCritical>
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008140:	f001 fcba 	bl	8009ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e001      	b.n	8008156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008156:	f001 fce1 	bl	8009b1c <vPortExitCritical>

	return xReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800816c:	f001 fca4 	bl	8009ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008178:	429a      	cmp	r2, r3
 800817a:	d102      	bne.n	8008182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e001      	b.n	8008186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f001 fcc9 	bl	8009b1c <vPortExitCritical>

	return xReturn;
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	e014      	b.n	80081ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081a4:	4a0f      	ldr	r2, [pc, #60]	@ (80081e4 <vQueueAddToRegistry+0x50>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081b0:	490c      	ldr	r1, [pc, #48]	@ (80081e4 <vQueueAddToRegistry+0x50>)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081ba:	4a0a      	ldr	r2, [pc, #40]	@ (80081e4 <vQueueAddToRegistry+0x50>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	4413      	add	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081c6:	e006      	b.n	80081d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b07      	cmp	r3, #7
 80081d2:	d9e7      	bls.n	80081a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	200054fc 	.word	0x200054fc

080081e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081f8:	f001 fc5e 	bl	8009ab8 <vPortEnterCritical>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008202:	b25b      	sxtb	r3, r3
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008208:	d103      	bne.n	8008212 <vQueueWaitForMessageRestricted+0x2a>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008218:	b25b      	sxtb	r3, r3
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800821e:	d103      	bne.n	8008228 <vQueueWaitForMessageRestricted+0x40>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008228:	f001 fc78 	bl	8009b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3324      	adds	r3, #36	@ 0x24
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fcb9 	bl	8008bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008242:	6978      	ldr	r0, [r7, #20]
 8008244:	f7ff ff26 	bl	8008094 <prvUnlockQueue>
	}
 8008248:	bf00      	nop
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	@ 0x38
 8008254:	af04      	add	r7, sp, #16
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	623b      	str	r3, [r7, #32]
}
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	e7fd      	b.n	8008278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	61fb      	str	r3, [r7, #28]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800829a:	235c      	movs	r3, #92	@ 0x5c
 800829c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80082a2:	d00b      	beq.n	80082bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	61bb      	str	r3, [r7, #24]
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	e7fd      	b.n	80082b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01e      	beq.n	8008302 <xTaskCreateStatic+0xb2>
 80082c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01b      	beq.n	8008302 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082dc:	2300      	movs	r3, #0
 80082de:	9303      	str	r3, [sp, #12]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f850 	bl	800839a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082fc:	f000 f8de 	bl	80084bc <prvAddNewTaskToReadyList>
 8008300:	e001      	b.n	8008306 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008306:	697b      	ldr	r3, [r7, #20]
	}
 8008308:	4618      	mov	r0, r3
 800830a:	3728      	adds	r7, #40	@ 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08c      	sub	sp, #48	@ 0x30
 8008314:	af04      	add	r7, sp, #16
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fce9 	bl	8009cfc <pvPortMalloc>
 800832a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008332:	205c      	movs	r0, #92	@ 0x5c
 8008334:	f001 fce2 	bl	8009cfc <pvPortMalloc>
 8008338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	631a      	str	r2, [r3, #48]	@ 0x30
 8008346:	e005      	b.n	8008354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f001 fda5 	bl	8009e98 <vPortFree>
 800834e:	e001      	b.n	8008354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d017      	beq.n	800838a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	2300      	movs	r3, #0
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f80e 	bl	800839a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800837e:	69f8      	ldr	r0, [r7, #28]
 8008380:	f000 f89c 	bl	80084bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008384:	2301      	movs	r3, #1
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e002      	b.n	8008390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800838a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800838e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008390:	69bb      	ldr	r3, [r7, #24]
	}
 8008392:	4618      	mov	r0, r3
 8008394:	3720      	adds	r7, #32
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b088      	sub	sp, #32
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	461a      	mov	r2, r3
 80083b2:	21a5      	movs	r1, #165	@ 0xa5
 80083b4:	f011 f810 	bl	80193d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083c2:	3b01      	subs	r3, #1
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	617b      	str	r3, [r7, #20]
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	e7fd      	b.n	80083f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01f      	beq.n	800843a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083fa:	2300      	movs	r3, #0
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e012      	b.n	8008426 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	7819      	ldrb	r1, [r3, #0]
 8008408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	3334      	adds	r3, #52	@ 0x34
 8008410:	460a      	mov	r2, r1
 8008412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d006      	beq.n	800842e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	3301      	adds	r3, #1
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b0f      	cmp	r3, #15
 800842a:	d9e9      	bls.n	8008400 <prvInitialiseNewTask+0x66>
 800842c:	e000      	b.n	8008430 <prvInitialiseNewTask+0x96>
			{
				break;
 800842e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008438:	e003      	b.n	8008442 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	2b37      	cmp	r3, #55	@ 0x37
 8008446:	d901      	bls.n	800844c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008448:	2337      	movs	r3, #55	@ 0x37
 800844a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008450:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008456:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	2200      	movs	r2, #0
 800845c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	3304      	adds	r3, #4
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff f966 	bl	8007734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	3318      	adds	r3, #24
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff f961 	bl	8007734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008486:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	68f9      	ldr	r1, [r7, #12]
 800849a:	69b8      	ldr	r0, [r7, #24]
 800849c:	f001 f9da 	bl	8009854 <pxPortInitialiseStack>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084b2:	bf00      	nop
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084c4:	f001 faf8 	bl	8009ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084da:	4a2a      	ldr	r2, [pc, #168]	@ (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084e0:	4b27      	ldr	r3, [pc, #156]	@ (8008580 <prvAddNewTaskToReadyList+0xc4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d110      	bne.n	800850a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084e8:	f000 fcba 	bl	8008e60 <prvInitialiseTaskLists>
 80084ec:	e00d      	b.n	800850a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ee:	4b26      	ldr	r3, [pc, #152]	@ (8008588 <prvAddNewTaskToReadyList+0xcc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084f6:	4b23      	ldr	r3, [pc, #140]	@ (8008584 <prvAddNewTaskToReadyList+0xc8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	429a      	cmp	r2, r3
 8008502:	d802      	bhi.n	800850a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008504:	4a1f      	ldr	r2, [pc, #124]	@ (8008584 <prvAddNewTaskToReadyList+0xc8>)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800850a:	4b20      	ldr	r3, [pc, #128]	@ (800858c <prvAddNewTaskToReadyList+0xd0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a1e      	ldr	r2, [pc, #120]	@ (800858c <prvAddNewTaskToReadyList+0xd0>)
 8008512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008514:	4b1d      	ldr	r3, [pc, #116]	@ (800858c <prvAddNewTaskToReadyList+0xd0>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008520:	4b1b      	ldr	r3, [pc, #108]	@ (8008590 <prvAddNewTaskToReadyList+0xd4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d903      	bls.n	8008530 <prvAddNewTaskToReadyList+0x74>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	4a18      	ldr	r2, [pc, #96]	@ (8008590 <prvAddNewTaskToReadyList+0xd4>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <prvAddNewTaskToReadyList+0xd8>)
 800853e:	441a      	add	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7ff f901 	bl	800774e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800854c:	f001 fae6 	bl	8009b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008550:	4b0d      	ldr	r3, [pc, #52]	@ (8008588 <prvAddNewTaskToReadyList+0xcc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008558:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <prvAddNewTaskToReadyList+0xc8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008562:	429a      	cmp	r2, r3
 8008564:	d207      	bcs.n	8008576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008566:	4b0c      	ldr	r3, [pc, #48]	@ (8008598 <prvAddNewTaskToReadyList+0xdc>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20005a10 	.word	0x20005a10
 8008584:	2000553c 	.word	0x2000553c
 8008588:	20005a1c 	.word	0x20005a1c
 800858c:	20005a2c 	.word	0x20005a2c
 8008590:	20005a18 	.word	0x20005a18
 8008594:	20005540 	.word	0x20005540
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80085a4:	f001 fa88 	bl	8009ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <vTaskDelete+0x18>
 80085ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008664 <vTaskDelete+0xc8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	e000      	b.n	80085b6 <vTaskDelete+0x1a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff f923 	bl	8007808 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3318      	adds	r3, #24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff f91a 	bl	8007808 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80085d4:	4b24      	ldr	r3, [pc, #144]	@ (8008668 <vTaskDelete+0xcc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	4a23      	ldr	r2, [pc, #140]	@ (8008668 <vTaskDelete+0xcc>)
 80085dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80085de:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <vTaskDelete+0xc8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d10b      	bne.n	8008600 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	481f      	ldr	r0, [pc, #124]	@ (800866c <vTaskDelete+0xd0>)
 80085f0:	f7ff f8ad 	bl	800774e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80085f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008670 <vTaskDelete+0xd4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008670 <vTaskDelete+0xd4>)
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e009      	b.n	8008614 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008600:	4b1c      	ldr	r3, [pc, #112]	@ (8008674 <vTaskDelete+0xd8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3b01      	subs	r3, #1
 8008606:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <vTaskDelete+0xd8>)
 8008608:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fc96 	bl	8008f3c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008610:	f000 fcc4 	bl	8008f9c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008614:	f001 fa82 	bl	8009b1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008618:	4b17      	ldr	r3, [pc, #92]	@ (8008678 <vTaskDelete+0xdc>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01c      	beq.n	800865a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008620:	4b10      	ldr	r3, [pc, #64]	@ (8008664 <vTaskDelete+0xc8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	429a      	cmp	r2, r3
 8008628:	d117      	bne.n	800865a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800862a:	4b14      	ldr	r3, [pc, #80]	@ (800867c <vTaskDelete+0xe0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <vTaskDelete+0xae>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60bb      	str	r3, [r7, #8]
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	e7fd      	b.n	8008646 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <vTaskDelete+0xe4>)
 800864c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000553c 	.word	0x2000553c
 8008668:	20005a2c 	.word	0x20005a2c
 800866c:	200059e4 	.word	0x200059e4
 8008670:	200059f8 	.word	0x200059f8
 8008674:	20005a10 	.word	0x20005a10
 8008678:	20005a1c 	.word	0x20005a1c
 800867c:	20005a38 	.word	0x20005a38
 8008680:	e000ed04 	.word	0xe000ed04

08008684 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d018      	beq.n	80086c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008696:	4b14      	ldr	r3, [pc, #80]	@ (80086e8 <vTaskDelay+0x64>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <vTaskDelay+0x32>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60bb      	str	r3, [r7, #8]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086b6:	f000 f883 	bl	80087c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086ba:	2100      	movs	r1, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fd1b 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086c2:	f000 f88b 	bl	80087dc <xTaskResumeAll>
 80086c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d107      	bne.n	80086de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80086ce:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <vTaskDelay+0x68>)
 80086d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20005a38 	.word	0x20005a38
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	@ 0x28
 80086f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086fe:	463a      	mov	r2, r7
 8008700:	1d39      	adds	r1, r7, #4
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe ffc0 	bl	800768c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	9202      	str	r2, [sp, #8]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	2300      	movs	r3, #0
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	460a      	mov	r2, r1
 800871e:	4922      	ldr	r1, [pc, #136]	@ (80087a8 <vTaskStartScheduler+0xb8>)
 8008720:	4822      	ldr	r0, [pc, #136]	@ (80087ac <vTaskStartScheduler+0xbc>)
 8008722:	f7ff fd95 	bl	8008250 <xTaskCreateStatic>
 8008726:	4603      	mov	r3, r0
 8008728:	4a21      	ldr	r2, [pc, #132]	@ (80087b0 <vTaskStartScheduler+0xc0>)
 800872a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800872c:	4b20      	ldr	r3, [pc, #128]	@ (80087b0 <vTaskStartScheduler+0xc0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008734:	2301      	movs	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e001      	b.n	800873e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d102      	bne.n	800874a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008744:	f000 fd2c 	bl	80091a0 <xTimerCreateTimerTask>
 8008748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d116      	bne.n	800877e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008764:	4b13      	ldr	r3, [pc, #76]	@ (80087b4 <vTaskStartScheduler+0xc4>)
 8008766:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800876a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800876c:	4b12      	ldr	r3, [pc, #72]	@ (80087b8 <vTaskStartScheduler+0xc8>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008772:	4b12      	ldr	r3, [pc, #72]	@ (80087bc <vTaskStartScheduler+0xcc>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008778:	f001 f8fa 	bl	8009970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800877c:	e00f      	b.n	800879e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008784:	d10b      	bne.n	800879e <vTaskStartScheduler+0xae>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60fb      	str	r3, [r7, #12]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <vTaskStartScheduler+0xaa>
}
 800879e:	bf00      	nop
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	0801a3d8 	.word	0x0801a3d8
 80087ac:	08008e31 	.word	0x08008e31
 80087b0:	20005a34 	.word	0x20005a34
 80087b4:	20005a30 	.word	0x20005a30
 80087b8:	20005a1c 	.word	0x20005a1c
 80087bc:	20005a14 	.word	0x20005a14

080087c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087c4:	4b04      	ldr	r3, [pc, #16]	@ (80087d8 <vTaskSuspendAll+0x18>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	4a03      	ldr	r2, [pc, #12]	@ (80087d8 <vTaskSuspendAll+0x18>)
 80087cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087ce:	bf00      	nop
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	20005a38 	.word	0x20005a38

080087dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087ea:	4b42      	ldr	r3, [pc, #264]	@ (80088f4 <xTaskResumeAll+0x118>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <xTaskResumeAll+0x2e>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	603b      	str	r3, [r7, #0]
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop
 8008808:	e7fd      	b.n	8008806 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800880a:	f001 f955 	bl	8009ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800880e:	4b39      	ldr	r3, [pc, #228]	@ (80088f4 <xTaskResumeAll+0x118>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3b01      	subs	r3, #1
 8008814:	4a37      	ldr	r2, [pc, #220]	@ (80088f4 <xTaskResumeAll+0x118>)
 8008816:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008818:	4b36      	ldr	r3, [pc, #216]	@ (80088f4 <xTaskResumeAll+0x118>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d162      	bne.n	80088e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008820:	4b35      	ldr	r3, [pc, #212]	@ (80088f8 <xTaskResumeAll+0x11c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d05e      	beq.n	80088e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008828:	e02f      	b.n	800888a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882a:	4b34      	ldr	r3, [pc, #208]	@ (80088fc <xTaskResumeAll+0x120>)
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3318      	adds	r3, #24
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe ffe6 	bl	8007808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe ffe1 	bl	8007808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884a:	4b2d      	ldr	r3, [pc, #180]	@ (8008900 <xTaskResumeAll+0x124>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d903      	bls.n	800885a <xTaskResumeAll+0x7e>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	4a2a      	ldr	r2, [pc, #168]	@ (8008900 <xTaskResumeAll+0x124>)
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a27      	ldr	r2, [pc, #156]	@ (8008904 <xTaskResumeAll+0x128>)
 8008868:	441a      	add	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fe ff6c 	bl	800774e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887a:	4b23      	ldr	r3, [pc, #140]	@ (8008908 <xTaskResumeAll+0x12c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	429a      	cmp	r2, r3
 8008882:	d302      	bcc.n	800888a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008884:	4b21      	ldr	r3, [pc, #132]	@ (800890c <xTaskResumeAll+0x130>)
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800888a:	4b1c      	ldr	r3, [pc, #112]	@ (80088fc <xTaskResumeAll+0x120>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1cb      	bne.n	800882a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008898:	f000 fb80 	bl	8008f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800889c:	4b1c      	ldr	r3, [pc, #112]	@ (8008910 <xTaskResumeAll+0x134>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d010      	beq.n	80088ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088a8:	f000 f846 	bl	8008938 <xTaskIncrementTick>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80088b2:	4b16      	ldr	r3, [pc, #88]	@ (800890c <xTaskResumeAll+0x130>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1f1      	bne.n	80088a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80088c4:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <xTaskResumeAll+0x134>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088ca:	4b10      	ldr	r3, [pc, #64]	@ (800890c <xTaskResumeAll+0x130>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088d2:	2301      	movs	r3, #1
 80088d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <xTaskResumeAll+0x138>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088e6:	f001 f919 	bl	8009b1c <vPortExitCritical>

	return xAlreadyYielded;
 80088ea:	68bb      	ldr	r3, [r7, #8]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20005a38 	.word	0x20005a38
 80088f8:	20005a10 	.word	0x20005a10
 80088fc:	200059d0 	.word	0x200059d0
 8008900:	20005a18 	.word	0x20005a18
 8008904:	20005540 	.word	0x20005540
 8008908:	2000553c 	.word	0x2000553c
 800890c:	20005a24 	.word	0x20005a24
 8008910:	20005a20 	.word	0x20005a20
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <xTaskGetTickCount+0x1c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008924:	687b      	ldr	r3, [r7, #4]
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20005a14 	.word	0x20005a14

08008938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008942:	4b4f      	ldr	r3, [pc, #316]	@ (8008a80 <xTaskIncrementTick+0x148>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f040 8090 	bne.w	8008a6c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800894c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a84 <xTaskIncrementTick+0x14c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008954:	4a4b      	ldr	r2, [pc, #300]	@ (8008a84 <xTaskIncrementTick+0x14c>)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d121      	bne.n	80089a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008960:	4b49      	ldr	r3, [pc, #292]	@ (8008a88 <xTaskIncrementTick+0x150>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <xTaskIncrementTick+0x4a>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	603b      	str	r3, [r7, #0]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <xTaskIncrementTick+0x46>
 8008982:	4b41      	ldr	r3, [pc, #260]	@ (8008a88 <xTaskIncrementTick+0x150>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	4b40      	ldr	r3, [pc, #256]	@ (8008a8c <xTaskIncrementTick+0x154>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a3e      	ldr	r2, [pc, #248]	@ (8008a88 <xTaskIncrementTick+0x150>)
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4a3e      	ldr	r2, [pc, #248]	@ (8008a8c <xTaskIncrementTick+0x154>)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	4b3e      	ldr	r3, [pc, #248]	@ (8008a90 <xTaskIncrementTick+0x158>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	4a3c      	ldr	r2, [pc, #240]	@ (8008a90 <xTaskIncrementTick+0x158>)
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	f000 fafc 	bl	8008f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008a94 <xTaskIncrementTick+0x15c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d349      	bcc.n	8008a42 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ae:	4b36      	ldr	r3, [pc, #216]	@ (8008a88 <xTaskIncrementTick+0x150>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b8:	4b36      	ldr	r3, [pc, #216]	@ (8008a94 <xTaskIncrementTick+0x15c>)
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089be:	601a      	str	r2, [r3, #0]
					break;
 80089c0:	e03f      	b.n	8008a42 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c2:	4b31      	ldr	r3, [pc, #196]	@ (8008a88 <xTaskIncrementTick+0x150>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089da:	4a2e      	ldr	r2, [pc, #184]	@ (8008a94 <xTaskIncrementTick+0x15c>)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089e0:	e02f      	b.n	8008a42 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe ff0e 	bl	8007808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3318      	adds	r3, #24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe ff05 	bl	8007808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a02:	4b25      	ldr	r3, [pc, #148]	@ (8008a98 <xTaskIncrementTick+0x160>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d903      	bls.n	8008a12 <xTaskIncrementTick+0xda>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	4a22      	ldr	r2, [pc, #136]	@ (8008a98 <xTaskIncrementTick+0x160>)
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a9c <xTaskIncrementTick+0x164>)
 8008a20:	441a      	add	r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f7fe fe90 	bl	800774e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a32:	4b1b      	ldr	r3, [pc, #108]	@ (8008aa0 <xTaskIncrementTick+0x168>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d3b8      	bcc.n	80089ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a40:	e7b5      	b.n	80089ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a42:	4b17      	ldr	r3, [pc, #92]	@ (8008aa0 <xTaskIncrementTick+0x168>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a48:	4914      	ldr	r1, [pc, #80]	@ (8008a9c <xTaskIncrementTick+0x164>)
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d901      	bls.n	8008a5e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a5e:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <xTaskIncrementTick+0x16c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e004      	b.n	8008a76 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa8 <xTaskIncrementTick+0x170>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3301      	adds	r3, #1
 8008a72:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa8 <xTaskIncrementTick+0x170>)
 8008a74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a76:	697b      	ldr	r3, [r7, #20]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20005a38 	.word	0x20005a38
 8008a84:	20005a14 	.word	0x20005a14
 8008a88:	200059c8 	.word	0x200059c8
 8008a8c:	200059cc 	.word	0x200059cc
 8008a90:	20005a28 	.word	0x20005a28
 8008a94:	20005a30 	.word	0x20005a30
 8008a98:	20005a18 	.word	0x20005a18
 8008a9c:	20005540 	.word	0x20005540
 8008aa0:	2000553c 	.word	0x2000553c
 8008aa4:	20005a24 	.word	0x20005a24
 8008aa8:	20005a20 	.word	0x20005a20

08008aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ab2:	4b28      	ldr	r3, [pc, #160]	@ (8008b54 <vTaskSwitchContext+0xa8>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008aba:	4b27      	ldr	r3, [pc, #156]	@ (8008b58 <vTaskSwitchContext+0xac>)
 8008abc:	2201      	movs	r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ac0:	e042      	b.n	8008b48 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008ac2:	4b25      	ldr	r3, [pc, #148]	@ (8008b58 <vTaskSwitchContext+0xac>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac8:	4b24      	ldr	r3, [pc, #144]	@ (8008b5c <vTaskSwitchContext+0xb0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e011      	b.n	8008af4 <vTaskSwitchContext+0x48>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10b      	bne.n	8008aee <vTaskSwitchContext+0x42>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	607b      	str	r3, [r7, #4]
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	e7fd      	b.n	8008aea <vTaskSwitchContext+0x3e>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	491a      	ldr	r1, [pc, #104]	@ (8008b60 <vTaskSwitchContext+0xb4>)
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0e3      	beq.n	8008ad0 <vTaskSwitchContext+0x24>
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4a13      	ldr	r2, [pc, #76]	@ (8008b60 <vTaskSwitchContext+0xb4>)
 8008b14:	4413      	add	r3, r2
 8008b16:	60bb      	str	r3, [r7, #8]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d104      	bne.n	8008b38 <vTaskSwitchContext+0x8c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	4a09      	ldr	r2, [pc, #36]	@ (8008b64 <vTaskSwitchContext+0xb8>)
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	4a06      	ldr	r2, [pc, #24]	@ (8008b5c <vTaskSwitchContext+0xb0>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6013      	str	r3, [r2, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	20005a38 	.word	0x20005a38
 8008b58:	20005a24 	.word	0x20005a24
 8008b5c:	20005a18 	.word	0x20005a18
 8008b60:	20005540 	.word	0x20005540
 8008b64:	2000553c 	.word	0x2000553c

08008b68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	60fb      	str	r3, [r7, #12]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <vTaskPlaceOnEventList+0x48>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3318      	adds	r3, #24
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7fe fdfc 	bl	8007796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	6838      	ldr	r0, [r7, #0]
 8008ba2:	f000 faa9 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000553c 	.word	0x2000553c

08008bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	617b      	str	r3, [r7, #20]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bde:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <vTaskPlaceOnEventListRestricted+0x54>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3318      	adds	r3, #24
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7fe fdb1 	bl	800774e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bf6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	68b8      	ldr	r0, [r7, #8]
 8008bfc:	f000 fa7c 	bl	80090f8 <prvAddCurrentTaskToDelayedList>
	}
 8008c00:	bf00      	nop
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	2000553c 	.word	0x2000553c

08008c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	3318      	adds	r3, #24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe fde2 	bl	8007808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c44:	4b1d      	ldr	r3, [pc, #116]	@ (8008cbc <xTaskRemoveFromEventList+0xb0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d11d      	bne.n	8008c88 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe fdd9 	bl	8007808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5a:	4b19      	ldr	r3, [pc, #100]	@ (8008cc0 <xTaskRemoveFromEventList+0xb4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d903      	bls.n	8008c6a <xTaskRemoveFromEventList+0x5e>
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <xTaskRemoveFromEventList+0xb4>)
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4a13      	ldr	r2, [pc, #76]	@ (8008cc4 <xTaskRemoveFromEventList+0xb8>)
 8008c78:	441a      	add	r2, r3
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f7fe fd64 	bl	800774e <vListInsertEnd>
 8008c86:	e005      	b.n	8008c94 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	3318      	adds	r3, #24
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	480e      	ldr	r0, [pc, #56]	@ (8008cc8 <xTaskRemoveFromEventList+0xbc>)
 8008c90:	f7fe fd5d 	bl	800774e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	4b0c      	ldr	r3, [pc, #48]	@ (8008ccc <xTaskRemoveFromEventList+0xc0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d905      	bls.n	8008cae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd0 <xTaskRemoveFromEventList+0xc4>)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e001      	b.n	8008cb2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cb2:	697b      	ldr	r3, [r7, #20]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20005a38 	.word	0x20005a38
 8008cc0:	20005a18 	.word	0x20005a18
 8008cc4:	20005540 	.word	0x20005540
 8008cc8:	200059d0 	.word	0x200059d0
 8008ccc:	2000553c 	.word	0x2000553c
 8008cd0:	20005a24 	.word	0x20005a24

08008cd4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008cfa:	f000 fedd 	bl	8009ab8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cfe:	4b07      	ldr	r3, [pc, #28]	@ (8008d1c <vTaskSetTimeOutState+0x48>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008d06:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <vTaskSetTimeOutState+0x4c>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008d0e:	f000 ff05 	bl	8009b1c <vPortExitCritical>
}
 8008d12:	bf00      	nop
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20005a28 	.word	0x20005a28
 8008d20:	20005a14 	.word	0x20005a14

08008d24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	@ (8008d48 <vTaskInternalSetTimeOutState+0x24>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d34:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <vTaskInternalSetTimeOutState+0x28>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	605a      	str	r2, [r3, #4]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20005a28 	.word	0x20005a28
 8008d4c:	20005a14 	.word	0x20005a14

08008d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10b      	bne.n	8008d78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	613b      	str	r3, [r7, #16]
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	e7fd      	b.n	8008d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	60fb      	str	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d96:	f000 fe8f 	bl	8009ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e10 <xTaskCheckForTimeOut+0xc0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008db2:	d102      	bne.n	8008dba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e023      	b.n	8008e02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4b15      	ldr	r3, [pc, #84]	@ (8008e14 <xTaskCheckForTimeOut+0xc4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d007      	beq.n	8008dd6 <xTaskCheckForTimeOut+0x86>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e015      	b.n	8008e02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d20b      	bcs.n	8008df8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff99 	bl	8008d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	e004      	b.n	8008e02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e02:	f000 fe8b 	bl	8009b1c <vPortExitCritical>

	return xReturn;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20005a14 	.word	0x20005a14
 8008e14:	20005a28 	.word	0x20005a28

08008e18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e1c:	4b03      	ldr	r3, [pc, #12]	@ (8008e2c <vTaskMissedYield+0x14>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20005a24 	.word	0x20005a24

08008e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e38:	f000 f852 	bl	8008ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <prvIdleTask+0x28>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d9f9      	bls.n	8008e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <prvIdleTask+0x2c>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e54:	e7f0      	b.n	8008e38 <prvIdleTask+0x8>
 8008e56:	bf00      	nop
 8008e58:	20005540 	.word	0x20005540
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e66:	2300      	movs	r3, #0
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	e00c      	b.n	8008e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4a12      	ldr	r2, [pc, #72]	@ (8008ec0 <prvInitialiseTaskLists+0x60>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe fc3a 	bl	80076f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3301      	adds	r3, #1
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b37      	cmp	r3, #55	@ 0x37
 8008e8a:	d9ef      	bls.n	8008e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e8c:	480d      	ldr	r0, [pc, #52]	@ (8008ec4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	f7fe fc31 	bl	80076f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e92:	480d      	ldr	r0, [pc, #52]	@ (8008ec8 <prvInitialiseTaskLists+0x68>)
 8008e94:	f7fe fc2e 	bl	80076f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e98:	480c      	ldr	r0, [pc, #48]	@ (8008ecc <prvInitialiseTaskLists+0x6c>)
 8008e9a:	f7fe fc2b 	bl	80076f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e9e:	480c      	ldr	r0, [pc, #48]	@ (8008ed0 <prvInitialiseTaskLists+0x70>)
 8008ea0:	f7fe fc28 	bl	80076f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ea4:	480b      	ldr	r0, [pc, #44]	@ (8008ed4 <prvInitialiseTaskLists+0x74>)
 8008ea6:	f7fe fc25 	bl	80076f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <prvInitialiseTaskLists+0x78>)
 8008eac:	4a05      	ldr	r2, [pc, #20]	@ (8008ec4 <prvInitialiseTaskLists+0x64>)
 8008eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008edc <prvInitialiseTaskLists+0x7c>)
 8008eb2:	4a05      	ldr	r2, [pc, #20]	@ (8008ec8 <prvInitialiseTaskLists+0x68>)
 8008eb4:	601a      	str	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20005540 	.word	0x20005540
 8008ec4:	200059a0 	.word	0x200059a0
 8008ec8:	200059b4 	.word	0x200059b4
 8008ecc:	200059d0 	.word	0x200059d0
 8008ed0:	200059e4 	.word	0x200059e4
 8008ed4:	200059fc 	.word	0x200059fc
 8008ed8:	200059c8 	.word	0x200059c8
 8008edc:	200059cc 	.word	0x200059cc

08008ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ee6:	e019      	b.n	8008f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ee8:	f000 fde6 	bl	8009ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eec:	4b10      	ldr	r3, [pc, #64]	@ (8008f30 <prvCheckTasksWaitingTermination+0x50>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fc85 	bl	8007808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008efe:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <prvCheckTasksWaitingTermination+0x54>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	4a0b      	ldr	r2, [pc, #44]	@ (8008f34 <prvCheckTasksWaitingTermination+0x54>)
 8008f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f08:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f12:	f000 fe03 	bl	8009b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f810 	bl	8008f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <prvCheckTasksWaitingTermination+0x58>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e1      	bne.n	8008ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	200059e4 	.word	0x200059e4
 8008f34:	20005a10 	.word	0x20005a10
 8008f38:	200059f8 	.word	0x200059f8

08008f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d108      	bne.n	8008f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 ffa0 	bl	8009e98 <vPortFree>
				vPortFree( pxTCB );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 ff9d 	bl	8009e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f5e:	e019      	b.n	8008f94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d103      	bne.n	8008f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 ff94 	bl	8009e98 <vPortFree>
	}
 8008f70:	e010      	b.n	8008f94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d00b      	beq.n	8008f94 <prvDeleteTCB+0x58>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <prvDeleteTCB+0x54>
	}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fb4:	e008      	b.n	8008fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb6:	4b07      	ldr	r3, [pc, #28]	@ (8008fd4 <prvResetNextTaskUnblockTime+0x38>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a04      	ldr	r2, [pc, #16]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008fc6:	6013      	str	r3, [r2, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	200059c8 	.word	0x200059c8
 8008fd8:	20005a30 	.word	0x20005a30

08008fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8009010 <xTaskGetSchedulerState+0x34>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fea:	2301      	movs	r3, #1
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e008      	b.n	8009002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff0:	4b08      	ldr	r3, [pc, #32]	@ (8009014 <xTaskGetSchedulerState+0x38>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e001      	b.n	8009002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ffe:	2300      	movs	r3, #0
 8009000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009002:	687b      	ldr	r3, [r7, #4]
	}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20005a1c 	.word	0x20005a1c
 8009014:	20005a38 	.word	0x20005a38

08009018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d058      	beq.n	80090e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800902e:	4b2f      	ldr	r3, [pc, #188]	@ (80090ec <xTaskPriorityDisinherit+0xd4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d00b      	beq.n	8009050 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	60fb      	str	r3, [r7, #12]
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	e7fd      	b.n	800904c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	60bb      	str	r3, [r7, #8]
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	e7fd      	b.n	800906c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009082:	429a      	cmp	r2, r3
 8009084:	d02c      	beq.n	80090e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800908a:	2b00      	cmp	r3, #0
 800908c:	d128      	bne.n	80090e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3304      	adds	r3, #4
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fbb8 	bl	8007808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b0:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <xTaskPriorityDisinherit+0xd8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d903      	bls.n	80090c0 <xTaskPriorityDisinherit+0xa8>
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090bc:	4a0c      	ldr	r2, [pc, #48]	@ (80090f0 <xTaskPriorityDisinherit+0xd8>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4a09      	ldr	r2, [pc, #36]	@ (80090f4 <xTaskPriorityDisinherit+0xdc>)
 80090ce:	441a      	add	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7fe fb39 	bl	800774e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090dc:	2301      	movs	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090e0:	697b      	ldr	r3, [r7, #20]
	}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2000553c 	.word	0x2000553c
 80090f0:	20005a18 	.word	0x20005a18
 80090f4:	20005540 	.word	0x20005540

080090f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009102:	4b21      	ldr	r3, [pc, #132]	@ (8009188 <prvAddCurrentTaskToDelayedList+0x90>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009108:	4b20      	ldr	r3, [pc, #128]	@ (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3304      	adds	r3, #4
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fb7a 	bl	8007808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800911a:	d10a      	bne.n	8009132 <prvAddCurrentTaskToDelayedList+0x3a>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4819      	ldr	r0, [pc, #100]	@ (8009190 <prvAddCurrentTaskToDelayedList+0x98>)
 800912c:	f7fe fb0f 	bl	800774e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009130:	e026      	b.n	8009180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4413      	add	r3, r2
 8009138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800913a:	4b14      	ldr	r3, [pc, #80]	@ (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	429a      	cmp	r2, r3
 8009148:	d209      	bcs.n	800915e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800914a:	4b12      	ldr	r3, [pc, #72]	@ (8009194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b0f      	ldr	r3, [pc, #60]	@ (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fe fb1d 	bl	8007796 <vListInsert>
}
 800915c:	e010      	b.n	8009180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800915e:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <prvAddCurrentTaskToDelayedList+0x94>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fb13 	bl	8007796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009170:	4b0a      	ldr	r3, [pc, #40]	@ (800919c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d202      	bcs.n	8009180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800917a:	4a08      	ldr	r2, [pc, #32]	@ (800919c <prvAddCurrentTaskToDelayedList+0xa4>)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6013      	str	r3, [r2, #0]
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20005a14 	.word	0x20005a14
 800918c:	2000553c 	.word	0x2000553c
 8009190:	200059fc 	.word	0x200059fc
 8009194:	200059cc 	.word	0x200059cc
 8009198:	200059c8 	.word	0x200059c8
 800919c:	20005a30 	.word	0x20005a30

080091a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	@ 0x28
 80091a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091aa:	f000 fb13 	bl	80097d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <xTimerCreateTimerTask+0x84>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d021      	beq.n	80091fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091be:	1d3a      	adds	r2, r7, #4
 80091c0:	f107 0108 	add.w	r1, r7, #8
 80091c4:	f107 030c 	add.w	r3, r7, #12
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe fa79 	bl	80076c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	9202      	str	r2, [sp, #8]
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	2302      	movs	r3, #2
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2300      	movs	r3, #0
 80091de:	460a      	mov	r2, r1
 80091e0:	4911      	ldr	r1, [pc, #68]	@ (8009228 <xTimerCreateTimerTask+0x88>)
 80091e2:	4812      	ldr	r0, [pc, #72]	@ (800922c <xTimerCreateTimerTask+0x8c>)
 80091e4:	f7ff f834 	bl	8008250 <xTaskCreateStatic>
 80091e8:	4603      	mov	r3, r0
 80091ea:	4a11      	ldr	r2, [pc, #68]	@ (8009230 <xTimerCreateTimerTask+0x90>)
 80091ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091ee:	4b10      	ldr	r3, [pc, #64]	@ (8009230 <xTimerCreateTimerTask+0x90>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091f6:	2301      	movs	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	613b      	str	r3, [r7, #16]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009218:	697b      	ldr	r3, [r7, #20]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20005a6c 	.word	0x20005a6c
 8009228:	0801a3e0 	.word	0x0801a3e0
 800922c:	0800936d 	.word	0x0800936d
 8009230:	20005a70 	.word	0x20005a70

08009234 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	@ 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10b      	bne.n	8009264 <xTimerGenericCommand+0x30>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	623b      	str	r3, [r7, #32]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009264:	4b19      	ldr	r3, [pc, #100]	@ (80092cc <xTimerGenericCommand+0x98>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d02a      	beq.n	80092c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b05      	cmp	r3, #5
 800927c:	dc18      	bgt.n	80092b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800927e:	f7ff fead 	bl	8008fdc <xTaskGetSchedulerState>
 8009282:	4603      	mov	r3, r0
 8009284:	2b02      	cmp	r3, #2
 8009286:	d109      	bne.n	800929c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009288:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <xTimerGenericCommand+0x98>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	f107 0110 	add.w	r1, r7, #16
 8009290:	2300      	movs	r3, #0
 8009292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009294:	f7fe fbec 	bl	8007a70 <xQueueGenericSend>
 8009298:	6278      	str	r0, [r7, #36]	@ 0x24
 800929a:	e012      	b.n	80092c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800929c:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <xTimerGenericCommand+0x98>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f107 0110 	add.w	r1, r7, #16
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7fe fbe2 	bl	8007a70 <xQueueGenericSend>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ae:	e008      	b.n	80092c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092b0:	4b06      	ldr	r3, [pc, #24]	@ (80092cc <xTimerGenericCommand+0x98>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	f107 0110 	add.w	r1, r7, #16
 80092b8:	2300      	movs	r3, #0
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	f7fe fcda 	bl	8007c74 <xQueueGenericSendFromISR>
 80092c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3728      	adds	r7, #40	@ 0x28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20005a6c 	.word	0x20005a6c

080092d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092da:	4b23      	ldr	r3, [pc, #140]	@ (8009368 <prvProcessExpiredTimer+0x98>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fa8d 	bl	8007808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d023      	beq.n	8009344 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	18d1      	adds	r1, r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	f000 f8d5 	bl	80094b8 <prvInsertTimerInActiveList>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d020      	beq.n	8009356 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	2100      	movs	r1, #0
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff88 	bl	8009234 <xTimerGenericCommand>
 8009324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d114      	bne.n	8009356 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800934a:	f023 0301 	bic.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	6978      	ldr	r0, [r7, #20]
 800935c:	4798      	blx	r3
}
 800935e:	bf00      	nop
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20005a64 	.word	0x20005a64

0800936c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009374:	f107 0308 	add.w	r3, r7, #8
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f859 	bl	8009430 <prvGetNextExpireTime>
 800937e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	4619      	mov	r1, r3
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f805 	bl	8009394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800938a:	f000 f8d7 	bl	800953c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800938e:	bf00      	nop
 8009390:	e7f0      	b.n	8009374 <prvTimerTask+0x8>
	...

08009394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800939e:	f7ff fa0f 	bl	80087c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f866 	bl	8009478 <prvSampleTimeNow>
 80093ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d130      	bne.n	8009416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <prvProcessTimerOrBlockTask+0x3c>
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d806      	bhi.n	80093d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093c2:	f7ff fa0b 	bl	80087dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff ff81 	bl	80092d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093ce:	e024      	b.n	800941a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d008      	beq.n	80093e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093d6:	4b13      	ldr	r3, [pc, #76]	@ (8009424 <prvProcessTimerOrBlockTask+0x90>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <prvProcessTimerOrBlockTask+0x50>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e000      	b.n	80093e6 <prvProcessTimerOrBlockTask+0x52>
 80093e4:	2300      	movs	r3, #0
 80093e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <prvProcessTimerOrBlockTask+0x94>)
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4619      	mov	r1, r3
 80093f6:	f7fe fef7 	bl	80081e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093fa:	f7ff f9ef 	bl	80087dc <xTaskResumeAll>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009404:	4b09      	ldr	r3, [pc, #36]	@ (800942c <prvProcessTimerOrBlockTask+0x98>)
 8009406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	f3bf 8f6f 	isb	sy
}
 8009414:	e001      	b.n	800941a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009416:	f7ff f9e1 	bl	80087dc <xTaskResumeAll>
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20005a68 	.word	0x20005a68
 8009428:	20005a6c 	.word	0x20005a6c
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009438:	4b0e      	ldr	r3, [pc, #56]	@ (8009474 <prvGetNextExpireTime+0x44>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <prvGetNextExpireTime+0x16>
 8009442:	2201      	movs	r2, #1
 8009444:	e000      	b.n	8009448 <prvGetNextExpireTime+0x18>
 8009446:	2200      	movs	r2, #0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d105      	bne.n	8009460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009454:	4b07      	ldr	r3, [pc, #28]	@ (8009474 <prvGetNextExpireTime+0x44>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e001      	b.n	8009464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009464:	68fb      	ldr	r3, [r7, #12]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20005a64 	.word	0x20005a64

08009478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009480:	f7ff fa4a 	bl	8008918 <xTaskGetTickCount>
 8009484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <prvSampleTimeNow+0x3c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	429a      	cmp	r2, r3
 800948e:	d205      	bcs.n	800949c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009490:	f000 f93a 	bl	8009708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e002      	b.n	80094a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094a2:	4a04      	ldr	r2, [pc, #16]	@ (80094b4 <prvSampleTimeNow+0x3c>)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094a8:	68fb      	ldr	r3, [r7, #12]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20005a74 	.word	0x20005a74

080094b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d812      	bhi.n	8009504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d302      	bcc.n	80094f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094ec:	2301      	movs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	e01b      	b.n	800952a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094f2:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <prvInsertTimerInActiveList+0x7c>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f7fe f94a 	bl	8007796 <vListInsert>
 8009502:	e012      	b.n	800952a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d206      	bcs.n	800951a <prvInsertTimerInActiveList+0x62>
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d302      	bcc.n	800951a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e007      	b.n	800952a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800951a:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <prvInsertTimerInActiveList+0x80>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7fe f936 	bl	8007796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800952a:	697b      	ldr	r3, [r7, #20]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20005a68 	.word	0x20005a68
 8009538:	20005a64 	.word	0x20005a64

0800953c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08e      	sub	sp, #56	@ 0x38
 8009540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009542:	e0ce      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	da19      	bge.n	800957e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	3304      	adds	r3, #4
 800954e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	61fb      	str	r3, [r7, #28]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009574:	6850      	ldr	r0, [r2, #4]
 8009576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009578:	6892      	ldr	r2, [r2, #8]
 800957a:	4611      	mov	r1, r2
 800957c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f2c0 80ae 	blt.w	80096e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe f936 	bl	8007808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800959c:	463b      	mov	r3, r7
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff ff6a 	bl	8009478 <prvSampleTimeNow>
 80095a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b09      	cmp	r3, #9
 80095aa:	f200 8097 	bhi.w	80096dc <prvProcessReceivedCommands+0x1a0>
 80095ae:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <prvProcessReceivedCommands+0x78>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095dd 	.word	0x080095dd
 80095bc:	080095dd 	.word	0x080095dd
 80095c0:	08009653 	.word	0x08009653
 80095c4:	08009667 	.word	0x08009667
 80095c8:	080096b3 	.word	0x080096b3
 80095cc:	080095dd 	.word	0x080095dd
 80095d0:	080095dd 	.word	0x080095dd
 80095d4:	08009653 	.word	0x08009653
 80095d8:	08009667 	.word	0x08009667
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	18d1      	adds	r1, r2, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095fc:	f7ff ff5c 	bl	80094b8 <prvInsertTimerInActiveList>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d06c      	beq.n	80096e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800960c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d061      	beq.n	80096e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	441a      	add	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	2300      	movs	r3, #0
 800962a:	2100      	movs	r1, #0
 800962c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800962e:	f7ff fe01 	bl	8009234 <xTimerGenericCommand>
 8009632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d152      	bne.n	80096e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	61bb      	str	r3, [r7, #24]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009658:	f023 0301 	bic.w	r3, r3, #1
 800965c:	b2da      	uxtb	r2, r3
 800965e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009660:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009664:	e03d      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800966c:	f043 0301 	orr.w	r3, r3, #1
 8009670:	b2da      	uxtb	r2, r3
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	617b      	str	r3, [r7, #20]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	18d1      	adds	r1, r2, r3
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096ac:	f7ff ff04 	bl	80094b8 <prvInsertTimerInActiveList>
					break;
 80096b0:	e017      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d103      	bne.n	80096c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80096c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c2:	f000 fbe9 	bl	8009e98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096c6:	e00c      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096ce:	f023 0301 	bic.w	r3, r3, #1
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096da:	e002      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80096dc:	bf00      	nop
 80096de:	e000      	b.n	80096e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80096e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096e2:	4b08      	ldr	r3, [pc, #32]	@ (8009704 <prvProcessReceivedCommands+0x1c8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	1d39      	adds	r1, r7, #4
 80096e8:	2200      	movs	r2, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fb60 	bl	8007db0 <xQueueReceive>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f47f af26 	bne.w	8009544 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	3730      	adds	r7, #48	@ 0x30
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20005a6c 	.word	0x20005a6c

08009708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800970e:	e049      	b.n	80097a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009710:	4b2e      	ldr	r3, [pc, #184]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b2c      	ldr	r3, [pc, #176]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe f86d 	bl	8007808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d02f      	beq.n	80097a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	429a      	cmp	r2, r3
 8009754:	d90e      	bls.n	8009774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3304      	adds	r3, #4
 800976a:	4619      	mov	r1, r3
 800976c:	4610      	mov	r0, r2
 800976e:	f7fe f812 	bl	8007796 <vListInsert>
 8009772:	e017      	b.n	80097a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009774:	2300      	movs	r3, #0
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	2100      	movs	r1, #0
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff fd58 	bl	8009234 <xTimerGenericCommand>
 8009784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	603b      	str	r3, [r7, #0]
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097a4:	4b09      	ldr	r3, [pc, #36]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1b0      	bne.n	8009710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097ae:	4b07      	ldr	r3, [pc, #28]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097b4:	4b06      	ldr	r3, [pc, #24]	@ (80097d0 <prvSwitchTimerLists+0xc8>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a04      	ldr	r2, [pc, #16]	@ (80097cc <prvSwitchTimerLists+0xc4>)
 80097ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097bc:	4a04      	ldr	r2, [pc, #16]	@ (80097d0 <prvSwitchTimerLists+0xc8>)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	6013      	str	r3, [r2, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20005a64 	.word	0x20005a64
 80097d0:	20005a68 	.word	0x20005a68

080097d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097da:	f000 f96d 	bl	8009ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097de:	4b15      	ldr	r3, [pc, #84]	@ (8009834 <prvCheckForValidListAndQueue+0x60>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d120      	bne.n	8009828 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097e6:	4814      	ldr	r0, [pc, #80]	@ (8009838 <prvCheckForValidListAndQueue+0x64>)
 80097e8:	f7fd ff84 	bl	80076f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097ec:	4813      	ldr	r0, [pc, #76]	@ (800983c <prvCheckForValidListAndQueue+0x68>)
 80097ee:	f7fd ff81 	bl	80076f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097f2:	4b13      	ldr	r3, [pc, #76]	@ (8009840 <prvCheckForValidListAndQueue+0x6c>)
 80097f4:	4a10      	ldr	r2, [pc, #64]	@ (8009838 <prvCheckForValidListAndQueue+0x64>)
 80097f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097f8:	4b12      	ldr	r3, [pc, #72]	@ (8009844 <prvCheckForValidListAndQueue+0x70>)
 80097fa:	4a10      	ldr	r2, [pc, #64]	@ (800983c <prvCheckForValidListAndQueue+0x68>)
 80097fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097fe:	2300      	movs	r3, #0
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	4b11      	ldr	r3, [pc, #68]	@ (8009848 <prvCheckForValidListAndQueue+0x74>)
 8009804:	4a11      	ldr	r2, [pc, #68]	@ (800984c <prvCheckForValidListAndQueue+0x78>)
 8009806:	2110      	movs	r1, #16
 8009808:	200a      	movs	r0, #10
 800980a:	f7fe f891 	bl	8007930 <xQueueGenericCreateStatic>
 800980e:	4603      	mov	r3, r0
 8009810:	4a08      	ldr	r2, [pc, #32]	@ (8009834 <prvCheckForValidListAndQueue+0x60>)
 8009812:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009814:	4b07      	ldr	r3, [pc, #28]	@ (8009834 <prvCheckForValidListAndQueue+0x60>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <prvCheckForValidListAndQueue+0x60>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	490b      	ldr	r1, [pc, #44]	@ (8009850 <prvCheckForValidListAndQueue+0x7c>)
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fcb6 	bl	8008194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009828:	f000 f978 	bl	8009b1c <vPortExitCritical>
}
 800982c:	bf00      	nop
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20005a6c 	.word	0x20005a6c
 8009838:	20005a3c 	.word	0x20005a3c
 800983c:	20005a50 	.word	0x20005a50
 8009840:	20005a64 	.word	0x20005a64
 8009844:	20005a68 	.word	0x20005a68
 8009848:	20005b18 	.word	0x20005b18
 800984c:	20005a78 	.word	0x20005a78
 8009850:	0801a3e8 	.word	0x0801a3e8

08009854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3b04      	subs	r3, #4
 8009864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800986c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3b04      	subs	r3, #4
 8009872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f023 0201 	bic.w	r2, r3, #1
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3b04      	subs	r3, #4
 8009882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009884:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <pxPortInitialiseStack+0x64>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3b14      	subs	r3, #20
 800988e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b04      	subs	r3, #4
 800989a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f06f 0202 	mvn.w	r2, #2
 80098a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3b20      	subs	r3, #32
 80098a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098aa:	68fb      	ldr	r3, [r7, #12]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	080098bd 	.word	0x080098bd

080098bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098c6:	4b13      	ldr	r3, [pc, #76]	@ (8009914 <prvTaskExitError+0x58>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098ce:	d00b      	beq.n	80098e8 <prvTaskExitError+0x2c>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	e7fd      	b.n	80098e4 <prvTaskExitError+0x28>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	60bb      	str	r3, [r7, #8]
}
 80098fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098fc:	bf00      	nop
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0fc      	beq.n	80098fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20000010 	.word	0x20000010
	...

08009920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009920:	4b07      	ldr	r3, [pc, #28]	@ (8009940 <pxCurrentTCBConst2>)
 8009922:	6819      	ldr	r1, [r3, #0]
 8009924:	6808      	ldr	r0, [r1, #0]
 8009926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	f380 8809 	msr	PSP, r0
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f04f 0000 	mov.w	r0, #0
 8009936:	f380 8811 	msr	BASEPRI, r0
 800993a:	4770      	bx	lr
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst2>:
 8009940:	2000553c 	.word	0x2000553c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009948:	4808      	ldr	r0, [pc, #32]	@ (800996c <prvPortStartFirstTask+0x24>)
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	6800      	ldr	r0, [r0, #0]
 800994e:	f380 8808 	msr	MSP, r0
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8814 	msr	CONTROL, r0
 800995a:	b662      	cpsie	i
 800995c:	b661      	cpsie	f
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	df00      	svc	0
 8009968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800996a:	bf00      	nop
 800996c:	e000ed08 	.word	0xe000ed08

08009970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009976:	4b47      	ldr	r3, [pc, #284]	@ (8009a94 <xPortStartScheduler+0x124>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a47      	ldr	r2, [pc, #284]	@ (8009a98 <xPortStartScheduler+0x128>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d10b      	bne.n	8009998 <xPortStartScheduler+0x28>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009998:	4b3e      	ldr	r3, [pc, #248]	@ (8009a94 <xPortStartScheduler+0x124>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a9c <xPortStartScheduler+0x12c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d10b      	bne.n	80099ba <xPortStartScheduler+0x4a>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	60fb      	str	r3, [r7, #12]
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	e7fd      	b.n	80099b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099ba:	4b39      	ldr	r3, [pc, #228]	@ (8009aa0 <xPortStartScheduler+0x130>)
 80099bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	22ff      	movs	r2, #255	@ 0xff
 80099ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	4b31      	ldr	r3, [pc, #196]	@ (8009aa4 <xPortStartScheduler+0x134>)
 80099e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099e2:	4b31      	ldr	r3, [pc, #196]	@ (8009aa8 <xPortStartScheduler+0x138>)
 80099e4:	2207      	movs	r2, #7
 80099e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099e8:	e009      	b.n	80099fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80099ea:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa8 <xPortStartScheduler+0x138>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4a2d      	ldr	r2, [pc, #180]	@ (8009aa8 <xPortStartScheduler+0x138>)
 80099f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a06:	2b80      	cmp	r3, #128	@ 0x80
 8009a08:	d0ef      	beq.n	80099ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a0a:	4b27      	ldr	r3, [pc, #156]	@ (8009aa8 <xPortStartScheduler+0x138>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f1c3 0307 	rsb	r3, r3, #7
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d00b      	beq.n	8009a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60bb      	str	r3, [r7, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa8 <xPortStartScheduler+0x138>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa8 <xPortStartScheduler+0x138>)
 8009a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a38:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa8 <xPortStartScheduler+0x138>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a40:	4a19      	ldr	r2, [pc, #100]	@ (8009aa8 <xPortStartScheduler+0x138>)
 8009a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a4c:	4b17      	ldr	r3, [pc, #92]	@ (8009aac <xPortStartScheduler+0x13c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a16      	ldr	r2, [pc, #88]	@ (8009aac <xPortStartScheduler+0x13c>)
 8009a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a58:	4b14      	ldr	r3, [pc, #80]	@ (8009aac <xPortStartScheduler+0x13c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a13      	ldr	r2, [pc, #76]	@ (8009aac <xPortStartScheduler+0x13c>)
 8009a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a64:	f000 f8da 	bl	8009c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a68:	4b11      	ldr	r3, [pc, #68]	@ (8009ab0 <xPortStartScheduler+0x140>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a6e:	f000 f8f9 	bl	8009c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a72:	4b10      	ldr	r3, [pc, #64]	@ (8009ab4 <xPortStartScheduler+0x144>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab4 <xPortStartScheduler+0x144>)
 8009a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a7e:	f7ff ff63 	bl	8009948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a82:	f7ff f813 	bl	8008aac <vTaskSwitchContext>
	prvTaskExitError();
 8009a86:	f7ff ff19 	bl	80098bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	e000ed00 	.word	0xe000ed00
 8009a98:	410fc271 	.word	0x410fc271
 8009a9c:	410fc270 	.word	0x410fc270
 8009aa0:	e000e400 	.word	0xe000e400
 8009aa4:	20005b68 	.word	0x20005b68
 8009aa8:	20005b6c 	.word	0x20005b6c
 8009aac:	e000ed20 	.word	0xe000ed20
 8009ab0:	20000010 	.word	0x20000010
 8009ab4:	e000ef34 	.word	0xe000ef34

08009ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ad2:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <vPortEnterCritical+0x5c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8009b14 <vPortEnterCritical+0x5c>)
 8009ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009adc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b14 <vPortEnterCritical+0x5c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d110      	bne.n	8009b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b18 <vPortEnterCritical+0x60>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	603b      	str	r3, [r7, #0]
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <vPortEnterCritical+0x4a>
	}
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000010 	.word	0x20000010
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b22:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <vPortExitCritical+0x50>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <vPortExitCritical+0x26>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	607b      	str	r3, [r7, #4]
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b42:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <vPortExitCritical+0x50>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	4a08      	ldr	r2, [pc, #32]	@ (8009b6c <vPortExitCritical+0x50>)
 8009b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b4c:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <vPortExitCritical+0x50>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <vPortExitCritical+0x44>
 8009b54:	2300      	movs	r3, #0
 8009b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f383 8811 	msr	BASEPRI, r3
}
 8009b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20000010 	.word	0x20000010

08009b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b70:	f3ef 8009 	mrs	r0, PSP
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	4b15      	ldr	r3, [pc, #84]	@ (8009bd0 <pxCurrentTCBConst>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	f01e 0f10 	tst.w	lr, #16
 8009b80:	bf08      	it	eq
 8009b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8a:	6010      	str	r0, [r2, #0]
 8009b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b94:	f380 8811 	msr	BASEPRI, r0
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f7fe ff84 	bl	8008aac <vTaskSwitchContext>
 8009ba4:	f04f 0000 	mov.w	r0, #0
 8009ba8:	f380 8811 	msr	BASEPRI, r0
 8009bac:	bc09      	pop	{r0, r3}
 8009bae:	6819      	ldr	r1, [r3, #0]
 8009bb0:	6808      	ldr	r0, [r1, #0]
 8009bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb6:	f01e 0f10 	tst.w	lr, #16
 8009bba:	bf08      	it	eq
 8009bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bc0:	f380 8809 	msr	PSP, r0
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	f3af 8000 	nop.w

08009bd0 <pxCurrentTCBConst>:
 8009bd0:	2000553c 	.word	0x2000553c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop

08009bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	607b      	str	r3, [r7, #4]
}
 8009bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bf2:	f7fe fea1 	bl	8008938 <xTaskIncrementTick>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bfc:	4b06      	ldr	r3, [pc, #24]	@ (8009c18 <xPortSysTickHandler+0x40>)
 8009bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	2300      	movs	r3, #0
 8009c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f383 8811 	msr	BASEPRI, r3
}
 8009c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c20:	4b0b      	ldr	r3, [pc, #44]	@ (8009c50 <vPortSetupTimerInterrupt+0x34>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c26:	4b0b      	ldr	r3, [pc, #44]	@ (8009c54 <vPortSetupTimerInterrupt+0x38>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c58 <vPortSetupTimerInterrupt+0x3c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	@ (8009c5c <vPortSetupTimerInterrupt+0x40>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	099b      	lsrs	r3, r3, #6
 8009c38:	4a09      	ldr	r2, [pc, #36]	@ (8009c60 <vPortSetupTimerInterrupt+0x44>)
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <vPortSetupTimerInterrupt+0x34>)
 8009c40:	2207      	movs	r2, #7
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	e000e010 	.word	0xe000e010
 8009c54:	e000e018 	.word	0xe000e018
 8009c58:	20000004 	.word	0x20000004
 8009c5c:	10624dd3 	.word	0x10624dd3
 8009c60:	e000e014 	.word	0xe000e014

08009c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c74 <vPortEnableVFP+0x10>
 8009c68:	6801      	ldr	r1, [r0, #0]
 8009c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c6e:	6001      	str	r1, [r0, #0]
 8009c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c72:	bf00      	nop
 8009c74:	e000ed88 	.word	0xe000ed88

08009c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c7e:	f3ef 8305 	mrs	r3, IPSR
 8009c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b0f      	cmp	r3, #15
 8009c88:	d915      	bls.n	8009cb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c8a:	4a18      	ldr	r2, [pc, #96]	@ (8009cec <vPortValidateInterruptPriority+0x74>)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c94:	4b16      	ldr	r3, [pc, #88]	@ (8009cf0 <vPortValidateInterruptPriority+0x78>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	7afa      	ldrb	r2, [r7, #11]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d20b      	bcs.n	8009cb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	607b      	str	r3, [r7, #4]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf4 <vPortValidateInterruptPriority+0x7c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf8 <vPortValidateInterruptPriority+0x80>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d90b      	bls.n	8009cde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	603b      	str	r3, [r7, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <vPortValidateInterruptPriority+0x62>
	}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	e000e3f0 	.word	0xe000e3f0
 8009cf0:	20005b68 	.word	0x20005b68
 8009cf4:	e000ed0c 	.word	0xe000ed0c
 8009cf8:	20005b6c 	.word	0x20005b6c

08009cfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	@ 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d08:	f7fe fd5a 	bl	80087c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8009e80 <pvPortMalloc+0x184>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d14:	f000 f924 	bl	8009f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d18:	4b5a      	ldr	r3, [pc, #360]	@ (8009e84 <pvPortMalloc+0x188>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f040 8095 	bne.w	8009e50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d01e      	beq.n	8009d6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d015      	beq.n	8009d6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f023 0307 	bic.w	r3, r3, #7
 8009d44:	3308      	adds	r3, #8
 8009d46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00b      	beq.n	8009d6a <pvPortMalloc+0x6e>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	617b      	str	r3, [r7, #20]
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop
 8009d68:	e7fd      	b.n	8009d66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d06f      	beq.n	8009e50 <pvPortMalloc+0x154>
 8009d70:	4b45      	ldr	r3, [pc, #276]	@ (8009e88 <pvPortMalloc+0x18c>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d86a      	bhi.n	8009e50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d7a:	4b44      	ldr	r3, [pc, #272]	@ (8009e8c <pvPortMalloc+0x190>)
 8009d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d7e:	4b43      	ldr	r3, [pc, #268]	@ (8009e8c <pvPortMalloc+0x190>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d84:	e004      	b.n	8009d90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d903      	bls.n	8009da2 <pvPortMalloc+0xa6>
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f1      	bne.n	8009d86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009da2:	4b37      	ldr	r3, [pc, #220]	@ (8009e80 <pvPortMalloc+0x184>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d051      	beq.n	8009e50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2208      	movs	r2, #8
 8009db2:	4413      	add	r3, r2
 8009db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	1ad2      	subs	r2, r2, r3
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d920      	bls.n	8009e10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <pvPortMalloc+0xfc>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	613b      	str	r3, [r7, #16]
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e0a:	69b8      	ldr	r0, [r7, #24]
 8009e0c:	f000 f90a 	bl	800a024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e10:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <pvPortMalloc+0x18c>)
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009e88 <pvPortMalloc+0x18c>)
 8009e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009e88 <pvPortMalloc+0x18c>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b1b      	ldr	r3, [pc, #108]	@ (8009e90 <pvPortMalloc+0x194>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d203      	bcs.n	8009e32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e2a:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <pvPortMalloc+0x18c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <pvPortMalloc+0x194>)
 8009e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <pvPortMalloc+0x188>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e46:	4b13      	ldr	r3, [pc, #76]	@ (8009e94 <pvPortMalloc+0x198>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	4a11      	ldr	r2, [pc, #68]	@ (8009e94 <pvPortMalloc+0x198>)
 8009e4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e50:	f7fe fcc4 	bl	80087dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00b      	beq.n	8009e76 <pvPortMalloc+0x17a>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60fb      	str	r3, [r7, #12]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <pvPortMalloc+0x176>
	return pvReturn;
 8009e76:	69fb      	ldr	r3, [r7, #28]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3728      	adds	r7, #40	@ 0x28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	20009778 	.word	0x20009778
 8009e84:	2000978c 	.word	0x2000978c
 8009e88:	2000977c 	.word	0x2000977c
 8009e8c:	20009770 	.word	0x20009770
 8009e90:	20009780 	.word	0x20009780
 8009e94:	20009784 	.word	0x20009784

08009e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d04f      	beq.n	8009f4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009eaa:	2308      	movs	r3, #8
 8009eac:	425b      	negs	r3, r3
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	4b25      	ldr	r3, [pc, #148]	@ (8009f54 <vPortFree+0xbc>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10b      	bne.n	8009ede <vPortFree+0x46>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	e7fd      	b.n	8009eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <vPortFree+0x66>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b14      	ldr	r3, [pc, #80]	@ (8009f54 <vPortFree+0xbc>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01e      	beq.n	8009f4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11a      	bne.n	8009f4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <vPortFree+0xbc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	401a      	ands	r2, r3
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f24:	f7fe fc4c 	bl	80087c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <vPortFree+0xc0>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4413      	add	r3, r2
 8009f32:	4a09      	ldr	r2, [pc, #36]	@ (8009f58 <vPortFree+0xc0>)
 8009f34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f36:	6938      	ldr	r0, [r7, #16]
 8009f38:	f000 f874 	bl	800a024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f3c:	4b07      	ldr	r3, [pc, #28]	@ (8009f5c <vPortFree+0xc4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3301      	adds	r3, #1
 8009f42:	4a06      	ldr	r2, [pc, #24]	@ (8009f5c <vPortFree+0xc4>)
 8009f44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f46:	f7fe fc49 	bl	80087dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f4a:	bf00      	nop
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	2000978c 	.word	0x2000978c
 8009f58:	2000977c 	.word	0x2000977c
 8009f5c:	20009788 	.word	0x20009788

08009f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f6c:	4b27      	ldr	r3, [pc, #156]	@ (800a00c <prvHeapInit+0xac>)
 8009f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00c      	beq.n	8009f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3307      	adds	r3, #7
 8009f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0307 	bic.w	r3, r3, #7
 8009f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800a00c <prvHeapInit+0xac>)
 8009f90:	4413      	add	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f98:	4a1d      	ldr	r2, [pc, #116]	@ (800a010 <prvHeapInit+0xb0>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f9e:	4b1c      	ldr	r3, [pc, #112]	@ (800a010 <prvHeapInit+0xb0>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	4413      	add	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fac:	2208      	movs	r2, #8
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a15      	ldr	r2, [pc, #84]	@ (800a014 <prvHeapInit+0xb4>)
 8009fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fc2:	4b14      	ldr	r3, [pc, #80]	@ (800a014 <prvHeapInit+0xb4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fca:	4b12      	ldr	r3, [pc, #72]	@ (800a014 <prvHeapInit+0xb4>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	1ad2      	subs	r2, r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	@ (800a014 <prvHeapInit+0xb4>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4a0a      	ldr	r2, [pc, #40]	@ (800a018 <prvHeapInit+0xb8>)
 8009fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	4a09      	ldr	r2, [pc, #36]	@ (800a01c <prvHeapInit+0xbc>)
 8009ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ff8:	4b09      	ldr	r3, [pc, #36]	@ (800a020 <prvHeapInit+0xc0>)
 8009ffa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009ffe:	601a      	str	r2, [r3, #0]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20005b70 	.word	0x20005b70
 800a010:	20009770 	.word	0x20009770
 800a014:	20009778 	.word	0x20009778
 800a018:	20009780 	.word	0x20009780
 800a01c:	2000977c 	.word	0x2000977c
 800a020:	2000978c 	.word	0x2000978c

0800a024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a02c:	4b28      	ldr	r3, [pc, #160]	@ (800a0d0 <prvInsertBlockIntoFreeList+0xac>)
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e002      	b.n	800a038 <prvInsertBlockIntoFreeList+0x14>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d8f7      	bhi.n	800a032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	4413      	add	r3, r2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	429a      	cmp	r2, r3
 800a052:	d108      	bne.n	800a066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	441a      	add	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	441a      	add	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d118      	bne.n	800a0ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	4b15      	ldr	r3, [pc, #84]	@ (800a0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d00d      	beq.n	800a0a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	e008      	b.n	800a0b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	e003      	b.n	800a0b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d002      	beq.n	800a0c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	20009770 	.word	0x20009770
 800a0d4:	20009778 	.word	0x20009778

0800a0d8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a0d8:	4b04      	ldr	r3, [pc, #16]	@ (800a0ec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	b10a      	cbz	r2, 800a0e2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a0de:	4803      	ldr	r0, [pc, #12]	@ (800a0ec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a0e0:	4770      	bx	lr
 800a0e2:	4a03      	ldr	r2, [pc, #12]	@ (800a0f0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a0e4:	4801      	ldr	r0, [pc, #4]	@ (800a0ec <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	4770      	bx	lr
 800a0ec:	2000001c 	.word	0x2000001c
 800a0f0:	200001d0 	.word	0x200001d0

0800a0f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a0f4:	4a02      	ldr	r2, [pc, #8]	@ (800a100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a0f6:	4b03      	ldr	r3, [pc, #12]	@ (800a104 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a0f8:	6812      	ldr	r2, [r2, #0]
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	200001d0 	.word	0x200001d0
 800a104:	2000001c 	.word	0x2000001c

0800a108 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a108:	f005 bb64 	b.w	800f7d4 <geometry_msgs__msg__Twist__init>

0800a10c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a10c:	f005 bb86 	b.w	800f81c <geometry_msgs__msg__Twist__fini>

0800a110 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a110:	b510      	push	{r4, lr}
 800a112:	f000 f819 	bl	800a148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a116:	4c07      	ldr	r4, [pc, #28]	@ (800a134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a118:	60e0      	str	r0, [r4, #12]
 800a11a:	f000 f815 	bl	800a148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a11e:	4b06      	ldr	r3, [pc, #24]	@ (800a138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a120:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	b10a      	cbz	r2, 800a12a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a126:	4804      	ldr	r0, [pc, #16]	@ (800a138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a128:	bd10      	pop	{r4, pc}
 800a12a:	4a04      	ldr	r2, [pc, #16]	@ (800a13c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a12c:	4802      	ldr	r0, [pc, #8]	@ (800a138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	bd10      	pop	{r4, pc}
 800a134:	20000028 	.word	0x20000028
 800a138:	200000a0 	.word	0x200000a0
 800a13c:	200001d4 	.word	0x200001d4

0800a140 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a140:	f005 bb78 	b.w	800f834 <geometry_msgs__msg__Vector3__init>

0800a144 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a144:	f005 bb7a 	b.w	800f83c <geometry_msgs__msg__Vector3__fini>

0800a148 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a148:	4b04      	ldr	r3, [pc, #16]	@ (800a15c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	b10a      	cbz	r2, 800a152 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a14e:	4803      	ldr	r0, [pc, #12]	@ (800a15c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a150:	4770      	bx	lr
 800a152:	4a03      	ldr	r2, [pc, #12]	@ (800a160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a154:	4801      	ldr	r0, [pc, #4]	@ (800a15c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	4770      	bx	lr
 800a15c:	20000160 	.word	0x20000160
 800a160:	200001d4 	.word	0x200001d4

0800a164 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4604      	mov	r4, r0
 800a168:	b148      	cbz	r0, 800a17e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a16a:	460d      	mov	r5, r1
 800a16c:	f000 f860 	bl	800a230 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a170:	4606      	mov	r6, r0
 800a172:	1829      	adds	r1, r5, r0
 800a174:	f104 0018 	add.w	r0, r4, #24
 800a178:	f000 f85a 	bl	800a230 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a17c:	4430      	add	r0, r6
 800a17e:	bd70      	pop	{r4, r5, r6, pc}

0800a180 <_Twist__cdr_deserialize>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	460c      	mov	r4, r1
 800a184:	b189      	cbz	r1, 800a1aa <_Twist__cdr_deserialize+0x2a>
 800a186:	4605      	mov	r5, r0
 800a188:	f000 f8de 	bl	800a348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a18c:	6843      	ldr	r3, [r0, #4]
 800a18e:	4621      	mov	r1, r4
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	4628      	mov	r0, r5
 800a194:	4798      	blx	r3
 800a196:	f000 f8d7 	bl	800a348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a19a:	6843      	ldr	r3, [r0, #4]
 800a19c:	f104 0118 	add.w	r1, r4, #24
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1a8:	4718      	bx	r3
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	bf00      	nop

0800a1b0 <_Twist__cdr_serialize>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	9101      	str	r1, [sp, #4]
 800a1b6:	b190      	cbz	r0, 800a1de <_Twist__cdr_serialize+0x2e>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	f000 f8c5 	bl	800a348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a1be:	6843      	ldr	r3, [r0, #4]
 800a1c0:	9901      	ldr	r1, [sp, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4798      	blx	r3
 800a1c8:	f000 f8be 	bl	800a348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a1cc:	6843      	ldr	r3, [r0, #4]
 800a1ce:	9901      	ldr	r1, [sp, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f104 0018 	add.w	r0, r4, #24
 800a1d6:	b002      	add	sp, #8
 800a1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1dc:	4718      	bx	r3
 800a1de:	b002      	add	sp, #8
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	bf00      	nop

0800a1e4 <_Twist__get_serialized_size>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	b148      	cbz	r0, 800a1fe <_Twist__get_serialized_size+0x1a>
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	f000 f820 	bl	800a230 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	f104 0018 	add.w	r0, r4, #24
 800a1f8:	f000 f81a 	bl	800a230 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a1fc:	4428      	add	r0, r5
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}

0800a200 <_Twist__max_serialized_size>:
 800a200:	b510      	push	{r4, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	2301      	movs	r3, #1
 800a206:	2100      	movs	r1, #0
 800a208:	f10d 0007 	add.w	r0, sp, #7
 800a20c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a210:	f000 f87e 	bl	800a310 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a214:	4604      	mov	r4, r0
 800a216:	4601      	mov	r1, r0
 800a218:	f10d 0007 	add.w	r0, sp, #7
 800a21c:	f000 f878 	bl	800a310 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a220:	4420      	add	r0, r4
 800a222:	b002      	add	sp, #8
 800a224:	bd10      	pop	{r4, pc}
 800a226:	bf00      	nop

0800a228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a228:	4800      	ldr	r0, [pc, #0]	@ (800a22c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a22a:	4770      	bx	lr
 800a22c:	2000016c 	.word	0x2000016c

0800a230 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a230:	b1b8      	cbz	r0, 800a262 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a232:	b538      	push	{r3, r4, r5, lr}
 800a234:	460d      	mov	r5, r1
 800a236:	4628      	mov	r0, r5
 800a238:	2108      	movs	r1, #8
 800a23a:	f001 fb9d 	bl	800b978 <ucdr_alignment>
 800a23e:	f105 0308 	add.w	r3, r5, #8
 800a242:	181c      	adds	r4, r3, r0
 800a244:	2108      	movs	r1, #8
 800a246:	4620      	mov	r0, r4
 800a248:	f001 fb96 	bl	800b978 <ucdr_alignment>
 800a24c:	3008      	adds	r0, #8
 800a24e:	4404      	add	r4, r0
 800a250:	2108      	movs	r1, #8
 800a252:	4620      	mov	r0, r4
 800a254:	f001 fb90 	bl	800b978 <ucdr_alignment>
 800a258:	f1c5 0508 	rsb	r5, r5, #8
 800a25c:	4428      	add	r0, r5
 800a25e:	4420      	add	r0, r4
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	4770      	bx	lr

0800a264 <_Vector3__cdr_deserialize>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	460c      	mov	r4, r1
 800a268:	b171      	cbz	r1, 800a288 <_Vector3__cdr_deserialize+0x24>
 800a26a:	4605      	mov	r5, r0
 800a26c:	f001 f998 	bl	800b5a0 <ucdr_deserialize_double>
 800a270:	f104 0108 	add.w	r1, r4, #8
 800a274:	4628      	mov	r0, r5
 800a276:	f001 f993 	bl	800b5a0 <ucdr_deserialize_double>
 800a27a:	f104 0110 	add.w	r1, r4, #16
 800a27e:	4628      	mov	r0, r5
 800a280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a284:	f001 b98c 	b.w	800b5a0 <ucdr_deserialize_double>
 800a288:	4608      	mov	r0, r1
 800a28a:	bd38      	pop	{r3, r4, r5, pc}

0800a28c <_Vector3__cdr_serialize>:
 800a28c:	b198      	cbz	r0, 800a2b6 <_Vector3__cdr_serialize+0x2a>
 800a28e:	b538      	push	{r3, r4, r5, lr}
 800a290:	ed90 0b00 	vldr	d0, [r0]
 800a294:	460d      	mov	r5, r1
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	f000 ffdf 	bl	800b25c <ucdr_serialize_double>
 800a29e:	ed94 0b02 	vldr	d0, [r4, #8]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 ffda 	bl	800b25c <ucdr_serialize_double>
 800a2a8:	ed94 0b04 	vldr	d0, [r4, #16]
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b2:	f000 bfd3 	b.w	800b25c <ucdr_serialize_double>
 800a2b6:	4770      	bx	lr

0800a2b8 <_Vector3__get_serialized_size>:
 800a2b8:	b198      	cbz	r0, 800a2e2 <_Vector3__get_serialized_size+0x2a>
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	2108      	movs	r1, #8
 800a2be:	2000      	movs	r0, #0
 800a2c0:	f001 fb5a 	bl	800b978 <ucdr_alignment>
 800a2c4:	f100 0408 	add.w	r4, r0, #8
 800a2c8:	2108      	movs	r1, #8
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f001 fb54 	bl	800b978 <ucdr_alignment>
 800a2d0:	3008      	adds	r0, #8
 800a2d2:	4404      	add	r4, r0
 800a2d4:	2108      	movs	r1, #8
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f001 fb4e 	bl	800b978 <ucdr_alignment>
 800a2dc:	3008      	adds	r0, #8
 800a2de:	4420      	add	r0, r4
 800a2e0:	bd10      	pop	{r4, pc}
 800a2e2:	4770      	bx	lr

0800a2e4 <_Vector3__max_serialized_size>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	2108      	movs	r1, #8
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f001 fb45 	bl	800b978 <ucdr_alignment>
 800a2ee:	f100 0508 	add.w	r5, r0, #8
 800a2f2:	2108      	movs	r1, #8
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f001 fb3f 	bl	800b978 <ucdr_alignment>
 800a2fa:	f100 0408 	add.w	r4, r0, #8
 800a2fe:	442c      	add	r4, r5
 800a300:	2108      	movs	r1, #8
 800a302:	4620      	mov	r0, r4
 800a304:	f001 fb38 	bl	800b978 <ucdr_alignment>
 800a308:	3008      	adds	r0, #8
 800a30a:	4420      	add	r0, r4
 800a30c:	bd38      	pop	{r3, r4, r5, pc}
 800a30e:	bf00      	nop

0800a310 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	2301      	movs	r3, #1
 800a314:	460c      	mov	r4, r1
 800a316:	7003      	strb	r3, [r0, #0]
 800a318:	2108      	movs	r1, #8
 800a31a:	4620      	mov	r0, r4
 800a31c:	f001 fb2c 	bl	800b978 <ucdr_alignment>
 800a320:	f104 0508 	add.w	r5, r4, #8
 800a324:	1946      	adds	r6, r0, r5
 800a326:	2108      	movs	r1, #8
 800a328:	4630      	mov	r0, r6
 800a32a:	f001 fb25 	bl	800b978 <ucdr_alignment>
 800a32e:	f100 0508 	add.w	r5, r0, #8
 800a332:	4435      	add	r5, r6
 800a334:	2108      	movs	r1, #8
 800a336:	4628      	mov	r0, r5
 800a338:	f001 fb1e 	bl	800b978 <ucdr_alignment>
 800a33c:	f1c4 0408 	rsb	r4, r4, #8
 800a340:	4420      	add	r0, r4
 800a342:	4428      	add	r0, r5
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	bf00      	nop

0800a348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a348:	4800      	ldr	r0, [pc, #0]	@ (800a34c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a34a:	4770      	bx	lr
 800a34c:	20000194 	.word	0x20000194

0800a350 <ucdr_serialize_bool>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	460d      	mov	r5, r1
 800a354:	2101      	movs	r1, #1
 800a356:	4604      	mov	r4, r0
 800a358:	f001 fac2 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a35c:	b148      	cbz	r0, 800a372 <ucdr_serialize_bool+0x22>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	701d      	strb	r5, [r3, #0]
 800a362:	68a2      	ldr	r2, [r4, #8]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	2101      	movs	r1, #1
 800a368:	440a      	add	r2, r1
 800a36a:	440b      	add	r3, r1
 800a36c:	60a2      	str	r2, [r4, #8]
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	7561      	strb	r1, [r4, #21]
 800a372:	7da0      	ldrb	r0, [r4, #22]
 800a374:	f080 0001 	eor.w	r0, r0, #1
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	bf00      	nop

0800a37c <ucdr_deserialize_bool>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	460d      	mov	r5, r1
 800a380:	2101      	movs	r1, #1
 800a382:	4604      	mov	r4, r0
 800a384:	f001 faac 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a388:	b160      	cbz	r0, 800a3a4 <ucdr_deserialize_bool+0x28>
 800a38a:	68a2      	ldr	r2, [r4, #8]
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a392:	3900      	subs	r1, #0
 800a394:	bf18      	it	ne
 800a396:	2101      	movne	r1, #1
 800a398:	7029      	strb	r1, [r5, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	2101      	movs	r1, #1
 800a39e:	60a2      	str	r2, [r4, #8]
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	7561      	strb	r1, [r4, #21]
 800a3a4:	7da0      	ldrb	r0, [r4, #22]
 800a3a6:	f080 0001 	eor.w	r0, r0, #1
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}

0800a3ac <ucdr_serialize_uint8_t>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	460d      	mov	r5, r1
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	f001 fa94 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a3b8:	b148      	cbz	r0, 800a3ce <ucdr_serialize_uint8_t+0x22>
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	701d      	strb	r5, [r3, #0]
 800a3be:	68a2      	ldr	r2, [r4, #8]
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	440a      	add	r2, r1
 800a3c6:	440b      	add	r3, r1
 800a3c8:	60a2      	str	r2, [r4, #8]
 800a3ca:	6123      	str	r3, [r4, #16]
 800a3cc:	7561      	strb	r1, [r4, #21]
 800a3ce:	7da0      	ldrb	r0, [r4, #22]
 800a3d0:	f080 0001 	eor.w	r0, r0, #1
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	bf00      	nop

0800a3d8 <ucdr_deserialize_uint8_t>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	460d      	mov	r5, r1
 800a3dc:	2101      	movs	r1, #1
 800a3de:	4604      	mov	r4, r0
 800a3e0:	f001 fa7e 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a3e4:	b150      	cbz	r0, 800a3fc <ucdr_deserialize_uint8_t+0x24>
 800a3e6:	68a3      	ldr	r3, [r4, #8]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	702b      	strb	r3, [r5, #0]
 800a3ec:	68a2      	ldr	r2, [r4, #8]
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	440a      	add	r2, r1
 800a3f4:	440b      	add	r3, r1
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	7561      	strb	r1, [r4, #21]
 800a3fc:	7da0      	ldrb	r0, [r4, #22]
 800a3fe:	f080 0001 	eor.w	r0, r0, #1
 800a402:	bd38      	pop	{r3, r4, r5, pc}

0800a404 <ucdr_serialize_uint16_t>:
 800a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	460b      	mov	r3, r1
 800a40c:	2102      	movs	r1, #2
 800a40e:	4604      	mov	r4, r0
 800a410:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a414:	f001 fab8 	bl	800b988 <ucdr_buffer_alignment>
 800a418:	4601      	mov	r1, r0
 800a41a:	4620      	mov	r0, r4
 800a41c:	7d67      	ldrb	r7, [r4, #21]
 800a41e:	f001 faf7 	bl	800ba10 <ucdr_advance_buffer>
 800a422:	2102      	movs	r1, #2
 800a424:	4620      	mov	r0, r4
 800a426:	f001 fa4f 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a42a:	bb78      	cbnz	r0, 800a48c <ucdr_serialize_uint16_t+0x88>
 800a42c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a430:	42ab      	cmp	r3, r5
 800a432:	d926      	bls.n	800a482 <ucdr_serialize_uint16_t+0x7e>
 800a434:	1b5e      	subs	r6, r3, r5
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	f1c6 0802 	rsb	r8, r6, #2
 800a43e:	4433      	add	r3, r6
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	4641      	mov	r1, r8
 800a444:	4620      	mov	r0, r4
 800a446:	f001 fa4b 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d03b      	beq.n	800a4c6 <ucdr_serialize_uint16_t+0xc2>
 800a44e:	7d23      	ldrb	r3, [r4, #20]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d04a      	beq.n	800a4ea <ucdr_serialize_uint16_t+0xe6>
 800a454:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a458:	702b      	strb	r3, [r5, #0]
 800a45a:	2e00      	cmp	r6, #0
 800a45c:	d040      	beq.n	800a4e0 <ucdr_serialize_uint16_t+0xdc>
 800a45e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a462:	706b      	strb	r3, [r5, #1]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	68a2      	ldr	r2, [r4, #8]
 800a468:	7da0      	ldrb	r0, [r4, #22]
 800a46a:	3302      	adds	r3, #2
 800a46c:	1b9e      	subs	r6, r3, r6
 800a46e:	4442      	add	r2, r8
 800a470:	2302      	movs	r3, #2
 800a472:	f080 0001 	eor.w	r0, r0, #1
 800a476:	60a2      	str	r2, [r4, #8]
 800a478:	6126      	str	r6, [r4, #16]
 800a47a:	7563      	strb	r3, [r4, #21]
 800a47c:	b002      	add	sp, #8
 800a47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a482:	2102      	movs	r1, #2
 800a484:	4620      	mov	r0, r4
 800a486:	f001 fa2b 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a48a:	b190      	cbz	r0, 800a4b2 <ucdr_serialize_uint16_t+0xae>
 800a48c:	7d23      	ldrb	r3, [r4, #20]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	d014      	beq.n	800a4be <ucdr_serialize_uint16_t+0xba>
 800a494:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4a0:	705a      	strb	r2, [r3, #1]
 800a4a2:	68a2      	ldr	r2, [r4, #8]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	3202      	adds	r2, #2
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	2102      	movs	r1, #2
 800a4ac:	60a2      	str	r2, [r4, #8]
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	7561      	strb	r1, [r4, #21]
 800a4b2:	7da0      	ldrb	r0, [r4, #22]
 800a4b4:	f080 0001 	eor.w	r0, r0, #1
 800a4b8:	b002      	add	sp, #8
 800a4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a4c2:	801a      	strh	r2, [r3, #0]
 800a4c4:	e7ed      	b.n	800a4a2 <ucdr_serialize_uint16_t+0x9e>
 800a4c6:	68a2      	ldr	r2, [r4, #8]
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	7da0      	ldrb	r0, [r4, #22]
 800a4cc:	7567      	strb	r7, [r4, #21]
 800a4ce:	1b92      	subs	r2, r2, r6
 800a4d0:	1b9b      	subs	r3, r3, r6
 800a4d2:	f080 0001 	eor.w	r0, r0, #1
 800a4d6:	60a2      	str	r2, [r4, #8]
 800a4d8:	6123      	str	r3, [r4, #16]
 800a4da:	b002      	add	sp, #8
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	68a3      	ldr	r3, [r4, #8]
 800a4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e7bc      	b.n	800a464 <ucdr_serialize_uint16_t+0x60>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f10d 0506 	add.w	r5, sp, #6
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	f00f f839 	bl	801956a <memcpy>
 800a4f8:	68a0      	ldr	r0, [r4, #8]
 800a4fa:	4642      	mov	r2, r8
 800a4fc:	19a9      	adds	r1, r5, r6
 800a4fe:	f00f f834 	bl	801956a <memcpy>
 800a502:	e7af      	b.n	800a464 <ucdr_serialize_uint16_t+0x60>

0800a504 <ucdr_serialize_endian_uint16_t>:
 800a504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a508:	b083      	sub	sp, #12
 800a50a:	460d      	mov	r5, r1
 800a50c:	2102      	movs	r1, #2
 800a50e:	4604      	mov	r4, r0
 800a510:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a514:	f001 fa38 	bl	800b988 <ucdr_buffer_alignment>
 800a518:	4601      	mov	r1, r0
 800a51a:	4620      	mov	r0, r4
 800a51c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a520:	f001 fa76 	bl	800ba10 <ucdr_advance_buffer>
 800a524:	2102      	movs	r1, #2
 800a526:	4620      	mov	r0, r4
 800a528:	f001 f9ce 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a52c:	bb70      	cbnz	r0, 800a58c <ucdr_serialize_endian_uint16_t+0x88>
 800a52e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a532:	42be      	cmp	r6, r7
 800a534:	d925      	bls.n	800a582 <ucdr_serialize_endian_uint16_t+0x7e>
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	60a6      	str	r6, [r4, #8]
 800a53a:	1bf6      	subs	r6, r6, r7
 800a53c:	4433      	add	r3, r6
 800a53e:	f1c6 0902 	rsb	r9, r6, #2
 800a542:	6123      	str	r3, [r4, #16]
 800a544:	4649      	mov	r1, r9
 800a546:	4620      	mov	r0, r4
 800a548:	f001 f9ca 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d039      	beq.n	800a5c4 <ucdr_serialize_endian_uint16_t+0xc0>
 800a550:	2d01      	cmp	r5, #1
 800a552:	d04a      	beq.n	800a5ea <ucdr_serialize_endian_uint16_t+0xe6>
 800a554:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a558:	703b      	strb	r3, [r7, #0]
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d040      	beq.n	800a5e0 <ucdr_serialize_endian_uint16_t+0xdc>
 800a55e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a562:	707b      	strb	r3, [r7, #1]
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	68a2      	ldr	r2, [r4, #8]
 800a568:	7da0      	ldrb	r0, [r4, #22]
 800a56a:	3302      	adds	r3, #2
 800a56c:	444a      	add	r2, r9
 800a56e:	1b9b      	subs	r3, r3, r6
 800a570:	2102      	movs	r1, #2
 800a572:	f080 0001 	eor.w	r0, r0, #1
 800a576:	60a2      	str	r2, [r4, #8]
 800a578:	6123      	str	r3, [r4, #16]
 800a57a:	7561      	strb	r1, [r4, #21]
 800a57c:	b003      	add	sp, #12
 800a57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a582:	2102      	movs	r1, #2
 800a584:	4620      	mov	r0, r4
 800a586:	f001 f9ab 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a58a:	b188      	cbz	r0, 800a5b0 <ucdr_serialize_endian_uint16_t+0xac>
 800a58c:	2d01      	cmp	r5, #1
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	d014      	beq.n	800a5bc <ucdr_serialize_endian_uint16_t+0xb8>
 800a592:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	68a3      	ldr	r3, [r4, #8]
 800a59a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a59e:	705a      	strb	r2, [r3, #1]
 800a5a0:	68a2      	ldr	r2, [r4, #8]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	3202      	adds	r2, #2
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	60a2      	str	r2, [r4, #8]
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	7561      	strb	r1, [r4, #21]
 800a5b0:	7da0      	ldrb	r0, [r4, #22]
 800a5b2:	f080 0001 	eor.w	r0, r0, #1
 800a5b6:	b003      	add	sp, #12
 800a5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	e7ed      	b.n	800a5a0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a5c4:	68a2      	ldr	r2, [r4, #8]
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	7da0      	ldrb	r0, [r4, #22]
 800a5ca:	f884 8015 	strb.w	r8, [r4, #21]
 800a5ce:	1b92      	subs	r2, r2, r6
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	f080 0001 	eor.w	r0, r0, #1
 800a5d6:	60a2      	str	r2, [r4, #8]
 800a5d8:	6123      	str	r3, [r4, #16]
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e0:	68a3      	ldr	r3, [r4, #8]
 800a5e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	e7bc      	b.n	800a564 <ucdr_serialize_endian_uint16_t+0x60>
 800a5ea:	f10d 0506 	add.w	r5, sp, #6
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4632      	mov	r2, r6
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f00e ffb9 	bl	801956a <memcpy>
 800a5f8:	68a0      	ldr	r0, [r4, #8]
 800a5fa:	464a      	mov	r2, r9
 800a5fc:	19a9      	adds	r1, r5, r6
 800a5fe:	f00e ffb4 	bl	801956a <memcpy>
 800a602:	e7af      	b.n	800a564 <ucdr_serialize_endian_uint16_t+0x60>

0800a604 <ucdr_deserialize_uint16_t>:
 800a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a608:	460d      	mov	r5, r1
 800a60a:	2102      	movs	r1, #2
 800a60c:	4604      	mov	r4, r0
 800a60e:	f001 f9bb 	bl	800b988 <ucdr_buffer_alignment>
 800a612:	4601      	mov	r1, r0
 800a614:	4620      	mov	r0, r4
 800a616:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a61a:	f001 f9f9 	bl	800ba10 <ucdr_advance_buffer>
 800a61e:	2102      	movs	r1, #2
 800a620:	4620      	mov	r0, r4
 800a622:	f001 f951 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a626:	bb60      	cbnz	r0, 800a682 <ucdr_deserialize_uint16_t+0x7e>
 800a628:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a62c:	42be      	cmp	r6, r7
 800a62e:	d923      	bls.n	800a678 <ucdr_deserialize_uint16_t+0x74>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	60a6      	str	r6, [r4, #8]
 800a634:	1bf6      	subs	r6, r6, r7
 800a636:	4433      	add	r3, r6
 800a638:	f1c6 0902 	rsb	r9, r6, #2
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	4649      	mov	r1, r9
 800a640:	4620      	mov	r0, r4
 800a642:	f001 f94d 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a646:	2800      	cmp	r0, #0
 800a648:	d034      	beq.n	800a6b4 <ucdr_deserialize_uint16_t+0xb0>
 800a64a:	7d23      	ldrb	r3, [r4, #20]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d042      	beq.n	800a6d6 <ucdr_deserialize_uint16_t+0xd2>
 800a650:	787b      	ldrb	r3, [r7, #1]
 800a652:	702b      	strb	r3, [r5, #0]
 800a654:	2e00      	cmp	r6, #0
 800a656:	d03a      	beq.n	800a6ce <ucdr_deserialize_uint16_t+0xca>
 800a658:	783b      	ldrb	r3, [r7, #0]
 800a65a:	706b      	strb	r3, [r5, #1]
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	68a2      	ldr	r2, [r4, #8]
 800a660:	7da0      	ldrb	r0, [r4, #22]
 800a662:	2102      	movs	r1, #2
 800a664:	3302      	adds	r3, #2
 800a666:	444a      	add	r2, r9
 800a668:	1b9b      	subs	r3, r3, r6
 800a66a:	7561      	strb	r1, [r4, #21]
 800a66c:	60a2      	str	r2, [r4, #8]
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	f080 0001 	eor.w	r0, r0, #1
 800a674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a678:	2102      	movs	r1, #2
 800a67a:	4620      	mov	r0, r4
 800a67c:	f001 f930 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a680:	b180      	cbz	r0, 800a6a4 <ucdr_deserialize_uint16_t+0xa0>
 800a682:	7d23      	ldrb	r3, [r4, #20]
 800a684:	2b01      	cmp	r3, #1
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	d011      	beq.n	800a6ae <ucdr_deserialize_uint16_t+0xaa>
 800a68a:	785b      	ldrb	r3, [r3, #1]
 800a68c:	702b      	strb	r3, [r5, #0]
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	706b      	strb	r3, [r5, #1]
 800a694:	68a2      	ldr	r2, [r4, #8]
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	3202      	adds	r2, #2
 800a69a:	3302      	adds	r3, #2
 800a69c:	2102      	movs	r1, #2
 800a69e:	60a2      	str	r2, [r4, #8]
 800a6a0:	6123      	str	r3, [r4, #16]
 800a6a2:	7561      	strb	r1, [r4, #21]
 800a6a4:	7da0      	ldrb	r0, [r4, #22]
 800a6a6:	f080 0001 	eor.w	r0, r0, #1
 800a6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	802b      	strh	r3, [r5, #0]
 800a6b2:	e7ef      	b.n	800a694 <ucdr_deserialize_uint16_t+0x90>
 800a6b4:	68a2      	ldr	r2, [r4, #8]
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	7da0      	ldrb	r0, [r4, #22]
 800a6ba:	f884 8015 	strb.w	r8, [r4, #21]
 800a6be:	1b92      	subs	r2, r2, r6
 800a6c0:	1b9b      	subs	r3, r3, r6
 800a6c2:	60a2      	str	r2, [r4, #8]
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	f080 0001 	eor.w	r0, r0, #1
 800a6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	706b      	strb	r3, [r5, #1]
 800a6d4:	e7c2      	b.n	800a65c <ucdr_deserialize_uint16_t+0x58>
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	4632      	mov	r2, r6
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f00e ff45 	bl	801956a <memcpy>
 800a6e0:	68a1      	ldr	r1, [r4, #8]
 800a6e2:	464a      	mov	r2, r9
 800a6e4:	19a8      	adds	r0, r5, r6
 800a6e6:	f00e ff40 	bl	801956a <memcpy>
 800a6ea:	e7b7      	b.n	800a65c <ucdr_deserialize_uint16_t+0x58>

0800a6ec <ucdr_deserialize_endian_uint16_t>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	460e      	mov	r6, r1
 800a6f2:	2102      	movs	r1, #2
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	4615      	mov	r5, r2
 800a6f8:	f001 f946 	bl	800b988 <ucdr_buffer_alignment>
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	4620      	mov	r0, r4
 800a700:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a704:	f001 f984 	bl	800ba10 <ucdr_advance_buffer>
 800a708:	2102      	movs	r1, #2
 800a70a:	4620      	mov	r0, r4
 800a70c:	f001 f8dc 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a710:	bb70      	cbnz	r0, 800a770 <ucdr_deserialize_endian_uint16_t+0x84>
 800a712:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a716:	4547      	cmp	r7, r8
 800a718:	d925      	bls.n	800a766 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	60a7      	str	r7, [r4, #8]
 800a71e:	eba7 0708 	sub.w	r7, r7, r8
 800a722:	443b      	add	r3, r7
 800a724:	f1c7 0a02 	rsb	sl, r7, #2
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	4651      	mov	r1, sl
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 f8d7 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a732:	2800      	cmp	r0, #0
 800a734:	d034      	beq.n	800a7a0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a736:	2e01      	cmp	r6, #1
 800a738:	d043      	beq.n	800a7c2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a73a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a73e:	702b      	strb	r3, [r5, #0]
 800a740:	2f00      	cmp	r7, #0
 800a742:	d03a      	beq.n	800a7ba <ucdr_deserialize_endian_uint16_t+0xce>
 800a744:	f898 3000 	ldrb.w	r3, [r8]
 800a748:	706b      	strb	r3, [r5, #1]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	68a2      	ldr	r2, [r4, #8]
 800a74e:	7da0      	ldrb	r0, [r4, #22]
 800a750:	2102      	movs	r1, #2
 800a752:	3302      	adds	r3, #2
 800a754:	4452      	add	r2, sl
 800a756:	1bdb      	subs	r3, r3, r7
 800a758:	7561      	strb	r1, [r4, #21]
 800a75a:	60a2      	str	r2, [r4, #8]
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	f080 0001 	eor.w	r0, r0, #1
 800a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a766:	2102      	movs	r1, #2
 800a768:	4620      	mov	r0, r4
 800a76a:	f001 f8b9 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a76e:	b178      	cbz	r0, 800a790 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a770:	2e01      	cmp	r6, #1
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	d011      	beq.n	800a79a <ucdr_deserialize_endian_uint16_t+0xae>
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	702b      	strb	r3, [r5, #0]
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	706b      	strb	r3, [r5, #1]
 800a780:	68a2      	ldr	r2, [r4, #8]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	3202      	adds	r2, #2
 800a786:	3302      	adds	r3, #2
 800a788:	2102      	movs	r1, #2
 800a78a:	60a2      	str	r2, [r4, #8]
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	7561      	strb	r1, [r4, #21]
 800a790:	7da0      	ldrb	r0, [r4, #22]
 800a792:	f080 0001 	eor.w	r0, r0, #1
 800a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	802b      	strh	r3, [r5, #0]
 800a79e:	e7ef      	b.n	800a780 <ucdr_deserialize_endian_uint16_t+0x94>
 800a7a0:	68a2      	ldr	r2, [r4, #8]
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	7da0      	ldrb	r0, [r4, #22]
 800a7a6:	f884 9015 	strb.w	r9, [r4, #21]
 800a7aa:	1bd2      	subs	r2, r2, r7
 800a7ac:	1bdb      	subs	r3, r3, r7
 800a7ae:	60a2      	str	r2, [r4, #8]
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	f080 0001 	eor.w	r0, r0, #1
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	706b      	strb	r3, [r5, #1]
 800a7c0:	e7c3      	b.n	800a74a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a7c2:	4641      	mov	r1, r8
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f00e fecf 	bl	801956a <memcpy>
 800a7cc:	68a1      	ldr	r1, [r4, #8]
 800a7ce:	4652      	mov	r2, sl
 800a7d0:	19e8      	adds	r0, r5, r7
 800a7d2:	f00e feca 	bl	801956a <memcpy>
 800a7d6:	e7b8      	b.n	800a74a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a7d8 <ucdr_serialize_uint32_t>:
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	4604      	mov	r4, r0
 800a7e0:	9101      	str	r1, [sp, #4]
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	f001 f8d0 	bl	800b988 <ucdr_buffer_alignment>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	7d67      	ldrb	r7, [r4, #21]
 800a7ee:	f001 f90f 	bl	800ba10 <ucdr_advance_buffer>
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 f867 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d139      	bne.n	800a872 <ucdr_serialize_uint32_t+0x9a>
 800a7fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a802:	42ab      	cmp	r3, r5
 800a804:	d930      	bls.n	800a868 <ucdr_serialize_uint32_t+0x90>
 800a806:	1b5e      	subs	r6, r3, r5
 800a808:	60a3      	str	r3, [r4, #8]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	f1c6 0804 	rsb	r8, r6, #4
 800a810:	4433      	add	r3, r6
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	4641      	mov	r1, r8
 800a816:	4620      	mov	r0, r4
 800a818:	f001 f862 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d04c      	beq.n	800a8ba <ucdr_serialize_uint32_t+0xe2>
 800a820:	7d23      	ldrb	r3, [r4, #20]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d063      	beq.n	800a8ee <ucdr_serialize_uint32_t+0x116>
 800a826:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a82a:	702b      	strb	r3, [r5, #0]
 800a82c:	2e00      	cmp	r6, #0
 800a82e:	d051      	beq.n	800a8d4 <ucdr_serialize_uint32_t+0xfc>
 800a830:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a834:	706b      	strb	r3, [r5, #1]
 800a836:	2e01      	cmp	r6, #1
 800a838:	d050      	beq.n	800a8dc <ucdr_serialize_uint32_t+0x104>
 800a83a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a83e:	70ab      	strb	r3, [r5, #2]
 800a840:	2e02      	cmp	r6, #2
 800a842:	d04f      	beq.n	800a8e4 <ucdr_serialize_uint32_t+0x10c>
 800a844:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a848:	70eb      	strb	r3, [r5, #3]
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	68a2      	ldr	r2, [r4, #8]
 800a84e:	7da0      	ldrb	r0, [r4, #22]
 800a850:	3304      	adds	r3, #4
 800a852:	1b9e      	subs	r6, r3, r6
 800a854:	4442      	add	r2, r8
 800a856:	2304      	movs	r3, #4
 800a858:	f080 0001 	eor.w	r0, r0, #1
 800a85c:	60a2      	str	r2, [r4, #8]
 800a85e:	6126      	str	r6, [r4, #16]
 800a860:	7563      	strb	r3, [r4, #21]
 800a862:	b002      	add	sp, #8
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	2104      	movs	r1, #4
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 f838 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a870:	b1d0      	cbz	r0, 800a8a8 <ucdr_serialize_uint32_t+0xd0>
 800a872:	7d23      	ldrb	r3, [r4, #20]
 800a874:	2b01      	cmp	r3, #1
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	d01c      	beq.n	800a8b4 <ucdr_serialize_uint32_t+0xdc>
 800a87a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a886:	705a      	strb	r2, [r3, #1]
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a88e:	709a      	strb	r2, [r3, #2]
 800a890:	68a3      	ldr	r3, [r4, #8]
 800a892:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a896:	70da      	strb	r2, [r3, #3]
 800a898:	68a2      	ldr	r2, [r4, #8]
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	3204      	adds	r2, #4
 800a89e:	3304      	adds	r3, #4
 800a8a0:	2104      	movs	r1, #4
 800a8a2:	60a2      	str	r2, [r4, #8]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	7561      	strb	r1, [r4, #21]
 800a8a8:	7da0      	ldrb	r0, [r4, #22]
 800a8aa:	f080 0001 	eor.w	r0, r0, #1
 800a8ae:	b002      	add	sp, #8
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e7ee      	b.n	800a898 <ucdr_serialize_uint32_t+0xc0>
 800a8ba:	68a2      	ldr	r2, [r4, #8]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	7da0      	ldrb	r0, [r4, #22]
 800a8c0:	7567      	strb	r7, [r4, #21]
 800a8c2:	1b92      	subs	r2, r2, r6
 800a8c4:	1b9b      	subs	r3, r3, r6
 800a8c6:	f080 0001 	eor.w	r0, r0, #1
 800a8ca:	60a2      	str	r2, [r4, #8]
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	b002      	add	sp, #8
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	68a3      	ldr	r3, [r4, #8]
 800a8d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8da:	701a      	strb	r2, [r3, #0]
 800a8dc:	68a3      	ldr	r3, [r4, #8]
 800a8de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	68a3      	ldr	r3, [r4, #8]
 800a8e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	e7ad      	b.n	800a84a <ucdr_serialize_uint32_t+0x72>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	ad01      	add	r5, sp, #4
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	f00e fe38 	bl	801956a <memcpy>
 800a8fa:	68a0      	ldr	r0, [r4, #8]
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	19a9      	adds	r1, r5, r6
 800a900:	f00e fe33 	bl	801956a <memcpy>
 800a904:	e7a1      	b.n	800a84a <ucdr_serialize_uint32_t+0x72>
 800a906:	bf00      	nop

0800a908 <ucdr_serialize_endian_uint32_t>:
 800a908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a90c:	b083      	sub	sp, #12
 800a90e:	460d      	mov	r5, r1
 800a910:	2104      	movs	r1, #4
 800a912:	4604      	mov	r4, r0
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	f001 f837 	bl	800b988 <ucdr_buffer_alignment>
 800a91a:	4601      	mov	r1, r0
 800a91c:	4620      	mov	r0, r4
 800a91e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a922:	f001 f875 	bl	800ba10 <ucdr_advance_buffer>
 800a926:	2104      	movs	r1, #4
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 ffcd 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800a92e:	2800      	cmp	r0, #0
 800a930:	d138      	bne.n	800a9a4 <ucdr_serialize_endian_uint32_t+0x9c>
 800a932:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a936:	42b7      	cmp	r7, r6
 800a938:	d92f      	bls.n	800a99a <ucdr_serialize_endian_uint32_t+0x92>
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	60a7      	str	r7, [r4, #8]
 800a93e:	1bbf      	subs	r7, r7, r6
 800a940:	443b      	add	r3, r7
 800a942:	f1c7 0904 	rsb	r9, r7, #4
 800a946:	6123      	str	r3, [r4, #16]
 800a948:	4649      	mov	r1, r9
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 ffc8 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a950:	2800      	cmp	r0, #0
 800a952:	d04a      	beq.n	800a9ea <ucdr_serialize_endian_uint32_t+0xe2>
 800a954:	2d01      	cmp	r5, #1
 800a956:	d063      	beq.n	800aa20 <ucdr_serialize_endian_uint32_t+0x118>
 800a958:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a95c:	7033      	strb	r3, [r6, #0]
 800a95e:	2f00      	cmp	r7, #0
 800a960:	d051      	beq.n	800aa06 <ucdr_serialize_endian_uint32_t+0xfe>
 800a962:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a966:	7073      	strb	r3, [r6, #1]
 800a968:	2f01      	cmp	r7, #1
 800a96a:	d050      	beq.n	800aa0e <ucdr_serialize_endian_uint32_t+0x106>
 800a96c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a970:	70b3      	strb	r3, [r6, #2]
 800a972:	2f02      	cmp	r7, #2
 800a974:	d04f      	beq.n	800aa16 <ucdr_serialize_endian_uint32_t+0x10e>
 800a976:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a97a:	70f3      	strb	r3, [r6, #3]
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	68a2      	ldr	r2, [r4, #8]
 800a980:	7da0      	ldrb	r0, [r4, #22]
 800a982:	3304      	adds	r3, #4
 800a984:	444a      	add	r2, r9
 800a986:	1bdb      	subs	r3, r3, r7
 800a988:	2104      	movs	r1, #4
 800a98a:	f080 0001 	eor.w	r0, r0, #1
 800a98e:	60a2      	str	r2, [r4, #8]
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	7561      	strb	r1, [r4, #21]
 800a994:	b003      	add	sp, #12
 800a996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a99a:	2104      	movs	r1, #4
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 ff9f 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800a9a2:	b1c8      	cbz	r0, 800a9d8 <ucdr_serialize_endian_uint32_t+0xd0>
 800a9a4:	2d01      	cmp	r5, #1
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	d01c      	beq.n	800a9e4 <ucdr_serialize_endian_uint32_t+0xdc>
 800a9aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9ae:	701a      	strb	r2, [r3, #0]
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9b6:	705a      	strb	r2, [r3, #1]
 800a9b8:	68a3      	ldr	r3, [r4, #8]
 800a9ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9be:	709a      	strb	r2, [r3, #2]
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9c6:	70da      	strb	r2, [r3, #3]
 800a9c8:	68a2      	ldr	r2, [r4, #8]
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	3204      	adds	r2, #4
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	2104      	movs	r1, #4
 800a9d2:	60a2      	str	r2, [r4, #8]
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	7561      	strb	r1, [r4, #21]
 800a9d8:	7da0      	ldrb	r0, [r4, #22]
 800a9da:	f080 0001 	eor.w	r0, r0, #1
 800a9de:	b003      	add	sp, #12
 800a9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9e4:	9a01      	ldr	r2, [sp, #4]
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	e7ee      	b.n	800a9c8 <ucdr_serialize_endian_uint32_t+0xc0>
 800a9ea:	68a2      	ldr	r2, [r4, #8]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	7da0      	ldrb	r0, [r4, #22]
 800a9f0:	f884 8015 	strb.w	r8, [r4, #21]
 800a9f4:	1bd2      	subs	r2, r2, r7
 800a9f6:	1bdb      	subs	r3, r3, r7
 800a9f8:	f080 0001 	eor.w	r0, r0, #1
 800a9fc:	60a2      	str	r2, [r4, #8]
 800a9fe:	6123      	str	r3, [r4, #16]
 800aa00:	b003      	add	sp, #12
 800aa02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	68a3      	ldr	r3, [r4, #8]
 800aa18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e7ad      	b.n	800a97c <ucdr_serialize_endian_uint32_t+0x74>
 800aa20:	ad01      	add	r5, sp, #4
 800aa22:	4629      	mov	r1, r5
 800aa24:	463a      	mov	r2, r7
 800aa26:	4630      	mov	r0, r6
 800aa28:	f00e fd9f 	bl	801956a <memcpy>
 800aa2c:	68a0      	ldr	r0, [r4, #8]
 800aa2e:	464a      	mov	r2, r9
 800aa30:	19e9      	adds	r1, r5, r7
 800aa32:	f00e fd9a 	bl	801956a <memcpy>
 800aa36:	e7a1      	b.n	800a97c <ucdr_serialize_endian_uint32_t+0x74>

0800aa38 <ucdr_deserialize_uint32_t>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	2104      	movs	r1, #4
 800aa40:	4604      	mov	r4, r0
 800aa42:	f000 ffa1 	bl	800b988 <ucdr_buffer_alignment>
 800aa46:	4601      	mov	r1, r0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa4e:	f000 ffdf 	bl	800ba10 <ucdr_advance_buffer>
 800aa52:	2104      	movs	r1, #4
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 ff37 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d138      	bne.n	800aad0 <ucdr_deserialize_uint32_t+0x98>
 800aa5e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aa62:	42b7      	cmp	r7, r6
 800aa64:	d92f      	bls.n	800aac6 <ucdr_deserialize_uint32_t+0x8e>
 800aa66:	6923      	ldr	r3, [r4, #16]
 800aa68:	60a7      	str	r7, [r4, #8]
 800aa6a:	1bbf      	subs	r7, r7, r6
 800aa6c:	443b      	add	r3, r7
 800aa6e:	f1c7 0904 	rsb	r9, r7, #4
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	4649      	mov	r1, r9
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 ff32 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d046      	beq.n	800ab0e <ucdr_deserialize_uint32_t+0xd6>
 800aa80:	7d23      	ldrb	r3, [r4, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d05c      	beq.n	800ab40 <ucdr_deserialize_uint32_t+0x108>
 800aa86:	78f3      	ldrb	r3, [r6, #3]
 800aa88:	702b      	strb	r3, [r5, #0]
 800aa8a:	2f00      	cmp	r7, #0
 800aa8c:	d04c      	beq.n	800ab28 <ucdr_deserialize_uint32_t+0xf0>
 800aa8e:	78b3      	ldrb	r3, [r6, #2]
 800aa90:	706b      	strb	r3, [r5, #1]
 800aa92:	2f01      	cmp	r7, #1
 800aa94:	f105 0302 	add.w	r3, r5, #2
 800aa98:	d04a      	beq.n	800ab30 <ucdr_deserialize_uint32_t+0xf8>
 800aa9a:	7873      	ldrb	r3, [r6, #1]
 800aa9c:	70ab      	strb	r3, [r5, #2]
 800aa9e:	2f02      	cmp	r7, #2
 800aaa0:	f105 0303 	add.w	r3, r5, #3
 800aaa4:	d048      	beq.n	800ab38 <ucdr_deserialize_uint32_t+0x100>
 800aaa6:	7833      	ldrb	r3, [r6, #0]
 800aaa8:	70eb      	strb	r3, [r5, #3]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	68a2      	ldr	r2, [r4, #8]
 800aaae:	7da0      	ldrb	r0, [r4, #22]
 800aab0:	2104      	movs	r1, #4
 800aab2:	3304      	adds	r3, #4
 800aab4:	444a      	add	r2, r9
 800aab6:	1bdb      	subs	r3, r3, r7
 800aab8:	7561      	strb	r1, [r4, #21]
 800aaba:	60a2      	str	r2, [r4, #8]
 800aabc:	6123      	str	r3, [r4, #16]
 800aabe:	f080 0001 	eor.w	r0, r0, #1
 800aac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac6:	2104      	movs	r1, #4
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 ff09 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800aace:	b1b0      	cbz	r0, 800aafe <ucdr_deserialize_uint32_t+0xc6>
 800aad0:	7d23      	ldrb	r3, [r4, #20]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	68a3      	ldr	r3, [r4, #8]
 800aad6:	d017      	beq.n	800ab08 <ucdr_deserialize_uint32_t+0xd0>
 800aad8:	78db      	ldrb	r3, [r3, #3]
 800aada:	702b      	strb	r3, [r5, #0]
 800aadc:	68a3      	ldr	r3, [r4, #8]
 800aade:	789b      	ldrb	r3, [r3, #2]
 800aae0:	706b      	strb	r3, [r5, #1]
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	70ab      	strb	r3, [r5, #2]
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	70eb      	strb	r3, [r5, #3]
 800aaee:	68a2      	ldr	r2, [r4, #8]
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	3204      	adds	r2, #4
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	2104      	movs	r1, #4
 800aaf8:	60a2      	str	r2, [r4, #8]
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	7561      	strb	r1, [r4, #21]
 800aafe:	7da0      	ldrb	r0, [r4, #22]
 800ab00:	f080 0001 	eor.w	r0, r0, #1
 800ab04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	e7ef      	b.n	800aaee <ucdr_deserialize_uint32_t+0xb6>
 800ab0e:	68a2      	ldr	r2, [r4, #8]
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	7da0      	ldrb	r0, [r4, #22]
 800ab14:	f884 8015 	strb.w	r8, [r4, #21]
 800ab18:	1bd2      	subs	r2, r2, r7
 800ab1a:	1bdb      	subs	r3, r3, r7
 800ab1c:	60a2      	str	r2, [r4, #8]
 800ab1e:	6123      	str	r3, [r4, #16]
 800ab20:	f080 0001 	eor.w	r0, r0, #1
 800ab24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	789b      	ldrb	r3, [r3, #2]
 800ab2c:	706b      	strb	r3, [r5, #1]
 800ab2e:	1cab      	adds	r3, r5, #2
 800ab30:	68a2      	ldr	r2, [r4, #8]
 800ab32:	7852      	ldrb	r2, [r2, #1]
 800ab34:	f803 2b01 	strb.w	r2, [r3], #1
 800ab38:	68a2      	ldr	r2, [r4, #8]
 800ab3a:	7812      	ldrb	r2, [r2, #0]
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	e7b4      	b.n	800aaaa <ucdr_deserialize_uint32_t+0x72>
 800ab40:	4631      	mov	r1, r6
 800ab42:	463a      	mov	r2, r7
 800ab44:	4628      	mov	r0, r5
 800ab46:	f00e fd10 	bl	801956a <memcpy>
 800ab4a:	68a1      	ldr	r1, [r4, #8]
 800ab4c:	464a      	mov	r2, r9
 800ab4e:	19e8      	adds	r0, r5, r7
 800ab50:	f00e fd0b 	bl	801956a <memcpy>
 800ab54:	e7a9      	b.n	800aaaa <ucdr_deserialize_uint32_t+0x72>
 800ab56:	bf00      	nop

0800ab58 <ucdr_deserialize_endian_uint32_t>:
 800ab58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	460e      	mov	r6, r1
 800ab5e:	2104      	movs	r1, #4
 800ab60:	4604      	mov	r4, r0
 800ab62:	4615      	mov	r5, r2
 800ab64:	f000 ff10 	bl	800b988 <ucdr_buffer_alignment>
 800ab68:	4601      	mov	r1, r0
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ab70:	f000 ff4e 	bl	800ba10 <ucdr_advance_buffer>
 800ab74:	2104      	movs	r1, #4
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fea6 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d13c      	bne.n	800abfa <ucdr_deserialize_endian_uint32_t+0xa2>
 800ab80:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ab84:	42bb      	cmp	r3, r7
 800ab86:	d933      	bls.n	800abf0 <ucdr_deserialize_endian_uint32_t+0x98>
 800ab88:	eba3 0807 	sub.w	r8, r3, r7
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	f1c8 0a04 	rsb	sl, r8, #4
 800ab94:	4443      	add	r3, r8
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	4651      	mov	r1, sl
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fea0 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d048      	beq.n	800ac36 <ucdr_deserialize_endian_uint32_t+0xde>
 800aba4:	2e01      	cmp	r6, #1
 800aba6:	d061      	beq.n	800ac6c <ucdr_deserialize_endian_uint32_t+0x114>
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	702b      	strb	r3, [r5, #0]
 800abac:	f1b8 0f00 	cmp.w	r8, #0
 800abb0:	d050      	beq.n	800ac54 <ucdr_deserialize_endian_uint32_t+0xfc>
 800abb2:	78bb      	ldrb	r3, [r7, #2]
 800abb4:	706b      	strb	r3, [r5, #1]
 800abb6:	f1b8 0f01 	cmp.w	r8, #1
 800abba:	f105 0302 	add.w	r3, r5, #2
 800abbe:	d04d      	beq.n	800ac5c <ucdr_deserialize_endian_uint32_t+0x104>
 800abc0:	787b      	ldrb	r3, [r7, #1]
 800abc2:	70ab      	strb	r3, [r5, #2]
 800abc4:	f1b8 0f02 	cmp.w	r8, #2
 800abc8:	f105 0303 	add.w	r3, r5, #3
 800abcc:	d04a      	beq.n	800ac64 <ucdr_deserialize_endian_uint32_t+0x10c>
 800abce:	783b      	ldrb	r3, [r7, #0]
 800abd0:	70eb      	strb	r3, [r5, #3]
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	68a2      	ldr	r2, [r4, #8]
 800abd6:	7da0      	ldrb	r0, [r4, #22]
 800abd8:	2104      	movs	r1, #4
 800abda:	3304      	adds	r3, #4
 800abdc:	4452      	add	r2, sl
 800abde:	eba3 0308 	sub.w	r3, r3, r8
 800abe2:	7561      	strb	r1, [r4, #21]
 800abe4:	60a2      	str	r2, [r4, #8]
 800abe6:	6123      	str	r3, [r4, #16]
 800abe8:	f080 0001 	eor.w	r0, r0, #1
 800abec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf0:	2104      	movs	r1, #4
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 fe74 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800abf8:	b1a8      	cbz	r0, 800ac26 <ucdr_deserialize_endian_uint32_t+0xce>
 800abfa:	2e01      	cmp	r6, #1
 800abfc:	68a3      	ldr	r3, [r4, #8]
 800abfe:	d017      	beq.n	800ac30 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ac00:	78db      	ldrb	r3, [r3, #3]
 800ac02:	702b      	strb	r3, [r5, #0]
 800ac04:	68a3      	ldr	r3, [r4, #8]
 800ac06:	789b      	ldrb	r3, [r3, #2]
 800ac08:	706b      	strb	r3, [r5, #1]
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	70ab      	strb	r3, [r5, #2]
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	70eb      	strb	r3, [r5, #3]
 800ac16:	68a2      	ldr	r2, [r4, #8]
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	3204      	adds	r2, #4
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	2104      	movs	r1, #4
 800ac20:	60a2      	str	r2, [r4, #8]
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	7561      	strb	r1, [r4, #21]
 800ac26:	7da0      	ldrb	r0, [r4, #22]
 800ac28:	f080 0001 	eor.w	r0, r0, #1
 800ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	e7ef      	b.n	800ac16 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ac36:	68a2      	ldr	r2, [r4, #8]
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	7da0      	ldrb	r0, [r4, #22]
 800ac3c:	f884 9015 	strb.w	r9, [r4, #21]
 800ac40:	eba2 0208 	sub.w	r2, r2, r8
 800ac44:	eba3 0308 	sub.w	r3, r3, r8
 800ac48:	60a2      	str	r2, [r4, #8]
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	f080 0001 	eor.w	r0, r0, #1
 800ac50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	789b      	ldrb	r3, [r3, #2]
 800ac58:	706b      	strb	r3, [r5, #1]
 800ac5a:	1cab      	adds	r3, r5, #2
 800ac5c:	68a2      	ldr	r2, [r4, #8]
 800ac5e:	7852      	ldrb	r2, [r2, #1]
 800ac60:	f803 2b01 	strb.w	r2, [r3], #1
 800ac64:	68a2      	ldr	r2, [r4, #8]
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	701a      	strb	r2, [r3, #0]
 800ac6a:	e7b2      	b.n	800abd2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	4642      	mov	r2, r8
 800ac70:	4628      	mov	r0, r5
 800ac72:	f00e fc7a 	bl	801956a <memcpy>
 800ac76:	68a1      	ldr	r1, [r4, #8]
 800ac78:	4652      	mov	r2, sl
 800ac7a:	eb05 0008 	add.w	r0, r5, r8
 800ac7e:	f00e fc74 	bl	801956a <memcpy>
 800ac82:	e7a6      	b.n	800abd2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ac84 <ucdr_serialize_uint64_t>:
 800ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac88:	2108      	movs	r1, #8
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	e9cd 2300 	strd	r2, r3, [sp]
 800ac92:	f000 fe79 	bl	800b988 <ucdr_buffer_alignment>
 800ac96:	4601      	mov	r1, r0
 800ac98:	4620      	mov	r0, r4
 800ac9a:	7d67      	ldrb	r7, [r4, #21]
 800ac9c:	f000 feb8 	bl	800ba10 <ucdr_advance_buffer>
 800aca0:	2108      	movs	r1, #8
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fe10 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d14e      	bne.n	800ad4a <ucdr_serialize_uint64_t+0xc6>
 800acac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800acb0:	42ab      	cmp	r3, r5
 800acb2:	d945      	bls.n	800ad40 <ucdr_serialize_uint64_t+0xbc>
 800acb4:	1b5e      	subs	r6, r3, r5
 800acb6:	60a3      	str	r3, [r4, #8]
 800acb8:	6923      	ldr	r3, [r4, #16]
 800acba:	f1c6 0808 	rsb	r8, r6, #8
 800acbe:	4433      	add	r3, r6
 800acc0:	6123      	str	r3, [r4, #16]
 800acc2:	4641      	mov	r1, r8
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fe0b 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800acca:	2800      	cmp	r0, #0
 800accc:	d074      	beq.n	800adb8 <ucdr_serialize_uint64_t+0x134>
 800acce:	7d23      	ldrb	r3, [r4, #20]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	f000 809b 	beq.w	800ae0c <ucdr_serialize_uint64_t+0x188>
 800acd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acda:	702b      	strb	r3, [r5, #0]
 800acdc:	2e00      	cmp	r6, #0
 800acde:	d078      	beq.n	800add2 <ucdr_serialize_uint64_t+0x14e>
 800ace0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ace4:	706b      	strb	r3, [r5, #1]
 800ace6:	2e01      	cmp	r6, #1
 800ace8:	d077      	beq.n	800adda <ucdr_serialize_uint64_t+0x156>
 800acea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acee:	70ab      	strb	r3, [r5, #2]
 800acf0:	2e02      	cmp	r6, #2
 800acf2:	d076      	beq.n	800ade2 <ucdr_serialize_uint64_t+0x15e>
 800acf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acf8:	70eb      	strb	r3, [r5, #3]
 800acfa:	2e03      	cmp	r6, #3
 800acfc:	d075      	beq.n	800adea <ucdr_serialize_uint64_t+0x166>
 800acfe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ad02:	712b      	strb	r3, [r5, #4]
 800ad04:	2e04      	cmp	r6, #4
 800ad06:	d074      	beq.n	800adf2 <ucdr_serialize_uint64_t+0x16e>
 800ad08:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ad0c:	716b      	strb	r3, [r5, #5]
 800ad0e:	2e05      	cmp	r6, #5
 800ad10:	d073      	beq.n	800adfa <ucdr_serialize_uint64_t+0x176>
 800ad12:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ad16:	71ab      	strb	r3, [r5, #6]
 800ad18:	2e06      	cmp	r6, #6
 800ad1a:	d072      	beq.n	800ae02 <ucdr_serialize_uint64_t+0x17e>
 800ad1c:	f89d 3000 	ldrb.w	r3, [sp]
 800ad20:	71eb      	strb	r3, [r5, #7]
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	68a2      	ldr	r2, [r4, #8]
 800ad26:	7da0      	ldrb	r0, [r4, #22]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	1b9e      	subs	r6, r3, r6
 800ad2c:	4442      	add	r2, r8
 800ad2e:	2308      	movs	r3, #8
 800ad30:	f080 0001 	eor.w	r0, r0, #1
 800ad34:	60a2      	str	r2, [r4, #8]
 800ad36:	6126      	str	r6, [r4, #16]
 800ad38:	7563      	strb	r3, [r4, #21]
 800ad3a:	b002      	add	sp, #8
 800ad3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad40:	2108      	movs	r1, #8
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fdcc 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800ad48:	b350      	cbz	r0, 800ada0 <ucdr_serialize_uint64_t+0x11c>
 800ad4a:	7d23      	ldrb	r3, [r4, #20]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d02d      	beq.n	800adac <ucdr_serialize_uint64_t+0x128>
 800ad50:	68a3      	ldr	r3, [r4, #8]
 800ad52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad5e:	705a      	strb	r2, [r3, #1]
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad66:	709a      	strb	r2, [r3, #2]
 800ad68:	68a3      	ldr	r3, [r4, #8]
 800ad6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad6e:	70da      	strb	r2, [r3, #3]
 800ad70:	68a3      	ldr	r3, [r4, #8]
 800ad72:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ad76:	711a      	strb	r2, [r3, #4]
 800ad78:	68a3      	ldr	r3, [r4, #8]
 800ad7a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ad7e:	715a      	strb	r2, [r3, #5]
 800ad80:	68a3      	ldr	r3, [r4, #8]
 800ad82:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ad86:	719a      	strb	r2, [r3, #6]
 800ad88:	68a3      	ldr	r3, [r4, #8]
 800ad8a:	f89d 2000 	ldrb.w	r2, [sp]
 800ad8e:	71da      	strb	r2, [r3, #7]
 800ad90:	68a2      	ldr	r2, [r4, #8]
 800ad92:	6923      	ldr	r3, [r4, #16]
 800ad94:	3208      	adds	r2, #8
 800ad96:	3308      	adds	r3, #8
 800ad98:	2108      	movs	r1, #8
 800ad9a:	60a2      	str	r2, [r4, #8]
 800ad9c:	6123      	str	r3, [r4, #16]
 800ad9e:	7561      	strb	r1, [r4, #21]
 800ada0:	7da0      	ldrb	r0, [r4, #22]
 800ada2:	f080 0001 	eor.w	r0, r0, #1
 800ada6:	b002      	add	sp, #8
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	466b      	mov	r3, sp
 800adae:	cb03      	ldmia	r3!, {r0, r1}
 800adb0:	68a3      	ldr	r3, [r4, #8]
 800adb2:	6018      	str	r0, [r3, #0]
 800adb4:	6059      	str	r1, [r3, #4]
 800adb6:	e7eb      	b.n	800ad90 <ucdr_serialize_uint64_t+0x10c>
 800adb8:	68a2      	ldr	r2, [r4, #8]
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	7da0      	ldrb	r0, [r4, #22]
 800adbe:	7567      	strb	r7, [r4, #21]
 800adc0:	1b92      	subs	r2, r2, r6
 800adc2:	1b9b      	subs	r3, r3, r6
 800adc4:	f080 0001 	eor.w	r0, r0, #1
 800adc8:	60a2      	str	r2, [r4, #8]
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	b002      	add	sp, #8
 800adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	68a3      	ldr	r3, [r4, #8]
 800adfc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	68a3      	ldr	r3, [r4, #8]
 800ae04:	f89d 2000 	ldrb.w	r2, [sp]
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	e78a      	b.n	800ad22 <ucdr_serialize_uint64_t+0x9e>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	466d      	mov	r5, sp
 800ae10:	4629      	mov	r1, r5
 800ae12:	4632      	mov	r2, r6
 800ae14:	f00e fba9 	bl	801956a <memcpy>
 800ae18:	68a0      	ldr	r0, [r4, #8]
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	19a9      	adds	r1, r5, r6
 800ae1e:	f00e fba4 	bl	801956a <memcpy>
 800ae22:	e77e      	b.n	800ad22 <ucdr_serialize_uint64_t+0x9e>

0800ae24 <ucdr_serialize_int16_t>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	2102      	movs	r1, #2
 800ae2e:	4604      	mov	r4, r0
 800ae30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ae34:	f000 fda8 	bl	800b988 <ucdr_buffer_alignment>
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	7d67      	ldrb	r7, [r4, #21]
 800ae3e:	f000 fde7 	bl	800ba10 <ucdr_advance_buffer>
 800ae42:	2102      	movs	r1, #2
 800ae44:	4620      	mov	r0, r4
 800ae46:	f000 fd3f 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800ae4a:	bb78      	cbnz	r0, 800aeac <ucdr_serialize_int16_t+0x88>
 800ae4c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	d926      	bls.n	800aea2 <ucdr_serialize_int16_t+0x7e>
 800ae54:	1b5e      	subs	r6, r3, r5
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	f1c6 0802 	rsb	r8, r6, #2
 800ae5e:	4433      	add	r3, r6
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	4641      	mov	r1, r8
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fd3b 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d03b      	beq.n	800aee6 <ucdr_serialize_int16_t+0xc2>
 800ae6e:	7d23      	ldrb	r3, [r4, #20]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d04a      	beq.n	800af0a <ucdr_serialize_int16_t+0xe6>
 800ae74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae78:	702b      	strb	r3, [r5, #0]
 800ae7a:	2e00      	cmp	r6, #0
 800ae7c:	d040      	beq.n	800af00 <ucdr_serialize_int16_t+0xdc>
 800ae7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae82:	706b      	strb	r3, [r5, #1]
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	68a2      	ldr	r2, [r4, #8]
 800ae88:	7da0      	ldrb	r0, [r4, #22]
 800ae8a:	3302      	adds	r3, #2
 800ae8c:	1b9e      	subs	r6, r3, r6
 800ae8e:	4442      	add	r2, r8
 800ae90:	2302      	movs	r3, #2
 800ae92:	f080 0001 	eor.w	r0, r0, #1
 800ae96:	60a2      	str	r2, [r4, #8]
 800ae98:	6126      	str	r6, [r4, #16]
 800ae9a:	7563      	strb	r3, [r4, #21]
 800ae9c:	b002      	add	sp, #8
 800ae9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea2:	2102      	movs	r1, #2
 800aea4:	4620      	mov	r0, r4
 800aea6:	f000 fd1b 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800aeaa:	b190      	cbz	r0, 800aed2 <ucdr_serialize_int16_t+0xae>
 800aeac:	7d23      	ldrb	r3, [r4, #20]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	d014      	beq.n	800aede <ucdr_serialize_int16_t+0xba>
 800aeb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aec0:	705a      	strb	r2, [r3, #1]
 800aec2:	68a2      	ldr	r2, [r4, #8]
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	3202      	adds	r2, #2
 800aec8:	3302      	adds	r3, #2
 800aeca:	2102      	movs	r1, #2
 800aecc:	60a2      	str	r2, [r4, #8]
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	7561      	strb	r1, [r4, #21]
 800aed2:	7da0      	ldrb	r0, [r4, #22]
 800aed4:	f080 0001 	eor.w	r0, r0, #1
 800aed8:	b002      	add	sp, #8
 800aeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aede:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	e7ed      	b.n	800aec2 <ucdr_serialize_int16_t+0x9e>
 800aee6:	68a2      	ldr	r2, [r4, #8]
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	7da0      	ldrb	r0, [r4, #22]
 800aeec:	7567      	strb	r7, [r4, #21]
 800aeee:	1b92      	subs	r2, r2, r6
 800aef0:	1b9b      	subs	r3, r3, r6
 800aef2:	f080 0001 	eor.w	r0, r0, #1
 800aef6:	60a2      	str	r2, [r4, #8]
 800aef8:	6123      	str	r3, [r4, #16]
 800aefa:	b002      	add	sp, #8
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e7bc      	b.n	800ae84 <ucdr_serialize_int16_t+0x60>
 800af0a:	4628      	mov	r0, r5
 800af0c:	f10d 0506 	add.w	r5, sp, #6
 800af10:	4629      	mov	r1, r5
 800af12:	4632      	mov	r2, r6
 800af14:	f00e fb29 	bl	801956a <memcpy>
 800af18:	68a0      	ldr	r0, [r4, #8]
 800af1a:	4642      	mov	r2, r8
 800af1c:	19a9      	adds	r1, r5, r6
 800af1e:	f00e fb24 	bl	801956a <memcpy>
 800af22:	e7af      	b.n	800ae84 <ucdr_serialize_int16_t+0x60>

0800af24 <ucdr_deserialize_int16_t>:
 800af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af28:	460d      	mov	r5, r1
 800af2a:	2102      	movs	r1, #2
 800af2c:	4604      	mov	r4, r0
 800af2e:	f000 fd2b 	bl	800b988 <ucdr_buffer_alignment>
 800af32:	4601      	mov	r1, r0
 800af34:	4620      	mov	r0, r4
 800af36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af3a:	f000 fd69 	bl	800ba10 <ucdr_advance_buffer>
 800af3e:	2102      	movs	r1, #2
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fcc1 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800af46:	bb60      	cbnz	r0, 800afa2 <ucdr_deserialize_int16_t+0x7e>
 800af48:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800af4c:	42be      	cmp	r6, r7
 800af4e:	d923      	bls.n	800af98 <ucdr_deserialize_int16_t+0x74>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	60a6      	str	r6, [r4, #8]
 800af54:	1bf6      	subs	r6, r6, r7
 800af56:	4433      	add	r3, r6
 800af58:	f1c6 0902 	rsb	r9, r6, #2
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	4649      	mov	r1, r9
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fcbd 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800af66:	2800      	cmp	r0, #0
 800af68:	d034      	beq.n	800afd4 <ucdr_deserialize_int16_t+0xb0>
 800af6a:	7d23      	ldrb	r3, [r4, #20]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d042      	beq.n	800aff6 <ucdr_deserialize_int16_t+0xd2>
 800af70:	787b      	ldrb	r3, [r7, #1]
 800af72:	702b      	strb	r3, [r5, #0]
 800af74:	2e00      	cmp	r6, #0
 800af76:	d03a      	beq.n	800afee <ucdr_deserialize_int16_t+0xca>
 800af78:	783b      	ldrb	r3, [r7, #0]
 800af7a:	706b      	strb	r3, [r5, #1]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	68a2      	ldr	r2, [r4, #8]
 800af80:	7da0      	ldrb	r0, [r4, #22]
 800af82:	2102      	movs	r1, #2
 800af84:	3302      	adds	r3, #2
 800af86:	444a      	add	r2, r9
 800af88:	1b9b      	subs	r3, r3, r6
 800af8a:	7561      	strb	r1, [r4, #21]
 800af8c:	60a2      	str	r2, [r4, #8]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	f080 0001 	eor.w	r0, r0, #1
 800af94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af98:	2102      	movs	r1, #2
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 fca0 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800afa0:	b180      	cbz	r0, 800afc4 <ucdr_deserialize_int16_t+0xa0>
 800afa2:	7d23      	ldrb	r3, [r4, #20]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	d011      	beq.n	800afce <ucdr_deserialize_int16_t+0xaa>
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	702b      	strb	r3, [r5, #0]
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	706b      	strb	r3, [r5, #1]
 800afb4:	68a2      	ldr	r2, [r4, #8]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	3302      	adds	r3, #2
 800afbc:	2102      	movs	r1, #2
 800afbe:	60a2      	str	r2, [r4, #8]
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	7561      	strb	r1, [r4, #21]
 800afc4:	7da0      	ldrb	r0, [r4, #22]
 800afc6:	f080 0001 	eor.w	r0, r0, #1
 800afca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	802b      	strh	r3, [r5, #0]
 800afd2:	e7ef      	b.n	800afb4 <ucdr_deserialize_int16_t+0x90>
 800afd4:	68a2      	ldr	r2, [r4, #8]
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	7da0      	ldrb	r0, [r4, #22]
 800afda:	f884 8015 	strb.w	r8, [r4, #21]
 800afde:	1b92      	subs	r2, r2, r6
 800afe0:	1b9b      	subs	r3, r3, r6
 800afe2:	60a2      	str	r2, [r4, #8]
 800afe4:	6123      	str	r3, [r4, #16]
 800afe6:	f080 0001 	eor.w	r0, r0, #1
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	706b      	strb	r3, [r5, #1]
 800aff4:	e7c2      	b.n	800af7c <ucdr_deserialize_int16_t+0x58>
 800aff6:	4639      	mov	r1, r7
 800aff8:	4632      	mov	r2, r6
 800affa:	4628      	mov	r0, r5
 800affc:	f00e fab5 	bl	801956a <memcpy>
 800b000:	68a1      	ldr	r1, [r4, #8]
 800b002:	464a      	mov	r2, r9
 800b004:	19a8      	adds	r0, r5, r6
 800b006:	f00e fab0 	bl	801956a <memcpy>
 800b00a:	e7b7      	b.n	800af7c <ucdr_deserialize_int16_t+0x58>

0800b00c <ucdr_serialize_int32_t>:
 800b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	4604      	mov	r4, r0
 800b014:	9101      	str	r1, [sp, #4]
 800b016:	2104      	movs	r1, #4
 800b018:	f000 fcb6 	bl	800b988 <ucdr_buffer_alignment>
 800b01c:	4601      	mov	r1, r0
 800b01e:	4620      	mov	r0, r4
 800b020:	7d67      	ldrb	r7, [r4, #21]
 800b022:	f000 fcf5 	bl	800ba10 <ucdr_advance_buffer>
 800b026:	2104      	movs	r1, #4
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fc4d 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d139      	bne.n	800b0a6 <ucdr_serialize_int32_t+0x9a>
 800b032:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b036:	42ab      	cmp	r3, r5
 800b038:	d930      	bls.n	800b09c <ucdr_serialize_int32_t+0x90>
 800b03a:	1b5e      	subs	r6, r3, r5
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	f1c6 0804 	rsb	r8, r6, #4
 800b044:	4433      	add	r3, r6
 800b046:	6123      	str	r3, [r4, #16]
 800b048:	4641      	mov	r1, r8
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 fc48 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b050:	2800      	cmp	r0, #0
 800b052:	d04c      	beq.n	800b0ee <ucdr_serialize_int32_t+0xe2>
 800b054:	7d23      	ldrb	r3, [r4, #20]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d063      	beq.n	800b122 <ucdr_serialize_int32_t+0x116>
 800b05a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b05e:	702b      	strb	r3, [r5, #0]
 800b060:	2e00      	cmp	r6, #0
 800b062:	d051      	beq.n	800b108 <ucdr_serialize_int32_t+0xfc>
 800b064:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b068:	706b      	strb	r3, [r5, #1]
 800b06a:	2e01      	cmp	r6, #1
 800b06c:	d050      	beq.n	800b110 <ucdr_serialize_int32_t+0x104>
 800b06e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b072:	70ab      	strb	r3, [r5, #2]
 800b074:	2e02      	cmp	r6, #2
 800b076:	d04f      	beq.n	800b118 <ucdr_serialize_int32_t+0x10c>
 800b078:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b07c:	70eb      	strb	r3, [r5, #3]
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	68a2      	ldr	r2, [r4, #8]
 800b082:	7da0      	ldrb	r0, [r4, #22]
 800b084:	3304      	adds	r3, #4
 800b086:	1b9e      	subs	r6, r3, r6
 800b088:	4442      	add	r2, r8
 800b08a:	2304      	movs	r3, #4
 800b08c:	f080 0001 	eor.w	r0, r0, #1
 800b090:	60a2      	str	r2, [r4, #8]
 800b092:	6126      	str	r6, [r4, #16]
 800b094:	7563      	strb	r3, [r4, #21]
 800b096:	b002      	add	sp, #8
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	2104      	movs	r1, #4
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fc1e 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b0a4:	b1d0      	cbz	r0, 800b0dc <ucdr_serialize_int32_t+0xd0>
 800b0a6:	7d23      	ldrb	r3, [r4, #20]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	d01c      	beq.n	800b0e8 <ucdr_serialize_int32_t+0xdc>
 800b0ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0ba:	705a      	strb	r2, [r3, #1]
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0c2:	709a      	strb	r2, [r3, #2]
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0ca:	70da      	strb	r2, [r3, #3]
 800b0cc:	68a2      	ldr	r2, [r4, #8]
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	3204      	adds	r2, #4
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	2104      	movs	r1, #4
 800b0d6:	60a2      	str	r2, [r4, #8]
 800b0d8:	6123      	str	r3, [r4, #16]
 800b0da:	7561      	strb	r1, [r4, #21]
 800b0dc:	7da0      	ldrb	r0, [r4, #22]
 800b0de:	f080 0001 	eor.w	r0, r0, #1
 800b0e2:	b002      	add	sp, #8
 800b0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e8:	9a01      	ldr	r2, [sp, #4]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e7ee      	b.n	800b0cc <ucdr_serialize_int32_t+0xc0>
 800b0ee:	68a2      	ldr	r2, [r4, #8]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	7567      	strb	r7, [r4, #21]
 800b0f6:	1b92      	subs	r2, r2, r6
 800b0f8:	1b9b      	subs	r3, r3, r6
 800b0fa:	f080 0001 	eor.w	r0, r0, #1
 800b0fe:	60a2      	str	r2, [r4, #8]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	b002      	add	sp, #8
 800b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b108:	68a3      	ldr	r3, [r4, #8]
 800b10a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	68a3      	ldr	r3, [r4, #8]
 800b112:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b116:	701a      	strb	r2, [r3, #0]
 800b118:	68a3      	ldr	r3, [r4, #8]
 800b11a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	e7ad      	b.n	800b07e <ucdr_serialize_int32_t+0x72>
 800b122:	4628      	mov	r0, r5
 800b124:	ad01      	add	r5, sp, #4
 800b126:	4629      	mov	r1, r5
 800b128:	4632      	mov	r2, r6
 800b12a:	f00e fa1e 	bl	801956a <memcpy>
 800b12e:	68a0      	ldr	r0, [r4, #8]
 800b130:	4642      	mov	r2, r8
 800b132:	19a9      	adds	r1, r5, r6
 800b134:	f00e fa19 	bl	801956a <memcpy>
 800b138:	e7a1      	b.n	800b07e <ucdr_serialize_int32_t+0x72>
 800b13a:	bf00      	nop

0800b13c <ucdr_deserialize_int32_t>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	460d      	mov	r5, r1
 800b142:	2104      	movs	r1, #4
 800b144:	4604      	mov	r4, r0
 800b146:	f000 fc1f 	bl	800b988 <ucdr_buffer_alignment>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4620      	mov	r0, r4
 800b14e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b152:	f000 fc5d 	bl	800ba10 <ucdr_advance_buffer>
 800b156:	2104      	movs	r1, #4
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 fbb5 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d138      	bne.n	800b1d4 <ucdr_deserialize_int32_t+0x98>
 800b162:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b166:	42b7      	cmp	r7, r6
 800b168:	d92f      	bls.n	800b1ca <ucdr_deserialize_int32_t+0x8e>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	60a7      	str	r7, [r4, #8]
 800b16e:	1bbf      	subs	r7, r7, r6
 800b170:	443b      	add	r3, r7
 800b172:	f1c7 0904 	rsb	r9, r7, #4
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	4649      	mov	r1, r9
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fbb0 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b180:	2800      	cmp	r0, #0
 800b182:	d046      	beq.n	800b212 <ucdr_deserialize_int32_t+0xd6>
 800b184:	7d23      	ldrb	r3, [r4, #20]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d05c      	beq.n	800b244 <ucdr_deserialize_int32_t+0x108>
 800b18a:	78f3      	ldrb	r3, [r6, #3]
 800b18c:	702b      	strb	r3, [r5, #0]
 800b18e:	2f00      	cmp	r7, #0
 800b190:	d04c      	beq.n	800b22c <ucdr_deserialize_int32_t+0xf0>
 800b192:	78b3      	ldrb	r3, [r6, #2]
 800b194:	706b      	strb	r3, [r5, #1]
 800b196:	2f01      	cmp	r7, #1
 800b198:	f105 0302 	add.w	r3, r5, #2
 800b19c:	d04a      	beq.n	800b234 <ucdr_deserialize_int32_t+0xf8>
 800b19e:	7873      	ldrb	r3, [r6, #1]
 800b1a0:	70ab      	strb	r3, [r5, #2]
 800b1a2:	2f02      	cmp	r7, #2
 800b1a4:	f105 0303 	add.w	r3, r5, #3
 800b1a8:	d048      	beq.n	800b23c <ucdr_deserialize_int32_t+0x100>
 800b1aa:	7833      	ldrb	r3, [r6, #0]
 800b1ac:	70eb      	strb	r3, [r5, #3]
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	68a2      	ldr	r2, [r4, #8]
 800b1b2:	7da0      	ldrb	r0, [r4, #22]
 800b1b4:	2104      	movs	r1, #4
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	444a      	add	r2, r9
 800b1ba:	1bdb      	subs	r3, r3, r7
 800b1bc:	7561      	strb	r1, [r4, #21]
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	f080 0001 	eor.w	r0, r0, #1
 800b1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fb87 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b1d2:	b1b0      	cbz	r0, 800b202 <ucdr_deserialize_int32_t+0xc6>
 800b1d4:	7d23      	ldrb	r3, [r4, #20]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	68a3      	ldr	r3, [r4, #8]
 800b1da:	d017      	beq.n	800b20c <ucdr_deserialize_int32_t+0xd0>
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	702b      	strb	r3, [r5, #0]
 800b1e0:	68a3      	ldr	r3, [r4, #8]
 800b1e2:	789b      	ldrb	r3, [r3, #2]
 800b1e4:	706b      	strb	r3, [r5, #1]
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	785b      	ldrb	r3, [r3, #1]
 800b1ea:	70ab      	strb	r3, [r5, #2]
 800b1ec:	68a3      	ldr	r3, [r4, #8]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	70eb      	strb	r3, [r5, #3]
 800b1f2:	68a2      	ldr	r2, [r4, #8]
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	3204      	adds	r2, #4
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	60a2      	str	r2, [r4, #8]
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	7561      	strb	r1, [r4, #21]
 800b202:	7da0      	ldrb	r0, [r4, #22]
 800b204:	f080 0001 	eor.w	r0, r0, #1
 800b208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	e7ef      	b.n	800b1f2 <ucdr_deserialize_int32_t+0xb6>
 800b212:	68a2      	ldr	r2, [r4, #8]
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	7da0      	ldrb	r0, [r4, #22]
 800b218:	f884 8015 	strb.w	r8, [r4, #21]
 800b21c:	1bd2      	subs	r2, r2, r7
 800b21e:	1bdb      	subs	r3, r3, r7
 800b220:	60a2      	str	r2, [r4, #8]
 800b222:	6123      	str	r3, [r4, #16]
 800b224:	f080 0001 	eor.w	r0, r0, #1
 800b228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	789b      	ldrb	r3, [r3, #2]
 800b230:	706b      	strb	r3, [r5, #1]
 800b232:	1cab      	adds	r3, r5, #2
 800b234:	68a2      	ldr	r2, [r4, #8]
 800b236:	7852      	ldrb	r2, [r2, #1]
 800b238:	f803 2b01 	strb.w	r2, [r3], #1
 800b23c:	68a2      	ldr	r2, [r4, #8]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	e7b4      	b.n	800b1ae <ucdr_deserialize_int32_t+0x72>
 800b244:	4631      	mov	r1, r6
 800b246:	463a      	mov	r2, r7
 800b248:	4628      	mov	r0, r5
 800b24a:	f00e f98e 	bl	801956a <memcpy>
 800b24e:	68a1      	ldr	r1, [r4, #8]
 800b250:	464a      	mov	r2, r9
 800b252:	19e8      	adds	r0, r5, r7
 800b254:	f00e f989 	bl	801956a <memcpy>
 800b258:	e7a9      	b.n	800b1ae <ucdr_deserialize_int32_t+0x72>
 800b25a:	bf00      	nop

0800b25c <ucdr_serialize_double>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	2108      	movs	r1, #8
 800b262:	b082      	sub	sp, #8
 800b264:	4604      	mov	r4, r0
 800b266:	ed8d 0b00 	vstr	d0, [sp]
 800b26a:	f000 fb8d 	bl	800b988 <ucdr_buffer_alignment>
 800b26e:	4601      	mov	r1, r0
 800b270:	4620      	mov	r0, r4
 800b272:	7d67      	ldrb	r7, [r4, #21]
 800b274:	f000 fbcc 	bl	800ba10 <ucdr_advance_buffer>
 800b278:	2108      	movs	r1, #8
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fb24 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b280:	2800      	cmp	r0, #0
 800b282:	d14e      	bne.n	800b322 <ucdr_serialize_double+0xc6>
 800b284:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b288:	42ab      	cmp	r3, r5
 800b28a:	d945      	bls.n	800b318 <ucdr_serialize_double+0xbc>
 800b28c:	1b5e      	subs	r6, r3, r5
 800b28e:	60a3      	str	r3, [r4, #8]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	f1c6 0808 	rsb	r8, r6, #8
 800b296:	4433      	add	r3, r6
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	4641      	mov	r1, r8
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fb1f 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d074      	beq.n	800b390 <ucdr_serialize_double+0x134>
 800b2a6:	7d23      	ldrb	r3, [r4, #20]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	f000 809b 	beq.w	800b3e4 <ucdr_serialize_double+0x188>
 800b2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2b2:	702b      	strb	r3, [r5, #0]
 800b2b4:	2e00      	cmp	r6, #0
 800b2b6:	d078      	beq.n	800b3aa <ucdr_serialize_double+0x14e>
 800b2b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2bc:	706b      	strb	r3, [r5, #1]
 800b2be:	2e01      	cmp	r6, #1
 800b2c0:	d077      	beq.n	800b3b2 <ucdr_serialize_double+0x156>
 800b2c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b2c6:	70ab      	strb	r3, [r5, #2]
 800b2c8:	2e02      	cmp	r6, #2
 800b2ca:	d076      	beq.n	800b3ba <ucdr_serialize_double+0x15e>
 800b2cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b2d0:	70eb      	strb	r3, [r5, #3]
 800b2d2:	2e03      	cmp	r6, #3
 800b2d4:	d075      	beq.n	800b3c2 <ucdr_serialize_double+0x166>
 800b2d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b2da:	712b      	strb	r3, [r5, #4]
 800b2dc:	2e04      	cmp	r6, #4
 800b2de:	d074      	beq.n	800b3ca <ucdr_serialize_double+0x16e>
 800b2e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b2e4:	716b      	strb	r3, [r5, #5]
 800b2e6:	2e05      	cmp	r6, #5
 800b2e8:	d073      	beq.n	800b3d2 <ucdr_serialize_double+0x176>
 800b2ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b2ee:	71ab      	strb	r3, [r5, #6]
 800b2f0:	2e06      	cmp	r6, #6
 800b2f2:	d072      	beq.n	800b3da <ucdr_serialize_double+0x17e>
 800b2f4:	f89d 3000 	ldrb.w	r3, [sp]
 800b2f8:	71eb      	strb	r3, [r5, #7]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	68a2      	ldr	r2, [r4, #8]
 800b2fe:	7da0      	ldrb	r0, [r4, #22]
 800b300:	3308      	adds	r3, #8
 800b302:	1b9e      	subs	r6, r3, r6
 800b304:	4442      	add	r2, r8
 800b306:	2308      	movs	r3, #8
 800b308:	f080 0001 	eor.w	r0, r0, #1
 800b30c:	60a2      	str	r2, [r4, #8]
 800b30e:	6126      	str	r6, [r4, #16]
 800b310:	7563      	strb	r3, [r4, #21]
 800b312:	b002      	add	sp, #8
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	2108      	movs	r1, #8
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fae0 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b320:	b350      	cbz	r0, 800b378 <ucdr_serialize_double+0x11c>
 800b322:	7d23      	ldrb	r3, [r4, #20]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d02d      	beq.n	800b384 <ucdr_serialize_double+0x128>
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	68a3      	ldr	r3, [r4, #8]
 800b332:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b336:	705a      	strb	r2, [r3, #1]
 800b338:	68a3      	ldr	r3, [r4, #8]
 800b33a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b33e:	709a      	strb	r2, [r3, #2]
 800b340:	68a3      	ldr	r3, [r4, #8]
 800b342:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b346:	70da      	strb	r2, [r3, #3]
 800b348:	68a3      	ldr	r3, [r4, #8]
 800b34a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b34e:	711a      	strb	r2, [r3, #4]
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b356:	715a      	strb	r2, [r3, #5]
 800b358:	68a3      	ldr	r3, [r4, #8]
 800b35a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b35e:	719a      	strb	r2, [r3, #6]
 800b360:	68a3      	ldr	r3, [r4, #8]
 800b362:	f89d 2000 	ldrb.w	r2, [sp]
 800b366:	71da      	strb	r2, [r3, #7]
 800b368:	68a2      	ldr	r2, [r4, #8]
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	3208      	adds	r2, #8
 800b36e:	3308      	adds	r3, #8
 800b370:	2108      	movs	r1, #8
 800b372:	60a2      	str	r2, [r4, #8]
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	7561      	strb	r1, [r4, #21]
 800b378:	7da0      	ldrb	r0, [r4, #22]
 800b37a:	f080 0001 	eor.w	r0, r0, #1
 800b37e:	b002      	add	sp, #8
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	466b      	mov	r3, sp
 800b386:	cb03      	ldmia	r3!, {r0, r1}
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	6018      	str	r0, [r3, #0]
 800b38c:	6059      	str	r1, [r3, #4]
 800b38e:	e7eb      	b.n	800b368 <ucdr_serialize_double+0x10c>
 800b390:	68a2      	ldr	r2, [r4, #8]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	7da0      	ldrb	r0, [r4, #22]
 800b396:	7567      	strb	r7, [r4, #21]
 800b398:	1b92      	subs	r2, r2, r6
 800b39a:	1b9b      	subs	r3, r3, r6
 800b39c:	f080 0001 	eor.w	r0, r0, #1
 800b3a0:	60a2      	str	r2, [r4, #8]
 800b3a2:	6123      	str	r3, [r4, #16]
 800b3a4:	b002      	add	sp, #8
 800b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3b0:	701a      	strb	r2, [r3, #0]
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3c0:	701a      	strb	r2, [r3, #0]
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	68a3      	ldr	r3, [r4, #8]
 800b3d4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	f89d 2000 	ldrb.w	r2, [sp]
 800b3e0:	701a      	strb	r2, [r3, #0]
 800b3e2:	e78a      	b.n	800b2fa <ucdr_serialize_double+0x9e>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	466d      	mov	r5, sp
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	f00e f8bd 	bl	801956a <memcpy>
 800b3f0:	68a0      	ldr	r0, [r4, #8]
 800b3f2:	4642      	mov	r2, r8
 800b3f4:	19a9      	adds	r1, r5, r6
 800b3f6:	f00e f8b8 	bl	801956a <memcpy>
 800b3fa:	e77e      	b.n	800b2fa <ucdr_serialize_double+0x9e>

0800b3fc <ucdr_serialize_endian_double>:
 800b3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b400:	460e      	mov	r6, r1
 800b402:	b083      	sub	sp, #12
 800b404:	2108      	movs	r1, #8
 800b406:	4604      	mov	r4, r0
 800b408:	ed8d 0b00 	vstr	d0, [sp]
 800b40c:	f000 fabc 	bl	800b988 <ucdr_buffer_alignment>
 800b410:	4601      	mov	r1, r0
 800b412:	4620      	mov	r0, r4
 800b414:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b418:	f000 fafa 	bl	800ba10 <ucdr_advance_buffer>
 800b41c:	2108      	movs	r1, #8
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 fa52 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b424:	2800      	cmp	r0, #0
 800b426:	d14d      	bne.n	800b4c4 <ucdr_serialize_endian_double+0xc8>
 800b428:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b42c:	42bd      	cmp	r5, r7
 800b42e:	d944      	bls.n	800b4ba <ucdr_serialize_endian_double+0xbe>
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	60a5      	str	r5, [r4, #8]
 800b434:	1bed      	subs	r5, r5, r7
 800b436:	442b      	add	r3, r5
 800b438:	f1c5 0908 	rsb	r9, r5, #8
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	4649      	mov	r1, r9
 800b440:	4620      	mov	r0, r4
 800b442:	f000 fa4d 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b446:	2800      	cmp	r0, #0
 800b448:	d072      	beq.n	800b530 <ucdr_serialize_endian_double+0x134>
 800b44a:	2e01      	cmp	r6, #1
 800b44c:	f000 809b 	beq.w	800b586 <ucdr_serialize_endian_double+0x18a>
 800b450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b454:	703b      	strb	r3, [r7, #0]
 800b456:	2d00      	cmp	r5, #0
 800b458:	d078      	beq.n	800b54c <ucdr_serialize_endian_double+0x150>
 800b45a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b45e:	707b      	strb	r3, [r7, #1]
 800b460:	2d01      	cmp	r5, #1
 800b462:	d077      	beq.n	800b554 <ucdr_serialize_endian_double+0x158>
 800b464:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b468:	70bb      	strb	r3, [r7, #2]
 800b46a:	2d02      	cmp	r5, #2
 800b46c:	d076      	beq.n	800b55c <ucdr_serialize_endian_double+0x160>
 800b46e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b472:	70fb      	strb	r3, [r7, #3]
 800b474:	2d03      	cmp	r5, #3
 800b476:	d075      	beq.n	800b564 <ucdr_serialize_endian_double+0x168>
 800b478:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b47c:	713b      	strb	r3, [r7, #4]
 800b47e:	2d04      	cmp	r5, #4
 800b480:	d074      	beq.n	800b56c <ucdr_serialize_endian_double+0x170>
 800b482:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b486:	717b      	strb	r3, [r7, #5]
 800b488:	2d05      	cmp	r5, #5
 800b48a:	d073      	beq.n	800b574 <ucdr_serialize_endian_double+0x178>
 800b48c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b490:	71bb      	strb	r3, [r7, #6]
 800b492:	2d06      	cmp	r5, #6
 800b494:	d072      	beq.n	800b57c <ucdr_serialize_endian_double+0x180>
 800b496:	f89d 3000 	ldrb.w	r3, [sp]
 800b49a:	71fb      	strb	r3, [r7, #7]
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	68a2      	ldr	r2, [r4, #8]
 800b4a0:	7da0      	ldrb	r0, [r4, #22]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	1b5d      	subs	r5, r3, r5
 800b4a6:	444a      	add	r2, r9
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	f080 0001 	eor.w	r0, r0, #1
 800b4ae:	60a2      	str	r2, [r4, #8]
 800b4b0:	6125      	str	r5, [r4, #16]
 800b4b2:	7563      	strb	r3, [r4, #21]
 800b4b4:	b003      	add	sp, #12
 800b4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ba:	2108      	movs	r1, #8
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fa0f 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b4c2:	b348      	cbz	r0, 800b518 <ucdr_serialize_endian_double+0x11c>
 800b4c4:	2e01      	cmp	r6, #1
 800b4c6:	d02d      	beq.n	800b524 <ucdr_serialize_endian_double+0x128>
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4d6:	705a      	strb	r2, [r3, #1]
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4de:	709a      	strb	r2, [r3, #2]
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4e6:	70da      	strb	r2, [r3, #3]
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b4ee:	711a      	strb	r2, [r3, #4]
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b4f6:	715a      	strb	r2, [r3, #5]
 800b4f8:	68a3      	ldr	r3, [r4, #8]
 800b4fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b4fe:	719a      	strb	r2, [r3, #6]
 800b500:	68a3      	ldr	r3, [r4, #8]
 800b502:	f89d 2000 	ldrb.w	r2, [sp]
 800b506:	71da      	strb	r2, [r3, #7]
 800b508:	68a2      	ldr	r2, [r4, #8]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	3208      	adds	r2, #8
 800b50e:	3308      	adds	r3, #8
 800b510:	2108      	movs	r1, #8
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	7561      	strb	r1, [r4, #21]
 800b518:	7da0      	ldrb	r0, [r4, #22]
 800b51a:	f080 0001 	eor.w	r0, r0, #1
 800b51e:	b003      	add	sp, #12
 800b520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b524:	466b      	mov	r3, sp
 800b526:	cb03      	ldmia	r3!, {r0, r1}
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	6018      	str	r0, [r3, #0]
 800b52c:	6059      	str	r1, [r3, #4]
 800b52e:	e7eb      	b.n	800b508 <ucdr_serialize_endian_double+0x10c>
 800b530:	68a2      	ldr	r2, [r4, #8]
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	7da0      	ldrb	r0, [r4, #22]
 800b536:	f884 8015 	strb.w	r8, [r4, #21]
 800b53a:	1b52      	subs	r2, r2, r5
 800b53c:	1b5b      	subs	r3, r3, r5
 800b53e:	f080 0001 	eor.w	r0, r0, #1
 800b542:	60a2      	str	r2, [r4, #8]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	b003      	add	sp, #12
 800b548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	68a3      	ldr	r3, [r4, #8]
 800b556:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b562:	701a      	strb	r2, [r3, #0]
 800b564:	68a3      	ldr	r3, [r4, #8]
 800b566:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b56a:	701a      	strb	r2, [r3, #0]
 800b56c:	68a3      	ldr	r3, [r4, #8]
 800b56e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b572:	701a      	strb	r2, [r3, #0]
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	68a3      	ldr	r3, [r4, #8]
 800b57e:	f89d 2000 	ldrb.w	r2, [sp]
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e78a      	b.n	800b49c <ucdr_serialize_endian_double+0xa0>
 800b586:	466e      	mov	r6, sp
 800b588:	4631      	mov	r1, r6
 800b58a:	462a      	mov	r2, r5
 800b58c:	4638      	mov	r0, r7
 800b58e:	f00d ffec 	bl	801956a <memcpy>
 800b592:	68a0      	ldr	r0, [r4, #8]
 800b594:	464a      	mov	r2, r9
 800b596:	1971      	adds	r1, r6, r5
 800b598:	f00d ffe7 	bl	801956a <memcpy>
 800b59c:	e77e      	b.n	800b49c <ucdr_serialize_endian_double+0xa0>
 800b59e:	bf00      	nop

0800b5a0 <ucdr_deserialize_double>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	2108      	movs	r1, #8
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	f000 f9ed 	bl	800b988 <ucdr_buffer_alignment>
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b5b6:	f000 fa2b 	bl	800ba10 <ucdr_advance_buffer>
 800b5ba:	2108      	movs	r1, #8
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 f983 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d151      	bne.n	800b66a <ucdr_deserialize_double+0xca>
 800b5c6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b5ca:	42be      	cmp	r6, r7
 800b5cc:	d948      	bls.n	800b660 <ucdr_deserialize_double+0xc0>
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	60a6      	str	r6, [r4, #8]
 800b5d2:	1bf6      	subs	r6, r6, r7
 800b5d4:	4433      	add	r3, r6
 800b5d6:	f1c6 0808 	rsb	r8, r6, #8
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	4641      	mov	r1, r8
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 f97e 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d06d      	beq.n	800b6c4 <ucdr_deserialize_double+0x124>
 800b5e8:	7d23      	ldrb	r3, [r4, #20]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	f000 8093 	beq.w	800b716 <ucdr_deserialize_double+0x176>
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	702b      	strb	r3, [r5, #0]
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	d072      	beq.n	800b6de <ucdr_deserialize_double+0x13e>
 800b5f8:	79bb      	ldrb	r3, [r7, #6]
 800b5fa:	706b      	strb	r3, [r5, #1]
 800b5fc:	2e01      	cmp	r6, #1
 800b5fe:	f105 0302 	add.w	r3, r5, #2
 800b602:	d070      	beq.n	800b6e6 <ucdr_deserialize_double+0x146>
 800b604:	797b      	ldrb	r3, [r7, #5]
 800b606:	70ab      	strb	r3, [r5, #2]
 800b608:	2e02      	cmp	r6, #2
 800b60a:	f105 0303 	add.w	r3, r5, #3
 800b60e:	d06e      	beq.n	800b6ee <ucdr_deserialize_double+0x14e>
 800b610:	793b      	ldrb	r3, [r7, #4]
 800b612:	70eb      	strb	r3, [r5, #3]
 800b614:	2e03      	cmp	r6, #3
 800b616:	f105 0304 	add.w	r3, r5, #4
 800b61a:	d06c      	beq.n	800b6f6 <ucdr_deserialize_double+0x156>
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	712b      	strb	r3, [r5, #4]
 800b620:	2e04      	cmp	r6, #4
 800b622:	f105 0305 	add.w	r3, r5, #5
 800b626:	d06a      	beq.n	800b6fe <ucdr_deserialize_double+0x15e>
 800b628:	78bb      	ldrb	r3, [r7, #2]
 800b62a:	716b      	strb	r3, [r5, #5]
 800b62c:	2e05      	cmp	r6, #5
 800b62e:	f105 0306 	add.w	r3, r5, #6
 800b632:	d068      	beq.n	800b706 <ucdr_deserialize_double+0x166>
 800b634:	787b      	ldrb	r3, [r7, #1]
 800b636:	71ab      	strb	r3, [r5, #6]
 800b638:	2e06      	cmp	r6, #6
 800b63a:	f105 0307 	add.w	r3, r5, #7
 800b63e:	d066      	beq.n	800b70e <ucdr_deserialize_double+0x16e>
 800b640:	783b      	ldrb	r3, [r7, #0]
 800b642:	71eb      	strb	r3, [r5, #7]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	68a2      	ldr	r2, [r4, #8]
 800b648:	7da0      	ldrb	r0, [r4, #22]
 800b64a:	3308      	adds	r3, #8
 800b64c:	1b9e      	subs	r6, r3, r6
 800b64e:	2308      	movs	r3, #8
 800b650:	4442      	add	r2, r8
 800b652:	7563      	strb	r3, [r4, #21]
 800b654:	60a2      	str	r2, [r4, #8]
 800b656:	6126      	str	r6, [r4, #16]
 800b658:	f080 0001 	eor.w	r0, r0, #1
 800b65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b660:	2108      	movs	r1, #8
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f93c 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b668:	b310      	cbz	r0, 800b6b0 <ucdr_deserialize_double+0x110>
 800b66a:	7d23      	ldrb	r3, [r4, #20]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	d023      	beq.n	800b6ba <ucdr_deserialize_double+0x11a>
 800b672:	79db      	ldrb	r3, [r3, #7]
 800b674:	702b      	strb	r3, [r5, #0]
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	799b      	ldrb	r3, [r3, #6]
 800b67a:	706b      	strb	r3, [r5, #1]
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	795b      	ldrb	r3, [r3, #5]
 800b680:	70ab      	strb	r3, [r5, #2]
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	791b      	ldrb	r3, [r3, #4]
 800b686:	70eb      	strb	r3, [r5, #3]
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	78db      	ldrb	r3, [r3, #3]
 800b68c:	712b      	strb	r3, [r5, #4]
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	789b      	ldrb	r3, [r3, #2]
 800b692:	716b      	strb	r3, [r5, #5]
 800b694:	68a3      	ldr	r3, [r4, #8]
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	71ab      	strb	r3, [r5, #6]
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	71eb      	strb	r3, [r5, #7]
 800b6a0:	68a2      	ldr	r2, [r4, #8]
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	3208      	adds	r2, #8
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2108      	movs	r1, #8
 800b6aa:	60a2      	str	r2, [r4, #8]
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	7561      	strb	r1, [r4, #21]
 800b6b0:	7da0      	ldrb	r0, [r4, #22]
 800b6b2:	f080 0001 	eor.w	r0, r0, #1
 800b6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	606b      	str	r3, [r5, #4]
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	e7ed      	b.n	800b6a0 <ucdr_deserialize_double+0x100>
 800b6c4:	68a2      	ldr	r2, [r4, #8]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	7da0      	ldrb	r0, [r4, #22]
 800b6ca:	f884 9015 	strb.w	r9, [r4, #21]
 800b6ce:	1b92      	subs	r2, r2, r6
 800b6d0:	1b9b      	subs	r3, r3, r6
 800b6d2:	60a2      	str	r2, [r4, #8]
 800b6d4:	6123      	str	r3, [r4, #16]
 800b6d6:	f080 0001 	eor.w	r0, r0, #1
 800b6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	799b      	ldrb	r3, [r3, #6]
 800b6e2:	706b      	strb	r3, [r5, #1]
 800b6e4:	1cab      	adds	r3, r5, #2
 800b6e6:	68a2      	ldr	r2, [r4, #8]
 800b6e8:	7952      	ldrb	r2, [r2, #5]
 800b6ea:	f803 2b01 	strb.w	r2, [r3], #1
 800b6ee:	68a2      	ldr	r2, [r4, #8]
 800b6f0:	7912      	ldrb	r2, [r2, #4]
 800b6f2:	f803 2b01 	strb.w	r2, [r3], #1
 800b6f6:	68a2      	ldr	r2, [r4, #8]
 800b6f8:	78d2      	ldrb	r2, [r2, #3]
 800b6fa:	f803 2b01 	strb.w	r2, [r3], #1
 800b6fe:	68a2      	ldr	r2, [r4, #8]
 800b700:	7892      	ldrb	r2, [r2, #2]
 800b702:	f803 2b01 	strb.w	r2, [r3], #1
 800b706:	68a2      	ldr	r2, [r4, #8]
 800b708:	7852      	ldrb	r2, [r2, #1]
 800b70a:	f803 2b01 	strb.w	r2, [r3], #1
 800b70e:	68a2      	ldr	r2, [r4, #8]
 800b710:	7812      	ldrb	r2, [r2, #0]
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	e796      	b.n	800b644 <ucdr_deserialize_double+0xa4>
 800b716:	4639      	mov	r1, r7
 800b718:	4632      	mov	r2, r6
 800b71a:	4628      	mov	r0, r5
 800b71c:	f00d ff25 	bl	801956a <memcpy>
 800b720:	68a1      	ldr	r1, [r4, #8]
 800b722:	4642      	mov	r2, r8
 800b724:	19a8      	adds	r0, r5, r6
 800b726:	f00d ff20 	bl	801956a <memcpy>
 800b72a:	e78b      	b.n	800b644 <ucdr_deserialize_double+0xa4>

0800b72c <ucdr_deserialize_endian_double>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	460f      	mov	r7, r1
 800b732:	2108      	movs	r1, #8
 800b734:	4604      	mov	r4, r0
 800b736:	4615      	mov	r5, r2
 800b738:	f000 f926 	bl	800b988 <ucdr_buffer_alignment>
 800b73c:	4601      	mov	r1, r0
 800b73e:	4620      	mov	r0, r4
 800b740:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b744:	f000 f964 	bl	800ba10 <ucdr_advance_buffer>
 800b748:	2108      	movs	r1, #8
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 f8bc 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800b750:	2800      	cmp	r0, #0
 800b752:	d159      	bne.n	800b808 <ucdr_deserialize_endian_double+0xdc>
 800b754:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800b758:	4546      	cmp	r6, r8
 800b75a:	d950      	bls.n	800b7fe <ucdr_deserialize_endian_double+0xd2>
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	60a6      	str	r6, [r4, #8]
 800b760:	eba6 0608 	sub.w	r6, r6, r8
 800b764:	4433      	add	r3, r6
 800b766:	f1c6 0a08 	rsb	sl, r6, #8
 800b76a:	6123      	str	r3, [r4, #16]
 800b76c:	4651      	mov	r1, sl
 800b76e:	4620      	mov	r0, r4
 800b770:	f000 f8b6 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b774:	2800      	cmp	r0, #0
 800b776:	d073      	beq.n	800b860 <ucdr_deserialize_endian_double+0x134>
 800b778:	2f01      	cmp	r7, #1
 800b77a:	f000 809a 	beq.w	800b8b2 <ucdr_deserialize_endian_double+0x186>
 800b77e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800b782:	702b      	strb	r3, [r5, #0]
 800b784:	2e00      	cmp	r6, #0
 800b786:	d078      	beq.n	800b87a <ucdr_deserialize_endian_double+0x14e>
 800b788:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b78c:	706b      	strb	r3, [r5, #1]
 800b78e:	2e01      	cmp	r6, #1
 800b790:	f105 0302 	add.w	r3, r5, #2
 800b794:	d075      	beq.n	800b882 <ucdr_deserialize_endian_double+0x156>
 800b796:	f898 3005 	ldrb.w	r3, [r8, #5]
 800b79a:	70ab      	strb	r3, [r5, #2]
 800b79c:	2e02      	cmp	r6, #2
 800b79e:	f105 0303 	add.w	r3, r5, #3
 800b7a2:	d072      	beq.n	800b88a <ucdr_deserialize_endian_double+0x15e>
 800b7a4:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b7a8:	70eb      	strb	r3, [r5, #3]
 800b7aa:	2e03      	cmp	r6, #3
 800b7ac:	f105 0304 	add.w	r3, r5, #4
 800b7b0:	d06f      	beq.n	800b892 <ucdr_deserialize_endian_double+0x166>
 800b7b2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800b7b6:	712b      	strb	r3, [r5, #4]
 800b7b8:	2e04      	cmp	r6, #4
 800b7ba:	f105 0305 	add.w	r3, r5, #5
 800b7be:	d06c      	beq.n	800b89a <ucdr_deserialize_endian_double+0x16e>
 800b7c0:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b7c4:	716b      	strb	r3, [r5, #5]
 800b7c6:	2e05      	cmp	r6, #5
 800b7c8:	f105 0306 	add.w	r3, r5, #6
 800b7cc:	d069      	beq.n	800b8a2 <ucdr_deserialize_endian_double+0x176>
 800b7ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b7d2:	71ab      	strb	r3, [r5, #6]
 800b7d4:	2e06      	cmp	r6, #6
 800b7d6:	f105 0307 	add.w	r3, r5, #7
 800b7da:	d066      	beq.n	800b8aa <ucdr_deserialize_endian_double+0x17e>
 800b7dc:	f898 3000 	ldrb.w	r3, [r8]
 800b7e0:	71eb      	strb	r3, [r5, #7]
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	68a2      	ldr	r2, [r4, #8]
 800b7e6:	7da0      	ldrb	r0, [r4, #22]
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	1b9e      	subs	r6, r3, r6
 800b7ec:	2308      	movs	r3, #8
 800b7ee:	4452      	add	r2, sl
 800b7f0:	7563      	strb	r3, [r4, #21]
 800b7f2:	60a2      	str	r2, [r4, #8]
 800b7f4:	6126      	str	r6, [r4, #16]
 800b7f6:	f080 0001 	eor.w	r0, r0, #1
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	2108      	movs	r1, #8
 800b800:	4620      	mov	r0, r4
 800b802:	f000 f86d 	bl	800b8e0 <ucdr_check_final_buffer_behavior>
 800b806:	b308      	cbz	r0, 800b84c <ucdr_deserialize_endian_double+0x120>
 800b808:	2f01      	cmp	r7, #1
 800b80a:	68a3      	ldr	r3, [r4, #8]
 800b80c:	d023      	beq.n	800b856 <ucdr_deserialize_endian_double+0x12a>
 800b80e:	79db      	ldrb	r3, [r3, #7]
 800b810:	702b      	strb	r3, [r5, #0]
 800b812:	68a3      	ldr	r3, [r4, #8]
 800b814:	799b      	ldrb	r3, [r3, #6]
 800b816:	706b      	strb	r3, [r5, #1]
 800b818:	68a3      	ldr	r3, [r4, #8]
 800b81a:	795b      	ldrb	r3, [r3, #5]
 800b81c:	70ab      	strb	r3, [r5, #2]
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	791b      	ldrb	r3, [r3, #4]
 800b822:	70eb      	strb	r3, [r5, #3]
 800b824:	68a3      	ldr	r3, [r4, #8]
 800b826:	78db      	ldrb	r3, [r3, #3]
 800b828:	712b      	strb	r3, [r5, #4]
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	789b      	ldrb	r3, [r3, #2]
 800b82e:	716b      	strb	r3, [r5, #5]
 800b830:	68a3      	ldr	r3, [r4, #8]
 800b832:	785b      	ldrb	r3, [r3, #1]
 800b834:	71ab      	strb	r3, [r5, #6]
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	71eb      	strb	r3, [r5, #7]
 800b83c:	68a2      	ldr	r2, [r4, #8]
 800b83e:	6923      	ldr	r3, [r4, #16]
 800b840:	3208      	adds	r2, #8
 800b842:	3308      	adds	r3, #8
 800b844:	2108      	movs	r1, #8
 800b846:	60a2      	str	r2, [r4, #8]
 800b848:	6123      	str	r3, [r4, #16]
 800b84a:	7561      	strb	r1, [r4, #21]
 800b84c:	7da0      	ldrb	r0, [r4, #22]
 800b84e:	f080 0001 	eor.w	r0, r0, #1
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	606b      	str	r3, [r5, #4]
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	e7ed      	b.n	800b83c <ucdr_deserialize_endian_double+0x110>
 800b860:	68a2      	ldr	r2, [r4, #8]
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	7da0      	ldrb	r0, [r4, #22]
 800b866:	f884 9015 	strb.w	r9, [r4, #21]
 800b86a:	1b92      	subs	r2, r2, r6
 800b86c:	1b9b      	subs	r3, r3, r6
 800b86e:	60a2      	str	r2, [r4, #8]
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	f080 0001 	eor.w	r0, r0, #1
 800b876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	799b      	ldrb	r3, [r3, #6]
 800b87e:	706b      	strb	r3, [r5, #1]
 800b880:	1cab      	adds	r3, r5, #2
 800b882:	68a2      	ldr	r2, [r4, #8]
 800b884:	7952      	ldrb	r2, [r2, #5]
 800b886:	f803 2b01 	strb.w	r2, [r3], #1
 800b88a:	68a2      	ldr	r2, [r4, #8]
 800b88c:	7912      	ldrb	r2, [r2, #4]
 800b88e:	f803 2b01 	strb.w	r2, [r3], #1
 800b892:	68a2      	ldr	r2, [r4, #8]
 800b894:	78d2      	ldrb	r2, [r2, #3]
 800b896:	f803 2b01 	strb.w	r2, [r3], #1
 800b89a:	68a2      	ldr	r2, [r4, #8]
 800b89c:	7892      	ldrb	r2, [r2, #2]
 800b89e:	f803 2b01 	strb.w	r2, [r3], #1
 800b8a2:	68a2      	ldr	r2, [r4, #8]
 800b8a4:	7852      	ldrb	r2, [r2, #1]
 800b8a6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8aa:	68a2      	ldr	r2, [r4, #8]
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e797      	b.n	800b7e2 <ucdr_deserialize_endian_double+0xb6>
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	4632      	mov	r2, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f00d fe57 	bl	801956a <memcpy>
 800b8bc:	68a1      	ldr	r1, [r4, #8]
 800b8be:	4652      	mov	r2, sl
 800b8c0:	19a8      	adds	r0, r5, r6
 800b8c2:	f00d fe52 	bl	801956a <memcpy>
 800b8c6:	e78c      	b.n	800b7e2 <ucdr_deserialize_endian_double+0xb6>

0800b8c8 <ucdr_check_buffer_available_for>:
 800b8c8:	7d83      	ldrb	r3, [r0, #22]
 800b8ca:	b93b      	cbnz	r3, 800b8dc <ucdr_check_buffer_available_for+0x14>
 800b8cc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b8d0:	4419      	add	r1, r3
 800b8d2:	4288      	cmp	r0, r1
 800b8d4:	bf34      	ite	cc
 800b8d6:	2000      	movcc	r0, #0
 800b8d8:	2001      	movcs	r0, #1
 800b8da:	4770      	bx	lr
 800b8dc:	2000      	movs	r0, #0
 800b8de:	4770      	bx	lr

0800b8e0 <ucdr_check_final_buffer_behavior>:
 800b8e0:	7d83      	ldrb	r3, [r0, #22]
 800b8e2:	b943      	cbnz	r3, 800b8f6 <ucdr_check_final_buffer_behavior+0x16>
 800b8e4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b8e8:	4291      	cmp	r1, r2
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	d205      	bcs.n	800b8fc <ucdr_check_final_buffer_behavior+0x1c>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	4770      	bx	lr
 800b8fc:	6982      	ldr	r2, [r0, #24]
 800b8fe:	b13a      	cbz	r2, 800b910 <ucdr_check_final_buffer_behavior+0x30>
 800b900:	69c1      	ldr	r1, [r0, #28]
 800b902:	4790      	blx	r2
 800b904:	f080 0301 	eor.w	r3, r0, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	75a0      	strb	r0, [r4, #22]
 800b90c:	4618      	mov	r0, r3
 800b90e:	bd10      	pop	{r4, pc}
 800b910:	2001      	movs	r0, #1
 800b912:	75a0      	strb	r0, [r4, #22]
 800b914:	e7fa      	b.n	800b90c <ucdr_check_final_buffer_behavior+0x2c>
 800b916:	bf00      	nop

0800b918 <ucdr_set_on_full_buffer_callback>:
 800b918:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop

0800b920 <ucdr_init_buffer_origin_offset_endian>:
 800b920:	b410      	push	{r4}
 800b922:	9c01      	ldr	r4, [sp, #4]
 800b924:	6001      	str	r1, [r0, #0]
 800b926:	440a      	add	r2, r1
 800b928:	6042      	str	r2, [r0, #4]
 800b92a:	190a      	adds	r2, r1, r4
 800b92c:	441c      	add	r4, r3
 800b92e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b932:	6082      	str	r2, [r0, #8]
 800b934:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b938:	7503      	strb	r3, [r0, #20]
 800b93a:	2200      	movs	r2, #0
 800b93c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b940:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b944:	7542      	strb	r2, [r0, #21]
 800b946:	7582      	strb	r2, [r0, #22]
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop

0800b94c <ucdr_init_buffer_origin_offset>:
 800b94c:	b510      	push	{r4, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	9c04      	ldr	r4, [sp, #16]
 800b952:	9400      	str	r4, [sp, #0]
 800b954:	2401      	movs	r4, #1
 800b956:	9401      	str	r4, [sp, #4]
 800b958:	f7ff ffe2 	bl	800b920 <ucdr_init_buffer_origin_offset_endian>
 800b95c:	b002      	add	sp, #8
 800b95e:	bd10      	pop	{r4, pc}

0800b960 <ucdr_init_buffer_origin>:
 800b960:	b510      	push	{r4, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	2400      	movs	r4, #0
 800b966:	9400      	str	r4, [sp, #0]
 800b968:	f7ff fff0 	bl	800b94c <ucdr_init_buffer_origin_offset>
 800b96c:	b002      	add	sp, #8
 800b96e:	bd10      	pop	{r4, pc}

0800b970 <ucdr_init_buffer>:
 800b970:	2300      	movs	r3, #0
 800b972:	f7ff bff5 	b.w	800b960 <ucdr_init_buffer_origin>
 800b976:	bf00      	nop

0800b978 <ucdr_alignment>:
 800b978:	fbb0 f3f1 	udiv	r3, r0, r1
 800b97c:	fb03 0011 	mls	r0, r3, r1, r0
 800b980:	1a08      	subs	r0, r1, r0
 800b982:	3901      	subs	r1, #1
 800b984:	4008      	ands	r0, r1
 800b986:	4770      	bx	lr

0800b988 <ucdr_buffer_alignment>:
 800b988:	7d43      	ldrb	r3, [r0, #21]
 800b98a:	428b      	cmp	r3, r1
 800b98c:	d208      	bcs.n	800b9a0 <ucdr_buffer_alignment+0x18>
 800b98e:	6900      	ldr	r0, [r0, #16]
 800b990:	fbb0 f3f1 	udiv	r3, r0, r1
 800b994:	fb01 0013 	mls	r0, r1, r3, r0
 800b998:	1a08      	subs	r0, r1, r0
 800b99a:	3901      	subs	r1, #1
 800b99c:	4008      	ands	r0, r1
 800b99e:	4770      	bx	lr
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	4770      	bx	lr

0800b9a4 <ucdr_align_to>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	460d      	mov	r5, r1
 800b9aa:	f7ff ffed 	bl	800b988 <ucdr_buffer_alignment>
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	6921      	ldr	r1, [r4, #16]
 800b9b2:	7565      	strb	r5, [r4, #21]
 800b9b4:	181a      	adds	r2, r3, r0
 800b9b6:	6863      	ldr	r3, [r4, #4]
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	4408      	add	r0, r1
 800b9bc:	bf28      	it	cs
 800b9be:	4613      	movcs	r3, r2
 800b9c0:	6120      	str	r0, [r4, #16]
 800b9c2:	60a3      	str	r3, [r4, #8]
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop

0800b9c8 <ucdr_buffer_length>:
 800b9c8:	6882      	ldr	r2, [r0, #8]
 800b9ca:	6800      	ldr	r0, [r0, #0]
 800b9cc:	1a10      	subs	r0, r2, r0
 800b9ce:	4770      	bx	lr

0800b9d0 <ucdr_buffer_remaining>:
 800b9d0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b9d4:	1a10      	subs	r0, r2, r0
 800b9d6:	4770      	bx	lr

0800b9d8 <ucdr_check_final_buffer_behavior_array>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	7d83      	ldrb	r3, [r0, #22]
 800b9dc:	b963      	cbnz	r3, 800b9f8 <ucdr_check_final_buffer_behavior_array+0x20>
 800b9de:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	d308      	bcc.n	800b9fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9ea:	b139      	cbz	r1, 800b9fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9ec:	6983      	ldr	r3, [r0, #24]
 800b9ee:	b163      	cbz	r3, 800ba0a <ucdr_check_final_buffer_behavior_array+0x32>
 800b9f0:	69c1      	ldr	r1, [r0, #28]
 800b9f2:	4798      	blx	r3
 800b9f4:	75a0      	strb	r0, [r4, #22]
 800b9f6:	b108      	cbz	r0, 800b9fc <ucdr_check_final_buffer_behavior_array+0x24>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7ff ffe7 	bl	800b9d0 <ucdr_buffer_remaining>
 800ba02:	42a8      	cmp	r0, r5
 800ba04:	bf28      	it	cs
 800ba06:	4628      	movcs	r0, r5
 800ba08:	bd38      	pop	{r3, r4, r5, pc}
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	7583      	strb	r3, [r0, #22]
 800ba0e:	e7f3      	b.n	800b9f8 <ucdr_check_final_buffer_behavior_array+0x20>

0800ba10 <ucdr_advance_buffer>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	f7ff ff57 	bl	800b8c8 <ucdr_check_buffer_available_for>
 800ba1a:	b178      	cbz	r0, 800ba3c <ucdr_advance_buffer+0x2c>
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	68a2      	ldr	r2, [r4, #8]
 800ba20:	442b      	add	r3, r5
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	2301      	movs	r3, #1
 800ba26:	442a      	add	r2, r5
 800ba28:	7563      	strb	r3, [r4, #21]
 800ba2a:	60a2      	str	r2, [r4, #8]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	68a2      	ldr	r2, [r4, #8]
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	4402      	add	r2, r0
 800ba34:	4403      	add	r3, r0
 800ba36:	1a2d      	subs	r5, r5, r0
 800ba38:	60a2      	str	r2, [r4, #8]
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f7ff ffc9 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d1f1      	bne.n	800ba2e <ucdr_advance_buffer+0x1e>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	7563      	strb	r3, [r4, #21]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}

0800ba50 <rcl_get_zero_initialized_node>:
 800ba50:	4a03      	ldr	r2, [pc, #12]	@ (800ba60 <rcl_get_zero_initialized_node+0x10>)
 800ba52:	4603      	mov	r3, r0
 800ba54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba58:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	4770      	bx	lr
 800ba60:	0801a630 	.word	0x0801a630

0800ba64 <rcl_node_init>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	b0a9      	sub	sp, #164	@ 0xa4
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ba70:	a823      	add	r0, sp, #140	@ 0x8c
 800ba72:	460e      	mov	r6, r1
 800ba74:	4615      	mov	r5, r2
 800ba76:	461f      	mov	r7, r3
 800ba78:	f007 ffb4 	bl	80139e4 <rcl_guard_condition_get_default_options>
 800ba7c:	f1b8 0f00 	cmp.w	r8, #0
 800ba80:	f000 80e6 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800ba84:	4640      	mov	r0, r8
 800ba86:	f001 fed1 	bl	800d82c <rcutils_allocator_is_valid>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	f000 80e0 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800ba90:	2e00      	cmp	r6, #0
 800ba92:	f000 80dd 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	f000 80da 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	f000 80d7 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800baa2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800baa6:	f1b9 0f00 	cmp.w	r9, #0
 800baaa:	f040 80fd 	bne.w	800bca8 <rcl_node_init+0x244>
 800baae:	2f00      	cmp	r7, #0
 800bab0:	f000 80ce 	beq.w	800bc50 <rcl_node_init+0x1ec>
 800bab4:	4638      	mov	r0, r7
 800bab6:	f007 fe3f 	bl	8013738 <rcl_context_is_valid>
 800baba:	4682      	mov	sl, r0
 800babc:	2800      	cmp	r0, #0
 800babe:	f000 80cd 	beq.w	800bc5c <rcl_node_init+0x1f8>
 800bac2:	464a      	mov	r2, r9
 800bac4:	a922      	add	r1, sp, #136	@ 0x88
 800bac6:	4630      	mov	r0, r6
 800bac8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800bacc:	f002 f9ec 	bl	800dea8 <rmw_validate_node_name>
 800bad0:	4681      	mov	r9, r0
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f040 80be 	bne.w	800bc54 <rcl_node_init+0x1f0>
 800bad8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bada:	2800      	cmp	r0, #0
 800badc:	f040 80f0 	bne.w	800bcc0 <rcl_node_init+0x25c>
 800bae0:	4628      	mov	r0, r5
 800bae2:	f7f4 fb9f 	bl	8000224 <strlen>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f040 80bb 	bne.w	800bc62 <rcl_node_init+0x1fe>
 800baec:	4d7c      	ldr	r5, [pc, #496]	@ (800bce0 <rcl_node_init+0x27c>)
 800baee:	a922      	add	r1, sp, #136	@ 0x88
 800baf0:	2200      	movs	r2, #0
 800baf2:	4628      	mov	r0, r5
 800baf4:	f002 f9ba 	bl	800de6c <rmw_validate_namespace>
 800baf8:	4681      	mov	r9, r0
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f040 80aa 	bne.w	800bc54 <rcl_node_init+0x1f0>
 800bb00:	4682      	mov	sl, r0
 800bb02:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800bb04:	2800      	cmp	r0, #0
 800bb06:	f040 80e0 	bne.w	800bcca <rcl_node_init+0x266>
 800bb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bb12:	2078      	movs	r0, #120	@ 0x78
 800bb14:	4798      	blx	r3
 800bb16:	4681      	mov	r9, r0
 800bb18:	6060      	str	r0, [r4, #4]
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	f000 80ca 	beq.w	800bcb4 <rcl_node_init+0x250>
 800bb20:	2200      	movs	r2, #0
 800bb22:	2300      	movs	r3, #0
 800bb24:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800bb28:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800bb2c:	a808      	add	r0, sp, #32
 800bb2e:	f000 f939 	bl	800bda4 <rcl_node_get_default_options>
 800bb32:	a908      	add	r1, sp, #32
 800bb34:	4648      	mov	r0, r9
 800bb36:	2268      	movs	r2, #104	@ 0x68
 800bb38:	f00d fd17 	bl	801956a <memcpy>
 800bb3c:	6861      	ldr	r1, [r4, #4]
 800bb3e:	6027      	str	r7, [r4, #0]
 800bb40:	4640      	mov	r0, r8
 800bb42:	f000 f93d 	bl	800bdc0 <rcl_node_options_copy>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d158      	bne.n	800bbfc <rcl_node_init+0x198>
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f7f4 fb6a 	bl	8000224 <strlen>
 800bb50:	4428      	add	r0, r5
 800bb52:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800bb56:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800bb5a:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	bf0c      	ite	eq
 800bb64:	4b5f      	ldreq	r3, [pc, #380]	@ (800bce4 <rcl_node_init+0x280>)
 800bb66:	4b60      	ldrne	r3, [pc, #384]	@ (800bce8 <rcl_node_init+0x284>)
 800bb68:	9302      	str	r3, [sp, #8]
 800bb6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bb74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb78:	f001 ff56 	bl	800da28 <rcutils_format_string_limit>
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	4631      	mov	r1, r6
 800bb86:	3028      	adds	r0, #40	@ 0x28
 800bb88:	462a      	mov	r2, r5
 800bb8a:	6866      	ldr	r6, [r4, #4]
 800bb8c:	f002 fac4 	bl	800e118 <rmw_create_node>
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	66b0      	str	r0, [r6, #104]	@ 0x68
 800bb94:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d032      	beq.n	800bc00 <rcl_node_init+0x19c>
 800bb9a:	f002 fb51 	bl	800e240 <rmw_node_get_graph_guard_condition>
 800bb9e:	4681      	mov	r9, r0
 800bba0:	b360      	cbz	r0, 800bbfc <rcl_node_init+0x198>
 800bba2:	f8d8 3000 	ldr.w	r3, [r8]
 800bba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bbaa:	6866      	ldr	r6, [r4, #4]
 800bbac:	2008      	movs	r0, #8
 800bbae:	4798      	blx	r3
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800bbb4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800bbb8:	f1bb 0f00 	cmp.w	fp, #0
 800bbbc:	d020      	beq.n	800bc00 <rcl_node_init+0x19c>
 800bbbe:	a806      	add	r0, sp, #24
 800bbc0:	f007 fe34 	bl	801382c <rcl_get_zero_initialized_guard_condition>
 800bbc4:	a806      	add	r0, sp, #24
 800bbc6:	c803      	ldmia	r0, {r0, r1}
 800bbc8:	6863      	ldr	r3, [r4, #4]
 800bbca:	46c4      	mov	ip, r8
 800bbcc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800bbd0:	e88b 0003 	stmia.w	fp, {r0, r1}
 800bbd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbd8:	ae23      	add	r6, sp, #140	@ 0x8c
 800bbda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bbdc:	f8dc 3000 	ldr.w	r3, [ip]
 800bbe0:	6033      	str	r3, [r6, #0]
 800bbe2:	ab28      	add	r3, sp, #160	@ 0xa0
 800bbe4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bbe8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bbec:	4649      	mov	r1, r9
 800bbee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4670      	mov	r0, lr
 800bbf4:	f007 fe70 	bl	80138d8 <rcl_guard_condition_init_from_rmw>
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	b328      	cbz	r0, 800bc48 <rcl_node_init+0x1e4>
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	b1f3      	cbz	r3, 800bc3e <rcl_node_init+0x1da>
 800bc00:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bc02:	b128      	cbz	r0, 800bc10 <rcl_node_init+0x1ac>
 800bc04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc08:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc0c:	4798      	blx	r3
 800bc0e:	6863      	ldr	r3, [r4, #4]
 800bc10:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800bc12:	b110      	cbz	r0, 800bc1a <rcl_node_init+0x1b6>
 800bc14:	f002 fa98 	bl	800e148 <rmw_destroy_node>
 800bc18:	6863      	ldr	r3, [r4, #4]
 800bc1a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bc1c:	b148      	cbz	r0, 800bc32 <rcl_node_init+0x1ce>
 800bc1e:	f007 febb 	bl	8013998 <rcl_guard_condition_fini>
 800bc22:	6863      	ldr	r3, [r4, #4]
 800bc24:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc28:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bc2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc2e:	4798      	blx	r3
 800bc30:	6863      	ldr	r3, [r4, #4]
 800bc32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc3c:	4798      	blx	r3
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e9c4 3300 	strd	r3, r3, [r4]
 800bc44:	f04f 0901 	mov.w	r9, #1
 800bc48:	f1ba 0f00 	cmp.w	sl, #0
 800bc4c:	d125      	bne.n	800bc9a <rcl_node_init+0x236>
 800bc4e:	e001      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bc50:	f04f 090b 	mov.w	r9, #11
 800bc54:	4648      	mov	r0, r9
 800bc56:	b029      	add	sp, #164	@ 0xa4
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800bc60:	e7f8      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bc62:	782b      	ldrb	r3, [r5, #0]
 800bc64:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc66:	f43f af42 	beq.w	800baee <rcl_node_init+0x8a>
 800bc6a:	9503      	str	r5, [sp, #12]
 800bc6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	4b1e      	ldr	r3, [pc, #120]	@ (800bcec <rcl_node_init+0x288>)
 800bc74:	9302      	str	r3, [sp, #8]
 800bc76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800bc80:	f001 fed2 	bl	800da28 <rcutils_format_string_limit>
 800bc84:	4605      	mov	r5, r0
 800bc86:	b340      	cbz	r0, 800bcda <rcl_node_init+0x276>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	a922      	add	r1, sp, #136	@ 0x88
 800bc8c:	9222      	str	r2, [sp, #136]	@ 0x88
 800bc8e:	f002 f8ed 	bl	800de6c <rmw_validate_namespace>
 800bc92:	4681      	mov	r9, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f43f af34 	beq.w	800bb02 <rcl_node_init+0x9e>
 800bc9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bca2:	4628      	mov	r0, r5
 800bca4:	4798      	blx	r3
 800bca6:	e7d5      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bca8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800bcac:	4648      	mov	r0, r9
 800bcae:	b029      	add	sp, #164	@ 0xa4
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	f04f 090a 	mov.w	r9, #10
 800bcb8:	f1ba 0f00 	cmp.w	sl, #0
 800bcbc:	d1ed      	bne.n	800bc9a <rcl_node_init+0x236>
 800bcbe:	e7c9      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bcc0:	f002 f944 	bl	800df4c <rmw_node_name_validation_result_string>
 800bcc4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800bcc8:	e7c4      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bcca:	f002 f8e1 	bl	800de90 <rmw_namespace_validation_result_string>
 800bcce:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800bcd2:	f1ba 0f00 	cmp.w	sl, #0
 800bcd6:	d1e0      	bne.n	800bc9a <rcl_node_init+0x236>
 800bcd8:	e7bc      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bcda:	f04f 090a 	mov.w	r9, #10
 800bcde:	e7b9      	b.n	800bc54 <rcl_node_init+0x1f0>
 800bce0:	0801a618 	.word	0x0801a618
 800bce4:	0801a620 	.word	0x0801a620
 800bce8:	0801a628 	.word	0x0801a628
 800bcec:	0801a61c 	.word	0x0801a61c

0800bcf0 <rcl_node_fini>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	b320      	cbz	r0, 800bd3e <rcl_node_fini+0x4e>
 800bcf4:	6845      	ldr	r5, [r0, #4]
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	b1fd      	cbz	r5, 800bd3a <rcl_node_fini+0x4a>
 800bcfa:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800bcfc:	686f      	ldr	r7, [r5, #4]
 800bcfe:	692e      	ldr	r6, [r5, #16]
 800bd00:	f002 fa22 	bl	800e148 <rmw_destroy_node>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	4605      	mov	r5, r0
 800bd08:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bd0a:	f007 fe45 	bl	8013998 <rcl_guard_condition_fini>
 800bd0e:	ea55 0300 	orrs.w	r3, r5, r0
 800bd12:	6863      	ldr	r3, [r4, #4]
 800bd14:	4631      	mov	r1, r6
 800bd16:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800bd18:	bf14      	ite	ne
 800bd1a:	2501      	movne	r5, #1
 800bd1c:	2500      	moveq	r5, #0
 800bd1e:	47b8      	blx	r7
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	4631      	mov	r1, r6
 800bd24:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800bd26:	47b8      	blx	r7
 800bd28:	6863      	ldr	r3, [r4, #4]
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bd2e:	47b8      	blx	r7
 800bd30:	6860      	ldr	r0, [r4, #4]
 800bd32:	4631      	mov	r1, r6
 800bd34:	47b8      	blx	r7
 800bd36:	2300      	movs	r3, #0
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3e:	25c8      	movs	r5, #200	@ 0xc8
 800bd40:	4628      	mov	r0, r5
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd44 <rcl_node_is_valid_except_context>:
 800bd44:	b128      	cbz	r0, 800bd52 <rcl_node_is_valid_except_context+0xe>
 800bd46:	6840      	ldr	r0, [r0, #4]
 800bd48:	b118      	cbz	r0, 800bd52 <rcl_node_is_valid_except_context+0xe>
 800bd4a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bd4c:	3800      	subs	r0, #0
 800bd4e:	bf18      	it	ne
 800bd50:	2001      	movne	r0, #1
 800bd52:	4770      	bx	lr

0800bd54 <rcl_node_is_valid>:
 800bd54:	b130      	cbz	r0, 800bd64 <rcl_node_is_valid+0x10>
 800bd56:	6843      	ldr	r3, [r0, #4]
 800bd58:	b123      	cbz	r3, 800bd64 <rcl_node_is_valid+0x10>
 800bd5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd5c:	b113      	cbz	r3, 800bd64 <rcl_node_is_valid+0x10>
 800bd5e:	6800      	ldr	r0, [r0, #0]
 800bd60:	f007 bcea 	b.w	8013738 <rcl_context_is_valid>
 800bd64:	2000      	movs	r0, #0
 800bd66:	4770      	bx	lr

0800bd68 <rcl_node_get_name>:
 800bd68:	b120      	cbz	r0, 800bd74 <rcl_node_get_name+0xc>
 800bd6a:	6840      	ldr	r0, [r0, #4]
 800bd6c:	b110      	cbz	r0, 800bd74 <rcl_node_get_name+0xc>
 800bd6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bd70:	b100      	cbz	r0, 800bd74 <rcl_node_get_name+0xc>
 800bd72:	6880      	ldr	r0, [r0, #8]
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop

0800bd78 <rcl_node_get_namespace>:
 800bd78:	b120      	cbz	r0, 800bd84 <rcl_node_get_namespace+0xc>
 800bd7a:	6840      	ldr	r0, [r0, #4]
 800bd7c:	b110      	cbz	r0, 800bd84 <rcl_node_get_namespace+0xc>
 800bd7e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bd80:	b100      	cbz	r0, 800bd84 <rcl_node_get_namespace+0xc>
 800bd82:	68c0      	ldr	r0, [r0, #12]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <rcl_node_get_options>:
 800bd88:	b128      	cbz	r0, 800bd96 <rcl_node_get_options+0xe>
 800bd8a:	6840      	ldr	r0, [r0, #4]
 800bd8c:	b118      	cbz	r0, 800bd96 <rcl_node_get_options+0xe>
 800bd8e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bf08      	it	eq
 800bd94:	2000      	moveq	r0, #0
 800bd96:	4770      	bx	lr

0800bd98 <rcl_node_get_rmw_handle>:
 800bd98:	b110      	cbz	r0, 800bda0 <rcl_node_get_rmw_handle+0x8>
 800bd9a:	6840      	ldr	r0, [r0, #4]
 800bd9c:	b100      	cbz	r0, 800bda0 <rcl_node_get_rmw_handle+0x8>
 800bd9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop

0800bda4 <rcl_node_get_default_options>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	2268      	movs	r2, #104	@ 0x68
 800bda8:	4604      	mov	r4, r0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	f00d fb14 	bl	80193d8 <memset>
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f001 fd2d 	bl	800d810 <rcutils_get_default_allocator>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	7523      	strb	r3, [r4, #20]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	bf00      	nop

0800bdc0 <rcl_node_options_copy>:
 800bdc0:	b1d0      	cbz	r0, 800bdf8 <rcl_node_options_copy+0x38>
 800bdc2:	b570      	push	{r4, r5, r6, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	b1a9      	cbz	r1, 800bdf4 <rcl_node_options_copy+0x34>
 800bdc8:	4288      	cmp	r0, r1
 800bdca:	4684      	mov	ip, r0
 800bdcc:	d012      	beq.n	800bdf4 <rcl_node_options_copy+0x34>
 800bdce:	4605      	mov	r5, r0
 800bdd0:	8a86      	ldrh	r6, [r0, #20]
 800bdd2:	468e      	mov	lr, r1
 800bdd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bdda:	682b      	ldr	r3, [r5, #0]
 800bddc:	f8ce 3000 	str.w	r3, [lr]
 800bde0:	f10c 0118 	add.w	r1, ip, #24
 800bde4:	2250      	movs	r2, #80	@ 0x50
 800bde6:	82a6      	strh	r6, [r4, #20]
 800bde8:	f104 0018 	add.w	r0, r4, #24
 800bdec:	f00d fbbd 	bl	801956a <memcpy>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	200b      	movs	r0, #11
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	200b      	movs	r0, #11
 800bdfa:	4770      	bx	lr

0800bdfc <rcl_get_zero_initialized_publisher>:
 800bdfc:	4b01      	ldr	r3, [pc, #4]	@ (800be04 <rcl_get_zero_initialized_publisher+0x8>)
 800bdfe:	6818      	ldr	r0, [r3, #0]
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	0801a638 	.word	0x0801a638

0800be08 <rcl_publisher_init>:
 800be08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be0c:	b088      	sub	sp, #32
 800be0e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800be10:	2d00      	cmp	r5, #0
 800be12:	d069      	beq.n	800bee8 <rcl_publisher_init+0xe0>
 800be14:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800be18:	4604      	mov	r4, r0
 800be1a:	4648      	mov	r0, r9
 800be1c:	460e      	mov	r6, r1
 800be1e:	4690      	mov	r8, r2
 800be20:	461f      	mov	r7, r3
 800be22:	f001 fd03 	bl	800d82c <rcutils_allocator_is_valid>
 800be26:	2800      	cmp	r0, #0
 800be28:	d05e      	beq.n	800bee8 <rcl_publisher_init+0xe0>
 800be2a:	2c00      	cmp	r4, #0
 800be2c:	d05c      	beq.n	800bee8 <rcl_publisher_init+0xe0>
 800be2e:	f8d4 a000 	ldr.w	sl, [r4]
 800be32:	f1ba 0f00 	cmp.w	sl, #0
 800be36:	d004      	beq.n	800be42 <rcl_publisher_init+0x3a>
 800be38:	2764      	movs	r7, #100	@ 0x64
 800be3a:	4638      	mov	r0, r7
 800be3c:	b008      	add	sp, #32
 800be3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be42:	4630      	mov	r0, r6
 800be44:	f7ff ff86 	bl	800bd54 <rcl_node_is_valid>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d052      	beq.n	800bef2 <rcl_publisher_init+0xea>
 800be4c:	f1b8 0f00 	cmp.w	r8, #0
 800be50:	d04a      	beq.n	800bee8 <rcl_publisher_init+0xe0>
 800be52:	2f00      	cmp	r7, #0
 800be54:	d048      	beq.n	800bee8 <rcl_publisher_init+0xe0>
 800be56:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800be5a:	aa07      	add	r2, sp, #28
 800be5c:	9205      	str	r2, [sp, #20]
 800be5e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800be62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be6a:	f8cd a01c 	str.w	sl, [sp, #28]
 800be6e:	4639      	mov	r1, r7
 800be70:	e899 000c 	ldmia.w	r9, {r2, r3}
 800be74:	4630      	mov	r0, r6
 800be76:	f008 f829 	bl	8013ecc <rcl_node_resolve_name>
 800be7a:	4607      	mov	r7, r0
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d14f      	bne.n	800bf20 <rcl_publisher_init+0x118>
 800be80:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800be82:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800be84:	20c8      	movs	r0, #200	@ 0xc8
 800be86:	4798      	blx	r3
 800be88:	6020      	str	r0, [r4, #0]
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d04e      	beq.n	800bf2c <rcl_publisher_init+0x124>
 800be8e:	4630      	mov	r0, r6
 800be90:	f7ff ff82 	bl	800bd98 <rcl_node_get_rmw_handle>
 800be94:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	9a07      	ldr	r2, [sp, #28]
 800be9c:	6827      	ldr	r7, [r4, #0]
 800be9e:	462b      	mov	r3, r5
 800bea0:	4641      	mov	r1, r8
 800bea2:	f002 fa37 	bl	800e314 <rmw_create_publisher>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800beac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800beb0:	b370      	cbz	r0, 800bf10 <rcl_publisher_init+0x108>
 800beb2:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800beb6:	f002 fb0b 	bl	800e4d0 <rmw_publisher_get_actual_qos>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	4607      	mov	r7, r0
 800bebe:	b9d0      	cbnz	r0, 800bef6 <rcl_publisher_init+0xee>
 800bec0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bec4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bec8:	4629      	mov	r1, r5
 800beca:	2270      	movs	r2, #112	@ 0x70
 800becc:	4618      	mov	r0, r3
 800bece:	f00d fb4c 	bl	801956a <memcpy>
 800bed2:	6832      	ldr	r2, [r6, #0]
 800bed4:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bed8:	9807      	ldr	r0, [sp, #28]
 800beda:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bedc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bede:	4798      	blx	r3
 800bee0:	4638      	mov	r0, r7
 800bee2:	b008      	add	sp, #32
 800bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee8:	270b      	movs	r7, #11
 800beea:	4638      	mov	r0, r7
 800beec:	b008      	add	sp, #32
 800beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef2:	27c8      	movs	r7, #200	@ 0xc8
 800bef4:	e7a1      	b.n	800be3a <rcl_publisher_init+0x32>
 800bef6:	b18b      	cbz	r3, 800bf1c <rcl_publisher_init+0x114>
 800bef8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800befc:	b142      	cbz	r2, 800bf10 <rcl_publisher_init+0x108>
 800befe:	4630      	mov	r0, r6
 800bf00:	f7ff ff4a 	bl	800bd98 <rcl_node_get_rmw_handle>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bf0a:	f002 faf1 	bl	800e4f0 <rmw_destroy_publisher>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bf12:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bf14:	4618      	mov	r0, r3
 800bf16:	4790      	blx	r2
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	2701      	movs	r7, #1
 800bf1e:	e7db      	b.n	800bed8 <rcl_publisher_init+0xd0>
 800bf20:	2867      	cmp	r0, #103	@ 0x67
 800bf22:	d0d9      	beq.n	800bed8 <rcl_publisher_init+0xd0>
 800bf24:	2869      	cmp	r0, #105	@ 0x69
 800bf26:	d003      	beq.n	800bf30 <rcl_publisher_init+0x128>
 800bf28:	280a      	cmp	r0, #10
 800bf2a:	d1f7      	bne.n	800bf1c <rcl_publisher_init+0x114>
 800bf2c:	270a      	movs	r7, #10
 800bf2e:	e7d3      	b.n	800bed8 <rcl_publisher_init+0xd0>
 800bf30:	2767      	movs	r7, #103	@ 0x67
 800bf32:	e7d1      	b.n	800bed8 <rcl_publisher_init+0xd0>

0800bf34 <rcl_publisher_fini>:
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	b300      	cbz	r0, 800bf7a <rcl_publisher_fini+0x46>
 800bf38:	4604      	mov	r4, r0
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	f7ff ff01 	bl	800bd44 <rcl_node_is_valid_except_context>
 800bf42:	b1f0      	cbz	r0, 800bf82 <rcl_publisher_fini+0x4e>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	b1ab      	cbz	r3, 800bf74 <rcl_publisher_fini+0x40>
 800bf48:	4628      	mov	r0, r5
 800bf4a:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800bf4c:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800bf4e:	f7ff ff23 	bl	800bd98 <rcl_node_get_rmw_handle>
 800bf52:	b1c8      	cbz	r0, 800bf88 <rcl_publisher_fini+0x54>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bf5a:	f002 fac9 	bl	800e4f0 <rmw_destroy_publisher>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	4629      	mov	r1, r5
 800bf62:	6820      	ldr	r0, [r4, #0]
 800bf64:	1e1d      	subs	r5, r3, #0
 800bf66:	bf18      	it	ne
 800bf68:	2501      	movne	r5, #1
 800bf6a:	47b0      	blx	r6
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	4628      	mov	r0, r5
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	461d      	mov	r5, r3
 800bf76:	4628      	mov	r0, r5
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800bf7e:	4628      	mov	r0, r5
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	25c8      	movs	r5, #200	@ 0xc8
 800bf84:	4628      	mov	r0, r5
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	250b      	movs	r5, #11
 800bf8a:	e7f1      	b.n	800bf70 <rcl_publisher_fini+0x3c>

0800bf8c <rcl_publisher_get_default_options>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	4d14      	ldr	r5, [pc, #80]	@ (800bfe0 <rcl_publisher_get_default_options+0x54>)
 800bf90:	4914      	ldr	r1, [pc, #80]	@ (800bfe4 <rcl_publisher_get_default_options+0x58>)
 800bf92:	b088      	sub	sp, #32
 800bf94:	4604      	mov	r4, r0
 800bf96:	2250      	movs	r2, #80	@ 0x50
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f00d fae6 	bl	801956a <memcpy>
 800bf9e:	a802      	add	r0, sp, #8
 800bfa0:	f001 fc36 	bl	800d810 <rcutils_get_default_allocator>
 800bfa4:	f10d 0c08 	add.w	ip, sp, #8
 800bfa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bfb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bfb4:	466e      	mov	r6, sp
 800bfb6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfba:	f8ce 3000 	str.w	r3, [lr]
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f001 feda 	bl	800dd78 <rmw_get_default_publisher_options>
 800bfc4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bfc8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bfcc:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfd0:	2270      	movs	r2, #112	@ 0x70
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f00d fac8 	bl	801956a <memcpy>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	b008      	add	sp, #32
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	20009790 	.word	0x20009790
 800bfe4:	0801a640 	.word	0x0801a640

0800bfe8 <rcl_publish>:
 800bfe8:	b1f8      	cbz	r0, 800c02a <rcl_publish+0x42>
 800bfea:	6803      	ldr	r3, [r0, #0]
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	b1b3      	cbz	r3, 800c020 <rcl_publish+0x38>
 800bff2:	4616      	mov	r6, r2
 800bff4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bff8:	b192      	cbz	r2, 800c020 <rcl_publish+0x38>
 800bffa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bffe:	460d      	mov	r5, r1
 800c000:	f007 fb9a 	bl	8013738 <rcl_context_is_valid>
 800c004:	b160      	cbz	r0, 800c020 <rcl_publish+0x38>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c00c:	b140      	cbz	r0, 800c020 <rcl_publish+0x38>
 800c00e:	b155      	cbz	r5, 800c026 <rcl_publish+0x3e>
 800c010:	4632      	mov	r2, r6
 800c012:	4629      	mov	r1, r5
 800c014:	f002 f91e 	bl	800e254 <rmw_publish>
 800c018:	3800      	subs	r0, #0
 800c01a:	bf18      	it	ne
 800c01c:	2001      	movne	r0, #1
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	200b      	movs	r0, #11
 800c028:	bd70      	pop	{r4, r5, r6, pc}
 800c02a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c02e:	4770      	bx	lr

0800c030 <rcl_publisher_is_valid>:
 800c030:	b1a0      	cbz	r0, 800c05c <rcl_publisher_is_valid+0x2c>
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	b173      	cbz	r3, 800c058 <rcl_publisher_is_valid+0x28>
 800c03a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c03e:	b15a      	cbz	r2, 800c058 <rcl_publisher_is_valid+0x28>
 800c040:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c044:	f007 fb78 	bl	8013738 <rcl_context_is_valid>
 800c048:	b130      	cbz	r0, 800c058 <rcl_publisher_is_valid+0x28>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c050:	3800      	subs	r0, #0
 800c052:	bf18      	it	ne
 800c054:	2001      	movne	r0, #1
 800c056:	bd10      	pop	{r4, pc}
 800c058:	2000      	movs	r0, #0
 800c05a:	bd10      	pop	{r4, pc}
 800c05c:	2000      	movs	r0, #0
 800c05e:	4770      	bx	lr

0800c060 <rcl_publisher_is_valid_except_context>:
 800c060:	b130      	cbz	r0, 800c070 <rcl_publisher_is_valid_except_context+0x10>
 800c062:	6800      	ldr	r0, [r0, #0]
 800c064:	b120      	cbz	r0, 800c070 <rcl_publisher_is_valid_except_context+0x10>
 800c066:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c06a:	3800      	subs	r0, #0
 800c06c:	bf18      	it	ne
 800c06e:	2001      	movne	r0, #1
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop

0800c074 <rcl_get_zero_initialized_subscription>:
 800c074:	4b01      	ldr	r3, [pc, #4]	@ (800c07c <rcl_get_zero_initialized_subscription+0x8>)
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	0801a690 	.word	0x0801a690

0800c080 <rcl_subscription_init>:
 800c080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c084:	b089      	sub	sp, #36	@ 0x24
 800c086:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c088:	b1d6      	cbz	r6, 800c0c0 <rcl_subscription_init+0x40>
 800c08a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c08e:	4604      	mov	r4, r0
 800c090:	4648      	mov	r0, r9
 800c092:	460d      	mov	r5, r1
 800c094:	4690      	mov	r8, r2
 800c096:	461f      	mov	r7, r3
 800c098:	f001 fbc8 	bl	800d82c <rcutils_allocator_is_valid>
 800c09c:	b180      	cbz	r0, 800c0c0 <rcl_subscription_init+0x40>
 800c09e:	b17c      	cbz	r4, 800c0c0 <rcl_subscription_init+0x40>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f7ff fe57 	bl	800bd54 <rcl_node_is_valid>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d054      	beq.n	800c154 <rcl_subscription_init+0xd4>
 800c0aa:	f1b8 0f00 	cmp.w	r8, #0
 800c0ae:	d007      	beq.n	800c0c0 <rcl_subscription_init+0x40>
 800c0b0:	b137      	cbz	r7, 800c0c0 <rcl_subscription_init+0x40>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	b14b      	cbz	r3, 800c0ca <rcl_subscription_init+0x4a>
 800c0b6:	2764      	movs	r7, #100	@ 0x64
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	b009      	add	sp, #36	@ 0x24
 800c0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c0:	270b      	movs	r7, #11
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	b009      	add	sp, #36	@ 0x24
 800c0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ca:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c0ce:	aa07      	add	r2, sp, #28
 800c0d0:	9205      	str	r2, [sp, #20]
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800c0d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f007 fef0 	bl	8013ecc <rcl_node_resolve_name>
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d15f      	bne.n	800c1b2 <rcl_subscription_init+0x132>
 800c0f2:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800c0f6:	21c8      	movs	r1, #200	@ 0xc8
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	4798      	blx	r3
 800c0fc:	6020      	str	r0, [r4, #0]
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d05d      	beq.n	800c1be <rcl_subscription_init+0x13e>
 800c102:	4628      	mov	r0, r5
 800c104:	f7ff fe48 	bl	800bd98 <rcl_node_get_rmw_handle>
 800c108:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	9a07      	ldr	r2, [sp, #28]
 800c110:	6827      	ldr	r7, [r4, #0]
 800c112:	4641      	mov	r1, r8
 800c114:	4633      	mov	r3, r6
 800c116:	f002 fa81 	bl	800e61c <rmw_create_subscription>
 800c11a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800c11e:	6827      	ldr	r7, [r4, #0]
 800c120:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800c124:	b348      	cbz	r0, 800c17a <rcl_subscription_init+0xfa>
 800c126:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800c12a:	f002 fb59 	bl	800e7e0 <rmw_subscription_get_actual_qos>
 800c12e:	4607      	mov	r7, r0
 800c130:	b9a8      	cbnz	r0, 800c15e <rcl_subscription_init+0xde>
 800c132:	6820      	ldr	r0, [r4, #0]
 800c134:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800c138:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800c13c:	2270      	movs	r2, #112	@ 0x70
 800c13e:	4631      	mov	r1, r6
 800c140:	f00d fa13 	bl	801956a <memcpy>
 800c144:	9807      	ldr	r0, [sp, #28]
 800c146:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c148:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c14a:	4798      	blx	r3
 800c14c:	4638      	mov	r0, r7
 800c14e:	b009      	add	sp, #36	@ 0x24
 800c150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c154:	27c8      	movs	r7, #200	@ 0xc8
 800c156:	4638      	mov	r0, r7
 800c158:	b009      	add	sp, #36	@ 0x24
 800c15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c15e:	6827      	ldr	r7, [r4, #0]
 800c160:	b32f      	cbz	r7, 800c1ae <rcl_subscription_init+0x12e>
 800c162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c166:	b14b      	cbz	r3, 800c17c <rcl_subscription_init+0xfc>
 800c168:	4628      	mov	r0, r5
 800c16a:	f7ff fe15 	bl	800bd98 <rcl_node_get_rmw_handle>
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c174:	f002 fb44 	bl	800e800 <rmw_destroy_subscription>
 800c178:	6827      	ldr	r7, [r4, #0]
 800c17a:	b197      	cbz	r7, 800c1a2 <rcl_subscription_init+0x122>
 800c17c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800c180:	4628      	mov	r0, r5
 800c182:	f001 fb53 	bl	800d82c <rcutils_allocator_is_valid>
 800c186:	b158      	cbz	r0, 800c1a0 <rcl_subscription_init+0x120>
 800c188:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c18a:	b148      	cbz	r0, 800c1a0 <rcl_subscription_init+0x120>
 800c18c:	4629      	mov	r1, r5
 800c18e:	f001 fdf7 	bl	800dd80 <rmw_subscription_content_filter_options_fini>
 800c192:	4605      	mov	r5, r0
 800c194:	b9b8      	cbnz	r0, 800c1c6 <rcl_subscription_init+0x146>
 800c196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c198:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c19a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c19c:	4798      	blx	r3
 800c19e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800c1a0:	6827      	ldr	r7, [r4, #0]
 800c1a2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c1a4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	4798      	blx	r3
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	2701      	movs	r7, #1
 800c1b0:	e7c8      	b.n	800c144 <rcl_subscription_init+0xc4>
 800c1b2:	2867      	cmp	r0, #103	@ 0x67
 800c1b4:	d0c6      	beq.n	800c144 <rcl_subscription_init+0xc4>
 800c1b6:	2869      	cmp	r0, #105	@ 0x69
 800c1b8:	d003      	beq.n	800c1c2 <rcl_subscription_init+0x142>
 800c1ba:	280a      	cmp	r0, #10
 800c1bc:	d1f7      	bne.n	800c1ae <rcl_subscription_init+0x12e>
 800c1be:	270a      	movs	r7, #10
 800c1c0:	e7c0      	b.n	800c144 <rcl_subscription_init+0xc4>
 800c1c2:	2767      	movs	r7, #103	@ 0x67
 800c1c4:	e7be      	b.n	800c144 <rcl_subscription_init+0xc4>
 800c1c6:	f007 fa99 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 800c1ca:	6827      	ldr	r7, [r4, #0]
 800c1cc:	e7e9      	b.n	800c1a2 <rcl_subscription_init+0x122>
 800c1ce:	bf00      	nop

0800c1d0 <rcl_subscription_fini>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d039      	beq.n	800c24c <rcl_subscription_fini+0x7c>
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	460d      	mov	r5, r1
 800c1de:	f7ff fdb1 	bl	800bd44 <rcl_node_is_valid_except_context>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d037      	beq.n	800c256 <rcl_subscription_fini+0x86>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	b363      	cbz	r3, 800c244 <rcl_subscription_fini+0x74>
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800c1ee:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800c1f2:	f7ff fdd1 	bl	800bd98 <rcl_node_get_rmw_handle>
 800c1f6:	b390      	cbz	r0, 800c25e <rcl_subscription_fini+0x8e>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c1fe:	f002 faff 	bl	800e800 <rmw_destroy_subscription>
 800c202:	6826      	ldr	r6, [r4, #0]
 800c204:	1e05      	subs	r5, r0, #0
 800c206:	bf18      	it	ne
 800c208:	2501      	movne	r5, #1
 800c20a:	b37e      	cbz	r6, 800c26c <rcl_subscription_fini+0x9c>
 800c20c:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800c210:	4648      	mov	r0, r9
 800c212:	f001 fb0b 	bl	800d82c <rcutils_allocator_is_valid>
 800c216:	b358      	cbz	r0, 800c270 <rcl_subscription_fini+0xa0>
 800c218:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800c21a:	b150      	cbz	r0, 800c232 <rcl_subscription_fini+0x62>
 800c21c:	4649      	mov	r1, r9
 800c21e:	f001 fdaf 	bl	800dd80 <rmw_subscription_content_filter_options_fini>
 800c222:	4681      	mov	r9, r0
 800c224:	b9e8      	cbnz	r0, 800c262 <rcl_subscription_fini+0x92>
 800c226:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c228:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800c22a:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800c22c:	4798      	blx	r3
 800c22e:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800c232:	6826      	ldr	r6, [r4, #0]
 800c234:	4630      	mov	r0, r6
 800c236:	4641      	mov	r1, r8
 800c238:	47b8      	blx	r7
 800c23a:	2300      	movs	r3, #0
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	4628      	mov	r0, r5
 800c240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c244:	461d      	mov	r5, r3
 800c246:	4628      	mov	r0, r5
 800c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24c:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800c250:	4628      	mov	r0, r5
 800c252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c256:	25c8      	movs	r5, #200	@ 0xc8
 800c258:	4628      	mov	r0, r5
 800c25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c25e:	250b      	movs	r5, #11
 800c260:	e7f1      	b.n	800c246 <rcl_subscription_fini+0x76>
 800c262:	f007 fa4b 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 800c266:	6826      	ldr	r6, [r4, #0]
 800c268:	2800      	cmp	r0, #0
 800c26a:	d0e3      	beq.n	800c234 <rcl_subscription_fini+0x64>
 800c26c:	2501      	movs	r5, #1
 800c26e:	e7e1      	b.n	800c234 <rcl_subscription_fini+0x64>
 800c270:	6826      	ldr	r6, [r4, #0]
 800c272:	2501      	movs	r5, #1
 800c274:	e7de      	b.n	800c234 <rcl_subscription_fini+0x64>
 800c276:	bf00      	nop

0800c278 <rcl_subscription_get_default_options>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	4d14      	ldr	r5, [pc, #80]	@ (800c2cc <rcl_subscription_get_default_options+0x54>)
 800c27c:	4914      	ldr	r1, [pc, #80]	@ (800c2d0 <rcl_subscription_get_default_options+0x58>)
 800c27e:	b08a      	sub	sp, #40	@ 0x28
 800c280:	4604      	mov	r4, r0
 800c282:	2250      	movs	r2, #80	@ 0x50
 800c284:	4628      	mov	r0, r5
 800c286:	f00d f970 	bl	801956a <memcpy>
 800c28a:	a804      	add	r0, sp, #16
 800c28c:	f001 fac0 	bl	800d810 <rcutils_get_default_allocator>
 800c290:	f10d 0c10 	add.w	ip, sp, #16
 800c294:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c298:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c29c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2a0:	466e      	mov	r6, sp
 800c2a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2a6:	f8ce 3000 	str.w	r3, [lr]
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f001 fd82 	bl	800ddb4 <rmw_get_default_subscription_options>
 800c2b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c2b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c2b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c2bc:	2270      	movs	r2, #112	@ 0x70
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f00d f952 	bl	801956a <memcpy>
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	b00a      	add	sp, #40	@ 0x28
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	20009800 	.word	0x20009800
 800c2d0:	0801a698 	.word	0x0801a698

0800c2d4 <rcl_take>:
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d04a      	beq.n	800c36e <rcl_take+0x9a>
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	4604      	mov	r4, r0
 800c2de:	6800      	ldr	r0, [r0, #0]
 800c2e0:	b0a4      	sub	sp, #144	@ 0x90
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d03b      	beq.n	800c35e <rcl_take+0x8a>
 800c2e6:	461f      	mov	r7, r3
 800c2e8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d036      	beq.n	800c35e <rcl_take+0x8a>
 800c2f0:	460e      	mov	r6, r1
 800c2f2:	2900      	cmp	r1, #0
 800c2f4:	d039      	beq.n	800c36a <rcl_take+0x96>
 800c2f6:	4615      	mov	r5, r2
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	d03c      	beq.n	800c376 <rcl_take+0xa2>
 800c2fc:	a802      	add	r0, sp, #8
 800c2fe:	f001 fd5f 	bl	800ddc0 <rmw_get_zero_initialized_message_info>
 800c302:	f10d 0c08 	add.w	ip, sp, #8
 800c306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c30a:	46ae      	mov	lr, r5
 800c30c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c310:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c318:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c31c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c320:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800c324:	f04f 0800 	mov.w	r8, #0
 800c328:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800c32c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800c330:	6822      	ldr	r2, [r4, #0]
 800c332:	462b      	mov	r3, r5
 800c334:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800c338:	9700      	str	r7, [sp, #0]
 800c33a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800c33e:	4631      	mov	r1, r6
 800c340:	f002 fabe 	bl	800e8c0 <rmw_take_with_info>
 800c344:	4603      	mov	r3, r0
 800c346:	b9c0      	cbnz	r0, 800c37a <rcl_take+0xa6>
 800c348:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800c34c:	f240 1291 	movw	r2, #401	@ 0x191
 800c350:	2900      	cmp	r1, #0
 800c352:	bf08      	it	eq
 800c354:	4613      	moveq	r3, r2
 800c356:	4618      	mov	r0, r3
 800c358:	b024      	add	sp, #144	@ 0x90
 800c35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c362:	4618      	mov	r0, r3
 800c364:	b024      	add	sp, #144	@ 0x90
 800c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c36a:	230b      	movs	r3, #11
 800c36c:	e7f3      	b.n	800c356 <rcl_take+0x82>
 800c36e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c372:	4618      	mov	r0, r3
 800c374:	4770      	bx	lr
 800c376:	ad14      	add	r5, sp, #80	@ 0x50
 800c378:	e7c0      	b.n	800c2fc <rcl_take+0x28>
 800c37a:	f007 f9bf 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 800c37e:	4603      	mov	r3, r0
 800c380:	e7e9      	b.n	800c356 <rcl_take+0x82>
 800c382:	bf00      	nop

0800c384 <rcl_subscription_get_rmw_handle>:
 800c384:	b118      	cbz	r0, 800c38e <rcl_subscription_get_rmw_handle+0xa>
 800c386:	6800      	ldr	r0, [r0, #0]
 800c388:	b108      	cbz	r0, 800c38e <rcl_subscription_get_rmw_handle+0xa>
 800c38a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800c38e:	4770      	bx	lr

0800c390 <rcl_subscription_is_valid>:
 800c390:	b130      	cbz	r0, 800c3a0 <rcl_subscription_is_valid+0x10>
 800c392:	6800      	ldr	r0, [r0, #0]
 800c394:	b120      	cbz	r0, 800c3a0 <rcl_subscription_is_valid+0x10>
 800c396:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800c39a:	3800      	subs	r0, #0
 800c39c:	bf18      	it	ne
 800c39e:	2001      	movne	r0, #1
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop

0800c3a4 <_rcl_timer_time_jump>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	b131      	cbz	r1, 800c3be <_rcl_timer_time_jump+0x1a>
 800c3b0:	7803      	ldrb	r3, [r0, #0]
 800c3b2:	3b02      	subs	r3, #2
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d93f      	bls.n	800c438 <_rcl_timer_time_jump+0x94>
 800c3b8:	b004      	add	sp, #16
 800c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3be:	6813      	ldr	r3, [r2, #0]
 800c3c0:	a902      	add	r1, sp, #8
 800c3c2:	6818      	ldr	r0, [r3, #0]
 800c3c4:	f008 f850 	bl	8014468 <rcl_clock_get_now>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d1f5      	bne.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	2105      	movs	r1, #5
 800c3d0:	3020      	adds	r0, #32
 800c3d2:	f001 fa39 	bl	800d848 <__atomic_load_8>
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	4681      	mov	r9, r0
 800c3da:	4688      	mov	r8, r1
 800c3dc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800c3e0:	2105      	movs	r1, #5
 800c3e2:	f001 fa31 	bl	800d848 <__atomic_load_8>
 800c3e6:	4607      	mov	r7, r0
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	460e      	mov	r6, r1
 800c3ec:	3018      	adds	r0, #24
 800c3ee:	2105      	movs	r1, #5
 800c3f0:	f001 fa2a 	bl	800d848 <__atomic_load_8>
 800c3f4:	782b      	ldrb	r3, [r5, #0]
 800c3f6:	9a02      	ldr	r2, [sp, #8]
 800c3f8:	3b02      	subs	r3, #2
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	4682      	mov	sl, r0
 800c402:	d937      	bls.n	800c474 <_rcl_timer_time_jump+0xd0>
 800c404:	42ba      	cmp	r2, r7
 800c406:	eb73 0106 	sbcs.w	r1, r3, r6
 800c40a:	da5f      	bge.n	800c4cc <_rcl_timer_time_jump+0x128>
 800c40c:	454a      	cmp	r2, r9
 800c40e:	eb73 0108 	sbcs.w	r1, r3, r8
 800c412:	dad1      	bge.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	eb1a 0202 	adds.w	r2, sl, r2
 800c41a:	eb43 0305 	adc.w	r3, r3, r5
 800c41e:	2505      	movs	r5, #5
 800c420:	3028      	adds	r0, #40	@ 0x28
 800c422:	9500      	str	r5, [sp, #0]
 800c424:	f001 fa46 	bl	800d8b4 <__atomic_store_8>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	9500      	str	r5, [sp, #0]
 800c42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c430:	3020      	adds	r0, #32
 800c432:	f001 fa3f 	bl	800d8b4 <__atomic_store_8>
 800c436:	e7bf      	b.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c438:	6813      	ldr	r3, [r2, #0]
 800c43a:	a902      	add	r1, sp, #8
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	f008 f813 	bl	8014468 <rcl_clock_get_now>
 800c442:	2800      	cmp	r0, #0
 800c444:	d1b8      	bne.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	d0b4      	beq.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c44e:	6820      	ldr	r0, [r4, #0]
 800c450:	2105      	movs	r1, #5
 800c452:	3028      	adds	r0, #40	@ 0x28
 800c454:	f001 f9f8 	bl	800d848 <__atomic_load_8>
 800c458:	9d02      	ldr	r5, [sp, #8]
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	4602      	mov	r2, r0
 800c45e:	6820      	ldr	r0, [r4, #0]
 800c460:	1b52      	subs	r2, r2, r5
 800c462:	f04f 0405 	mov.w	r4, #5
 800c466:	9400      	str	r4, [sp, #0]
 800c468:	eb61 0303 	sbc.w	r3, r1, r3
 800c46c:	3030      	adds	r0, #48	@ 0x30
 800c46e:	f001 fa21 	bl	800d8b4 <__atomic_store_8>
 800c472:	e7a1      	b.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c474:	4313      	orrs	r3, r2
 800c476:	d09f      	beq.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	f04f 0805 	mov.w	r8, #5
 800c47e:	2300      	movs	r3, #0
 800c480:	f8cd 8000 	str.w	r8, [sp]
 800c484:	3030      	adds	r0, #48	@ 0x30
 800c486:	2200      	movs	r2, #0
 800c488:	f001 fa4a 	bl	800d920 <__atomic_exchange_8>
 800c48c:	ea51 0300 	orrs.w	r3, r1, r0
 800c490:	4606      	mov	r6, r0
 800c492:	460f      	mov	r7, r1
 800c494:	d090      	beq.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c496:	9a02      	ldr	r2, [sp, #8]
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	f8cd 8000 	str.w	r8, [sp]
 800c49e:	1a12      	subs	r2, r2, r0
 800c4a0:	6820      	ldr	r0, [r4, #0]
 800c4a2:	eb63 0301 	sbc.w	r3, r3, r1
 800c4a6:	eb12 020a 	adds.w	r2, r2, sl
 800c4aa:	eb43 0305 	adc.w	r3, r3, r5
 800c4ae:	3028      	adds	r0, #40	@ 0x28
 800c4b0:	f001 fa00 	bl	800d8b4 <__atomic_store_8>
 800c4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4b8:	f8cd 8000 	str.w	r8, [sp]
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	1b92      	subs	r2, r2, r6
 800c4c0:	eb63 0307 	sbc.w	r3, r3, r7
 800c4c4:	3020      	adds	r0, #32
 800c4c6:	f001 f9f5 	bl	800d8b4 <__atomic_store_8>
 800c4ca:	e775      	b.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	3008      	adds	r0, #8
 800c4d0:	f007 faa4 	bl	8013a1c <rcl_trigger_guard_condition>
 800c4d4:	e770      	b.n	800c3b8 <_rcl_timer_time_jump+0x14>
 800c4d6:	bf00      	nop

0800c4d8 <rcl_get_zero_initialized_timer>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	@ (800c4e0 <rcl_get_zero_initialized_timer+0x8>)
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	0801a6e8 	.word	0x0801a6e8
 800c4e4:	00000000 	.word	0x00000000

0800c4e8 <rcl_timer_init>:
 800c4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	b0aa      	sub	sp, #168	@ 0xa8
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	a835      	add	r0, sp, #212	@ 0xd4
 800c4f2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	4692      	mov	sl, r2
 800c4fa:	f001 f997 	bl	800d82c <rcutils_allocator_is_valid>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d064      	beq.n	800c5cc <rcl_timer_init+0xe4>
 800c502:	2c00      	cmp	r4, #0
 800c504:	d062      	beq.n	800c5cc <rcl_timer_init+0xe4>
 800c506:	2d00      	cmp	r5, #0
 800c508:	d060      	beq.n	800c5cc <rcl_timer_init+0xe4>
 800c50a:	2f00      	cmp	r7, #0
 800c50c:	db5e      	blt.n	800c5cc <rcl_timer_init+0xe4>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	b123      	cbz	r3, 800c51c <rcl_timer_init+0x34>
 800c512:	2664      	movs	r6, #100	@ 0x64
 800c514:	4630      	mov	r0, r6
 800c516:	b02a      	add	sp, #168	@ 0xa8
 800c518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51c:	a908      	add	r1, sp, #32
 800c51e:	4628      	mov	r0, r5
 800c520:	f007 ffa2 	bl	8014468 <rcl_clock_get_now>
 800c524:	4606      	mov	r6, r0
 800c526:	2800      	cmp	r0, #0
 800c528:	d1f4      	bne.n	800c514 <rcl_timer_init+0x2c>
 800c52a:	ae06      	add	r6, sp, #24
 800c52c:	4630      	mov	r0, r6
 800c52e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800c532:	f007 f97b 	bl	801382c <rcl_get_zero_initialized_guard_condition>
 800c536:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c53a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800c53e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800c540:	e889 0003 	stmia.w	r9, {r0, r1}
 800c544:	4630      	mov	r0, r6
 800c546:	f007 fa4d 	bl	80139e4 <rcl_guard_condition_get_default_options>
 800c54a:	ab0d      	add	r3, sp, #52	@ 0x34
 800c54c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c550:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c554:	4651      	mov	r1, sl
 800c556:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c55a:	4648      	mov	r0, r9
 800c55c:	f007 f970 	bl	8013840 <rcl_guard_condition_init>
 800c560:	4606      	mov	r6, r0
 800c562:	2800      	cmp	r0, #0
 800c564:	d1d6      	bne.n	800c514 <rcl_timer_init+0x2c>
 800c566:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d033      	beq.n	800c5d6 <rcl_timer_init+0xee>
 800c56e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800c570:	911a      	str	r1, [sp, #104]	@ 0x68
 800c572:	4642      	mov	r2, r8
 800c574:	463b      	mov	r3, r7
 800c576:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800c57a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c57e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c630 <rcl_timer_init+0x148>
 800c582:	eb12 0008 	adds.w	r0, r2, r8
 800c586:	eb47 0103 	adc.w	r1, r7, r3
 800c58a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800c58e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800c592:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800c596:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800c59a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c59e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800c5a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5a6:	f8de 3000 	ldr.w	r3, [lr]
 800c5aa:	f8cc 3000 	str.w	r3, [ip]
 800c5ae:	f04f 0a00 	mov.w	sl, #0
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800c5b8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c5ba:	2050      	movs	r0, #80	@ 0x50
 800c5bc:	4798      	blx	r3
 800c5be:	6020      	str	r0, [r4, #0]
 800c5c0:	b358      	cbz	r0, 800c61a <rcl_timer_init+0x132>
 800c5c2:	2250      	movs	r2, #80	@ 0x50
 800c5c4:	a916      	add	r1, sp, #88	@ 0x58
 800c5c6:	f00c ffd0 	bl	801956a <memcpy>
 800c5ca:	e7a3      	b.n	800c514 <rcl_timer_init+0x2c>
 800c5cc:	260b      	movs	r6, #11
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	b02a      	add	sp, #168	@ 0xa8
 800c5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d6:	2001      	movs	r0, #1
 800c5d8:	2100      	movs	r1, #0
 800c5da:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800c5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c5e6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800c5ea:	4a13      	ldr	r2, [pc, #76]	@ (800c638 <rcl_timer_init+0x150>)
 800c5ec:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c5f0:	9405      	str	r4, [sp, #20]
 800c5f2:	9204      	str	r2, [sp, #16]
 800c5f4:	ab12      	add	r3, sp, #72	@ 0x48
 800c5f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c5fc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800c600:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800c604:	4628      	mov	r0, r5
 800c606:	f007 ff3b 	bl	8014480 <rcl_clock_add_jump_callback>
 800c60a:	4682      	mov	sl, r0
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d0ae      	beq.n	800c56e <rcl_timer_init+0x86>
 800c610:	4648      	mov	r0, r9
 800c612:	f007 f9c1 	bl	8013998 <rcl_guard_condition_fini>
 800c616:	4656      	mov	r6, sl
 800c618:	e77c      	b.n	800c514 <rcl_timer_init+0x2c>
 800c61a:	4648      	mov	r0, r9
 800c61c:	f007 f9bc 	bl	8013998 <rcl_guard_condition_fini>
 800c620:	4905      	ldr	r1, [pc, #20]	@ (800c638 <rcl_timer_init+0x150>)
 800c622:	4622      	mov	r2, r4
 800c624:	4628      	mov	r0, r5
 800c626:	f007 ff8d 	bl	8014544 <rcl_clock_remove_jump_callback>
 800c62a:	260a      	movs	r6, #10
 800c62c:	e772      	b.n	800c514 <rcl_timer_init+0x2c>
 800c62e:	bf00      	nop
	...
 800c638:	0800c3a5 	.word	0x0800c3a5

0800c63c <rcl_timer_fini>:
 800c63c:	b310      	cbz	r0, 800c684 <rcl_timer_fini+0x48>
 800c63e:	6803      	ldr	r3, [r0, #0]
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4604      	mov	r4, r0
 800c644:	b1b3      	cbz	r3, 800c674 <rcl_timer_fini+0x38>
 800c646:	f3bf 8f5b 	dmb	ish
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c650:	f3bf 8f5b 	dmb	ish
 800c654:	6803      	ldr	r3, [r0, #0]
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800c65a:	7802      	ldrb	r2, [r0, #0]
 800c65c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800c65e:	2a01      	cmp	r2, #1
 800c660:	d00a      	beq.n	800c678 <rcl_timer_fini+0x3c>
 800c662:	f103 0008 	add.w	r0, r3, #8
 800c666:	f007 f997 	bl	8013998 <rcl_guard_condition_fini>
 800c66a:	6820      	ldr	r0, [r4, #0]
 800c66c:	4631      	mov	r1, r6
 800c66e:	47a8      	blx	r5
 800c670:	2300      	movs	r3, #0
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	2000      	movs	r0, #0
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	4903      	ldr	r1, [pc, #12]	@ (800c688 <rcl_timer_fini+0x4c>)
 800c67a:	4622      	mov	r2, r4
 800c67c:	f007 ff62 	bl	8014544 <rcl_clock_remove_jump_callback>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	e7ee      	b.n	800c662 <rcl_timer_fini+0x26>
 800c684:	2000      	movs	r0, #0
 800c686:	4770      	bx	lr
 800c688:	0800c3a5 	.word	0x0800c3a5

0800c68c <rcl_timer_call>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	b087      	sub	sp, #28
 800c692:	2800      	cmp	r0, #0
 800c694:	d06d      	beq.n	800c772 <rcl_timer_call+0xe6>
 800c696:	6803      	ldr	r3, [r0, #0]
 800c698:	4604      	mov	r4, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d063      	beq.n	800c766 <rcl_timer_call+0xda>
 800c69e:	f3bf 8f5b 	dmb	ish
 800c6a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6a6:	f3bf 8f5b 	dmb	ish
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d150      	bne.n	800c750 <rcl_timer_call+0xc4>
 800c6ae:	6803      	ldr	r3, [r0, #0]
 800c6b0:	a904      	add	r1, sp, #16
 800c6b2:	6818      	ldr	r0, [r3, #0]
 800c6b4:	f007 fed8 	bl	8014468 <rcl_clock_get_now>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d14a      	bne.n	800c754 <rcl_timer_call+0xc8>
 800c6be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	db4a      	blt.n	800c75c <rcl_timer_call+0xd0>
 800c6c6:	6820      	ldr	r0, [r4, #0]
 800c6c8:	f04f 0a05 	mov.w	sl, #5
 800c6cc:	f8cd a000 	str.w	sl, [sp]
 800c6d0:	3020      	adds	r0, #32
 800c6d2:	f001 f925 	bl	800d920 <__atomic_exchange_8>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	f3bf 8f5b 	dmb	ish
 800c6dc:	4680      	mov	r8, r0
 800c6de:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c6e2:	f3bf 8f5b 	dmb	ish
 800c6e6:	6820      	ldr	r0, [r4, #0]
 800c6e8:	4689      	mov	r9, r1
 800c6ea:	3028      	adds	r0, #40	@ 0x28
 800c6ec:	4651      	mov	r1, sl
 800c6ee:	f001 f8ab 	bl	800d848 <__atomic_load_8>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	460f      	mov	r7, r1
 800c6f8:	3018      	adds	r0, #24
 800c6fa:	4651      	mov	r1, sl
 800c6fc:	f001 f8a4 	bl	800d848 <__atomic_load_8>
 800c700:	1836      	adds	r6, r6, r0
 800c702:	4602      	mov	r2, r0
 800c704:	4682      	mov	sl, r0
 800c706:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800c70a:	eb47 0701 	adc.w	r7, r7, r1
 800c70e:	4286      	cmp	r6, r0
 800c710:	460b      	mov	r3, r1
 800c712:	eb77 010c 	sbcs.w	r1, r7, ip
 800c716:	da04      	bge.n	800c722 <rcl_timer_call+0x96>
 800c718:	ea53 0102 	orrs.w	r1, r3, r2
 800c71c:	d12e      	bne.n	800c77c <rcl_timer_call+0xf0>
 800c71e:	4606      	mov	r6, r0
 800c720:	4667      	mov	r7, ip
 800c722:	6820      	ldr	r0, [r4, #0]
 800c724:	2105      	movs	r1, #5
 800c726:	4632      	mov	r2, r6
 800c728:	463b      	mov	r3, r7
 800c72a:	3028      	adds	r0, #40	@ 0x28
 800c72c:	9100      	str	r1, [sp, #0]
 800c72e:	f001 f8c1 	bl	800d8b4 <__atomic_store_8>
 800c732:	f1bb 0f00 	cmp.w	fp, #0
 800c736:	d00d      	beq.n	800c754 <rcl_timer_call+0xc8>
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	9b05      	ldr	r3, [sp, #20]
 800c73c:	ebb2 0208 	subs.w	r2, r2, r8
 800c740:	4620      	mov	r0, r4
 800c742:	eb63 0309 	sbc.w	r3, r3, r9
 800c746:	47d8      	blx	fp
 800c748:	4628      	mov	r0, r5
 800c74a:	b007      	add	sp, #28
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	f240 3521 	movw	r5, #801	@ 0x321
 800c754:	4628      	mov	r0, r5
 800c756:	b007      	add	sp, #28
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	2501      	movs	r5, #1
 800c75e:	4628      	mov	r0, r5
 800c760:	b007      	add	sp, #28
 800c762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c766:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800c76a:	4628      	mov	r0, r5
 800c76c:	b007      	add	sp, #28
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	250b      	movs	r5, #11
 800c774:	4628      	mov	r0, r5
 800c776:	b007      	add	sp, #28
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	1b80      	subs	r0, r0, r6
 800c77e:	eb6c 0107 	sbc.w	r1, ip, r7
 800c782:	3801      	subs	r0, #1
 800c784:	f161 0100 	sbc.w	r1, r1, #0
 800c788:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c78c:	f7f4 fa4e 	bl	8000c2c <__aeabi_ldivmod>
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	3001      	adds	r0, #1
 800c794:	f141 0100 	adc.w	r1, r1, #0
 800c798:	fb00 f303 	mul.w	r3, r0, r3
 800c79c:	fb01 330a 	mla	r3, r1, sl, r3
 800c7a0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800c7a4:	1986      	adds	r6, r0, r6
 800c7a6:	4453      	add	r3, sl
 800c7a8:	eb43 0707 	adc.w	r7, r3, r7
 800c7ac:	e7b9      	b.n	800c722 <rcl_timer_call+0x96>
 800c7ae:	bf00      	nop

0800c7b0 <rcl_timer_is_ready>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	b378      	cbz	r0, 800c816 <rcl_timer_is_ready+0x66>
 800c7b6:	6803      	ldr	r3, [r0, #0]
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	b383      	cbz	r3, 800c81e <rcl_timer_is_ready+0x6e>
 800c7bc:	460d      	mov	r5, r1
 800c7be:	b351      	cbz	r1, 800c816 <rcl_timer_is_ready+0x66>
 800c7c0:	f3bf 8f5b 	dmb	ish
 800c7c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c7c8:	f3bf 8f5b 	dmb	ish
 800c7cc:	b953      	cbnz	r3, 800c7e4 <rcl_timer_is_ready+0x34>
 800c7ce:	6803      	ldr	r3, [r0, #0]
 800c7d0:	4669      	mov	r1, sp
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	f007 fe48 	bl	8014468 <rcl_clock_get_now>
 800c7d8:	4606      	mov	r6, r0
 800c7da:	b140      	cbz	r0, 800c7ee <rcl_timer_is_ready+0x3e>
 800c7dc:	f240 3321 	movw	r3, #801	@ 0x321
 800c7e0:	4298      	cmp	r0, r3
 800c7e2:	d101      	bne.n	800c7e8 <rcl_timer_is_ready+0x38>
 800c7e4:	2600      	movs	r6, #0
 800c7e6:	702e      	strb	r6, [r5, #0]
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd70      	pop	{r4, r5, r6, pc}
 800c7ee:	6820      	ldr	r0, [r4, #0]
 800c7f0:	2105      	movs	r1, #5
 800c7f2:	3028      	adds	r0, #40	@ 0x28
 800c7f4:	f001 f828 	bl	800d848 <__atomic_load_8>
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	1ac0      	subs	r0, r0, r3
 800c7fc:	9b01      	ldr	r3, [sp, #4]
 800c7fe:	eb61 0103 	sbc.w	r1, r1, r3
 800c802:	2801      	cmp	r0, #1
 800c804:	f171 0300 	sbcs.w	r3, r1, #0
 800c808:	bfb4      	ite	lt
 800c80a:	2301      	movlt	r3, #1
 800c80c:	2300      	movge	r3, #0
 800c80e:	4630      	mov	r0, r6
 800c810:	702b      	strb	r3, [r5, #0]
 800c812:	b002      	add	sp, #8
 800c814:	bd70      	pop	{r4, r5, r6, pc}
 800c816:	260b      	movs	r6, #11
 800c818:	4630      	mov	r0, r6
 800c81a:	b002      	add	sp, #8
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c822:	e7e1      	b.n	800c7e8 <rcl_timer_is_ready+0x38>

0800c824 <rcl_timer_get_time_until_next_call>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	b330      	cbz	r0, 800c878 <rcl_timer_get_time_until_next_call+0x54>
 800c82a:	6803      	ldr	r3, [r0, #0]
 800c82c:	4604      	mov	r4, r0
 800c82e:	b33b      	cbz	r3, 800c880 <rcl_timer_get_time_until_next_call+0x5c>
 800c830:	460d      	mov	r5, r1
 800c832:	b309      	cbz	r1, 800c878 <rcl_timer_get_time_until_next_call+0x54>
 800c834:	f3bf 8f5b 	dmb	ish
 800c838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c83c:	f3bf 8f5b 	dmb	ish
 800c840:	b9ab      	cbnz	r3, 800c86e <rcl_timer_get_time_until_next_call+0x4a>
 800c842:	6803      	ldr	r3, [r0, #0]
 800c844:	4669      	mov	r1, sp
 800c846:	6818      	ldr	r0, [r3, #0]
 800c848:	f007 fe0e 	bl	8014468 <rcl_clock_get_now>
 800c84c:	4606      	mov	r6, r0
 800c84e:	b958      	cbnz	r0, 800c868 <rcl_timer_get_time_until_next_call+0x44>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	2105      	movs	r1, #5
 800c854:	3028      	adds	r0, #40	@ 0x28
 800c856:	f000 fff7 	bl	800d848 <__atomic_load_8>
 800c85a:	9b00      	ldr	r3, [sp, #0]
 800c85c:	1ac0      	subs	r0, r0, r3
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	6028      	str	r0, [r5, #0]
 800c862:	eb61 0103 	sbc.w	r1, r1, r3
 800c866:	6069      	str	r1, [r5, #4]
 800c868:	4630      	mov	r0, r6
 800c86a:	b002      	add	sp, #8
 800c86c:	bd70      	pop	{r4, r5, r6, pc}
 800c86e:	f240 3621 	movw	r6, #801	@ 0x321
 800c872:	4630      	mov	r0, r6
 800c874:	b002      	add	sp, #8
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	260b      	movs	r6, #11
 800c87a:	4630      	mov	r0, r6
 800c87c:	b002      	add	sp, #8
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c884:	e7f0      	b.n	800c868 <rcl_timer_get_time_until_next_call+0x44>
 800c886:	bf00      	nop

0800c888 <rcl_timer_get_guard_condition>:
 800c888:	b130      	cbz	r0, 800c898 <rcl_timer_get_guard_condition+0x10>
 800c88a:	6800      	ldr	r0, [r0, #0]
 800c88c:	b120      	cbz	r0, 800c898 <rcl_timer_get_guard_condition+0x10>
 800c88e:	68c3      	ldr	r3, [r0, #12]
 800c890:	b10b      	cbz	r3, 800c896 <rcl_timer_get_guard_condition+0xe>
 800c892:	3008      	adds	r0, #8
 800c894:	4770      	bx	lr
 800c896:	4618      	mov	r0, r3
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop

0800c89c <_rclc_check_for_new_data>:
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d046      	beq.n	800c92e <_rclc_check_for_new_data+0x92>
 800c8a0:	b510      	push	{r4, lr}
 800c8a2:	7802      	ldrb	r2, [r0, #0]
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2a0a      	cmp	r2, #10
 800c8aa:	d842      	bhi.n	800c932 <_rclc_check_for_new_data+0x96>
 800c8ac:	e8df f002 	tbb	[pc, r2]
 800c8b0:	14181212 	.word	0x14181212
 800c8b4:	06060614 	.word	0x06060614
 800c8b8:	2e1a      	.short	0x2e1a
 800c8ba:	16          	.byte	0x16
 800c8bb:	00          	.byte	0x00
 800c8bc:	6a0a      	ldr	r2, [r1, #32]
 800c8be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c8c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	1a12      	subs	r2, r2, r0
 800c8c8:	bf18      	it	ne
 800c8ca:	2201      	movne	r2, #1
 800c8cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c8d0:	b004      	add	sp, #16
 800c8d2:	bd10      	pop	{r4, pc}
 800c8d4:	680a      	ldr	r2, [r1, #0]
 800c8d6:	e7f2      	b.n	800c8be <_rclc_check_for_new_data+0x22>
 800c8d8:	698a      	ldr	r2, [r1, #24]
 800c8da:	e7f0      	b.n	800c8be <_rclc_check_for_new_data+0x22>
 800c8dc:	688a      	ldr	r2, [r1, #8]
 800c8de:	e7ee      	b.n	800c8be <_rclc_check_for_new_data+0x22>
 800c8e0:	690a      	ldr	r2, [r1, #16]
 800c8e2:	e7ec      	b.n	800c8be <_rclc_check_for_new_data+0x22>
 800c8e4:	685c      	ldr	r4, [r3, #4]
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c8ec:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c8f0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c8f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c8fe:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c902:	f104 0110 	add.w	r1, r4, #16
 800c906:	f008 fe53 	bl	80155b0 <rcl_action_client_wait_set_get_entities_ready>
 800c90a:	e7e1      	b.n	800c8d0 <_rclc_check_for_new_data+0x34>
 800c90c:	685c      	ldr	r4, [r3, #4]
 800c90e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c912:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c916:	e9cd 3200 	strd	r3, r2, [sp]
 800c91a:	4608      	mov	r0, r1
 800c91c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c920:	f104 0220 	add.w	r2, r4, #32
 800c924:	f104 0110 	add.w	r1, r4, #16
 800c928:	f009 f85a 	bl	80159e0 <rcl_action_server_wait_set_get_entities_ready>
 800c92c:	e7d0      	b.n	800c8d0 <_rclc_check_for_new_data+0x34>
 800c92e:	200b      	movs	r0, #11
 800c930:	4770      	bx	lr
 800c932:	2001      	movs	r0, #1
 800c934:	e7cc      	b.n	800c8d0 <_rclc_check_for_new_data+0x34>
 800c936:	bf00      	nop

0800c938 <_rclc_take_new_data>:
 800c938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93a:	b09b      	sub	sp, #108	@ 0x6c
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f000 8088 	beq.w	800ca52 <_rclc_take_new_data+0x11a>
 800c942:	7803      	ldrb	r3, [r0, #0]
 800c944:	4604      	mov	r4, r0
 800c946:	2b0a      	cmp	r3, #10
 800c948:	f200 8167 	bhi.w	800cc1a <_rclc_take_new_data+0x2e2>
 800c94c:	e8df f003 	tbb	[pc, r3]
 800c950:	44152d2d 	.word	0x44152d2d
 800c954:	19191944 	.word	0x19191944
 800c958:	065a      	.short	0x065a
 800c95a:	15          	.byte	0x15
 800c95b:	00          	.byte	0x00
 800c95c:	6840      	ldr	r0, [r0, #4]
 800c95e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 80b2 	bne.w	800cacc <_rclc_take_new_data+0x194>
 800c968:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 80e4 	bne.w	800cb3a <_rclc_take_new_data+0x202>
 800c972:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c976:	2b00      	cmp	r3, #0
 800c978:	d16f      	bne.n	800ca5a <_rclc_take_new_data+0x122>
 800c97a:	2500      	movs	r5, #0
 800c97c:	4628      	mov	r0, r5
 800c97e:	b01b      	add	sp, #108	@ 0x6c
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c984:	6a0b      	ldr	r3, [r1, #32]
 800c986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f5      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800c98e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c992:	f104 0110 	add.w	r1, r4, #16
 800c996:	f007 fc43 	bl	8014220 <rcl_take_request>
 800c99a:	4605      	mov	r5, r0
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d0ec      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800c9a0:	f240 2359 	movw	r3, #601	@ 0x259
 800c9a4:	4298      	cmp	r0, r3
 800c9a6:	d013      	beq.n	800c9d0 <_rclc_take_new_data+0x98>
 800c9a8:	e029      	b.n	800c9fe <_rclc_take_new_data+0xc6>
 800c9aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c9ac:	680b      	ldr	r3, [r1, #0]
 800c9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0e1      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800c9b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c9be:	f7ff fc89 	bl	800c2d4 <rcl_take>
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d0d9      	beq.n	800c97c <_rclc_take_new_data+0x44>
 800c9c8:	f240 1391 	movw	r3, #401	@ 0x191
 800c9cc:	4298      	cmp	r0, r3
 800c9ce:	d116      	bne.n	800c9fe <_rclc_take_new_data+0xc6>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c9d6:	e7d1      	b.n	800c97c <_rclc_take_new_data+0x44>
 800c9d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c9da:	698b      	ldr	r3, [r1, #24]
 800c9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0ca      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800c9e4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c9e8:	f104 0110 	add.w	r1, r4, #16
 800c9ec:	f006 fe34 	bl	8013658 <rcl_take_response>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d0c1      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800c9f6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	d0be      	beq.n	800c97c <_rclc_take_new_data+0x44>
 800c9fe:	f000 fff7 	bl	800d9f0 <rcutils_reset_error>
 800ca02:	e7bb      	b.n	800c97c <_rclc_take_new_data+0x44>
 800ca04:	6840      	ldr	r0, [r0, #4]
 800ca06:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d17d      	bne.n	800cb0a <_rclc_take_new_data+0x1d2>
 800ca0e:	69c3      	ldr	r3, [r0, #28]
 800ca10:	b11b      	cbz	r3, 800ca1a <_rclc_take_new_data+0xe2>
 800ca12:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d144      	bne.n	800caa4 <_rclc_take_new_data+0x16c>
 800ca1a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f040 80ac 	bne.w	800cb7c <_rclc_take_new_data+0x244>
 800ca24:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0a6      	beq.n	800c97a <_rclc_take_new_data+0x42>
 800ca2c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ca2e:	a90a      	add	r1, sp, #40	@ 0x28
 800ca30:	3010      	adds	r0, #16
 800ca32:	f008 fc95 	bl	8015360 <rcl_action_take_result_response>
 800ca36:	4605      	mov	r5, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1e0      	bne.n	800c9fe <_rclc_take_new_data+0xc6>
 800ca3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca40:	6860      	ldr	r0, [r4, #4]
 800ca42:	f009 f8f1 	bl	8015c28 <rclc_action_find_handle_by_result_request_sequence_number>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d098      	beq.n	800c97c <_rclc_take_new_data+0x44>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ca50:	e794      	b.n	800c97c <_rclc_take_new_data+0x44>
 800ca52:	250b      	movs	r5, #11
 800ca54:	4628      	mov	r0, r5
 800ca56:	b01b      	add	sp, #108	@ 0x6c
 800ca58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca5a:	ae04      	add	r6, sp, #16
 800ca5c:	aa0a      	add	r2, sp, #40	@ 0x28
 800ca5e:	3010      	adds	r0, #16
 800ca60:	4631      	mov	r1, r6
 800ca62:	f008 fef1 	bl	8015848 <rcl_action_take_cancel_request>
 800ca66:	4605      	mov	r5, r0
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d1c8      	bne.n	800c9fe <_rclc_take_new_data+0xc6>
 800ca6c:	6860      	ldr	r0, [r4, #4]
 800ca6e:	a90a      	add	r1, sp, #40	@ 0x28
 800ca70:	f009 f898 	bl	8015ba4 <rclc_action_find_goal_handle_by_uuid>
 800ca74:	4607      	mov	r7, r0
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f000 80bb 	beq.w	800cbf2 <_rclc_take_new_data+0x2ba>
 800ca7c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ca80:	2101      	movs	r1, #1
 800ca82:	f009 f819 	bl	8015ab8 <rcl_action_transition_goal_state>
 800ca86:	2803      	cmp	r0, #3
 800ca88:	4684      	mov	ip, r0
 800ca8a:	f040 80a7 	bne.w	800cbdc <_rclc_take_new_data+0x2a4>
 800ca8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca90:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ca94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca96:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ca9a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca9e:	f887 c008 	strb.w	ip, [r7, #8]
 800caa2:	e76b      	b.n	800c97c <_rclc_take_new_data+0x44>
 800caa4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800caa6:	3010      	adds	r0, #16
 800caa8:	f008 fcda 	bl	8015460 <rcl_action_take_feedback>
 800caac:	4605      	mov	r5, r0
 800caae:	2800      	cmp	r0, #0
 800cab0:	d1a5      	bne.n	800c9fe <_rclc_take_new_data+0xc6>
 800cab2:	6860      	ldr	r0, [r4, #4]
 800cab4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cab6:	f009 f875 	bl	8015ba4 <rclc_action_find_goal_handle_by_uuid>
 800caba:	4603      	mov	r3, r0
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f000 80a3 	beq.w	800cc08 <_rclc_take_new_data+0x2d0>
 800cac2:	2201      	movs	r2, #1
 800cac4:	6860      	ldr	r0, [r4, #4]
 800cac6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800caca:	e7a6      	b.n	800ca1a <_rclc_take_new_data+0xe2>
 800cacc:	f009 f844 	bl	8015b58 <rclc_action_take_goal_handle>
 800cad0:	4606      	mov	r6, r0
 800cad2:	6860      	ldr	r0, [r4, #4]
 800cad4:	2e00      	cmp	r6, #0
 800cad6:	f43f af47 	beq.w	800c968 <_rclc_take_new_data+0x30>
 800cada:	6070      	str	r0, [r6, #4]
 800cadc:	69f2      	ldr	r2, [r6, #28]
 800cade:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800cae2:	3010      	adds	r0, #16
 800cae4:	f008 fdf8 	bl	80156d8 <rcl_action_take_goal_request>
 800cae8:	4605      	mov	r5, r0
 800caea:	2800      	cmp	r0, #0
 800caec:	f040 808e 	bne.w	800cc0c <_rclc_take_new_data+0x2d4>
 800caf0:	69f7      	ldr	r7, [r6, #28]
 800caf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800caf4:	7235      	strb	r5, [r6, #8]
 800caf6:	f8c6 0009 	str.w	r0, [r6, #9]
 800cafa:	f8c6 100d 	str.w	r1, [r6, #13]
 800cafe:	6860      	ldr	r0, [r4, #4]
 800cb00:	f8c6 2011 	str.w	r2, [r6, #17]
 800cb04:	f8c6 3015 	str.w	r3, [r6, #21]
 800cb08:	e72e      	b.n	800c968 <_rclc_take_new_data+0x30>
 800cb0a:	aa04      	add	r2, sp, #16
 800cb0c:	a90a      	add	r1, sp, #40	@ 0x28
 800cb0e:	3010      	adds	r0, #16
 800cb10:	f008 fbae 	bl	8015270 <rcl_action_take_goal_response>
 800cb14:	4605      	mov	r5, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f47f af71 	bne.w	800c9fe <_rclc_take_new_data+0xc6>
 800cb1c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb20:	6860      	ldr	r0, [r4, #4]
 800cb22:	f009 f86f 	bl	8015c04 <rclc_action_find_handle_by_goal_request_sequence_number>
 800cb26:	b130      	cbz	r0, 800cb36 <_rclc_take_new_data+0x1fe>
 800cb28:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cb2c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cb30:	2201      	movs	r2, #1
 800cb32:	f880 2020 	strb.w	r2, [r0, #32]
 800cb36:	6860      	ldr	r0, [r4, #4]
 800cb38:	e769      	b.n	800ca0e <_rclc_take_new_data+0xd6>
 800cb3a:	aa04      	add	r2, sp, #16
 800cb3c:	3010      	adds	r0, #16
 800cb3e:	a90a      	add	r1, sp, #40	@ 0x28
 800cb40:	f008 fe42 	bl	80157c8 <rcl_action_take_result_request>
 800cb44:	4605      	mov	r5, r0
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f47f af59 	bne.w	800c9fe <_rclc_take_new_data+0xc6>
 800cb4c:	6860      	ldr	r0, [r4, #4]
 800cb4e:	a904      	add	r1, sp, #16
 800cb50:	f009 f828 	bl	8015ba4 <rclc_action_find_goal_handle_by_uuid>
 800cb54:	4607      	mov	r7, r0
 800cb56:	b160      	cbz	r0, 800cb72 <_rclc_take_new_data+0x23a>
 800cb58:	ad0a      	add	r5, sp, #40	@ 0x28
 800cb5a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800cb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cb62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb66:	f04f 0c02 	mov.w	ip, #2
 800cb6a:	e886 0003 	stmia.w	r6, {r0, r1}
 800cb6e:	f887 c008 	strb.w	ip, [r7, #8]
 800cb72:	6860      	ldr	r0, [r4, #4]
 800cb74:	2300      	movs	r3, #0
 800cb76:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800cb7a:	e6fa      	b.n	800c972 <_rclc_take_new_data+0x3a>
 800cb7c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800cb80:	a90a      	add	r1, sp, #40	@ 0x28
 800cb82:	3010      	adds	r0, #16
 800cb84:	f008 fc2c 	bl	80153e0 <rcl_action_take_cancel_response>
 800cb88:	4605      	mov	r5, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	f47f af37 	bne.w	800c9fe <_rclc_take_new_data+0xc6>
 800cb90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb94:	6860      	ldr	r0, [r4, #4]
 800cb96:	f009 f859 	bl	8015c4c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	6860      	ldr	r0, [r4, #4]
 800cb9e:	2e00      	cmp	r6, #0
 800cba0:	f43f af40 	beq.w	800ca24 <_rclc_take_new_data+0xec>
 800cba4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cba6:	2701      	movs	r7, #1
 800cba8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f43f af3a 	beq.w	800ca24 <_rclc_take_new_data+0xec>
 800cbb0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cbb2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cbb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800cbba:	f008 fff3 	bl	8015ba4 <rclc_action_find_goal_handle_by_uuid>
 800cbbe:	b138      	cbz	r0, 800cbd0 <_rclc_take_new_data+0x298>
 800cbc0:	6860      	ldr	r0, [r4, #4]
 800cbc2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cbc4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800cbc8:	3501      	adds	r5, #1
 800cbca:	42ab      	cmp	r3, r5
 800cbcc:	d8f0      	bhi.n	800cbb0 <_rclc_take_new_data+0x278>
 800cbce:	e729      	b.n	800ca24 <_rclc_take_new_data+0xec>
 800cbd0:	6860      	ldr	r0, [r4, #4]
 800cbd2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	42ab      	cmp	r3, r5
 800cbd8:	d8ea      	bhi.n	800cbb0 <_rclc_take_new_data+0x278>
 800cbda:	e723      	b.n	800ca24 <_rclc_take_new_data+0xec>
 800cbdc:	ab06      	add	r3, sp, #24
 800cbde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbe0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cbe4:	2103      	movs	r1, #3
 800cbe6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cbea:	6860      	ldr	r0, [r4, #4]
 800cbec:	f009 f8a4 	bl	8015d38 <rclc_action_server_goal_cancel_reject>
 800cbf0:	e6c4      	b.n	800c97c <_rclc_take_new_data+0x44>
 800cbf2:	ab06      	add	r3, sp, #24
 800cbf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbf6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cbfa:	2102      	movs	r1, #2
 800cbfc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cc00:	6860      	ldr	r0, [r4, #4]
 800cc02:	f009 f899 	bl	8015d38 <rclc_action_server_goal_cancel_reject>
 800cc06:	e6b9      	b.n	800c97c <_rclc_take_new_data+0x44>
 800cc08:	6860      	ldr	r0, [r4, #4]
 800cc0a:	e706      	b.n	800ca1a <_rclc_take_new_data+0xe2>
 800cc0c:	6860      	ldr	r0, [r4, #4]
 800cc0e:	4631      	mov	r1, r6
 800cc10:	f008 ffb2 	bl	8015b78 <rclc_action_remove_used_goal_handle>
 800cc14:	f000 feec 	bl	800d9f0 <rcutils_reset_error>
 800cc18:	e6b0      	b.n	800c97c <_rclc_take_new_data+0x44>
 800cc1a:	2501      	movs	r5, #1
 800cc1c:	e6ae      	b.n	800c97c <_rclc_take_new_data+0x44>
 800cc1e:	bf00      	nop

0800cc20 <_rclc_execute.part.0>:
 800cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc22:	7803      	ldrb	r3, [r0, #0]
 800cc24:	b087      	sub	sp, #28
 800cc26:	4604      	mov	r4, r0
 800cc28:	2b0a      	cmp	r3, #10
 800cc2a:	f200 8136 	bhi.w	800ce9a <_rclc_execute.part.0+0x27a>
 800cc2e:	e8df f003 	tbb	[pc, r3]
 800cc32:	435e      	.short	0x435e
 800cc34:	06a1664f 	.word	0x06a1664f
 800cc38:	6c1e0606 	.word	0x6c1e0606
 800cc3c:	59          	.byte	0x59
 800cc3d:	00          	.byte	0x00
 800cc3e:	2b06      	cmp	r3, #6
 800cc40:	f000 8122 	beq.w	800ce88 <_rclc_execute.part.0+0x268>
 800cc44:	2b07      	cmp	r3, #7
 800cc46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cc48:	f040 8118 	bne.w	800ce7c <_rclc_execute.part.0+0x25c>
 800cc4c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800cc50:	6880      	ldr	r0, [r0, #8]
 800cc52:	4798      	blx	r3
 800cc54:	f104 0110 	add.w	r1, r4, #16
 800cc58:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800cc5a:	6860      	ldr	r0, [r4, #4]
 800cc5c:	f007 fb20 	bl	80142a0 <rcl_send_response>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d033      	beq.n	800cccc <_rclc_execute.part.0+0xac>
 800cc64:	9005      	str	r0, [sp, #20]
 800cc66:	f000 fec3 	bl	800d9f0 <rcutils_reset_error>
 800cc6a:	9805      	ldr	r0, [sp, #20]
 800cc6c:	e02e      	b.n	800cccc <_rclc_execute.part.0+0xac>
 800cc6e:	6840      	ldr	r0, [r0, #4]
 800cc70:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 8086 	beq.w	800cd86 <_rclc_execute.part.0+0x166>
 800cc7a:	2600      	movs	r6, #0
 800cc7c:	2701      	movs	r7, #1
 800cc7e:	e004      	b.n	800cc8a <_rclc_execute.part.0+0x6a>
 800cc80:	f008 ff44 	bl	8015b0c <rclc_action_send_result_request>
 800cc84:	b998      	cbnz	r0, 800ccae <_rclc_execute.part.0+0x8e>
 800cc86:	722f      	strb	r7, [r5, #8]
 800cc88:	6860      	ldr	r0, [r4, #4]
 800cc8a:	f008 fff1 	bl	8015c70 <rclc_action_find_first_handle_with_goal_response>
 800cc8e:	4605      	mov	r5, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d077      	beq.n	800cd84 <_rclc_execute.part.0+0x164>
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800cc9e:	f885 6020 	strb.w	r6, [r5, #32]
 800cca2:	4798      	blx	r3
 800cca4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800cca8:	4628      	mov	r0, r5
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e8      	bne.n	800cc80 <_rclc_execute.part.0+0x60>
 800ccae:	6860      	ldr	r0, [r4, #4]
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f008 ff61 	bl	8015b78 <rclc_action_remove_used_goal_handle>
 800ccb6:	e7e7      	b.n	800cc88 <_rclc_execute.part.0+0x68>
 800ccb8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ccbc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ccc0:	2d00      	cmp	r5, #0
 800ccc2:	f000 80c9 	beq.w	800ce58 <_rclc_execute.part.0+0x238>
 800ccc6:	6880      	ldr	r0, [r0, #8]
 800ccc8:	4798      	blx	r3
 800ccca:	2000      	movs	r0, #0
 800cccc:	b007      	add	sp, #28
 800ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd0:	6840      	ldr	r0, [r0, #4]
 800ccd2:	f7ff fcdb 	bl	800c68c <rcl_timer_call>
 800ccd6:	f240 3321 	movw	r3, #801	@ 0x321
 800ccda:	4298      	cmp	r0, r3
 800ccdc:	d004      	beq.n	800cce8 <_rclc_execute.part.0+0xc8>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0f4      	beq.n	800cccc <_rclc_execute.part.0+0xac>
 800cce2:	e7bf      	b.n	800cc64 <_rclc_execute.part.0+0x44>
 800cce4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cce6:	4798      	blx	r3
 800cce8:	2000      	movs	r0, #0
 800ccea:	b007      	add	sp, #28
 800ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccee:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ccf2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ccf4:	b925      	cbnz	r5, 800cd00 <_rclc_execute.part.0+0xe0>
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	4798      	blx	r3
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	e7e6      	b.n	800cccc <_rclc_execute.part.0+0xac>
 800ccfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cd00:	68a0      	ldr	r0, [r4, #8]
 800cd02:	4798      	blx	r3
 800cd04:	2000      	movs	r0, #0
 800cd06:	b007      	add	sp, #28
 800cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0a:	6840      	ldr	r0, [r0, #4]
 800cd0c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cd10:	bb3b      	cbnz	r3, 800cd62 <_rclc_execute.part.0+0x142>
 800cd12:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d07b      	beq.n	800ce12 <_rclc_execute.part.0+0x1f2>
 800cd1a:	f640 0634 	movw	r6, #2100	@ 0x834
 800cd1e:	2701      	movs	r7, #1
 800cd20:	e007      	b.n	800cd32 <_rclc_execute.part.0+0x112>
 800cd22:	4628      	mov	r0, r5
 800cd24:	f008 ffbc 	bl	8015ca0 <rclc_action_server_response_goal_request>
 800cd28:	6860      	ldr	r0, [r4, #4]
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	f008 ff24 	bl	8015b78 <rclc_action_remove_used_goal_handle>
 800cd30:	6860      	ldr	r0, [r4, #4]
 800cd32:	2100      	movs	r1, #0
 800cd34:	f008 ff4e 	bl	8015bd4 <rclc_action_find_first_handle_by_status>
 800cd38:	4605      	mov	r5, r0
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d066      	beq.n	800ce0c <_rclc_execute.part.0+0x1ec>
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	4798      	blx	r3
 800cd46:	42b0      	cmp	r0, r6
 800cd48:	f04f 0100 	mov.w	r1, #0
 800cd4c:	d1e9      	bne.n	800cd22 <_rclc_execute.part.0+0x102>
 800cd4e:	2101      	movs	r1, #1
 800cd50:	4628      	mov	r0, r5
 800cd52:	f008 ffa5 	bl	8015ca0 <rclc_action_server_response_goal_request>
 800cd56:	722f      	strb	r7, [r5, #8]
 800cd58:	e7ea      	b.n	800cd30 <_rclc_execute.part.0+0x110>
 800cd5a:	6848      	ldr	r0, [r1, #4]
 800cd5c:	f008 ff0c 	bl	8015b78 <rclc_action_remove_used_goal_handle>
 800cd60:	6860      	ldr	r0, [r4, #4]
 800cd62:	f008 ff43 	bl	8015bec <rclc_action_find_first_terminated_handle>
 800cd66:	4601      	mov	r1, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d1f6      	bne.n	800cd5a <_rclc_execute.part.0+0x13a>
 800cd6c:	6860      	ldr	r0, [r4, #4]
 800cd6e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800cd72:	e7ce      	b.n	800cd12 <_rclc_execute.part.0+0xf2>
 800cd74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cd76:	6880      	ldr	r0, [r0, #8]
 800cd78:	f104 0110 	add.w	r1, r4, #16
 800cd7c:	4798      	blx	r3
 800cd7e:	2000      	movs	r0, #0
 800cd80:	b007      	add	sp, #28
 800cd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd84:	6860      	ldr	r0, [r4, #4]
 800cd86:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cd8a:	b18b      	cbz	r3, 800cdb0 <_rclc_execute.part.0+0x190>
 800cd8c:	68c5      	ldr	r5, [r0, #12]
 800cd8e:	b32d      	cbz	r5, 800cddc <_rclc_execute.part.0+0x1bc>
 800cd90:	2600      	movs	r6, #0
 800cd92:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cd96:	b143      	cbz	r3, 800cdaa <_rclc_execute.part.0+0x18a>
 800cd98:	69c3      	ldr	r3, [r0, #28]
 800cd9a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cd9e:	b123      	cbz	r3, 800cdaa <_rclc_execute.part.0+0x18a>
 800cda0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cda2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cda4:	4628      	mov	r0, r5
 800cda6:	4798      	blx	r3
 800cda8:	6860      	ldr	r0, [r4, #4]
 800cdaa:	682d      	ldr	r5, [r5, #0]
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	d1f0      	bne.n	800cd92 <_rclc_execute.part.0+0x172>
 800cdb0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cdb4:	b193      	cbz	r3, 800cddc <_rclc_execute.part.0+0x1bc>
 800cdb6:	68c5      	ldr	r5, [r0, #12]
 800cdb8:	b185      	cbz	r5, 800cddc <_rclc_execute.part.0+0x1bc>
 800cdba:	2600      	movs	r6, #0
 800cdbc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cdc0:	b14b      	cbz	r3, 800cdd6 <_rclc_execute.part.0+0x1b6>
 800cdc2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cdc4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cdc8:	b12b      	cbz	r3, 800cdd6 <_rclc_execute.part.0+0x1b6>
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cdd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cdd2:	4798      	blx	r3
 800cdd4:	6860      	ldr	r0, [r4, #4]
 800cdd6:	682d      	ldr	r5, [r5, #0]
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	d1ef      	bne.n	800cdbc <_rclc_execute.part.0+0x19c>
 800cddc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d081      	beq.n	800cce8 <_rclc_execute.part.0+0xc8>
 800cde4:	2700      	movs	r7, #0
 800cde6:	e00b      	b.n	800ce00 <_rclc_execute.part.0+0x1e0>
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cdec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cdee:	6a1e      	ldr	r6, [r3, #32]
 800cdf0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cdf4:	47b0      	blx	r6
 800cdf6:	6860      	ldr	r0, [r4, #4]
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f008 febd 	bl	8015b78 <rclc_action_remove_used_goal_handle>
 800cdfe:	6860      	ldr	r0, [r4, #4]
 800ce00:	f008 ff42 	bl	8015c88 <rclc_action_find_first_handle_with_result_response>
 800ce04:	4605      	mov	r5, r0
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d1ee      	bne.n	800cde8 <_rclc_execute.part.0+0x1c8>
 800ce0a:	e76d      	b.n	800cce8 <_rclc_execute.part.0+0xc8>
 800ce0c:	6860      	ldr	r0, [r4, #4]
 800ce0e:	f880 5020 	strb.w	r5, [r0, #32]
 800ce12:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f43f af66 	beq.w	800cce8 <_rclc_execute.part.0+0xc8>
 800ce1c:	68c5      	ldr	r5, [r0, #12]
 800ce1e:	b1b5      	cbz	r5, 800ce4e <_rclc_execute.part.0+0x22e>
 800ce20:	2602      	movs	r6, #2
 800ce22:	e001      	b.n	800ce28 <_rclc_execute.part.0+0x208>
 800ce24:	682d      	ldr	r5, [r5, #0]
 800ce26:	b195      	cbz	r5, 800ce4e <_rclc_execute.part.0+0x22e>
 800ce28:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d1f9      	bne.n	800ce24 <_rclc_execute.part.0+0x204>
 800ce30:	69c3      	ldr	r3, [r0, #28]
 800ce32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ce34:	4628      	mov	r0, r5
 800ce36:	4798      	blx	r3
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ce3e:	4628      	mov	r0, r5
 800ce40:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ce44:	b163      	cbz	r3, 800ce60 <_rclc_execute.part.0+0x240>
 800ce46:	f008 ff4b 	bl	8015ce0 <rclc_action_server_goal_cancel_accept>
 800ce4a:	6860      	ldr	r0, [r4, #4]
 800ce4c:	e7ea      	b.n	800ce24 <_rclc_execute.part.0+0x204>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ce54:	4618      	mov	r0, r3
 800ce56:	e739      	b.n	800cccc <_rclc_execute.part.0+0xac>
 800ce58:	4628      	mov	r0, r5
 800ce5a:	4798      	blx	r3
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	e735      	b.n	800cccc <_rclc_execute.part.0+0xac>
 800ce60:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ce62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ce66:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ce6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce6e:	6860      	ldr	r0, [r4, #4]
 800ce70:	2101      	movs	r1, #1
 800ce72:	f008 ff61 	bl	8015d38 <rclc_action_server_goal_cancel_reject>
 800ce76:	722e      	strb	r6, [r5, #8]
 800ce78:	6860      	ldr	r0, [r4, #4]
 800ce7a:	e7d3      	b.n	800ce24 <_rclc_execute.part.0+0x204>
 800ce7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ce7e:	6880      	ldr	r0, [r0, #8]
 800ce80:	4798      	blx	r3
 800ce82:	f104 0110 	add.w	r1, r4, #16
 800ce86:	e6e7      	b.n	800cc58 <_rclc_execute.part.0+0x38>
 800ce88:	f100 0110 	add.w	r1, r0, #16
 800ce8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ce8e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ce90:	6880      	ldr	r0, [r0, #8]
 800ce92:	9105      	str	r1, [sp, #20]
 800ce94:	4798      	blx	r3
 800ce96:	9905      	ldr	r1, [sp, #20]
 800ce98:	e6de      	b.n	800cc58 <_rclc_execute.part.0+0x38>
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e716      	b.n	800cccc <_rclc_execute.part.0+0xac>
 800ce9e:	bf00      	nop

0800cea0 <rclc_executor_trigger_any>:
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d03f      	beq.n	800cf24 <rclc_executor_trigger_any+0x84>
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d03e      	beq.n	800cf26 <rclc_executor_trigger_any+0x86>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ceae:	2200      	movs	r2, #0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d037      	beq.n	800cf24 <rclc_executor_trigger_any+0x84>
 800ceb4:	b430      	push	{r4, r5}
 800ceb6:	f893 c000 	ldrb.w	ip, [r3]
 800ceba:	f1bc 0f08 	cmp.w	ip, #8
 800cebe:	d11e      	bne.n	800cefe <rclc_executor_trigger_any+0x5e>
 800cec0:	685c      	ldr	r4, [r3, #4]
 800cec2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cec4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cec8:	d105      	bne.n	800ced6 <rclc_executor_trigger_any+0x36>
 800ceca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cece:	b910      	cbnz	r0, 800ced6 <rclc_executor_trigger_any+0x36>
 800ced0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ced4:	b128      	cbz	r0, 800cee2 <rclc_executor_trigger_any+0x42>
 800ced6:	bc30      	pop	{r4, r5}
 800ced8:	4770      	bx	lr
 800ceda:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cede:	2800      	cmp	r0, #0
 800cee0:	d1f9      	bne.n	800ced6 <rclc_executor_trigger_any+0x36>
 800cee2:	3201      	adds	r2, #1
 800cee4:	4291      	cmp	r1, r2
 800cee6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ceea:	d018      	beq.n	800cf1e <rclc_executor_trigger_any+0x7e>
 800ceec:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d0f0      	beq.n	800ced6 <rclc_executor_trigger_any+0x36>
 800cef4:	f893 c000 	ldrb.w	ip, [r3]
 800cef8:	f1bc 0f08 	cmp.w	ip, #8
 800cefc:	d0e0      	beq.n	800cec0 <rclc_executor_trigger_any+0x20>
 800cefe:	f1bc 0f09 	cmp.w	ip, #9
 800cf02:	d1ea      	bne.n	800ceda <rclc_executor_trigger_any+0x3a>
 800cf04:	685c      	ldr	r4, [r3, #4]
 800cf06:	6a25      	ldr	r5, [r4, #32]
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	d1e4      	bne.n	800ced6 <rclc_executor_trigger_any+0x36>
 800cf0c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d1e0      	bne.n	800ced6 <rclc_executor_trigger_any+0x36>
 800cf14:	3201      	adds	r2, #1
 800cf16:	4291      	cmp	r1, r2
 800cf18:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cf1c:	d1e6      	bne.n	800ceec <rclc_executor_trigger_any+0x4c>
 800cf1e:	2000      	movs	r0, #0
 800cf20:	bc30      	pop	{r4, r5}
 800cf22:	4770      	bx	lr
 800cf24:	4770      	bx	lr
 800cf26:	4608      	mov	r0, r1
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	0000      	movs	r0, r0
	...

0800cf30 <rclc_executor_init>:
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d05f      	beq.n	800cff4 <rclc_executor_init+0xc4>
 800cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf38:	460c      	mov	r4, r1
 800cf3a:	b0b0      	sub	sp, #192	@ 0xc0
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	d051      	beq.n	800cfe4 <rclc_executor_init+0xb4>
 800cf40:	4605      	mov	r5, r0
 800cf42:	4618      	mov	r0, r3
 800cf44:	4616      	mov	r6, r2
 800cf46:	461f      	mov	r7, r3
 800cf48:	f000 fc70 	bl	800d82c <rcutils_allocator_is_valid>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d049      	beq.n	800cfe4 <rclc_executor_init+0xb4>
 800cf50:	2e00      	cmp	r6, #0
 800cf52:	d047      	beq.n	800cfe4 <rclc_executor_init+0xb4>
 800cf54:	492c      	ldr	r1, [pc, #176]	@ (800d008 <rclc_executor_init+0xd8>)
 800cf56:	2288      	movs	r2, #136	@ 0x88
 800cf58:	a80e      	add	r0, sp, #56	@ 0x38
 800cf5a:	f00c fb06 	bl	801956a <memcpy>
 800cf5e:	a90e      	add	r1, sp, #56	@ 0x38
 800cf60:	2288      	movs	r2, #136	@ 0x88
 800cf62:	4628      	mov	r0, r5
 800cf64:	f00c fb01 	bl	801956a <memcpy>
 800cf68:	602c      	str	r4, [r5, #0]
 800cf6a:	4668      	mov	r0, sp
 800cf6c:	60ae      	str	r6, [r5, #8]
 800cf6e:	466c      	mov	r4, sp
 800cf70:	f007 fbb0 	bl	80146d4 <rcl_get_zero_initialized_wait_set>
 800cf74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf76:	f105 0c14 	add.w	ip, r5, #20
 800cf7a:	f8d7 8000 	ldr.w	r8, [r7]
 800cf7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf8e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d000 <rclc_executor_init+0xd0>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	f8cc 3000 	str.w	r3, [ip]
 800cf98:	6939      	ldr	r1, [r7, #16]
 800cf9a:	612f      	str	r7, [r5, #16]
 800cf9c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cfa0:	01b0      	lsls	r0, r6, #6
 800cfa2:	47c0      	blx	r8
 800cfa4:	6068      	str	r0, [r5, #4]
 800cfa6:	b338      	cbz	r0, 800cff8 <rclc_executor_init+0xc8>
 800cfa8:	2400      	movs	r4, #0
 800cfaa:	e000      	b.n	800cfae <rclc_executor_init+0x7e>
 800cfac:	6868      	ldr	r0, [r5, #4]
 800cfae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	f000 fa97 	bl	800d4e8 <rclc_executor_handle_init>
 800cfba:	42a6      	cmp	r6, r4
 800cfbc:	d1f6      	bne.n	800cfac <rclc_executor_init+0x7c>
 800cfbe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cfc2:	f000 fa85 	bl	800d4d0 <rclc_executor_handle_counters_zero_init>
 800cfc6:	4a11      	ldr	r2, [pc, #68]	@ (800d00c <rclc_executor_init+0xdc>)
 800cfc8:	686b      	ldr	r3, [r5, #4]
 800cfca:	2000      	movs	r0, #0
 800cfcc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cfd0:	b163      	cbz	r3, 800cfec <rclc_executor_init+0xbc>
 800cfd2:	692b      	ldr	r3, [r5, #16]
 800cfd4:	b153      	cbz	r3, 800cfec <rclc_executor_init+0xbc>
 800cfd6:	68ab      	ldr	r3, [r5, #8]
 800cfd8:	b143      	cbz	r3, 800cfec <rclc_executor_init+0xbc>
 800cfda:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cfde:	b030      	add	sp, #192	@ 0xc0
 800cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe4:	200b      	movs	r0, #11
 800cfe6:	b030      	add	sp, #192	@ 0xc0
 800cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfec:	4618      	mov	r0, r3
 800cfee:	b030      	add	sp, #192	@ 0xc0
 800cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff4:	200b      	movs	r0, #11
 800cff6:	4770      	bx	lr
 800cff8:	200a      	movs	r0, #10
 800cffa:	e7f4      	b.n	800cfe6 <rclc_executor_init+0xb6>
 800cffc:	f3af 8000 	nop.w
 800d000:	3b9aca00 	.word	0x3b9aca00
 800d004:	00000000 	.word	0x00000000
 800d008:	0801a6f0 	.word	0x0801a6f0
 800d00c:	0800cea1 	.word	0x0800cea1

0800d010 <rclc_executor_add_subscription>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d016:	b338      	cbz	r0, 800d068 <rclc_executor_add_subscription+0x58>
 800d018:	b331      	cbz	r1, 800d068 <rclc_executor_add_subscription+0x58>
 800d01a:	b32a      	cbz	r2, 800d068 <rclc_executor_add_subscription+0x58>
 800d01c:	b323      	cbz	r3, 800d068 <rclc_executor_add_subscription+0x58>
 800d01e:	4604      	mov	r4, r0
 800d020:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800d024:	42a8      	cmp	r0, r5
 800d026:	d301      	bcc.n	800d02c <rclc_executor_add_subscription+0x1c>
 800d028:	2001      	movs	r0, #1
 800d02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02c:	6866      	ldr	r6, [r4, #4]
 800d02e:	0187      	lsls	r7, r0, #6
 800d030:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d034:	2500      	movs	r5, #0
 800d036:	55f5      	strb	r5, [r6, r7]
 800d038:	3001      	adds	r0, #1
 800d03a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d03e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d042:	2301      	movs	r3, #1
 800d044:	f104 0514 	add.w	r5, r4, #20
 800d048:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d04c:	f88c e001 	strb.w	lr, [ip, #1]
 800d050:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d054:	60e0      	str	r0, [r4, #12]
 800d056:	4628      	mov	r0, r5
 800d058:	f007 fb50 	bl	80146fc <rcl_wait_set_is_valid>
 800d05c:	b930      	cbnz	r0, 800d06c <rclc_executor_add_subscription+0x5c>
 800d05e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d060:	3301      	adds	r3, #1
 800d062:	2000      	movs	r0, #0
 800d064:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d068:	200b      	movs	r0, #11
 800d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d06c:	4628      	mov	r0, r5
 800d06e:	f007 fb4b 	bl	8014708 <rcl_wait_set_fini>
 800d072:	2800      	cmp	r0, #0
 800d074:	d0f3      	beq.n	800d05e <rclc_executor_add_subscription+0x4e>
 800d076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d078 <rclc_executor_add_timer>:
 800d078:	b300      	cbz	r0, 800d0bc <rclc_executor_add_timer+0x44>
 800d07a:	b1f9      	cbz	r1, 800d0bc <rclc_executor_add_timer+0x44>
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d082:	4293      	cmp	r3, r2
 800d084:	4604      	mov	r4, r0
 800d086:	d301      	bcc.n	800d08c <rclc_executor_add_timer+0x14>
 800d088:	2001      	movs	r0, #1
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	6840      	ldr	r0, [r0, #4]
 800d08e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d092:	019d      	lsls	r5, r3, #6
 800d094:	6051      	str	r1, [r2, #4]
 800d096:	2102      	movs	r1, #2
 800d098:	5341      	strh	r1, [r0, r5]
 800d09a:	3301      	adds	r3, #1
 800d09c:	2000      	movs	r0, #0
 800d09e:	2101      	movs	r1, #1
 800d0a0:	f104 0514 	add.w	r5, r4, #20
 800d0a4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d0a6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	60e3      	str	r3, [r4, #12]
 800d0ac:	f007 fb26 	bl	80146fc <rcl_wait_set_is_valid>
 800d0b0:	b930      	cbnz	r0, 800d0c0 <rclc_executor_add_timer+0x48>
 800d0b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	200b      	movs	r0, #11
 800d0be:	4770      	bx	lr
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f007 fb21 	bl	8014708 <rcl_wait_set_fini>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d0f3      	beq.n	800d0b2 <rclc_executor_add_timer+0x3a>
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}

0800d0cc <rclc_executor_prepare>:
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d044      	beq.n	800d15a <rclc_executor_prepare+0x8e>
 800d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0d2:	f100 0514 	add.w	r5, r0, #20
 800d0d6:	b09b      	sub	sp, #108	@ 0x6c
 800d0d8:	4604      	mov	r4, r0
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f007 fb0e 	bl	80146fc <rcl_wait_set_is_valid>
 800d0e0:	b110      	cbz	r0, 800d0e8 <rclc_executor_prepare+0x1c>
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	b01b      	add	sp, #108	@ 0x6c
 800d0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f007 fb0d 	bl	8014708 <rcl_wait_set_fini>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d130      	bne.n	800d154 <rclc_executor_prepare+0x88>
 800d0f2:	a80c      	add	r0, sp, #48	@ 0x30
 800d0f4:	f007 faee 	bl	80146d4 <rcl_get_zero_initialized_wait_set>
 800d0f8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d0fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d100:	46ae      	mov	lr, r5
 800d102:	6927      	ldr	r7, [r4, #16]
 800d104:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d10c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d110:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d114:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d118:	f8dc 3000 	ldr.w	r3, [ip]
 800d11c:	f8ce 3000 	str.w	r3, [lr]
 800d120:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d122:	ae04      	add	r6, sp, #16
 800d124:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	6822      	ldr	r2, [r4, #0]
 800d12a:	6033      	str	r3, [r6, #0]
 800d12c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d12e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d130:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d134:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d138:	e9cd 2100 	strd	r2, r1, [sp]
 800d13c:	4628      	mov	r0, r5
 800d13e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d140:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d142:	f007 fddf 	bl	8014d04 <rcl_wait_set_init>
 800d146:	2800      	cmp	r0, #0
 800d148:	d0cc      	beq.n	800d0e4 <rclc_executor_prepare+0x18>
 800d14a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d14c:	f000 fc50 	bl	800d9f0 <rcutils_reset_error>
 800d150:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d152:	e7c7      	b.n	800d0e4 <rclc_executor_prepare+0x18>
 800d154:	f000 fc4c 	bl	800d9f0 <rcutils_reset_error>
 800d158:	e7cb      	b.n	800d0f2 <rclc_executor_prepare+0x26>
 800d15a:	200b      	movs	r0, #11
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop

0800d160 <rclc_executor_spin_some.part.0>:
 800d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d164:	f100 0614 	add.w	r6, r0, #20
 800d168:	b083      	sub	sp, #12
 800d16a:	4691      	mov	r9, r2
 800d16c:	4698      	mov	r8, r3
 800d16e:	4605      	mov	r5, r0
 800d170:	f7ff ffac 	bl	800d0cc <rclc_executor_prepare>
 800d174:	4630      	mov	r0, r6
 800d176:	f007 fb93 	bl	80148a0 <rcl_wait_set_clear>
 800d17a:	4607      	mov	r7, r0
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f040 80ed 	bne.w	800d35c <rclc_executor_spin_some.part.0+0x1fc>
 800d182:	68ab      	ldr	r3, [r5, #8]
 800d184:	4604      	mov	r4, r0
 800d186:	b303      	cbz	r3, 800d1ca <rclc_executor_spin_some.part.0+0x6a>
 800d188:	6869      	ldr	r1, [r5, #4]
 800d18a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d18e:	01a2      	lsls	r2, r4, #6
 800d190:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d194:	b1cb      	cbz	r3, 800d1ca <rclc_executor_spin_some.part.0+0x6a>
 800d196:	5c8b      	ldrb	r3, [r1, r2]
 800d198:	2b0a      	cmp	r3, #10
 800d19a:	f200 80d8 	bhi.w	800d34e <rclc_executor_spin_some.part.0+0x1ee>
 800d19e:	e8df f003 	tbb	[pc, r3]
 800d1a2:	9c9c      	.short	0x9c9c
 800d1a4:	068c8ca7 	.word	0x068c8ca7
 800d1a8:	bdc90606 	.word	0xbdc90606
 800d1ac:	b2          	.byte	0xb2
 800d1ad:	00          	.byte	0x00
 800d1ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d1b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f007 feba 	bl	8014f30 <rcl_wait_set_add_service>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f040 8086 	bne.w	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d1c2:	68ab      	ldr	r3, [r5, #8]
 800d1c4:	3401      	adds	r4, #1
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	d3de      	bcc.n	800d188 <rclc_executor_spin_some.part.0+0x28>
 800d1ca:	4643      	mov	r3, r8
 800d1cc:	464a      	mov	r2, r9
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	f007 feda 	bl	8014f88 <rcl_wait>
 800d1d4:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 80c7 	beq.w	800d36c <rclc_executor_spin_some.part.0+0x20c>
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	f040 80b5 	bne.w	800d34e <rclc_executor_spin_some.part.0+0x1ee>
 800d1e4:	68ab      	ldr	r3, [r5, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 8159 	beq.w	800d49e <rclc_executor_spin_some.part.0+0x33e>
 800d1ec:	2400      	movs	r4, #0
 800d1ee:	46a0      	mov	r8, r4
 800d1f0:	f240 1991 	movw	r9, #401	@ 0x191
 800d1f4:	e00a      	b.n	800d20c <rclc_executor_spin_some.part.0+0xac>
 800d1f6:	f7ff fb51 	bl	800c89c <_rclc_check_for_new_data>
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	b110      	cbz	r0, 800d204 <rclc_executor_spin_some.part.0+0xa4>
 800d1fe:	4548      	cmp	r0, r9
 800d200:	f040 80b2 	bne.w	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d204:	68ab      	ldr	r3, [r5, #8]
 800d206:	4598      	cmp	r8, r3
 800d208:	f080 8126 	bcs.w	800d458 <rclc_executor_spin_some.part.0+0x2f8>
 800d20c:	686a      	ldr	r2, [r5, #4]
 800d20e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d212:	4631      	mov	r1, r6
 800d214:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d218:	f108 0801 	add.w	r8, r8, #1
 800d21c:	f1bc 0f00 	cmp.w	ip, #0
 800d220:	d1e9      	bne.n	800d1f6 <rclc_executor_spin_some.part.0+0x96>
 800d222:	4619      	mov	r1, r3
 800d224:	4610      	mov	r0, r2
 800d226:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d22a:	4798      	blx	r3
 800d22c:	2800      	cmp	r0, #0
 800d22e:	f000 809b 	beq.w	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d232:	68ab      	ldr	r3, [r5, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 8097 	beq.w	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d23a:	f04f 0800 	mov.w	r8, #0
 800d23e:	f240 1991 	movw	r9, #401	@ 0x191
 800d242:	e009      	b.n	800d258 <rclc_executor_spin_some.part.0+0xf8>
 800d244:	f7ff fb78 	bl	800c938 <_rclc_take_new_data>
 800d248:	4604      	mov	r4, r0
 800d24a:	b110      	cbz	r0, 800d252 <rclc_executor_spin_some.part.0+0xf2>
 800d24c:	4548      	cmp	r0, r9
 800d24e:	f040 808b 	bne.w	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d252:	68ab      	ldr	r3, [r5, #8]
 800d254:	4598      	cmp	r8, r3
 800d256:	d209      	bcs.n	800d26c <rclc_executor_spin_some.part.0+0x10c>
 800d258:	6868      	ldr	r0, [r5, #4]
 800d25a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d25e:	4631      	mov	r1, r6
 800d260:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d264:	f108 0801 	add.w	r8, r8, #1
 800d268:	2a00      	cmp	r2, #0
 800d26a:	d1eb      	bne.n	800d244 <rclc_executor_spin_some.part.0+0xe4>
 800d26c:	2600      	movs	r6, #0
 800d26e:	b97b      	cbnz	r3, 800d290 <rclc_executor_spin_some.part.0+0x130>
 800d270:	e07a      	b.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d272:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d276:	2a08      	cmp	r2, #8
 800d278:	f000 80fd 	beq.w	800d476 <rclc_executor_spin_some.part.0+0x316>
 800d27c:	2a09      	cmp	r2, #9
 800d27e:	f000 80ef 	beq.w	800d460 <rclc_executor_spin_some.part.0+0x300>
 800d282:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d286:	b98a      	cbnz	r2, 800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d288:	3601      	adds	r6, #1
 800d28a:	429e      	cmp	r6, r3
 800d28c:	d262      	bcs.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d28e:	2400      	movs	r4, #0
 800d290:	686a      	ldr	r2, [r5, #4]
 800d292:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d296:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d29a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d29e:	2900      	cmp	r1, #0
 800d2a0:	d062      	beq.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d2a2:	7841      	ldrb	r1, [r0, #1]
 800d2a4:	2900      	cmp	r1, #0
 800d2a6:	d0e4      	beq.n	800d272 <rclc_executor_spin_some.part.0+0x112>
 800d2a8:	2901      	cmp	r1, #1
 800d2aa:	d1ed      	bne.n	800d288 <rclc_executor_spin_some.part.0+0x128>
 800d2ac:	f7ff fcb8 	bl	800cc20 <_rclc_execute.part.0>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	f040 80b6 	bne.w	800d422 <rclc_executor_spin_some.part.0+0x2c2>
 800d2b6:	68ab      	ldr	r3, [r5, #8]
 800d2b8:	e7e6      	b.n	800d288 <rclc_executor_spin_some.part.0+0x128>
 800d2ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d2be:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f007 fe08 	bl	8014ed8 <rcl_wait_set_add_client>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	f43f af7a 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d2ce:	9001      	str	r0, [sp, #4]
 800d2d0:	f000 fb8e 	bl	800d9f0 <rcutils_reset_error>
 800d2d4:	9801      	ldr	r0, [sp, #4]
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	e03c      	b.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d2da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d2de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f007 fab0 	bl	8014848 <rcl_wait_set_add_subscription>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f43f af6a 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d2ee:	e7ee      	b.n	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d2f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d2f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f007 fdbd 	bl	8014e78 <rcl_wait_set_add_timer>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f43f af5f 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d304:	e7e3      	b.n	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d306:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d30a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d30e:	4630      	mov	r0, r6
 800d310:	f007 fd86 	bl	8014e20 <rcl_wait_set_add_guard_condition>
 800d314:	2800      	cmp	r0, #0
 800d316:	f43f af54 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d31a:	e7d8      	b.n	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d31c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d320:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d324:	3110      	adds	r1, #16
 800d326:	4630      	mov	r0, r6
 800d328:	f008 fb06 	bl	8015938 <rcl_action_wait_set_add_action_server>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f43f af48 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d332:	e7cc      	b.n	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d334:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d338:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d33c:	3110      	adds	r1, #16
 800d33e:	2300      	movs	r3, #0
 800d340:	4630      	mov	r0, r6
 800d342:	f008 f8d1 	bl	80154e8 <rcl_action_wait_set_add_action_client>
 800d346:	2800      	cmp	r0, #0
 800d348:	f43f af3b 	beq.w	800d1c2 <rclc_executor_spin_some.part.0+0x62>
 800d34c:	e7bf      	b.n	800d2ce <rclc_executor_spin_some.part.0+0x16e>
 800d34e:	f000 fb4f 	bl	800d9f0 <rcutils_reset_error>
 800d352:	2701      	movs	r7, #1
 800d354:	4638      	mov	r0, r7
 800d356:	b003      	add	sp, #12
 800d358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35c:	f000 fb48 	bl	800d9f0 <rcutils_reset_error>
 800d360:	4638      	mov	r0, r7
 800d362:	b003      	add	sp, #12
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	4627      	mov	r7, r4
 800d36a:	e7f3      	b.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d36c:	68ab      	ldr	r3, [r5, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 8092 	beq.w	800d498 <rclc_executor_spin_some.part.0+0x338>
 800d374:	2400      	movs	r4, #0
 800d376:	46a0      	mov	r8, r4
 800d378:	f240 1991 	movw	r9, #401	@ 0x191
 800d37c:	e008      	b.n	800d390 <rclc_executor_spin_some.part.0+0x230>
 800d37e:	f7ff fa8d 	bl	800c89c <_rclc_check_for_new_data>
 800d382:	4604      	mov	r4, r0
 800d384:	b108      	cbz	r0, 800d38a <rclc_executor_spin_some.part.0+0x22a>
 800d386:	4548      	cmp	r0, r9
 800d388:	d1ee      	bne.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d38a:	68ab      	ldr	r3, [r5, #8]
 800d38c:	4598      	cmp	r8, r3
 800d38e:	d265      	bcs.n	800d45c <rclc_executor_spin_some.part.0+0x2fc>
 800d390:	686a      	ldr	r2, [r5, #4]
 800d392:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d396:	4631      	mov	r1, r6
 800d398:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d39c:	f108 0801 	add.w	r8, r8, #1
 800d3a0:	f1bc 0f00 	cmp.w	ip, #0
 800d3a4:	d1eb      	bne.n	800d37e <rclc_executor_spin_some.part.0+0x21e>
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d3ae:	4798      	blx	r3
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d0d9      	beq.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d3b4:	68ab      	ldr	r3, [r5, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0d6      	beq.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d3ba:	f04f 0800 	mov.w	r8, #0
 800d3be:	f240 1991 	movw	r9, #401	@ 0x191
 800d3c2:	f240 2a59 	movw	sl, #601	@ 0x259
 800d3c6:	e00e      	b.n	800d3e6 <rclc_executor_spin_some.part.0+0x286>
 800d3c8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d3cc:	2b08      	cmp	r3, #8
 800d3ce:	d033      	beq.n	800d438 <rclc_executor_spin_some.part.0+0x2d8>
 800d3d0:	2b09      	cmp	r3, #9
 800d3d2:	d028      	beq.n	800d426 <rclc_executor_spin_some.part.0+0x2c6>
 800d3d4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d3d8:	b9fb      	cbnz	r3, 800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d3da:	68ab      	ldr	r3, [r5, #8]
 800d3dc:	f108 0801 	add.w	r8, r8, #1
 800d3e0:	4598      	cmp	r8, r3
 800d3e2:	d2b7      	bcs.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d3e4:	2400      	movs	r4, #0
 800d3e6:	6868      	ldr	r0, [r5, #4]
 800d3e8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d3ec:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d3f0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0b7      	beq.n	800d368 <rclc_executor_spin_some.part.0+0x208>
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	f7ff fa9d 	bl	800c938 <_rclc_take_new_data>
 800d3fe:	b118      	cbz	r0, 800d408 <rclc_executor_spin_some.part.0+0x2a8>
 800d400:	4548      	cmp	r0, r9
 800d402:	d001      	beq.n	800d408 <rclc_executor_spin_some.part.0+0x2a8>
 800d404:	4550      	cmp	r0, sl
 800d406:	d10c      	bne.n	800d422 <rclc_executor_spin_some.part.0+0x2c2>
 800d408:	686b      	ldr	r3, [r5, #4]
 800d40a:	eb13 000b 	adds.w	r0, r3, fp
 800d40e:	d021      	beq.n	800d454 <rclc_executor_spin_some.part.0+0x2f4>
 800d410:	7842      	ldrb	r2, [r0, #1]
 800d412:	2a00      	cmp	r2, #0
 800d414:	d0d8      	beq.n	800d3c8 <rclc_executor_spin_some.part.0+0x268>
 800d416:	2a01      	cmp	r2, #1
 800d418:	d1df      	bne.n	800d3da <rclc_executor_spin_some.part.0+0x27a>
 800d41a:	f7ff fc01 	bl	800cc20 <_rclc_execute.part.0>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d0db      	beq.n	800d3da <rclc_executor_spin_some.part.0+0x27a>
 800d422:	4607      	mov	r7, r0
 800d424:	e796      	b.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d426:	6843      	ldr	r3, [r0, #4]
 800d428:	6a1a      	ldr	r2, [r3, #32]
 800d42a:	2a00      	cmp	r2, #0
 800d42c:	d1f5      	bne.n	800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d42e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0d1      	beq.n	800d3da <rclc_executor_spin_some.part.0+0x27a>
 800d436:	e7f0      	b.n	800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d438:	6843      	ldr	r3, [r0, #4]
 800d43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d43c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d440:	d1eb      	bne.n	800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d442:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d446:	2a00      	cmp	r2, #0
 800d448:	d1e7      	bne.n	800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d44a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0c3      	beq.n	800d3da <rclc_executor_spin_some.part.0+0x27a>
 800d452:	e7e2      	b.n	800d41a <rclc_executor_spin_some.part.0+0x2ba>
 800d454:	270b      	movs	r7, #11
 800d456:	e77d      	b.n	800d354 <rclc_executor_spin_some.part.0+0x1f4>
 800d458:	686a      	ldr	r2, [r5, #4]
 800d45a:	e6e2      	b.n	800d222 <rclc_executor_spin_some.part.0+0xc2>
 800d45c:	686a      	ldr	r2, [r5, #4]
 800d45e:	e7a2      	b.n	800d3a6 <rclc_executor_spin_some.part.0+0x246>
 800d460:	6842      	ldr	r2, [r0, #4]
 800d462:	6a11      	ldr	r1, [r2, #32]
 800d464:	2900      	cmp	r1, #0
 800d466:	f47f af21 	bne.w	800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d46a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d46e:	2a00      	cmp	r2, #0
 800d470:	f43f af0a 	beq.w	800d288 <rclc_executor_spin_some.part.0+0x128>
 800d474:	e71a      	b.n	800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d476:	6842      	ldr	r2, [r0, #4]
 800d478:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d47a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d47e:	f47f af15 	bne.w	800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d482:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d486:	2900      	cmp	r1, #0
 800d488:	f47f af10 	bne.w	800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d48c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d490:	2a00      	cmp	r2, #0
 800d492:	f43f aef9 	beq.w	800d288 <rclc_executor_spin_some.part.0+0x128>
 800d496:	e709      	b.n	800d2ac <rclc_executor_spin_some.part.0+0x14c>
 800d498:	686a      	ldr	r2, [r5, #4]
 800d49a:	461c      	mov	r4, r3
 800d49c:	e783      	b.n	800d3a6 <rclc_executor_spin_some.part.0+0x246>
 800d49e:	686a      	ldr	r2, [r5, #4]
 800d4a0:	461c      	mov	r4, r3
 800d4a2:	e6be      	b.n	800d222 <rclc_executor_spin_some.part.0+0xc2>

0800d4a4 <rclc_executor_spin_some>:
 800d4a4:	b190      	cbz	r0, 800d4cc <rclc_executor_spin_some+0x28>
 800d4a6:	b570      	push	{r4, r5, r6, lr}
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	6800      	ldr	r0, [r0, #0]
 800d4ac:	4616      	mov	r6, r2
 800d4ae:	461d      	mov	r5, r3
 800d4b0:	f006 f942 	bl	8013738 <rcl_context_is_valid>
 800d4b4:	b130      	cbz	r0, 800d4c4 <rclc_executor_spin_some+0x20>
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	462b      	mov	r3, r5
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4c0:	f7ff be4e 	b.w	800d160 <rclc_executor_spin_some.part.0>
 800d4c4:	f000 fa94 	bl	800d9f0 <rcutils_reset_error>
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	200b      	movs	r0, #11
 800d4ce:	4770      	bx	lr

0800d4d0 <rclc_executor_handle_counters_zero_init>:
 800d4d0:	b130      	cbz	r0, 800d4e0 <rclc_executor_handle_counters_zero_init+0x10>
 800d4d2:	b508      	push	{r3, lr}
 800d4d4:	2220      	movs	r2, #32
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	f00b ff7e 	bl	80193d8 <memset>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	bd08      	pop	{r3, pc}
 800d4e0:	200b      	movs	r0, #11
 800d4e2:	4770      	bx	lr
 800d4e4:	0000      	movs	r0, r0
	...

0800d4e8 <rclc_executor_handle_init>:
 800d4e8:	b168      	cbz	r0, 800d506 <rclc_executor_handle_init+0x1e>
 800d4ea:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d510 <rclc_executor_handle_init+0x28>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	220b      	movs	r2, #11
 800d4f2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d4f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d4fa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d4fe:	8002      	strh	r2, [r0, #0]
 800d500:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d502:	4618      	mov	r0, r3
 800d504:	4770      	bx	lr
 800d506:	200b      	movs	r0, #11
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w
	...

0800d518 <rclc_support_init>:
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	b086      	sub	sp, #24
 800d51e:	b3b8      	cbz	r0, 800d590 <rclc_support_init+0x78>
 800d520:	461c      	mov	r4, r3
 800d522:	b3ab      	cbz	r3, 800d590 <rclc_support_init+0x78>
 800d524:	460f      	mov	r7, r1
 800d526:	4690      	mov	r8, r2
 800d528:	4606      	mov	r6, r0
 800d52a:	f006 fbaf 	bl	8013c8c <rcl_get_zero_initialized_init_options>
 800d52e:	f104 030c 	add.w	r3, r4, #12
 800d532:	9005      	str	r0, [sp, #20]
 800d534:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d538:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d53c:	a805      	add	r0, sp, #20
 800d53e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d542:	f006 fba5 	bl	8013c90 <rcl_init_options_init>
 800d546:	4605      	mov	r5, r0
 800d548:	b9e0      	cbnz	r0, 800d584 <rclc_support_init+0x6c>
 800d54a:	ad02      	add	r5, sp, #8
 800d54c:	4628      	mov	r0, r5
 800d54e:	f006 f8e9 	bl	8013724 <rcl_get_zero_initialized_context>
 800d552:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d556:	4633      	mov	r3, r6
 800d558:	e886 0003 	stmia.w	r6, {r0, r1}
 800d55c:	aa05      	add	r2, sp, #20
 800d55e:	4641      	mov	r1, r8
 800d560:	4638      	mov	r0, r7
 800d562:	f006 fa71 	bl	8013a48 <rcl_init>
 800d566:	4605      	mov	r5, r0
 800d568:	b9b8      	cbnz	r0, 800d59a <rclc_support_init+0x82>
 800d56a:	60b4      	str	r4, [r6, #8]
 800d56c:	4622      	mov	r2, r4
 800d56e:	f106 010c 	add.w	r1, r6, #12
 800d572:	2003      	movs	r0, #3
 800d574:	f006 fece 	bl	8014314 <rcl_clock_init>
 800d578:	4605      	mov	r5, r0
 800d57a:	b970      	cbnz	r0, 800d59a <rclc_support_init+0x82>
 800d57c:	a805      	add	r0, sp, #20
 800d57e:	f006 fbed 	bl	8013d5c <rcl_init_options_fini>
 800d582:	b108      	cbz	r0, 800d588 <rclc_support_init+0x70>
 800d584:	f000 fa34 	bl	800d9f0 <rcutils_reset_error>
 800d588:	4628      	mov	r0, r5
 800d58a:	b006      	add	sp, #24
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d590:	250b      	movs	r5, #11
 800d592:	4628      	mov	r0, r5
 800d594:	b006      	add	sp, #24
 800d596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59a:	f000 fa29 	bl	800d9f0 <rcutils_reset_error>
 800d59e:	a805      	add	r0, sp, #20
 800d5a0:	f006 fbdc 	bl	8013d5c <rcl_init_options_fini>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d0ef      	beq.n	800d588 <rclc_support_init+0x70>
 800d5a8:	e7ec      	b.n	800d584 <rclc_support_init+0x6c>
 800d5aa:	bf00      	nop

0800d5ac <rclc_support_fini>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	b320      	cbz	r0, 800d5fa <rclc_support_fini+0x4e>
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	300c      	adds	r0, #12
 800d5b4:	f006 ff26 	bl	8014404 <rcl_clock_fini>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	b948      	cbnz	r0, 800d5d0 <rclc_support_fini+0x24>
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f006 fb47 	bl	8013c50 <rcl_shutdown>
 800d5c2:	b968      	cbnz	r0, 800d5e0 <rclc_support_fini+0x34>
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f006 f91d 	bl	8013804 <rcl_context_fini>
 800d5ca:	b988      	cbnz	r0, 800d5f0 <rclc_support_fini+0x44>
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	f000 fa0e 	bl	800d9f0 <rcutils_reset_error>
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	2501      	movs	r5, #1
 800d5d8:	f006 fb3a 	bl	8013c50 <rcl_shutdown>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d0f1      	beq.n	800d5c4 <rclc_support_fini+0x18>
 800d5e0:	f000 fa06 	bl	800d9f0 <rcutils_reset_error>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	2501      	movs	r5, #1
 800d5e8:	f006 f90c 	bl	8013804 <rcl_context_fini>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d0ed      	beq.n	800d5cc <rclc_support_fini+0x20>
 800d5f0:	2501      	movs	r5, #1
 800d5f2:	f000 f9fd 	bl	800d9f0 <rcutils_reset_error>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	250b      	movs	r5, #11
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}

0800d600 <rclc_node_init_default>:
 800d600:	b3b8      	cbz	r0, 800d672 <rclc_node_init_default+0x72>
 800d602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d606:	460d      	mov	r5, r1
 800d608:	b0a1      	sub	sp, #132	@ 0x84
 800d60a:	b329      	cbz	r1, 800d658 <rclc_node_init_default+0x58>
 800d60c:	4616      	mov	r6, r2
 800d60e:	b31a      	cbz	r2, 800d658 <rclc_node_init_default+0x58>
 800d610:	461f      	mov	r7, r3
 800d612:	b30b      	cbz	r3, 800d658 <rclc_node_init_default+0x58>
 800d614:	f10d 0810 	add.w	r8, sp, #16
 800d618:	4604      	mov	r4, r0
 800d61a:	4640      	mov	r0, r8
 800d61c:	f7fe fa18 	bl	800ba50 <rcl_get_zero_initialized_node>
 800d620:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d624:	f10d 0918 	add.w	r9, sp, #24
 800d628:	e884 0003 	stmia.w	r4, {r0, r1}
 800d62c:	4648      	mov	r0, r9
 800d62e:	f7fe fbb9 	bl	800bda4 <rcl_node_get_default_options>
 800d632:	4640      	mov	r0, r8
 800d634:	f7fe fa0c 	bl	800ba50 <rcl_get_zero_initialized_node>
 800d638:	f8cd 9000 	str.w	r9, [sp]
 800d63c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d640:	463b      	mov	r3, r7
 800d642:	e884 0003 	stmia.w	r4, {r0, r1}
 800d646:	4632      	mov	r2, r6
 800d648:	4629      	mov	r1, r5
 800d64a:	4620      	mov	r0, r4
 800d64c:	f7fe fa0a 	bl	800ba64 <rcl_node_init>
 800d650:	b930      	cbnz	r0, 800d660 <rclc_node_init_default+0x60>
 800d652:	b021      	add	sp, #132	@ 0x84
 800d654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d658:	200b      	movs	r0, #11
 800d65a:	b021      	add	sp, #132	@ 0x84
 800d65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d660:	9003      	str	r0, [sp, #12]
 800d662:	f000 f9c5 	bl	800d9f0 <rcutils_reset_error>
 800d666:	f000 f9c3 	bl	800d9f0 <rcutils_reset_error>
 800d66a:	9803      	ldr	r0, [sp, #12]
 800d66c:	b021      	add	sp, #132	@ 0x84
 800d66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d672:	200b      	movs	r0, #11
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop

0800d678 <rclc_publisher_init_default>:
 800d678:	b368      	cbz	r0, 800d6d6 <rclc_publisher_init_default+0x5e>
 800d67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67e:	460d      	mov	r5, r1
 800d680:	b0a0      	sub	sp, #128	@ 0x80
 800d682:	b321      	cbz	r1, 800d6ce <rclc_publisher_init_default+0x56>
 800d684:	4616      	mov	r6, r2
 800d686:	b312      	cbz	r2, 800d6ce <rclc_publisher_init_default+0x56>
 800d688:	461f      	mov	r7, r3
 800d68a:	b303      	cbz	r3, 800d6ce <rclc_publisher_init_default+0x56>
 800d68c:	4604      	mov	r4, r0
 800d68e:	f7fe fbb5 	bl	800bdfc <rcl_get_zero_initialized_publisher>
 800d692:	f10d 0810 	add.w	r8, sp, #16
 800d696:	6020      	str	r0, [r4, #0]
 800d698:	4640      	mov	r0, r8
 800d69a:	f7fe fc77 	bl	800bf8c <rcl_publisher_get_default_options>
 800d69e:	490f      	ldr	r1, [pc, #60]	@ (800d6dc <rclc_publisher_init_default+0x64>)
 800d6a0:	2250      	movs	r2, #80	@ 0x50
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	f00b ff61 	bl	801956a <memcpy>
 800d6a8:	f8cd 8000 	str.w	r8, [sp]
 800d6ac:	463b      	mov	r3, r7
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7fe fba8 	bl	800be08 <rcl_publisher_init>
 800d6b8:	b910      	cbnz	r0, 800d6c0 <rclc_publisher_init_default+0x48>
 800d6ba:	b020      	add	sp, #128	@ 0x80
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	9003      	str	r0, [sp, #12]
 800d6c2:	f000 f995 	bl	800d9f0 <rcutils_reset_error>
 800d6c6:	9803      	ldr	r0, [sp, #12]
 800d6c8:	b020      	add	sp, #128	@ 0x80
 800d6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ce:	200b      	movs	r0, #11
 800d6d0:	b020      	add	sp, #128	@ 0x80
 800d6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d6:	200b      	movs	r0, #11
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	0801a778 	.word	0x0801a778

0800d6e0 <rclc_subscription_init_default>:
 800d6e0:	b368      	cbz	r0, 800d73e <rclc_subscription_init_default+0x5e>
 800d6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	b0a0      	sub	sp, #128	@ 0x80
 800d6ea:	b321      	cbz	r1, 800d736 <rclc_subscription_init_default+0x56>
 800d6ec:	4616      	mov	r6, r2
 800d6ee:	b312      	cbz	r2, 800d736 <rclc_subscription_init_default+0x56>
 800d6f0:	461f      	mov	r7, r3
 800d6f2:	b303      	cbz	r3, 800d736 <rclc_subscription_init_default+0x56>
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	f7fe fcbd 	bl	800c074 <rcl_get_zero_initialized_subscription>
 800d6fa:	f10d 0810 	add.w	r8, sp, #16
 800d6fe:	6020      	str	r0, [r4, #0]
 800d700:	4640      	mov	r0, r8
 800d702:	f7fe fdb9 	bl	800c278 <rcl_subscription_get_default_options>
 800d706:	490f      	ldr	r1, [pc, #60]	@ (800d744 <rclc_subscription_init_default+0x64>)
 800d708:	2250      	movs	r2, #80	@ 0x50
 800d70a:	4640      	mov	r0, r8
 800d70c:	f00b ff2d 	bl	801956a <memcpy>
 800d710:	f8cd 8000 	str.w	r8, [sp]
 800d714:	463b      	mov	r3, r7
 800d716:	4632      	mov	r2, r6
 800d718:	4629      	mov	r1, r5
 800d71a:	4620      	mov	r0, r4
 800d71c:	f7fe fcb0 	bl	800c080 <rcl_subscription_init>
 800d720:	b910      	cbnz	r0, 800d728 <rclc_subscription_init_default+0x48>
 800d722:	b020      	add	sp, #128	@ 0x80
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	9003      	str	r0, [sp, #12]
 800d72a:	f000 f961 	bl	800d9f0 <rcutils_reset_error>
 800d72e:	9803      	ldr	r0, [sp, #12]
 800d730:	b020      	add	sp, #128	@ 0x80
 800d732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d736:	200b      	movs	r0, #11
 800d738:	b020      	add	sp, #128	@ 0x80
 800d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73e:	200b      	movs	r0, #11
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	0801a7c8 	.word	0x0801a7c8

0800d748 <rclc_timer_init_default>:
 800d748:	b360      	cbz	r0, 800d7a4 <rclc_timer_init_default+0x5c>
 800d74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d74e:	460e      	mov	r6, r1
 800d750:	b08a      	sub	sp, #40	@ 0x28
 800d752:	b319      	cbz	r1, 800d79c <rclc_timer_init_default+0x54>
 800d754:	4690      	mov	r8, r2
 800d756:	461f      	mov	r7, r3
 800d758:	4605      	mov	r5, r0
 800d75a:	f7fe febd 	bl	800c4d8 <rcl_get_zero_initialized_timer>
 800d75e:	68b4      	ldr	r4, [r6, #8]
 800d760:	6028      	str	r0, [r5, #0]
 800d762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d764:	f10d 0c0c 	add.w	ip, sp, #12
 800d768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	f8cc 3000 	str.w	r3, [ip]
 800d772:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d774:	9302      	str	r3, [sp, #8]
 800d776:	e9cd 8700 	strd	r8, r7, [sp]
 800d77a:	4628      	mov	r0, r5
 800d77c:	4632      	mov	r2, r6
 800d77e:	f106 010c 	add.w	r1, r6, #12
 800d782:	f7fe feb1 	bl	800c4e8 <rcl_timer_init>
 800d786:	b910      	cbnz	r0, 800d78e <rclc_timer_init_default+0x46>
 800d788:	b00a      	add	sp, #40	@ 0x28
 800d78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d78e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d790:	f000 f92e 	bl	800d9f0 <rcutils_reset_error>
 800d794:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d796:	b00a      	add	sp, #40	@ 0x28
 800d798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d79c:	200b      	movs	r0, #11
 800d79e:	b00a      	add	sp, #40	@ 0x28
 800d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a4:	200b      	movs	r0, #11
 800d7a6:	4770      	bx	lr

0800d7a8 <__default_zero_allocate>:
 800d7a8:	f00b b8ce 	b.w	8018948 <calloc>

0800d7ac <__default_reallocate>:
 800d7ac:	f00b ba6c 	b.w	8018c88 <realloc>

0800d7b0 <__default_deallocate>:
 800d7b0:	f00b b948 	b.w	8018a44 <free>

0800d7b4 <__default_allocate>:
 800d7b4:	f00b b93e 	b.w	8018a34 <malloc>

0800d7b8 <rcutils_get_zero_initialized_allocator>:
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	4c05      	ldr	r4, [pc, #20]	@ (800d7d0 <rcutils_get_zero_initialized_allocator+0x18>)
 800d7bc:	4686      	mov	lr, r0
 800d7be:	4684      	mov	ip, r0
 800d7c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f8cc 3000 	str.w	r3, [ip]
 800d7cc:	4670      	mov	r0, lr
 800d7ce:	bd10      	pop	{r4, pc}
 800d7d0:	0801a818 	.word	0x0801a818

0800d7d4 <rcutils_set_default_allocator>:
 800d7d4:	b1a8      	cbz	r0, 800d802 <rcutils_set_default_allocator+0x2e>
 800d7d6:	6802      	ldr	r2, [r0, #0]
 800d7d8:	b1a2      	cbz	r2, 800d804 <rcutils_set_default_allocator+0x30>
 800d7da:	6841      	ldr	r1, [r0, #4]
 800d7dc:	b1a1      	cbz	r1, 800d808 <rcutils_set_default_allocator+0x34>
 800d7de:	b410      	push	{r4}
 800d7e0:	68c4      	ldr	r4, [r0, #12]
 800d7e2:	b164      	cbz	r4, 800d7fe <rcutils_set_default_allocator+0x2a>
 800d7e4:	6880      	ldr	r0, [r0, #8]
 800d7e6:	b138      	cbz	r0, 800d7f8 <rcutils_set_default_allocator+0x24>
 800d7e8:	4b08      	ldr	r3, [pc, #32]	@ (800d80c <rcutils_set_default_allocator+0x38>)
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d7f2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	4620      	mov	r0, r4
 800d800:	e7fa      	b.n	800d7f8 <rcutils_set_default_allocator+0x24>
 800d802:	4770      	bx	lr
 800d804:	4610      	mov	r0, r2
 800d806:	4770      	bx	lr
 800d808:	4608      	mov	r0, r1
 800d80a:	4770      	bx	lr
 800d80c:	200001bc 	.word	0x200001bc

0800d810 <rcutils_get_default_allocator>:
 800d810:	b510      	push	{r4, lr}
 800d812:	4c05      	ldr	r4, [pc, #20]	@ (800d828 <rcutils_get_default_allocator+0x18>)
 800d814:	4686      	mov	lr, r0
 800d816:	4684      	mov	ip, r0
 800d818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d81a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	f8cc 3000 	str.w	r3, [ip]
 800d824:	4670      	mov	r0, lr
 800d826:	bd10      	pop	{r4, pc}
 800d828:	200001bc 	.word	0x200001bc

0800d82c <rcutils_allocator_is_valid>:
 800d82c:	b158      	cbz	r0, 800d846 <rcutils_allocator_is_valid+0x1a>
 800d82e:	6803      	ldr	r3, [r0, #0]
 800d830:	b143      	cbz	r3, 800d844 <rcutils_allocator_is_valid+0x18>
 800d832:	6843      	ldr	r3, [r0, #4]
 800d834:	b133      	cbz	r3, 800d844 <rcutils_allocator_is_valid+0x18>
 800d836:	68c3      	ldr	r3, [r0, #12]
 800d838:	b123      	cbz	r3, 800d844 <rcutils_allocator_is_valid+0x18>
 800d83a:	6880      	ldr	r0, [r0, #8]
 800d83c:	3800      	subs	r0, #0
 800d83e:	bf18      	it	ne
 800d840:	2001      	movne	r0, #1
 800d842:	4770      	bx	lr
 800d844:	4618      	mov	r0, r3
 800d846:	4770      	bx	lr

0800d848 <__atomic_load_8>:
 800d848:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d84c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d850:	4a15      	ldr	r2, [pc, #84]	@ (800d8a8 <__atomic_load_8+0x60>)
 800d852:	4b16      	ldr	r3, [pc, #88]	@ (800d8ac <__atomic_load_8+0x64>)
 800d854:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d858:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d85c:	fb02 f101 	mul.w	r1, r2, r1
 800d860:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d864:	fba3 2301 	umull	r2, r3, r3, r1
 800d868:	091b      	lsrs	r3, r3, #4
 800d86a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d86e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d872:	b4d0      	push	{r4, r6, r7}
 800d874:	4c0e      	ldr	r4, [pc, #56]	@ (800d8b0 <__atomic_load_8+0x68>)
 800d876:	1ac9      	subs	r1, r1, r3
 800d878:	1862      	adds	r2, r4, r1
 800d87a:	f04f 0c01 	mov.w	ip, #1
 800d87e:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d882:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d886:	2e00      	cmp	r6, #0
 800d888:	d1f9      	bne.n	800d87e <__atomic_load_8+0x36>
 800d88a:	f3bf 8f5b 	dmb	ish
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f4      	bne.n	800d87e <__atomic_load_8+0x36>
 800d894:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d898:	f3bf 8f5b 	dmb	ish
 800d89c:	5463      	strb	r3, [r4, r1]
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	bcd0      	pop	{r4, r6, r7}
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	27d4eb2d 	.word	0x27d4eb2d
 800d8ac:	b21642c9 	.word	0xb21642c9
 800d8b0:	20009870 	.word	0x20009870

0800d8b4 <__atomic_store_8>:
 800d8b4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d8b8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d8c2:	4c14      	ldr	r4, [pc, #80]	@ (800d914 <__atomic_store_8+0x60>)
 800d8c4:	4d14      	ldr	r5, [pc, #80]	@ (800d918 <__atomic_store_8+0x64>)
 800d8c6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d8ca:	fb04 f101 	mul.w	r1, r4, r1
 800d8ce:	4c13      	ldr	r4, [pc, #76]	@ (800d91c <__atomic_store_8+0x68>)
 800d8d0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d8d4:	fba4 4e01 	umull	r4, lr, r4, r1
 800d8d8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800d8dc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800d8e0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800d8e4:	eba1 0e0e 	sub.w	lr, r1, lr
 800d8e8:	eb05 0c0e 	add.w	ip, r5, lr
 800d8ec:	f04f 0401 	mov.w	r4, #1
 800d8f0:	e8dc 1f4f 	ldrexb	r1, [ip]
 800d8f4:	e8cc 4f46 	strexb	r6, r4, [ip]
 800d8f8:	2e00      	cmp	r6, #0
 800d8fa:	d1f9      	bne.n	800d8f0 <__atomic_store_8+0x3c>
 800d8fc:	f3bf 8f5b 	dmb	ish
 800d900:	b2c9      	uxtb	r1, r1
 800d902:	2900      	cmp	r1, #0
 800d904:	d1f4      	bne.n	800d8f0 <__atomic_store_8+0x3c>
 800d906:	e9c0 2300 	strd	r2, r3, [r0]
 800d90a:	f3bf 8f5b 	dmb	ish
 800d90e:	f805 100e 	strb.w	r1, [r5, lr]
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	27d4eb2d 	.word	0x27d4eb2d
 800d918:	20009870 	.word	0x20009870
 800d91c:	b21642c9 	.word	0xb21642c9

0800d920 <__atomic_exchange_8>:
 800d920:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800d924:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800d928:	4916      	ldr	r1, [pc, #88]	@ (800d984 <__atomic_exchange_8+0x64>)
 800d92a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800d92e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800d932:	fb01 fc0c 	mul.w	ip, r1, ip
 800d936:	4914      	ldr	r1, [pc, #80]	@ (800d988 <__atomic_exchange_8+0x68>)
 800d938:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800d93c:	b570      	push	{r4, r5, r6, lr}
 800d93e:	4605      	mov	r5, r0
 800d940:	fba1 010c 	umull	r0, r1, r1, ip
 800d944:	0909      	lsrs	r1, r1, #4
 800d946:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800d94a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800d94e:	4e0f      	ldr	r6, [pc, #60]	@ (800d98c <__atomic_exchange_8+0x6c>)
 800d950:	ebac 0c01 	sub.w	ip, ip, r1
 800d954:	eb06 010c 	add.w	r1, r6, ip
 800d958:	f04f 0e01 	mov.w	lr, #1
 800d95c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800d960:	e8c1 ef40 	strexb	r0, lr, [r1]
 800d964:	2800      	cmp	r0, #0
 800d966:	d1f9      	bne.n	800d95c <__atomic_exchange_8+0x3c>
 800d968:	f3bf 8f5b 	dmb	ish
 800d96c:	b2e4      	uxtb	r4, r4
 800d96e:	2c00      	cmp	r4, #0
 800d970:	d1f4      	bne.n	800d95c <__atomic_exchange_8+0x3c>
 800d972:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d976:	e9c5 2300 	strd	r2, r3, [r5]
 800d97a:	f3bf 8f5b 	dmb	ish
 800d97e:	f806 400c 	strb.w	r4, [r6, ip]
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	27d4eb2d 	.word	0x27d4eb2d
 800d988:	b21642c9 	.word	0xb21642c9
 800d98c:	20009870 	.word	0x20009870

0800d990 <rcutils_get_env>:
 800d990:	b168      	cbz	r0, 800d9ae <rcutils_get_env+0x1e>
 800d992:	b510      	push	{r4, lr}
 800d994:	460c      	mov	r4, r1
 800d996:	b129      	cbz	r1, 800d9a4 <rcutils_get_env+0x14>
 800d998:	f00b f804 	bl	80189a4 <getenv>
 800d99c:	b120      	cbz	r0, 800d9a8 <rcutils_get_env+0x18>
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	bd10      	pop	{r4, pc}
 800d9a4:	4803      	ldr	r0, [pc, #12]	@ (800d9b4 <rcutils_get_env+0x24>)
 800d9a6:	bd10      	pop	{r4, pc}
 800d9a8:	4b03      	ldr	r3, [pc, #12]	@ (800d9b8 <rcutils_get_env+0x28>)
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	4803      	ldr	r0, [pc, #12]	@ (800d9bc <rcutils_get_env+0x2c>)
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	0801a848 	.word	0x0801a848
 800d9b8:	0801b230 	.word	0x0801b230
 800d9bc:	0801a82c 	.word	0x0801a82c

0800d9c0 <rcutils_get_error_string>:
 800d9c0:	4b06      	ldr	r3, [pc, #24]	@ (800d9dc <rcutils_get_error_string+0x1c>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	b13b      	cbz	r3, 800d9d6 <rcutils_get_error_string+0x16>
 800d9c6:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <rcutils_get_error_string+0x20>)
 800d9c8:	781a      	ldrb	r2, [r3, #0]
 800d9ca:	b90a      	cbnz	r2, 800d9d0 <rcutils_get_error_string+0x10>
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	4b04      	ldr	r3, [pc, #16]	@ (800d9e4 <rcutils_get_error_string+0x24>)
 800d9d2:	7818      	ldrb	r0, [r3, #0]
 800d9d4:	4770      	bx	lr
 800d9d6:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <rcutils_get_error_string+0x28>)
 800d9d8:	7818      	ldrb	r0, [r3, #0]
 800d9da:	4770      	bx	lr
 800d9dc:	20009887 	.word	0x20009887
 800d9e0:	20009899 	.word	0x20009899
 800d9e4:	20009898 	.word	0x20009898
 800d9e8:	0801ac20 	.word	0x0801ac20
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <rcutils_reset_error>:
 800d9f0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800da10 <rcutils_reset_error+0x20>
 800d9f4:	4a08      	ldr	r2, [pc, #32]	@ (800da18 <rcutils_reset_error+0x28>)
 800d9f6:	4809      	ldr	r0, [pc, #36]	@ (800da1c <rcutils_reset_error+0x2c>)
 800d9f8:	4909      	ldr	r1, [pc, #36]	@ (800da20 <rcutils_reset_error+0x30>)
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	8013      	strh	r3, [r2, #0]
 800d9fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800da02:	4a08      	ldr	r2, [pc, #32]	@ (800da24 <rcutils_reset_error+0x34>)
 800da04:	7003      	strb	r3, [r0, #0]
 800da06:	700b      	strb	r3, [r1, #0]
 800da08:	7013      	strb	r3, [r2, #0]
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w
	...
 800da18:	20009888 	.word	0x20009888
 800da1c:	20009899 	.word	0x20009899
 800da20:	20009898 	.word	0x20009898
 800da24:	20009887 	.word	0x20009887

0800da28 <rcutils_format_string_limit>:
 800da28:	b40f      	push	{r0, r1, r2, r3}
 800da2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2c:	b083      	sub	sp, #12
 800da2e:	ac08      	add	r4, sp, #32
 800da30:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800da32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da36:	b34e      	cbz	r6, 800da8c <rcutils_format_string_limit+0x64>
 800da38:	a808      	add	r0, sp, #32
 800da3a:	f7ff fef7 	bl	800d82c <rcutils_allocator_is_valid>
 800da3e:	b328      	cbz	r0, 800da8c <rcutils_format_string_limit+0x64>
 800da40:	2100      	movs	r1, #0
 800da42:	ab0f      	add	r3, sp, #60	@ 0x3c
 800da44:	4632      	mov	r2, r6
 800da46:	4608      	mov	r0, r1
 800da48:	e9cd 3300 	strd	r3, r3, [sp]
 800da4c:	f000 f8f4 	bl	800dc38 <rcutils_vsnprintf>
 800da50:	1c43      	adds	r3, r0, #1
 800da52:	4605      	mov	r5, r0
 800da54:	d01a      	beq.n	800da8c <rcutils_format_string_limit+0x64>
 800da56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da5a:	1c47      	adds	r7, r0, #1
 800da5c:	429f      	cmp	r7, r3
 800da5e:	bf84      	itt	hi
 800da60:	461f      	movhi	r7, r3
 800da62:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800da66:	4638      	mov	r0, r7
 800da68:	9b08      	ldr	r3, [sp, #32]
 800da6a:	4798      	blx	r3
 800da6c:	4604      	mov	r4, r0
 800da6e:	b168      	cbz	r0, 800da8c <rcutils_format_string_limit+0x64>
 800da70:	9b01      	ldr	r3, [sp, #4]
 800da72:	4632      	mov	r2, r6
 800da74:	4639      	mov	r1, r7
 800da76:	f000 f8df 	bl	800dc38 <rcutils_vsnprintf>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	db02      	blt.n	800da84 <rcutils_format_string_limit+0x5c>
 800da7e:	2300      	movs	r3, #0
 800da80:	5563      	strb	r3, [r4, r5]
 800da82:	e004      	b.n	800da8e <rcutils_format_string_limit+0x66>
 800da84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da88:	4620      	mov	r0, r4
 800da8a:	4798      	blx	r3
 800da8c:	2400      	movs	r4, #0
 800da8e:	4620      	mov	r0, r4
 800da90:	b003      	add	sp, #12
 800da92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da96:	b004      	add	sp, #16
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop

0800da9c <rcutils_repl_str>:
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	ed2d 8b02 	vpush	{d8}
 800daa4:	b087      	sub	sp, #28
 800daa6:	4680      	mov	r8, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	f8cd 8004 	str.w	r8, [sp, #4]
 800daae:	ee08 2a10 	vmov	s16, r2
 800dab2:	468a      	mov	sl, r1
 800dab4:	4699      	mov	r9, r3
 800dab6:	f7f2 fbb5 	bl	8000224 <strlen>
 800daba:	2600      	movs	r6, #0
 800dabc:	4647      	mov	r7, r8
 800dabe:	9002      	str	r0, [sp, #8]
 800dac0:	46b3      	mov	fp, r6
 800dac2:	2510      	movs	r5, #16
 800dac4:	46b0      	mov	r8, r6
 800dac6:	e01d      	b.n	800db04 <rcutils_repl_str+0x68>
 800dac8:	f10b 0b01 	add.w	fp, fp, #1
 800dacc:	455e      	cmp	r6, fp
 800dace:	d211      	bcs.n	800daf4 <rcutils_repl_str+0x58>
 800dad0:	442e      	add	r6, r5
 800dad2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dad6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dada:	00b1      	lsls	r1, r6, #2
 800dadc:	4798      	blx	r3
 800dade:	2800      	cmp	r0, #0
 800dae0:	f000 8088 	beq.w	800dbf4 <rcutils_repl_str+0x158>
 800dae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800daec:	4680      	mov	r8, r0
 800daee:	bf28      	it	cs
 800daf0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800daf4:	9a01      	ldr	r2, [sp, #4]
 800daf6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800dafa:	1aa2      	subs	r2, r4, r2
 800dafc:	f843 2c04 	str.w	r2, [r3, #-4]
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	18e7      	adds	r7, r4, r3
 800db04:	4651      	mov	r1, sl
 800db06:	4638      	mov	r0, r7
 800db08:	f00b fc8d 	bl	8019426 <strstr>
 800db0c:	4604      	mov	r4, r0
 800db0e:	4640      	mov	r0, r8
 800db10:	2c00      	cmp	r4, #0
 800db12:	d1d9      	bne.n	800dac8 <rcutils_repl_str+0x2c>
 800db14:	46b8      	mov	r8, r7
 800db16:	4607      	mov	r7, r0
 800db18:	4640      	mov	r0, r8
 800db1a:	f7f2 fb83 	bl	8000224 <strlen>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	eba8 0303 	sub.w	r3, r8, r3
 800db24:	181c      	adds	r4, r3, r0
 800db26:	9404      	str	r4, [sp, #16]
 800db28:	f1bb 0f00 	cmp.w	fp, #0
 800db2c:	d04a      	beq.n	800dbc4 <rcutils_repl_str+0x128>
 800db2e:	ee18 0a10 	vmov	r0, s16
 800db32:	f7f2 fb77 	bl	8000224 <strlen>
 800db36:	9b02      	ldr	r3, [sp, #8]
 800db38:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800db3c:	1ac3      	subs	r3, r0, r3
 800db3e:	fb0b 4303 	mla	r3, fp, r3, r4
 800db42:	461a      	mov	r2, r3
 800db44:	9305      	str	r3, [sp, #20]
 800db46:	4606      	mov	r6, r0
 800db48:	f8d9 3000 	ldr.w	r3, [r9]
 800db4c:	1c50      	adds	r0, r2, #1
 800db4e:	4798      	blx	r3
 800db50:	9003      	str	r0, [sp, #12]
 800db52:	2800      	cmp	r0, #0
 800db54:	d04f      	beq.n	800dbf6 <rcutils_repl_str+0x15a>
 800db56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	4641      	mov	r1, r8
 800db5e:	f00b fd04 	bl	801956a <memcpy>
 800db62:	683d      	ldr	r5, [r7, #0]
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	9701      	str	r7, [sp, #4]
 800db68:	46ba      	mov	sl, r7
 800db6a:	441d      	add	r5, r3
 800db6c:	9f02      	ldr	r7, [sp, #8]
 800db6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db72:	2401      	movs	r4, #1
 800db74:	46d1      	mov	r9, sl
 800db76:	ee18 aa10 	vmov	sl, s16
 800db7a:	e00a      	b.n	800db92 <rcutils_repl_str+0xf6>
 800db7c:	f8d9 5000 	ldr.w	r5, [r9]
 800db80:	1aaa      	subs	r2, r5, r2
 800db82:	1885      	adds	r5, r0, r2
 800db84:	f00b fcf1 	bl	801956a <memcpy>
 800db88:	45a3      	cmp	fp, r4
 800db8a:	f104 0201 	add.w	r2, r4, #1
 800db8e:	d935      	bls.n	800dbfc <rcutils_repl_str+0x160>
 800db90:	4614      	mov	r4, r2
 800db92:	4632      	mov	r2, r6
 800db94:	4651      	mov	r1, sl
 800db96:	4628      	mov	r0, r5
 800db98:	f00b fce7 	bl	801956a <memcpy>
 800db9c:	f859 2b04 	ldr.w	r2, [r9], #4
 800dba0:	45a3      	cmp	fp, r4
 800dba2:	443a      	add	r2, r7
 800dba4:	eb05 0006 	add.w	r0, r5, r6
 800dba8:	eb08 0102 	add.w	r1, r8, r2
 800dbac:	d1e6      	bne.n	800db7c <rcutils_repl_str+0xe0>
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	1a9a      	subs	r2, r3, r2
 800dbb2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dbb6:	f00b fcd8 	bl	801956a <memcpy>
 800dbba:	9a03      	ldr	r2, [sp, #12]
 800dbbc:	9905      	ldr	r1, [sp, #20]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	5453      	strb	r3, [r2, r1]
 800dbc2:	e00b      	b.n	800dbdc <rcutils_repl_str+0x140>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f8d9 3000 	ldr.w	r3, [r9]
 800dbca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dbce:	3001      	adds	r0, #1
 800dbd0:	4798      	blx	r3
 800dbd2:	9003      	str	r0, [sp, #12]
 800dbd4:	b110      	cbz	r0, 800dbdc <rcutils_repl_str+0x140>
 800dbd6:	9901      	ldr	r1, [sp, #4]
 800dbd8:	f00b fcbf 	bl	801955a <strcpy>
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dbe2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dbe6:	4798      	blx	r3
 800dbe8:	9803      	ldr	r0, [sp, #12]
 800dbea:	b007      	add	sp, #28
 800dbec:	ecbd 8b02 	vpop	{d8}
 800dbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf4:	4647      	mov	r7, r8
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9303      	str	r3, [sp, #12]
 800dbfa:	e7ef      	b.n	800dbdc <rcutils_repl_str+0x140>
 800dbfc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dc00:	e7db      	b.n	800dbba <rcutils_repl_str+0x11e>
 800dc02:	bf00      	nop

0800dc04 <rcutils_snprintf>:
 800dc04:	b40c      	push	{r2, r3}
 800dc06:	b530      	push	{r4, r5, lr}
 800dc08:	b083      	sub	sp, #12
 800dc0a:	ab06      	add	r3, sp, #24
 800dc0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	b152      	cbz	r2, 800dc2a <rcutils_snprintf+0x26>
 800dc14:	b138      	cbz	r0, 800dc26 <rcutils_snprintf+0x22>
 800dc16:	b141      	cbz	r1, 800dc2a <rcutils_snprintf+0x26>
 800dc18:	f00b fb12 	bl	8019240 <vsniprintf>
 800dc1c:	b003      	add	sp, #12
 800dc1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc22:	b002      	add	sp, #8
 800dc24:	4770      	bx	lr
 800dc26:	2900      	cmp	r1, #0
 800dc28:	d0f6      	beq.n	800dc18 <rcutils_snprintf+0x14>
 800dc2a:	f00b fc69 	bl	8019500 <__errno>
 800dc2e:	2316      	movs	r3, #22
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc36:	e7f1      	b.n	800dc1c <rcutils_snprintf+0x18>

0800dc38 <rcutils_vsnprintf>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	b13a      	cbz	r2, 800dc4c <rcutils_vsnprintf+0x14>
 800dc3c:	b120      	cbz	r0, 800dc48 <rcutils_vsnprintf+0x10>
 800dc3e:	b129      	cbz	r1, 800dc4c <rcutils_vsnprintf+0x14>
 800dc40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc44:	f00b bafc 	b.w	8019240 <vsniprintf>
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	d0f9      	beq.n	800dc40 <rcutils_vsnprintf+0x8>
 800dc4c:	f00b fc58 	bl	8019500 <__errno>
 800dc50:	2316      	movs	r3, #22
 800dc52:	6003      	str	r3, [r0, #0]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	bf00      	nop

0800dc5c <rcutils_strdup>:
 800dc5c:	b084      	sub	sp, #16
 800dc5e:	b570      	push	{r4, r5, r6, lr}
 800dc60:	b082      	sub	sp, #8
 800dc62:	ac07      	add	r4, sp, #28
 800dc64:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800dc68:	4605      	mov	r5, r0
 800dc6a:	b1b0      	cbz	r0, 800dc9a <rcutils_strdup+0x3e>
 800dc6c:	f7f2 fada 	bl	8000224 <strlen>
 800dc70:	1c42      	adds	r2, r0, #1
 800dc72:	9b07      	ldr	r3, [sp, #28]
 800dc74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc76:	9201      	str	r2, [sp, #4]
 800dc78:	4606      	mov	r6, r0
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	4798      	blx	r3
 800dc7e:	4604      	mov	r4, r0
 800dc80:	b128      	cbz	r0, 800dc8e <rcutils_strdup+0x32>
 800dc82:	9a01      	ldr	r2, [sp, #4]
 800dc84:	4629      	mov	r1, r5
 800dc86:	f00b fc70 	bl	801956a <memcpy>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	55a3      	strb	r3, [r4, r6]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	b002      	add	sp, #8
 800dc92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc96:	b004      	add	sp, #16
 800dc98:	4770      	bx	lr
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	e7f7      	b.n	800dc8e <rcutils_strdup+0x32>
 800dc9e:	bf00      	nop

0800dca0 <rcutils_strndup>:
 800dca0:	b082      	sub	sp, #8
 800dca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca4:	ac06      	add	r4, sp, #24
 800dca6:	e884 000c 	stmia.w	r4, {r2, r3}
 800dcaa:	4605      	mov	r5, r0
 800dcac:	b188      	cbz	r0, 800dcd2 <rcutils_strndup+0x32>
 800dcae:	1c4f      	adds	r7, r1, #1
 800dcb0:	460e      	mov	r6, r1
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcb6:	4790      	blx	r2
 800dcb8:	4604      	mov	r4, r0
 800dcba:	b128      	cbz	r0, 800dcc8 <rcutils_strndup+0x28>
 800dcbc:	463a      	mov	r2, r7
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	f00b fc53 	bl	801956a <memcpy>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	55a3      	strb	r3, [r4, r6]
 800dcc8:	4620      	mov	r0, r4
 800dcca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcce:	b002      	add	sp, #8
 800dcd0:	4770      	bx	lr
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	e7f8      	b.n	800dcc8 <rcutils_strndup+0x28>
 800dcd6:	bf00      	nop

0800dcd8 <rcutils_system_time_now>:
 800dcd8:	b308      	cbz	r0, 800dd1e <rcutils_system_time_now+0x46>
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	4604      	mov	r4, r0
 800dce0:	4669      	mov	r1, sp
 800dce2:	2001      	movs	r0, #1
 800dce4:	f7f4 fc18 	bl	8002518 <clock_gettime>
 800dce8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dcec:	2d00      	cmp	r5, #0
 800dcee:	db13      	blt.n	800dd18 <rcutils_system_time_now+0x40>
 800dcf0:	9902      	ldr	r1, [sp, #8]
 800dcf2:	2900      	cmp	r1, #0
 800dcf4:	db0d      	blt.n	800dd12 <rcutils_system_time_now+0x3a>
 800dcf6:	4e0b      	ldr	r6, [pc, #44]	@ (800dd24 <rcutils_system_time_now+0x4c>)
 800dcf8:	fba3 3206 	umull	r3, r2, r3, r6
 800dcfc:	185b      	adds	r3, r3, r1
 800dcfe:	fb06 2205 	mla	r2, r6, r5, r2
 800dd02:	f04f 0000 	mov.w	r0, #0
 800dd06:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dd0a:	e9c4 3200 	strd	r3, r2, [r4]
 800dd0e:	b004      	add	sp, #16
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
 800dd12:	ea53 0205 	orrs.w	r2, r3, r5
 800dd16:	d1ee      	bne.n	800dcf6 <rcutils_system_time_now+0x1e>
 800dd18:	2002      	movs	r0, #2
 800dd1a:	b004      	add	sp, #16
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
 800dd1e:	200b      	movs	r0, #11
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	3b9aca00 	.word	0x3b9aca00

0800dd28 <rcutils_steady_time_now>:
 800dd28:	b308      	cbz	r0, 800dd6e <rcutils_steady_time_now+0x46>
 800dd2a:	b570      	push	{r4, r5, r6, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4669      	mov	r1, sp
 800dd32:	2000      	movs	r0, #0
 800dd34:	f7f4 fbf0 	bl	8002518 <clock_gettime>
 800dd38:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dd3c:	2d00      	cmp	r5, #0
 800dd3e:	db13      	blt.n	800dd68 <rcutils_steady_time_now+0x40>
 800dd40:	9902      	ldr	r1, [sp, #8]
 800dd42:	2900      	cmp	r1, #0
 800dd44:	db0d      	blt.n	800dd62 <rcutils_steady_time_now+0x3a>
 800dd46:	4e0b      	ldr	r6, [pc, #44]	@ (800dd74 <rcutils_steady_time_now+0x4c>)
 800dd48:	fba3 3206 	umull	r3, r2, r3, r6
 800dd4c:	185b      	adds	r3, r3, r1
 800dd4e:	fb06 2205 	mla	r2, r6, r5, r2
 800dd52:	f04f 0000 	mov.w	r0, #0
 800dd56:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dd5a:	e9c4 3200 	strd	r3, r2, [r4]
 800dd5e:	b004      	add	sp, #16
 800dd60:	bd70      	pop	{r4, r5, r6, pc}
 800dd62:	ea53 0205 	orrs.w	r2, r3, r5
 800dd66:	d1ee      	bne.n	800dd46 <rcutils_steady_time_now+0x1e>
 800dd68:	2002      	movs	r0, #2
 800dd6a:	b004      	add	sp, #16
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}
 800dd6e:	200b      	movs	r0, #11
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	3b9aca00 	.word	0x3b9aca00

0800dd78 <rmw_get_default_publisher_options>:
 800dd78:	2200      	movs	r2, #0
 800dd7a:	6002      	str	r2, [r0, #0]
 800dd7c:	7102      	strb	r2, [r0, #4]
 800dd7e:	4770      	bx	lr

0800dd80 <rmw_subscription_content_filter_options_fini>:
 800dd80:	b1b0      	cbz	r0, 800ddb0 <rmw_subscription_content_filter_options_fini+0x30>
 800dd82:	b538      	push	{r3, r4, r5, lr}
 800dd84:	4604      	mov	r4, r0
 800dd86:	4608      	mov	r0, r1
 800dd88:	460d      	mov	r5, r1
 800dd8a:	f7ff fd4f 	bl	800d82c <rcutils_allocator_is_valid>
 800dd8e:	b168      	cbz	r0, 800ddac <rmw_subscription_content_filter_options_fini+0x2c>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	b120      	cbz	r0, 800dd9e <rmw_subscription_content_filter_options_fini+0x1e>
 800dd94:	686b      	ldr	r3, [r5, #4]
 800dd96:	6929      	ldr	r1, [r5, #16]
 800dd98:	4798      	blx	r3
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	1d20      	adds	r0, r4, #4
 800dda0:	f007 fffa 	bl	8015d98 <rcutils_string_array_fini>
 800dda4:	3800      	subs	r0, #0
 800dda6:	bf18      	it	ne
 800dda8:	2001      	movne	r0, #1
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	200b      	movs	r0, #11
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	200b      	movs	r0, #11
 800ddb2:	4770      	bx	lr

0800ddb4 <rmw_get_default_subscription_options>:
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	e9c0 2200 	strd	r2, r2, [r0]
 800ddba:	6082      	str	r2, [r0, #8]
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <rmw_get_zero_initialized_message_info>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	2240      	movs	r2, #64	@ 0x40
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	f00b fb06 	bl	80193d8 <memset>
 800ddcc:	4620      	mov	r0, r4
 800ddce:	bd10      	pop	{r4, pc}

0800ddd0 <rmw_validate_namespace_with_size>:
 800ddd0:	b340      	cbz	r0, 800de24 <rmw_validate_namespace_with_size+0x54>
 800ddd2:	b570      	push	{r4, r5, r6, lr}
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	b0c2      	sub	sp, #264	@ 0x108
 800ddd8:	b332      	cbz	r2, 800de28 <rmw_validate_namespace_with_size+0x58>
 800ddda:	2901      	cmp	r1, #1
 800dddc:	460d      	mov	r5, r1
 800ddde:	461e      	mov	r6, r3
 800dde0:	d102      	bne.n	800dde8 <rmw_validate_namespace_with_size+0x18>
 800dde2:	7803      	ldrb	r3, [r0, #0]
 800dde4:	2b2f      	cmp	r3, #47	@ 0x2f
 800dde6:	d012      	beq.n	800de0e <rmw_validate_namespace_with_size+0x3e>
 800dde8:	aa01      	add	r2, sp, #4
 800ddea:	4669      	mov	r1, sp
 800ddec:	f008 f9d0 	bl	8016190 <rmw_validate_full_topic_name>
 800ddf0:	b978      	cbnz	r0, 800de12 <rmw_validate_namespace_with_size+0x42>
 800ddf2:	9b00      	ldr	r3, [sp, #0]
 800ddf4:	b14b      	cbz	r3, 800de0a <rmw_validate_namespace_with_size+0x3a>
 800ddf6:	2b07      	cmp	r3, #7
 800ddf8:	d007      	beq.n	800de0a <rmw_validate_namespace_with_size+0x3a>
 800ddfa:	1e5a      	subs	r2, r3, #1
 800ddfc:	2a05      	cmp	r2, #5
 800ddfe:	d82b      	bhi.n	800de58 <rmw_validate_namespace_with_size+0x88>
 800de00:	e8df f002 	tbb	[pc, r2]
 800de04:	1e212427 	.word	0x1e212427
 800de08:	141b      	.short	0x141b
 800de0a:	2df5      	cmp	r5, #245	@ 0xf5
 800de0c:	d803      	bhi.n	800de16 <rmw_validate_namespace_with_size+0x46>
 800de0e:	2000      	movs	r0, #0
 800de10:	6020      	str	r0, [r4, #0]
 800de12:	b042      	add	sp, #264	@ 0x108
 800de14:	bd70      	pop	{r4, r5, r6, pc}
 800de16:	2307      	movs	r3, #7
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	d0f9      	beq.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de1e:	23f4      	movs	r3, #244	@ 0xf4
 800de20:	6033      	str	r3, [r6, #0]
 800de22:	e7f6      	b.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de24:	200b      	movs	r0, #11
 800de26:	4770      	bx	lr
 800de28:	200b      	movs	r0, #11
 800de2a:	e7f2      	b.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de2c:	2306      	movs	r3, #6
 800de2e:	6023      	str	r3, [r4, #0]
 800de30:	2e00      	cmp	r6, #0
 800de32:	d0ee      	beq.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de34:	9b01      	ldr	r3, [sp, #4]
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	e7eb      	b.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de3a:	2305      	movs	r3, #5
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	e7f7      	b.n	800de30 <rmw_validate_namespace_with_size+0x60>
 800de40:	2304      	movs	r3, #4
 800de42:	6023      	str	r3, [r4, #0]
 800de44:	e7f4      	b.n	800de30 <rmw_validate_namespace_with_size+0x60>
 800de46:	2303      	movs	r3, #3
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	e7f1      	b.n	800de30 <rmw_validate_namespace_with_size+0x60>
 800de4c:	2302      	movs	r3, #2
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	e7ee      	b.n	800de30 <rmw_validate_namespace_with_size+0x60>
 800de52:	2301      	movs	r3, #1
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	e7eb      	b.n	800de30 <rmw_validate_namespace_with_size+0x60>
 800de58:	4a03      	ldr	r2, [pc, #12]	@ (800de68 <rmw_validate_namespace_with_size+0x98>)
 800de5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de5e:	a802      	add	r0, sp, #8
 800de60:	f7ff fed0 	bl	800dc04 <rcutils_snprintf>
 800de64:	2001      	movs	r0, #1
 800de66:	e7d4      	b.n	800de12 <rmw_validate_namespace_with_size+0x42>
 800de68:	0801a864 	.word	0x0801a864

0800de6c <rmw_validate_namespace>:
 800de6c:	b168      	cbz	r0, 800de8a <rmw_validate_namespace+0x1e>
 800de6e:	b570      	push	{r4, r5, r6, lr}
 800de70:	460d      	mov	r5, r1
 800de72:	4616      	mov	r6, r2
 800de74:	4604      	mov	r4, r0
 800de76:	f7f2 f9d5 	bl	8000224 <strlen>
 800de7a:	4633      	mov	r3, r6
 800de7c:	4601      	mov	r1, r0
 800de7e:	462a      	mov	r2, r5
 800de80:	4620      	mov	r0, r4
 800de82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de86:	f7ff bfa3 	b.w	800ddd0 <rmw_validate_namespace_with_size>
 800de8a:	200b      	movs	r0, #11
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop

0800de90 <rmw_namespace_validation_result_string>:
 800de90:	2807      	cmp	r0, #7
 800de92:	bf9a      	itte	ls
 800de94:	4b02      	ldrls	r3, [pc, #8]	@ (800dea0 <rmw_namespace_validation_result_string+0x10>)
 800de96:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800de9a:	4802      	ldrhi	r0, [pc, #8]	@ (800dea4 <rmw_namespace_validation_result_string+0x14>)
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	0801aa5c 	.word	0x0801aa5c
 800dea4:	0801a8b4 	.word	0x0801a8b4

0800dea8 <rmw_validate_node_name>:
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d03b      	beq.n	800df24 <rmw_validate_node_name+0x7c>
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	460d      	mov	r5, r1
 800deb2:	2900      	cmp	r1, #0
 800deb4:	d038      	beq.n	800df28 <rmw_validate_node_name+0x80>
 800deb6:	4616      	mov	r6, r2
 800deb8:	4604      	mov	r4, r0
 800deba:	f7f2 f9b3 	bl	8000224 <strlen>
 800debe:	b1e0      	cbz	r0, 800defa <rmw_validate_node_name+0x52>
 800dec0:	1e63      	subs	r3, r4, #1
 800dec2:	eb03 0800 	add.w	r8, r3, r0
 800dec6:	f1c4 0101 	rsb	r1, r4, #1
 800deca:	18cf      	adds	r7, r1, r3
 800decc:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ded0:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800ded4:	f02e 0c20 	bic.w	ip, lr, #32
 800ded8:	2a09      	cmp	r2, #9
 800deda:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800dede:	d914      	bls.n	800df0a <rmw_validate_node_name+0x62>
 800dee0:	f1bc 0f19 	cmp.w	ip, #25
 800dee4:	d911      	bls.n	800df0a <rmw_validate_node_name+0x62>
 800dee6:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800deea:	d00e      	beq.n	800df0a <rmw_validate_node_name+0x62>
 800deec:	2302      	movs	r3, #2
 800deee:	602b      	str	r3, [r5, #0]
 800def0:	b106      	cbz	r6, 800def4 <rmw_validate_node_name+0x4c>
 800def2:	6037      	str	r7, [r6, #0]
 800def4:	2000      	movs	r0, #0
 800def6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800defa:	2301      	movs	r3, #1
 800defc:	602b      	str	r3, [r5, #0]
 800defe:	2e00      	cmp	r6, #0
 800df00:	d0f8      	beq.n	800def4 <rmw_validate_node_name+0x4c>
 800df02:	2000      	movs	r0, #0
 800df04:	6030      	str	r0, [r6, #0]
 800df06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0a:	4543      	cmp	r3, r8
 800df0c:	d1dd      	bne.n	800deca <rmw_validate_node_name+0x22>
 800df0e:	7822      	ldrb	r2, [r4, #0]
 800df10:	4b0d      	ldr	r3, [pc, #52]	@ (800df48 <rmw_validate_node_name+0xa0>)
 800df12:	5cd3      	ldrb	r3, [r2, r3]
 800df14:	f013 0304 	ands.w	r3, r3, #4
 800df18:	d110      	bne.n	800df3c <rmw_validate_node_name+0x94>
 800df1a:	28ff      	cmp	r0, #255	@ 0xff
 800df1c:	d806      	bhi.n	800df2c <rmw_validate_node_name+0x84>
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	4618      	mov	r0, r3
 800df22:	e7e8      	b.n	800def6 <rmw_validate_node_name+0x4e>
 800df24:	200b      	movs	r0, #11
 800df26:	4770      	bx	lr
 800df28:	200b      	movs	r0, #11
 800df2a:	e7e4      	b.n	800def6 <rmw_validate_node_name+0x4e>
 800df2c:	2204      	movs	r2, #4
 800df2e:	602a      	str	r2, [r5, #0]
 800df30:	2e00      	cmp	r6, #0
 800df32:	d0df      	beq.n	800def4 <rmw_validate_node_name+0x4c>
 800df34:	22fe      	movs	r2, #254	@ 0xfe
 800df36:	6032      	str	r2, [r6, #0]
 800df38:	4618      	mov	r0, r3
 800df3a:	e7dc      	b.n	800def6 <rmw_validate_node_name+0x4e>
 800df3c:	2303      	movs	r3, #3
 800df3e:	602b      	str	r3, [r5, #0]
 800df40:	2e00      	cmp	r6, #0
 800df42:	d1de      	bne.n	800df02 <rmw_validate_node_name+0x5a>
 800df44:	e7d6      	b.n	800def4 <rmw_validate_node_name+0x4c>
 800df46:	bf00      	nop
 800df48:	0801b37c 	.word	0x0801b37c

0800df4c <rmw_node_name_validation_result_string>:
 800df4c:	2804      	cmp	r0, #4
 800df4e:	bf9a      	itte	ls
 800df50:	4b02      	ldrls	r3, [pc, #8]	@ (800df5c <rmw_node_name_validation_result_string+0x10>)
 800df52:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800df56:	4802      	ldrhi	r0, [pc, #8]	@ (800df60 <rmw_node_name_validation_result_string+0x14>)
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	0801ab68 	.word	0x0801ab68
 800df60:	0801aa7c 	.word	0x0801aa7c

0800df64 <rmw_uros_set_custom_transport>:
 800df64:	b470      	push	{r4, r5, r6}
 800df66:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800df6a:	b162      	cbz	r2, 800df86 <rmw_uros_set_custom_transport+0x22>
 800df6c:	b15b      	cbz	r3, 800df86 <rmw_uros_set_custom_transport+0x22>
 800df6e:	b155      	cbz	r5, 800df86 <rmw_uros_set_custom_transport+0x22>
 800df70:	b14e      	cbz	r6, 800df86 <rmw_uros_set_custom_transport+0x22>
 800df72:	4c06      	ldr	r4, [pc, #24]	@ (800df8c <rmw_uros_set_custom_transport+0x28>)
 800df74:	7020      	strb	r0, [r4, #0]
 800df76:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800df7a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800df7e:	6166      	str	r6, [r4, #20]
 800df80:	2000      	movs	r0, #0
 800df82:	bc70      	pop	{r4, r5, r6}
 800df84:	4770      	bx	lr
 800df86:	200b      	movs	r0, #11
 800df88:	bc70      	pop	{r4, r5, r6}
 800df8a:	4770      	bx	lr
 800df8c:	2000989c 	.word	0x2000989c

0800df90 <rmw_uros_ping_agent>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	4b22      	ldr	r3, [pc, #136]	@ (800e01c <rmw_uros_ping_agent+0x8c>)
 800df94:	7b1a      	ldrb	r2, [r3, #12]
 800df96:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800df9a:	4605      	mov	r5, r0
 800df9c:	460e      	mov	r6, r1
 800df9e:	b10a      	cbz	r2, 800dfa4 <rmw_uros_ping_agent+0x14>
 800dfa0:	681c      	ldr	r4, [r3, #0]
 800dfa2:	b9bc      	cbnz	r4, 800dfd4 <rmw_uros_ping_agent+0x44>
 800dfa4:	4b1e      	ldr	r3, [pc, #120]	@ (800e020 <rmw_uros_ping_agent+0x90>)
 800dfa6:	781a      	ldrb	r2, [r3, #0]
 800dfa8:	6918      	ldr	r0, [r3, #16]
 800dfaa:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	68da      	ldr	r2, [r3, #12]
 800dfb6:	909c      	str	r0, [sp, #624]	@ 0x270
 800dfb8:	6958      	ldr	r0, [r3, #20]
 800dfba:	929b      	str	r2, [sp, #620]	@ 0x26c
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	909d      	str	r0, [sp, #628]	@ 0x274
 800dfc0:	466a      	mov	r2, sp
 800dfc2:	4608      	mov	r0, r1
 800dfc4:	939a      	str	r3, [sp, #616]	@ 0x268
 800dfc6:	f000 fccf 	bl	800e968 <rmw_uxrce_transport_init>
 800dfca:	b198      	cbz	r0, 800dff4 <rmw_uros_ping_agent+0x64>
 800dfcc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	b9f0      	cbnz	r0, 800e012 <rmw_uros_ping_agent+0x82>
 800dfd4:	68a0      	ldr	r0, [r4, #8]
 800dfd6:	4632      	mov	r2, r6
 800dfd8:	4629      	mov	r1, r5
 800dfda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfde:	f001 ffa7 	bl	800ff30 <uxr_ping_agent_session>
 800dfe2:	6864      	ldr	r4, [r4, #4]
 800dfe4:	2c00      	cmp	r4, #0
 800dfe6:	d1f4      	bne.n	800dfd2 <rmw_uros_ping_agent+0x42>
 800dfe8:	f080 0001 	eor.w	r0, r0, #1
 800dfec:	b2c0      	uxtb	r0, r0
 800dfee:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	4632      	mov	r2, r6
 800dff6:	4629      	mov	r1, r5
 800dff8:	a89e      	add	r0, sp, #632	@ 0x278
 800dffa:	f001 ffe5 	bl	800ffc8 <uxr_ping_agent_attempts>
 800dffe:	4604      	mov	r4, r0
 800e000:	4668      	mov	r0, sp
 800e002:	f001 ff61 	bl	800fec8 <uxr_close_custom_transport>
 800e006:	f084 0001 	eor.w	r0, r4, #1
 800e00a:	b2c0      	uxtb	r0, r0
 800e00c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	2000      	movs	r0, #0
 800e014:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e018:	bd70      	pop	{r4, r5, r6, pc}
 800e01a:	bf00      	nop
 800e01c:	2000e1f4 	.word	0x2000e1f4
 800e020:	2000989c 	.word	0x2000989c

0800e024 <create_node>:
 800e024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e028:	b083      	sub	sp, #12
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d05f      	beq.n	800e0ee <create_node+0xca>
 800e02e:	4606      	mov	r6, r0
 800e030:	4835      	ldr	r0, [pc, #212]	@ (800e108 <create_node+0xe4>)
 800e032:	460f      	mov	r7, r1
 800e034:	4690      	mov	r8, r2
 800e036:	461d      	mov	r5, r3
 800e038:	f008 f920 	bl	801627c <get_memory>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d056      	beq.n	800e0ee <create_node+0xca>
 800e040:	6884      	ldr	r4, [r0, #8]
 800e042:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e044:	6123      	str	r3, [r4, #16]
 800e046:	f008 f981 	bl	801634c <rmw_get_implementation_identifier>
 800e04a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e04e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e052:	f8c4 9020 	str.w	r9, [r4, #32]
 800e056:	4630      	mov	r0, r6
 800e058:	f7f2 f8e4 	bl	8000224 <strlen>
 800e05c:	1c42      	adds	r2, r0, #1
 800e05e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e060:	f104 0518 	add.w	r5, r4, #24
 800e064:	d840      	bhi.n	800e0e8 <create_node+0xc4>
 800e066:	4648      	mov	r0, r9
 800e068:	4631      	mov	r1, r6
 800e06a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e06e:	f00b fa7c 	bl	801956a <memcpy>
 800e072:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e076:	4638      	mov	r0, r7
 800e078:	f7f2 f8d4 	bl	8000224 <strlen>
 800e07c:	1c42      	adds	r2, r0, #1
 800e07e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e080:	d832      	bhi.n	800e0e8 <create_node+0xc4>
 800e082:	4639      	mov	r1, r7
 800e084:	4648      	mov	r0, r9
 800e086:	f00b fa70 	bl	801956a <memcpy>
 800e08a:	6923      	ldr	r3, [r4, #16]
 800e08c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e090:	2101      	movs	r1, #1
 800e092:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e096:	1842      	adds	r2, r0, r1
 800e098:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e09c:	f001 ff18 	bl	800fed0 <uxr_object_id>
 800e0a0:	6160      	str	r0, [r4, #20]
 800e0a2:	783b      	ldrb	r3, [r7, #0]
 800e0a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0a6:	d127      	bne.n	800e0f8 <create_node+0xd4>
 800e0a8:	787b      	ldrb	r3, [r7, #1]
 800e0aa:	bb2b      	cbnz	r3, 800e0f8 <create_node+0xd4>
 800e0ac:	4a17      	ldr	r2, [pc, #92]	@ (800e10c <create_node+0xe8>)
 800e0ae:	4818      	ldr	r0, [pc, #96]	@ (800e110 <create_node+0xec>)
 800e0b0:	4633      	mov	r3, r6
 800e0b2:	213c      	movs	r1, #60	@ 0x3c
 800e0b4:	f00b f822 	bl	80190fc <sniprintf>
 800e0b8:	6920      	ldr	r0, [r4, #16]
 800e0ba:	4915      	ldr	r1, [pc, #84]	@ (800e110 <create_node+0xec>)
 800e0bc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e0c0:	9100      	str	r1, [sp, #0]
 800e0c2:	2106      	movs	r1, #6
 800e0c4:	9101      	str	r1, [sp, #4]
 800e0c6:	6811      	ldr	r1, [r2, #0]
 800e0c8:	6962      	ldr	r2, [r4, #20]
 800e0ca:	fa1f f388 	uxth.w	r3, r8
 800e0ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e0d2:	f001 fc85 	bl	800f9e0 <uxr_buffer_create_participant_bin>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	6920      	ldr	r0, [r4, #16]
 800e0da:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e0de:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e0e2:	f000 ff3f 	bl	800ef64 <run_xrce_session>
 800e0e6:	b918      	cbnz	r0, 800e0f0 <create_node+0xcc>
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f000 fdc9 	bl	800ec80 <rmw_uxrce_fini_node_memory>
 800e0ee:	2500      	movs	r5, #0
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	b003      	add	sp, #12
 800e0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0f8:	4a06      	ldr	r2, [pc, #24]	@ (800e114 <create_node+0xf0>)
 800e0fa:	9600      	str	r6, [sp, #0]
 800e0fc:	463b      	mov	r3, r7
 800e0fe:	213c      	movs	r1, #60	@ 0x3c
 800e100:	4803      	ldr	r0, [pc, #12]	@ (800e110 <create_node+0xec>)
 800e102:	f00a fffb 	bl	80190fc <sniprintf>
 800e106:	e7d7      	b.n	800e0b8 <create_node+0x94>
 800e108:	2000e1c4 	.word	0x2000e1c4
 800e10c:	0801ab8c 	.word	0x0801ab8c
 800e110:	200098b8 	.word	0x200098b8
 800e114:	0801a628 	.word	0x0801a628

0800e118 <rmw_create_node>:
 800e118:	b199      	cbz	r1, 800e142 <rmw_create_node+0x2a>
 800e11a:	780b      	ldrb	r3, [r1, #0]
 800e11c:	468c      	mov	ip, r1
 800e11e:	b183      	cbz	r3, 800e142 <rmw_create_node+0x2a>
 800e120:	b410      	push	{r4}
 800e122:	4614      	mov	r4, r2
 800e124:	b14a      	cbz	r2, 800e13a <rmw_create_node+0x22>
 800e126:	7813      	ldrb	r3, [r2, #0]
 800e128:	b13b      	cbz	r3, 800e13a <rmw_create_node+0x22>
 800e12a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e12c:	4603      	mov	r3, r0
 800e12e:	4621      	mov	r1, r4
 800e130:	4660      	mov	r0, ip
 800e132:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e136:	f7ff bf75 	b.w	800e024 <create_node>
 800e13a:	2000      	movs	r0, #0
 800e13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	2000      	movs	r0, #0
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop

0800e148 <rmw_destroy_node>:
 800e148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e14a:	b328      	cbz	r0, 800e198 <rmw_destroy_node+0x50>
 800e14c:	4607      	mov	r7, r0
 800e14e:	6800      	ldr	r0, [r0, #0]
 800e150:	b120      	cbz	r0, 800e15c <rmw_destroy_node+0x14>
 800e152:	4b36      	ldr	r3, [pc, #216]	@ (800e22c <rmw_destroy_node+0xe4>)
 800e154:	6819      	ldr	r1, [r3, #0]
 800e156:	f7f2 f85b 	bl	8000210 <strcmp>
 800e15a:	b9e8      	cbnz	r0, 800e198 <rmw_destroy_node+0x50>
 800e15c:	687d      	ldr	r5, [r7, #4]
 800e15e:	b1dd      	cbz	r5, 800e198 <rmw_destroy_node+0x50>
 800e160:	4b33      	ldr	r3, [pc, #204]	@ (800e230 <rmw_destroy_node+0xe8>)
 800e162:	681c      	ldr	r4, [r3, #0]
 800e164:	2c00      	cmp	r4, #0
 800e166:	d05f      	beq.n	800e228 <rmw_destroy_node+0xe0>
 800e168:	2600      	movs	r6, #0
 800e16a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e16e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e172:	429d      	cmp	r5, r3
 800e174:	d013      	beq.n	800e19e <rmw_destroy_node+0x56>
 800e176:	2c00      	cmp	r4, #0
 800e178:	d1f7      	bne.n	800e16a <rmw_destroy_node+0x22>
 800e17a:	4b2e      	ldr	r3, [pc, #184]	@ (800e234 <rmw_destroy_node+0xec>)
 800e17c:	681c      	ldr	r4, [r3, #0]
 800e17e:	b1c4      	cbz	r4, 800e1b2 <rmw_destroy_node+0x6a>
 800e180:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e184:	6a0b      	ldr	r3, [r1, #32]
 800e186:	429d      	cmp	r5, r3
 800e188:	d1f9      	bne.n	800e17e <rmw_destroy_node+0x36>
 800e18a:	317c      	adds	r1, #124	@ 0x7c
 800e18c:	4638      	mov	r0, r7
 800e18e:	f000 fb37 	bl	800e800 <rmw_destroy_subscription>
 800e192:	2801      	cmp	r0, #1
 800e194:	4606      	mov	r6, r0
 800e196:	d1f2      	bne.n	800e17e <rmw_destroy_node+0x36>
 800e198:	2601      	movs	r6, #1
 800e19a:	4630      	mov	r0, r6
 800e19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e19e:	3184      	adds	r1, #132	@ 0x84
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	f000 f9a5 	bl	800e4f0 <rmw_destroy_publisher>
 800e1a6:	2801      	cmp	r0, #1
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	d0f5      	beq.n	800e198 <rmw_destroy_node+0x50>
 800e1ac:	2c00      	cmp	r4, #0
 800e1ae:	d1dc      	bne.n	800e16a <rmw_destroy_node+0x22>
 800e1b0:	e7e3      	b.n	800e17a <rmw_destroy_node+0x32>
 800e1b2:	4b21      	ldr	r3, [pc, #132]	@ (800e238 <rmw_destroy_node+0xf0>)
 800e1b4:	681c      	ldr	r4, [r3, #0]
 800e1b6:	b16c      	cbz	r4, 800e1d4 <rmw_destroy_node+0x8c>
 800e1b8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e1bc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e1be:	429d      	cmp	r5, r3
 800e1c0:	d1f9      	bne.n	800e1b6 <rmw_destroy_node+0x6e>
 800e1c2:	317c      	adds	r1, #124	@ 0x7c
 800e1c4:	4638      	mov	r0, r7
 800e1c6:	f000 f9e5 	bl	800e594 <rmw_destroy_service>
 800e1ca:	2801      	cmp	r0, #1
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	d0e3      	beq.n	800e198 <rmw_destroy_node+0x50>
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	d1f1      	bne.n	800e1b8 <rmw_destroy_node+0x70>
 800e1d4:	4b19      	ldr	r3, [pc, #100]	@ (800e23c <rmw_destroy_node+0xf4>)
 800e1d6:	681c      	ldr	r4, [r3, #0]
 800e1d8:	b16c      	cbz	r4, 800e1f6 <rmw_destroy_node+0xae>
 800e1da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e1de:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e1e0:	429d      	cmp	r5, r3
 800e1e2:	d1f9      	bne.n	800e1d8 <rmw_destroy_node+0x90>
 800e1e4:	317c      	adds	r1, #124	@ 0x7c
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	f008 f86c 	bl	80162c4 <rmw_destroy_client>
 800e1ec:	2801      	cmp	r0, #1
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	d0d2      	beq.n	800e198 <rmw_destroy_node+0x50>
 800e1f2:	2c00      	cmp	r4, #0
 800e1f4:	d1f1      	bne.n	800e1da <rmw_destroy_node+0x92>
 800e1f6:	6928      	ldr	r0, [r5, #16]
 800e1f8:	696a      	ldr	r2, [r5, #20]
 800e1fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e202:	6819      	ldr	r1, [r3, #0]
 800e204:	f001 fba0 	bl	800f948 <uxr_buffer_delete_entity>
 800e208:	4602      	mov	r2, r0
 800e20a:	6928      	ldr	r0, [r5, #16]
 800e20c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e210:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e214:	f000 fea6 	bl	800ef64 <run_xrce_session>
 800e218:	2800      	cmp	r0, #0
 800e21a:	bf08      	it	eq
 800e21c:	2602      	moveq	r6, #2
 800e21e:	4638      	mov	r0, r7
 800e220:	f000 fd2e 	bl	800ec80 <rmw_uxrce_fini_node_memory>
 800e224:	4630      	mov	r0, r6
 800e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e228:	4626      	mov	r6, r4
 800e22a:	e7a6      	b.n	800e17a <rmw_destroy_node+0x32>
 800e22c:	0801b1e0 	.word	0x0801b1e0
 800e230:	2000e1d4 	.word	0x2000e1d4
 800e234:	2000e214 	.word	0x2000e214
 800e238:	2000e1e4 	.word	0x2000e1e4
 800e23c:	200098f4 	.word	0x200098f4

0800e240 <rmw_node_get_graph_guard_condition>:
 800e240:	6843      	ldr	r3, [r0, #4]
 800e242:	6918      	ldr	r0, [r3, #16]
 800e244:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop

0800e24c <flush_session>:
 800e24c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e24e:	f002 bd83 	b.w	8010d58 <uxr_run_session_until_confirm_delivery>
 800e252:	bf00      	nop

0800e254 <rmw_publish>:
 800e254:	2800      	cmp	r0, #0
 800e256:	d053      	beq.n	800e300 <rmw_publish+0xac>
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	460d      	mov	r5, r1
 800e25c:	b08e      	sub	sp, #56	@ 0x38
 800e25e:	2900      	cmp	r1, #0
 800e260:	d04b      	beq.n	800e2fa <rmw_publish+0xa6>
 800e262:	4604      	mov	r4, r0
 800e264:	6800      	ldr	r0, [r0, #0]
 800e266:	f000 fefd 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d045      	beq.n	800e2fa <rmw_publish+0xa6>
 800e26e:	6866      	ldr	r6, [r4, #4]
 800e270:	2e00      	cmp	r6, #0
 800e272:	d042      	beq.n	800e2fa <rmw_publish+0xa6>
 800e274:	69b4      	ldr	r4, [r6, #24]
 800e276:	4628      	mov	r0, r5
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	4798      	blx	r3
 800e27c:	69f3      	ldr	r3, [r6, #28]
 800e27e:	9005      	str	r0, [sp, #20]
 800e280:	b113      	cbz	r3, 800e288 <rmw_publish+0x34>
 800e282:	a805      	add	r0, sp, #20
 800e284:	4798      	blx	r3
 800e286:	9805      	ldr	r0, [sp, #20]
 800e288:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	9000      	str	r0, [sp, #0]
 800e290:	6972      	ldr	r2, [r6, #20]
 800e292:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e294:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e298:	ab06      	add	r3, sp, #24
 800e29a:	f004 f805 	bl	80122a8 <uxr_prepare_output_stream>
 800e29e:	b1d8      	cbz	r0, 800e2d8 <rmw_publish+0x84>
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	a906      	add	r1, sp, #24
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	4798      	blx	r3
 800e2a8:	6a33      	ldr	r3, [r6, #32]
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	b10b      	cbz	r3, 800e2b2 <rmw_publish+0x5e>
 800e2ae:	a806      	add	r0, sp, #24
 800e2b0:	4798      	blx	r3
 800e2b2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e2bc:	d022      	beq.n	800e304 <rmw_publish+0xb0>
 800e2be:	6918      	ldr	r0, [r3, #16]
 800e2c0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e2c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2c6:	f002 fd47 	bl	8010d58 <uxr_run_session_until_confirm_delivery>
 800e2ca:	4020      	ands	r0, r4
 800e2cc:	b2c4      	uxtb	r4, r0
 800e2ce:	f084 0001 	eor.w	r0, r4, #1
 800e2d2:	b2c0      	uxtb	r0, r0
 800e2d4:	b00e      	add	sp, #56	@ 0x38
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}
 800e2d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e2dc:	6918      	ldr	r0, [r3, #16]
 800e2de:	9b05      	ldr	r3, [sp, #20]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e310 <rmw_publish+0xbc>)
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	9602      	str	r6, [sp, #8]
 800e2e8:	6972      	ldr	r2, [r6, #20]
 800e2ea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e2ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2f0:	ab06      	add	r3, sp, #24
 800e2f2:	f004 f809 	bl	8012308 <uxr_prepare_output_stream_fragmented>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d1d2      	bne.n	800e2a0 <rmw_publish+0x4c>
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	b00e      	add	sp, #56	@ 0x38
 800e2fe:	bd70      	pop	{r4, r5, r6, pc}
 800e300:	2001      	movs	r0, #1
 800e302:	4770      	bx	lr
 800e304:	6918      	ldr	r0, [r3, #16]
 800e306:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e30a:	f002 f965 	bl	80105d8 <uxr_flash_output_streams>
 800e30e:	e7de      	b.n	800e2ce <rmw_publish+0x7a>
 800e310:	0800e24d 	.word	0x0800e24d

0800e314 <rmw_create_publisher>:
 800e314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e318:	b087      	sub	sp, #28
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f000 80cc 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e320:	460e      	mov	r6, r1
 800e322:	2900      	cmp	r1, #0
 800e324:	f000 80c8 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e328:	4604      	mov	r4, r0
 800e32a:	6800      	ldr	r0, [r0, #0]
 800e32c:	4615      	mov	r5, r2
 800e32e:	4698      	mov	r8, r3
 800e330:	f000 fe98 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e334:	2800      	cmp	r0, #0
 800e336:	f000 80bf 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e33a:	2d00      	cmp	r5, #0
 800e33c:	f000 80bc 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e340:	782b      	ldrb	r3, [r5, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80b8 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e348:	f1b8 0f00 	cmp.w	r8, #0
 800e34c:	f000 80b4 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e350:	485c      	ldr	r0, [pc, #368]	@ (800e4c4 <rmw_create_publisher+0x1b0>)
 800e352:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e356:	f007 ff91 	bl	801627c <get_memory>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	f000 80ac 	beq.w	800e4b8 <rmw_create_publisher+0x1a4>
 800e360:	6884      	ldr	r4, [r0, #8]
 800e362:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e366:	f007 fff1 	bl	801634c <rmw_get_implementation_identifier>
 800e36a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e36e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e372:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e376:	4628      	mov	r0, r5
 800e378:	f7f1 ff54 	bl	8000224 <strlen>
 800e37c:	3001      	adds	r0, #1
 800e37e:	283c      	cmp	r0, #60	@ 0x3c
 800e380:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e384:	f200 8091 	bhi.w	800e4aa <rmw_create_publisher+0x196>
 800e388:	4a4f      	ldr	r2, [pc, #316]	@ (800e4c8 <rmw_create_publisher+0x1b4>)
 800e38a:	462b      	mov	r3, r5
 800e38c:	213c      	movs	r1, #60	@ 0x3c
 800e38e:	4650      	mov	r0, sl
 800e390:	f00a feb4 	bl	80190fc <sniprintf>
 800e394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e398:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e39a:	4641      	mov	r1, r8
 800e39c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e3a0:	2250      	movs	r2, #80	@ 0x50
 800e3a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e3a6:	f00b f8e0 	bl	801956a <memcpy>
 800e3aa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e3ae:	4947      	ldr	r1, [pc, #284]	@ (800e4cc <rmw_create_publisher+0x1b8>)
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3b6:	bf0c      	ite	eq
 800e3b8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e3bc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e3c0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f000 fe59 	bl	800f080 <get_message_typesupport_handle>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d06b      	beq.n	800e4aa <rmw_create_publisher+0x196>
 800e3d2:	6842      	ldr	r2, [r0, #4]
 800e3d4:	61a2      	str	r2, [r4, #24]
 800e3d6:	2a00      	cmp	r2, #0
 800e3d8:	d067      	beq.n	800e4aa <rmw_create_publisher+0x196>
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4643      	mov	r3, r8
 800e3de:	4648      	mov	r0, r9
 800e3e0:	f008 faa6 	bl	8016930 <create_topic>
 800e3e4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d063      	beq.n	800e4b2 <rmw_create_publisher+0x19e>
 800e3ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3f2:	2103      	movs	r1, #3
 800e3f4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e3f8:	1c42      	adds	r2, r0, #1
 800e3fa:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e3fe:	f001 fd67 	bl	800fed0 <uxr_object_id>
 800e402:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e40a:	6120      	str	r0, [r4, #16]
 800e40c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e410:	6910      	ldr	r0, [r2, #16]
 800e412:	2506      	movs	r5, #6
 800e414:	9500      	str	r5, [sp, #0]
 800e416:	6819      	ldr	r1, [r3, #0]
 800e418:	6922      	ldr	r2, [r4, #16]
 800e41a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e41e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e422:	f001 fb45 	bl	800fab0 <uxr_buffer_create_publisher_bin>
 800e426:	4602      	mov	r2, r0
 800e428:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e42c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e430:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e434:	f000 fd96 	bl	800ef64 <run_xrce_session>
 800e438:	b3b8      	cbz	r0, 800e4aa <rmw_create_publisher+0x196>
 800e43a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e442:	2105      	movs	r1, #5
 800e444:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e448:	1c42      	adds	r2, r0, #1
 800e44a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e44e:	f001 fd3f 	bl	800fed0 <uxr_object_id>
 800e452:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e456:	6160      	str	r0, [r4, #20]
 800e458:	691e      	ldr	r6, [r3, #16]
 800e45a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e45e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e462:	f10d 0a10 	add.w	sl, sp, #16
 800e466:	4641      	mov	r1, r8
 800e468:	4650      	mov	r0, sl
 800e46a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e46e:	f000 fd95 	bl	800ef9c <convert_qos_profile>
 800e472:	9503      	str	r5, [sp, #12]
 800e474:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e478:	9001      	str	r0, [sp, #4]
 800e47a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e47e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e488:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e48c:	f8d8 1000 	ldr.w	r1, [r8]
 800e490:	4630      	mov	r0, r6
 800e492:	f001 fb6d 	bl	800fb70 <uxr_buffer_create_datawriter_bin>
 800e496:	4602      	mov	r2, r0
 800e498:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e49c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e4a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e4a4:	f000 fd5e 	bl	800ef64 <run_xrce_session>
 800e4a8:	b938      	cbnz	r0, 800e4ba <rmw_create_publisher+0x1a6>
 800e4aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e4ac:	b108      	cbz	r0, 800e4b2 <rmw_create_publisher+0x19e>
 800e4ae:	f000 fc57 	bl	800ed60 <rmw_uxrce_fini_topic_memory>
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f000 fbfc 	bl	800ecb0 <rmw_uxrce_fini_publisher_memory>
 800e4b8:	2700      	movs	r7, #0
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	b007      	add	sp, #28
 800e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c2:	bf00      	nop
 800e4c4:	2000e1d4 	.word	0x2000e1d4
 800e4c8:	0801ab8c 	.word	0x0801ab8c
 800e4cc:	0801a548 	.word	0x0801a548

0800e4d0 <rmw_publisher_get_actual_qos>:
 800e4d0:	b150      	cbz	r0, 800e4e8 <rmw_publisher_get_actual_qos+0x18>
 800e4d2:	b508      	push	{r3, lr}
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	b149      	cbz	r1, 800e4ec <rmw_publisher_get_actual_qos+0x1c>
 800e4d8:	6841      	ldr	r1, [r0, #4]
 800e4da:	2250      	movs	r2, #80	@ 0x50
 800e4dc:	3128      	adds	r1, #40	@ 0x28
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f00b f843 	bl	801956a <memcpy>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	bd08      	pop	{r3, pc}
 800e4e8:	200b      	movs	r0, #11
 800e4ea:	4770      	bx	lr
 800e4ec:	200b      	movs	r0, #11
 800e4ee:	bd08      	pop	{r3, pc}

0800e4f0 <rmw_destroy_publisher>:
 800e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f2:	b128      	cbz	r0, 800e500 <rmw_destroy_publisher+0x10>
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	6800      	ldr	r0, [r0, #0]
 800e4f8:	460d      	mov	r5, r1
 800e4fa:	f000 fdb3 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e4fe:	b910      	cbnz	r0, 800e506 <rmw_destroy_publisher+0x16>
 800e500:	2401      	movs	r4, #1
 800e502:	4620      	mov	r0, r4
 800e504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e506:	6863      	ldr	r3, [r4, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d0f9      	beq.n	800e500 <rmw_destroy_publisher+0x10>
 800e50c:	2d00      	cmp	r5, #0
 800e50e:	d0f7      	beq.n	800e500 <rmw_destroy_publisher+0x10>
 800e510:	6828      	ldr	r0, [r5, #0]
 800e512:	f000 fda7 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e516:	2800      	cmp	r0, #0
 800e518:	d0f2      	beq.n	800e500 <rmw_destroy_publisher+0x10>
 800e51a:	686c      	ldr	r4, [r5, #4]
 800e51c:	2c00      	cmp	r4, #0
 800e51e:	d0ef      	beq.n	800e500 <rmw_destroy_publisher+0x10>
 800e520:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e522:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e526:	f008 fa53 	bl	80169d0 <destroy_topic>
 800e52a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e52e:	6962      	ldr	r2, [r4, #20]
 800e530:	6918      	ldr	r0, [r3, #16]
 800e532:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e536:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e53a:	6819      	ldr	r1, [r3, #0]
 800e53c:	f001 fa04 	bl	800f948 <uxr_buffer_delete_entity>
 800e540:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e544:	6922      	ldr	r2, [r4, #16]
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e54c:	4604      	mov	r4, r0
 800e54e:	6809      	ldr	r1, [r1, #0]
 800e550:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e554:	f001 f9f8 	bl	800f948 <uxr_buffer_delete_entity>
 800e558:	693e      	ldr	r6, [r7, #16]
 800e55a:	4622      	mov	r2, r4
 800e55c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e560:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e564:	4604      	mov	r4, r0
 800e566:	4630      	mov	r0, r6
 800e568:	f000 fcfc 	bl	800ef64 <run_xrce_session>
 800e56c:	693e      	ldr	r6, [r7, #16]
 800e56e:	4622      	mov	r2, r4
 800e570:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e574:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e578:	4604      	mov	r4, r0
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 fcf2 	bl	800ef64 <run_xrce_session>
 800e580:	b12c      	cbz	r4, 800e58e <rmw_destroy_publisher+0x9e>
 800e582:	b120      	cbz	r0, 800e58e <rmw_destroy_publisher+0x9e>
 800e584:	2400      	movs	r4, #0
 800e586:	4628      	mov	r0, r5
 800e588:	f000 fb92 	bl	800ecb0 <rmw_uxrce_fini_publisher_memory>
 800e58c:	e7b9      	b.n	800e502 <rmw_destroy_publisher+0x12>
 800e58e:	2402      	movs	r4, #2
 800e590:	e7f9      	b.n	800e586 <rmw_destroy_publisher+0x96>
 800e592:	bf00      	nop

0800e594 <rmw_destroy_service>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	b128      	cbz	r0, 800e5a4 <rmw_destroy_service+0x10>
 800e598:	4604      	mov	r4, r0
 800e59a:	6800      	ldr	r0, [r0, #0]
 800e59c:	460d      	mov	r5, r1
 800e59e:	f000 fd61 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e5a2:	b910      	cbnz	r0, 800e5aa <rmw_destroy_service+0x16>
 800e5a4:	2401      	movs	r4, #1
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	bd70      	pop	{r4, r5, r6, pc}
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d0f9      	beq.n	800e5a4 <rmw_destroy_service+0x10>
 800e5b0:	2d00      	cmp	r5, #0
 800e5b2:	d0f7      	beq.n	800e5a4 <rmw_destroy_service+0x10>
 800e5b4:	6828      	ldr	r0, [r5, #0]
 800e5b6:	f000 fd55 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d0f2      	beq.n	800e5a4 <rmw_destroy_service+0x10>
 800e5be:	686e      	ldr	r6, [r5, #4]
 800e5c0:	2e00      	cmp	r6, #0
 800e5c2:	d0ef      	beq.n	800e5a4 <rmw_destroy_service+0x10>
 800e5c4:	6864      	ldr	r4, [r4, #4]
 800e5c6:	6932      	ldr	r2, [r6, #16]
 800e5c8:	6920      	ldr	r0, [r4, #16]
 800e5ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e5ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	f001 fdea 	bl	80101ac <uxr_buffer_cancel_data>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6920      	ldr	r0, [r4, #16]
 800e5dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e5e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e5e4:	f000 fcbe 	bl	800ef64 <run_xrce_session>
 800e5e8:	6920      	ldr	r0, [r4, #16]
 800e5ea:	6932      	ldr	r2, [r6, #16]
 800e5ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e5f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5f4:	6819      	ldr	r1, [r3, #0]
 800e5f6:	f001 f9a7 	bl	800f948 <uxr_buffer_delete_entity>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	6920      	ldr	r0, [r4, #16]
 800e5fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e602:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e606:	f000 fcad 	bl	800ef64 <run_xrce_session>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	4628      	mov	r0, r5
 800e60e:	bf14      	ite	ne
 800e610:	2400      	movne	r4, #0
 800e612:	2402      	moveq	r4, #2
 800e614:	f000 fb78 	bl	800ed08 <rmw_uxrce_fini_service_memory>
 800e618:	e7c5      	b.n	800e5a6 <rmw_destroy_service+0x12>
 800e61a:	bf00      	nop

0800e61c <rmw_create_subscription>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	b08d      	sub	sp, #52	@ 0x34
 800e622:	2800      	cmp	r0, #0
 800e624:	f000 80d1 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e628:	460e      	mov	r6, r1
 800e62a:	2900      	cmp	r1, #0
 800e62c:	f000 80cd 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e630:	4604      	mov	r4, r0
 800e632:	6800      	ldr	r0, [r0, #0]
 800e634:	4615      	mov	r5, r2
 800e636:	4698      	mov	r8, r3
 800e638:	f000 fd14 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	f000 80c4 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e642:	2d00      	cmp	r5, #0
 800e644:	f000 80c1 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e648:	782b      	ldrb	r3, [r5, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 80bd 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e650:	f1b8 0f00 	cmp.w	r8, #0
 800e654:	f000 80b9 	beq.w	800e7ca <rmw_create_subscription+0x1ae>
 800e658:	485e      	ldr	r0, [pc, #376]	@ (800e7d4 <rmw_create_subscription+0x1b8>)
 800e65a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e65e:	f007 fe0d 	bl	801627c <get_memory>
 800e662:	4604      	mov	r4, r0
 800e664:	2800      	cmp	r0, #0
 800e666:	f000 80b1 	beq.w	800e7cc <rmw_create_subscription+0x1b0>
 800e66a:	6887      	ldr	r7, [r0, #8]
 800e66c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e670:	f007 fe6c 	bl	801634c <rmw_get_implementation_identifier>
 800e674:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800e678:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e67a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e67e:	4628      	mov	r0, r5
 800e680:	f7f1 fdd0 	bl	8000224 <strlen>
 800e684:	3001      	adds	r0, #1
 800e686:	283c      	cmp	r0, #60	@ 0x3c
 800e688:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800e68c:	f200 8096 	bhi.w	800e7bc <rmw_create_subscription+0x1a0>
 800e690:	4a51      	ldr	r2, [pc, #324]	@ (800e7d8 <rmw_create_subscription+0x1bc>)
 800e692:	462b      	mov	r3, r5
 800e694:	213c      	movs	r1, #60	@ 0x3c
 800e696:	4650      	mov	r0, sl
 800e698:	f00a fd30 	bl	80190fc <sniprintf>
 800e69c:	4641      	mov	r1, r8
 800e69e:	f8c7 9020 	str.w	r9, [r7, #32]
 800e6a2:	2250      	movs	r2, #80	@ 0x50
 800e6a4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800e6a8:	f00a ff5f 	bl	801956a <memcpy>
 800e6ac:	494b      	ldr	r1, [pc, #300]	@ (800e7dc <rmw_create_subscription+0x1c0>)
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 fce6 	bl	800f080 <get_message_typesupport_handle>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	f000 8081 	beq.w	800e7bc <rmw_create_subscription+0x1a0>
 800e6ba:	6842      	ldr	r2, [r0, #4]
 800e6bc:	61ba      	str	r2, [r7, #24]
 800e6be:	2a00      	cmp	r2, #0
 800e6c0:	d07c      	beq.n	800e7bc <rmw_create_subscription+0x1a0>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4643      	mov	r3, r8
 800e6c6:	4648      	mov	r0, r9
 800e6c8:	f008 f932 	bl	8016930 <create_topic>
 800e6cc:	61f8      	str	r0, [r7, #28]
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d078      	beq.n	800e7c4 <rmw_create_subscription+0x1a8>
 800e6d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6da:	2104      	movs	r1, #4
 800e6dc:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800e6e0:	1c42      	adds	r2, r0, #1
 800e6e2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800e6e6:	f001 fbf3 	bl	800fed0 <uxr_object_id>
 800e6ea:	6138      	str	r0, [r7, #16]
 800e6ec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6f0:	2506      	movs	r5, #6
 800e6f2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800e6f6:	9500      	str	r5, [sp, #0]
 800e6f8:	6819      	ldr	r1, [r3, #0]
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e700:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e704:	f001 fa04 	bl	800fb10 <uxr_buffer_create_subscriber_bin>
 800e708:	4602      	mov	r2, r0
 800e70a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e70e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e712:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e716:	f000 fc25 	bl	800ef64 <run_xrce_session>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d04e      	beq.n	800e7bc <rmw_create_subscription+0x1a0>
 800e71e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e726:	4629      	mov	r1, r5
 800e728:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800e72c:	1c42      	adds	r2, r0, #1
 800e72e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800e732:	f001 fbcd 	bl	800fed0 <uxr_object_id>
 800e736:	ae08      	add	r6, sp, #32
 800e738:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	6178      	str	r0, [r7, #20]
 800e740:	4641      	mov	r1, r8
 800e742:	4630      	mov	r0, r6
 800e744:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800e748:	9305      	str	r3, [sp, #20]
 800e74a:	f000 fc27 	bl	800ef9c <convert_qos_profile>
 800e74e:	9503      	str	r5, [sp, #12]
 800e750:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e754:	9b05      	ldr	r3, [sp, #20]
 800e756:	9001      	str	r0, [sp, #4]
 800e758:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e764:	f8db 1000 	ldr.w	r1, [fp]
 800e768:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800e76c:	f001 fa76 	bl	800fc5c <uxr_buffer_create_datareader_bin>
 800e770:	4602      	mov	r2, r0
 800e772:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e776:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e77a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e77e:	f000 fbf1 	bl	800ef64 <run_xrce_session>
 800e782:	b1d8      	cbz	r0, 800e7bc <rmw_create_subscription+0x1a0>
 800e784:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e788:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	bf0c      	ite	eq
 800e790:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800e794:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800e798:	9307      	str	r3, [sp, #28]
 800e79a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e79e:	2200      	movs	r2, #0
 800e7a0:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800e7a4:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	697a      	ldr	r2, [r7, #20]
 800e7ae:	9b07      	ldr	r3, [sp, #28]
 800e7b0:	6809      	ldr	r1, [r1, #0]
 800e7b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7b6:	f001 fcbf 	bl	8010138 <uxr_buffer_request_data>
 800e7ba:	e007      	b.n	800e7cc <rmw_create_subscription+0x1b0>
 800e7bc:	69f8      	ldr	r0, [r7, #28]
 800e7be:	b108      	cbz	r0, 800e7c4 <rmw_create_subscription+0x1a8>
 800e7c0:	f000 face 	bl	800ed60 <rmw_uxrce_fini_topic_memory>
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f000 fa89 	bl	800ecdc <rmw_uxrce_fini_subscription_memory>
 800e7ca:	2400      	movs	r4, #0
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	b00d      	add	sp, #52	@ 0x34
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	2000e214 	.word	0x2000e214
 800e7d8:	0801ab8c 	.word	0x0801ab8c
 800e7dc:	0801a548 	.word	0x0801a548

0800e7e0 <rmw_subscription_get_actual_qos>:
 800e7e0:	b150      	cbz	r0, 800e7f8 <rmw_subscription_get_actual_qos+0x18>
 800e7e2:	b508      	push	{r3, lr}
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	b149      	cbz	r1, 800e7fc <rmw_subscription_get_actual_qos+0x1c>
 800e7e8:	6841      	ldr	r1, [r0, #4]
 800e7ea:	2250      	movs	r2, #80	@ 0x50
 800e7ec:	3128      	adds	r1, #40	@ 0x28
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f00a febb 	bl	801956a <memcpy>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	bd08      	pop	{r3, pc}
 800e7f8:	200b      	movs	r0, #11
 800e7fa:	4770      	bx	lr
 800e7fc:	200b      	movs	r0, #11
 800e7fe:	bd08      	pop	{r3, pc}

0800e800 <rmw_destroy_subscription>:
 800e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e802:	b128      	cbz	r0, 800e810 <rmw_destroy_subscription+0x10>
 800e804:	4604      	mov	r4, r0
 800e806:	6800      	ldr	r0, [r0, #0]
 800e808:	460d      	mov	r5, r1
 800e80a:	f000 fc2b 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e80e:	b910      	cbnz	r0, 800e816 <rmw_destroy_subscription+0x16>
 800e810:	2401      	movs	r4, #1
 800e812:	4620      	mov	r0, r4
 800e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e816:	6863      	ldr	r3, [r4, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0f9      	beq.n	800e810 <rmw_destroy_subscription+0x10>
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	d0f7      	beq.n	800e810 <rmw_destroy_subscription+0x10>
 800e820:	6828      	ldr	r0, [r5, #0]
 800e822:	f000 fc1f 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 800e826:	2800      	cmp	r0, #0
 800e828:	d0f2      	beq.n	800e810 <rmw_destroy_subscription+0x10>
 800e82a:	686c      	ldr	r4, [r5, #4]
 800e82c:	2c00      	cmp	r4, #0
 800e82e:	d0ef      	beq.n	800e810 <rmw_destroy_subscription+0x10>
 800e830:	6a26      	ldr	r6, [r4, #32]
 800e832:	6962      	ldr	r2, [r4, #20]
 800e834:	6930      	ldr	r0, [r6, #16]
 800e836:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e83a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	f001 fcb4 	bl	80101ac <uxr_buffer_cancel_data>
 800e844:	4602      	mov	r2, r0
 800e846:	6930      	ldr	r0, [r6, #16]
 800e848:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e84c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e850:	f000 fb88 	bl	800ef64 <run_xrce_session>
 800e854:	69e0      	ldr	r0, [r4, #28]
 800e856:	f008 f8bb 	bl	80169d0 <destroy_topic>
 800e85a:	6a23      	ldr	r3, [r4, #32]
 800e85c:	6962      	ldr	r2, [r4, #20]
 800e85e:	6918      	ldr	r0, [r3, #16]
 800e860:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e864:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e868:	6819      	ldr	r1, [r3, #0]
 800e86a:	f001 f86d 	bl	800f948 <uxr_buffer_delete_entity>
 800e86e:	6a23      	ldr	r3, [r4, #32]
 800e870:	6922      	ldr	r2, [r4, #16]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e878:	4604      	mov	r4, r0
 800e87a:	6809      	ldr	r1, [r1, #0]
 800e87c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e880:	f001 f862 	bl	800f948 <uxr_buffer_delete_entity>
 800e884:	6937      	ldr	r7, [r6, #16]
 800e886:	4622      	mov	r2, r4
 800e888:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e88c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e890:	4604      	mov	r4, r0
 800e892:	4638      	mov	r0, r7
 800e894:	f000 fb66 	bl	800ef64 <run_xrce_session>
 800e898:	6936      	ldr	r6, [r6, #16]
 800e89a:	4622      	mov	r2, r4
 800e89c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e8a0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f000 fb5c 	bl	800ef64 <run_xrce_session>
 800e8ac:	b12c      	cbz	r4, 800e8ba <rmw_destroy_subscription+0xba>
 800e8ae:	b120      	cbz	r0, 800e8ba <rmw_destroy_subscription+0xba>
 800e8b0:	2400      	movs	r4, #0
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f000 fa12 	bl	800ecdc <rmw_uxrce_fini_subscription_memory>
 800e8b8:	e7ab      	b.n	800e812 <rmw_destroy_subscription+0x12>
 800e8ba:	2402      	movs	r4, #2
 800e8bc:	e7f9      	b.n	800e8b2 <rmw_destroy_subscription+0xb2>
 800e8be:	bf00      	nop

0800e8c0 <rmw_take_with_info>:
 800e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	6800      	ldr	r0, [r0, #0]
 800e8c6:	b089      	sub	sp, #36	@ 0x24
 800e8c8:	460f      	mov	r7, r1
 800e8ca:	4615      	mov	r5, r2
 800e8cc:	b128      	cbz	r0, 800e8da <rmw_take_with_info+0x1a>
 800e8ce:	4b24      	ldr	r3, [pc, #144]	@ (800e960 <rmw_take_with_info+0xa0>)
 800e8d0:	6819      	ldr	r1, [r3, #0]
 800e8d2:	f7f1 fc9d 	bl	8000210 <strcmp>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d13e      	bne.n	800e958 <rmw_take_with_info+0x98>
 800e8da:	b305      	cbz	r5, 800e91e <rmw_take_with_info+0x5e>
 800e8dc:	6864      	ldr	r4, [r4, #4]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	702b      	strb	r3, [r5, #0]
 800e8e2:	f000 fac1 	bl	800ee68 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f000 fa96 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	b1f0      	cbz	r0, 800e92e <rmw_take_with_info+0x6e>
 800e8f0:	6881      	ldr	r1, [r0, #8]
 800e8f2:	4668      	mov	r0, sp
 800e8f4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e8f8:	3110      	adds	r1, #16
 800e8fa:	f7fd f839 	bl	800b970 <ucdr_init_buffer>
 800e8fe:	69a3      	ldr	r3, [r4, #24]
 800e900:	4639      	mov	r1, r7
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	4668      	mov	r0, sp
 800e906:	4798      	blx	r3
 800e908:	4631      	mov	r1, r6
 800e90a:	4604      	mov	r4, r0
 800e90c:	4815      	ldr	r0, [pc, #84]	@ (800e964 <rmw_take_with_info+0xa4>)
 800e90e:	f007 fcc5 	bl	801629c <put_memory>
 800e912:	702c      	strb	r4, [r5, #0]
 800e914:	f084 0001 	eor.w	r0, r4, #1
 800e918:	b2c0      	uxtb	r0, r0
 800e91a:	b009      	add	sp, #36	@ 0x24
 800e91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91e:	6864      	ldr	r4, [r4, #4]
 800e920:	f000 faa2 	bl	800ee68 <rmw_uxrce_clean_expired_static_input_buffer>
 800e924:	4620      	mov	r0, r4
 800e926:	f000 fa77 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e92a:	4605      	mov	r5, r0
 800e92c:	b910      	cbnz	r0, 800e934 <rmw_take_with_info+0x74>
 800e92e:	2001      	movs	r0, #1
 800e930:	b009      	add	sp, #36	@ 0x24
 800e932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e934:	68a9      	ldr	r1, [r5, #8]
 800e936:	4668      	mov	r0, sp
 800e938:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e93c:	3110      	adds	r1, #16
 800e93e:	f7fd f817 	bl	800b970 <ucdr_init_buffer>
 800e942:	69a3      	ldr	r3, [r4, #24]
 800e944:	4639      	mov	r1, r7
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	4668      	mov	r0, sp
 800e94a:	4798      	blx	r3
 800e94c:	4629      	mov	r1, r5
 800e94e:	4604      	mov	r4, r0
 800e950:	4804      	ldr	r0, [pc, #16]	@ (800e964 <rmw_take_with_info+0xa4>)
 800e952:	f007 fca3 	bl	801629c <put_memory>
 800e956:	e7dd      	b.n	800e914 <rmw_take_with_info+0x54>
 800e958:	200c      	movs	r0, #12
 800e95a:	b009      	add	sp, #36	@ 0x24
 800e95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95e:	bf00      	nop
 800e960:	0801b1e0 	.word	0x0801b1e0
 800e964:	2000e204 	.word	0x2000e204

0800e968 <rmw_uxrce_transport_init>:
 800e968:	b508      	push	{r3, lr}
 800e96a:	b108      	cbz	r0, 800e970 <rmw_uxrce_transport_init+0x8>
 800e96c:	f100 0210 	add.w	r2, r0, #16
 800e970:	b139      	cbz	r1, 800e982 <rmw_uxrce_transport_init+0x1a>
 800e972:	6949      	ldr	r1, [r1, #20]
 800e974:	4610      	mov	r0, r2
 800e976:	f001 fa73 	bl	800fe60 <uxr_init_custom_transport>
 800e97a:	f080 0001 	eor.w	r0, r0, #1
 800e97e:	b2c0      	uxtb	r0, r0
 800e980:	bd08      	pop	{r3, pc}
 800e982:	4b04      	ldr	r3, [pc, #16]	@ (800e994 <rmw_uxrce_transport_init+0x2c>)
 800e984:	4610      	mov	r0, r2
 800e986:	6859      	ldr	r1, [r3, #4]
 800e988:	f001 fa6a 	bl	800fe60 <uxr_init_custom_transport>
 800e98c:	f080 0001 	eor.w	r0, r0, #1
 800e990:	b2c0      	uxtb	r0, r0
 800e992:	bd08      	pop	{r3, pc}
 800e994:	2000989c 	.word	0x2000989c

0800e998 <rmw_uros_epoch_nanos>:
 800e998:	4b05      	ldr	r3, [pc, #20]	@ (800e9b0 <rmw_uros_epoch_nanos+0x18>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	b123      	cbz	r3, 800e9a8 <rmw_uros_epoch_nanos+0x10>
 800e99e:	6898      	ldr	r0, [r3, #8]
 800e9a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9a4:	f001 be0e 	b.w	80105c4 <uxr_epoch_nanos>
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	2000e1f4 	.word	0x2000e1f4

0800e9b4 <rmw_uxrce_init_service_memory>:
 800e9b4:	b1e2      	cbz	r2, 800e9f0 <rmw_uxrce_init_service_memory+0x3c>
 800e9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ba:	7b05      	ldrb	r5, [r0, #12]
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b9ad      	cbnz	r5, 800e9ec <rmw_uxrce_init_service_memory+0x38>
 800e9c0:	23c8      	movs	r3, #200	@ 0xc8
 800e9c2:	e9c0 5500 	strd	r5, r5, [r0]
 800e9c6:	6083      	str	r3, [r0, #8]
 800e9c8:	f240 1301 	movw	r3, #257	@ 0x101
 800e9cc:	4617      	mov	r7, r2
 800e9ce:	8183      	strh	r3, [r0, #12]
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	46a8      	mov	r8, r5
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	3501      	adds	r5, #1
 800e9da:	f007 fc5f 	bl	801629c <put_memory>
 800e9de:	42af      	cmp	r7, r5
 800e9e0:	60a4      	str	r4, [r4, #8]
 800e9e2:	f884 800c 	strb.w	r8, [r4, #12]
 800e9e6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e9ea:	d1f3      	bne.n	800e9d4 <rmw_uxrce_init_service_memory+0x20>
 800e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop

0800e9f4 <rmw_uxrce_init_client_memory>:
 800e9f4:	b1e2      	cbz	r2, 800ea30 <rmw_uxrce_init_client_memory+0x3c>
 800e9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fa:	7b05      	ldrb	r5, [r0, #12]
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	b9ad      	cbnz	r5, 800ea2c <rmw_uxrce_init_client_memory+0x38>
 800ea00:	23c8      	movs	r3, #200	@ 0xc8
 800ea02:	e9c0 5500 	strd	r5, r5, [r0]
 800ea06:	6083      	str	r3, [r0, #8]
 800ea08:	f240 1301 	movw	r3, #257	@ 0x101
 800ea0c:	4617      	mov	r7, r2
 800ea0e:	8183      	strh	r3, [r0, #12]
 800ea10:	460c      	mov	r4, r1
 800ea12:	46a8      	mov	r8, r5
 800ea14:	4621      	mov	r1, r4
 800ea16:	4630      	mov	r0, r6
 800ea18:	3501      	adds	r5, #1
 800ea1a:	f007 fc3f 	bl	801629c <put_memory>
 800ea1e:	42af      	cmp	r7, r5
 800ea20:	60a4      	str	r4, [r4, #8]
 800ea22:	f884 800c 	strb.w	r8, [r4, #12]
 800ea26:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ea2a:	d1f3      	bne.n	800ea14 <rmw_uxrce_init_client_memory+0x20>
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop

0800ea34 <rmw_uxrce_init_publisher_memory>:
 800ea34:	b1e2      	cbz	r2, 800ea70 <rmw_uxrce_init_publisher_memory+0x3c>
 800ea36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3a:	7b05      	ldrb	r5, [r0, #12]
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	b9ad      	cbnz	r5, 800ea6c <rmw_uxrce_init_publisher_memory+0x38>
 800ea40:	23d8      	movs	r3, #216	@ 0xd8
 800ea42:	e9c0 5500 	strd	r5, r5, [r0]
 800ea46:	6083      	str	r3, [r0, #8]
 800ea48:	f240 1301 	movw	r3, #257	@ 0x101
 800ea4c:	4617      	mov	r7, r2
 800ea4e:	8183      	strh	r3, [r0, #12]
 800ea50:	460c      	mov	r4, r1
 800ea52:	46a8      	mov	r8, r5
 800ea54:	4621      	mov	r1, r4
 800ea56:	4630      	mov	r0, r6
 800ea58:	3501      	adds	r5, #1
 800ea5a:	f007 fc1f 	bl	801629c <put_memory>
 800ea5e:	42af      	cmp	r7, r5
 800ea60:	60a4      	str	r4, [r4, #8]
 800ea62:	f884 800c 	strb.w	r8, [r4, #12]
 800ea66:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ea6a:	d1f3      	bne.n	800ea54 <rmw_uxrce_init_publisher_memory+0x20>
 800ea6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop

0800ea74 <rmw_uxrce_init_subscription_memory>:
 800ea74:	b1e2      	cbz	r2, 800eab0 <rmw_uxrce_init_subscription_memory+0x3c>
 800ea76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea7a:	7b05      	ldrb	r5, [r0, #12]
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	b9ad      	cbnz	r5, 800eaac <rmw_uxrce_init_subscription_memory+0x38>
 800ea80:	23d8      	movs	r3, #216	@ 0xd8
 800ea82:	e9c0 5500 	strd	r5, r5, [r0]
 800ea86:	6083      	str	r3, [r0, #8]
 800ea88:	f240 1301 	movw	r3, #257	@ 0x101
 800ea8c:	4617      	mov	r7, r2
 800ea8e:	8183      	strh	r3, [r0, #12]
 800ea90:	460c      	mov	r4, r1
 800ea92:	46a8      	mov	r8, r5
 800ea94:	4621      	mov	r1, r4
 800ea96:	4630      	mov	r0, r6
 800ea98:	3501      	adds	r5, #1
 800ea9a:	f007 fbff 	bl	801629c <put_memory>
 800ea9e:	42af      	cmp	r7, r5
 800eaa0:	60a4      	str	r4, [r4, #8]
 800eaa2:	f884 800c 	strb.w	r8, [r4, #12]
 800eaa6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eaaa:	d1f3      	bne.n	800ea94 <rmw_uxrce_init_subscription_memory+0x20>
 800eaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop

0800eab4 <rmw_uxrce_init_node_memory>:
 800eab4:	b1e2      	cbz	r2, 800eaf0 <rmw_uxrce_init_node_memory+0x3c>
 800eab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaba:	7b05      	ldrb	r5, [r0, #12]
 800eabc:	4606      	mov	r6, r0
 800eabe:	b9ad      	cbnz	r5, 800eaec <rmw_uxrce_init_node_memory+0x38>
 800eac0:	23a4      	movs	r3, #164	@ 0xa4
 800eac2:	e9c0 5500 	strd	r5, r5, [r0]
 800eac6:	6083      	str	r3, [r0, #8]
 800eac8:	f240 1301 	movw	r3, #257	@ 0x101
 800eacc:	4617      	mov	r7, r2
 800eace:	8183      	strh	r3, [r0, #12]
 800ead0:	460c      	mov	r4, r1
 800ead2:	46a8      	mov	r8, r5
 800ead4:	4621      	mov	r1, r4
 800ead6:	4630      	mov	r0, r6
 800ead8:	3501      	adds	r5, #1
 800eada:	f007 fbdf 	bl	801629c <put_memory>
 800eade:	42af      	cmp	r7, r5
 800eae0:	60a4      	str	r4, [r4, #8]
 800eae2:	f884 800c 	strb.w	r8, [r4, #12]
 800eae6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eaea:	d1f3      	bne.n	800ead4 <rmw_uxrce_init_node_memory+0x20>
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop

0800eaf4 <rmw_uxrce_init_session_memory>:
 800eaf4:	b1ea      	cbz	r2, 800eb32 <rmw_uxrce_init_session_memory+0x3e>
 800eaf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafa:	7b05      	ldrb	r5, [r0, #12]
 800eafc:	4606      	mov	r6, r0
 800eafe:	b9b5      	cbnz	r5, 800eb2e <rmw_uxrce_init_session_memory+0x3a>
 800eb00:	e9c0 5500 	strd	r5, r5, [r0]
 800eb04:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800eb08:	f240 1301 	movw	r3, #257	@ 0x101
 800eb0c:	4617      	mov	r7, r2
 800eb0e:	f8c0 8008 	str.w	r8, [r0, #8]
 800eb12:	460c      	mov	r4, r1
 800eb14:	8183      	strh	r3, [r0, #12]
 800eb16:	46a9      	mov	r9, r5
 800eb18:	4621      	mov	r1, r4
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	3501      	adds	r5, #1
 800eb1e:	f007 fbbd 	bl	801629c <put_memory>
 800eb22:	42af      	cmp	r7, r5
 800eb24:	60a4      	str	r4, [r4, #8]
 800eb26:	f884 900c 	strb.w	r9, [r4, #12]
 800eb2a:	4444      	add	r4, r8
 800eb2c:	d1f4      	bne.n	800eb18 <rmw_uxrce_init_session_memory+0x24>
 800eb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb32:	4770      	bx	lr

0800eb34 <rmw_uxrce_init_topic_memory>:
 800eb34:	b1e2      	cbz	r2, 800eb70 <rmw_uxrce_init_topic_memory+0x3c>
 800eb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	7b05      	ldrb	r5, [r0, #12]
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	b9ad      	cbnz	r5, 800eb6c <rmw_uxrce_init_topic_memory+0x38>
 800eb40:	231c      	movs	r3, #28
 800eb42:	e9c0 5500 	strd	r5, r5, [r0]
 800eb46:	6083      	str	r3, [r0, #8]
 800eb48:	f240 1301 	movw	r3, #257	@ 0x101
 800eb4c:	4617      	mov	r7, r2
 800eb4e:	8183      	strh	r3, [r0, #12]
 800eb50:	460c      	mov	r4, r1
 800eb52:	46a8      	mov	r8, r5
 800eb54:	4621      	mov	r1, r4
 800eb56:	4630      	mov	r0, r6
 800eb58:	3501      	adds	r5, #1
 800eb5a:	f007 fb9f 	bl	801629c <put_memory>
 800eb5e:	42af      	cmp	r7, r5
 800eb60:	60a4      	str	r4, [r4, #8]
 800eb62:	f884 800c 	strb.w	r8, [r4, #12]
 800eb66:	f104 041c 	add.w	r4, r4, #28
 800eb6a:	d1f3      	bne.n	800eb54 <rmw_uxrce_init_topic_memory+0x20>
 800eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop

0800eb74 <rmw_uxrce_init_static_input_buffer_memory>:
 800eb74:	b1ea      	cbz	r2, 800ebb2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800eb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7a:	7b05      	ldrb	r5, [r0, #12]
 800eb7c:	4606      	mov	r6, r0
 800eb7e:	b9b5      	cbnz	r5, 800ebae <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800eb80:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800eb84:	e9c0 5500 	strd	r5, r5, [r0]
 800eb88:	6083      	str	r3, [r0, #8]
 800eb8a:	f240 1301 	movw	r3, #257	@ 0x101
 800eb8e:	4617      	mov	r7, r2
 800eb90:	8183      	strh	r3, [r0, #12]
 800eb92:	460c      	mov	r4, r1
 800eb94:	46a8      	mov	r8, r5
 800eb96:	4621      	mov	r1, r4
 800eb98:	4630      	mov	r0, r6
 800eb9a:	3501      	adds	r5, #1
 800eb9c:	f007 fb7e 	bl	801629c <put_memory>
 800eba0:	42af      	cmp	r7, r5
 800eba2:	60a4      	str	r4, [r4, #8]
 800eba4:	f884 800c 	strb.w	r8, [r4, #12]
 800eba8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ebac:	d1f3      	bne.n	800eb96 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ebae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb2:	4770      	bx	lr

0800ebb4 <rmw_uxrce_init_init_options_impl_memory>:
 800ebb4:	b1e2      	cbz	r2, 800ebf0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ebb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebba:	7b05      	ldrb	r5, [r0, #12]
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	b9ad      	cbnz	r5, 800ebec <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ebc0:	232c      	movs	r3, #44	@ 0x2c
 800ebc2:	e9c0 5500 	strd	r5, r5, [r0]
 800ebc6:	6083      	str	r3, [r0, #8]
 800ebc8:	f240 1301 	movw	r3, #257	@ 0x101
 800ebcc:	4617      	mov	r7, r2
 800ebce:	8183      	strh	r3, [r0, #12]
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	46a8      	mov	r8, r5
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	3501      	adds	r5, #1
 800ebda:	f007 fb5f 	bl	801629c <put_memory>
 800ebde:	42af      	cmp	r7, r5
 800ebe0:	60a4      	str	r4, [r4, #8]
 800ebe2:	f884 800c 	strb.w	r8, [r4, #12]
 800ebe6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ebea:	d1f3      	bne.n	800ebd4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ebec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop

0800ebf4 <rmw_uxrce_init_wait_set_memory>:
 800ebf4:	b1e2      	cbz	r2, 800ec30 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ebf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfa:	7b05      	ldrb	r5, [r0, #12]
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	b9ad      	cbnz	r5, 800ec2c <rmw_uxrce_init_wait_set_memory+0x38>
 800ec00:	231c      	movs	r3, #28
 800ec02:	e9c0 5500 	strd	r5, r5, [r0]
 800ec06:	6083      	str	r3, [r0, #8]
 800ec08:	f240 1301 	movw	r3, #257	@ 0x101
 800ec0c:	4617      	mov	r7, r2
 800ec0e:	8183      	strh	r3, [r0, #12]
 800ec10:	460c      	mov	r4, r1
 800ec12:	46a8      	mov	r8, r5
 800ec14:	4621      	mov	r1, r4
 800ec16:	4630      	mov	r0, r6
 800ec18:	3501      	adds	r5, #1
 800ec1a:	f007 fb3f 	bl	801629c <put_memory>
 800ec1e:	42af      	cmp	r7, r5
 800ec20:	60a4      	str	r4, [r4, #8]
 800ec22:	f884 800c 	strb.w	r8, [r4, #12]
 800ec26:	f104 041c 	add.w	r4, r4, #28
 800ec2a:	d1f3      	bne.n	800ec14 <rmw_uxrce_init_wait_set_memory+0x20>
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop

0800ec34 <rmw_uxrce_init_guard_condition_memory>:
 800ec34:	b1e2      	cbz	r2, 800ec70 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ec36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3a:	7b05      	ldrb	r5, [r0, #12]
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	b9ad      	cbnz	r5, 800ec6c <rmw_uxrce_init_guard_condition_memory+0x38>
 800ec40:	2320      	movs	r3, #32
 800ec42:	e9c0 5500 	strd	r5, r5, [r0]
 800ec46:	6083      	str	r3, [r0, #8]
 800ec48:	f240 1301 	movw	r3, #257	@ 0x101
 800ec4c:	4617      	mov	r7, r2
 800ec4e:	8183      	strh	r3, [r0, #12]
 800ec50:	460c      	mov	r4, r1
 800ec52:	46a8      	mov	r8, r5
 800ec54:	4621      	mov	r1, r4
 800ec56:	4630      	mov	r0, r6
 800ec58:	3501      	adds	r5, #1
 800ec5a:	f007 fb1f 	bl	801629c <put_memory>
 800ec5e:	42af      	cmp	r7, r5
 800ec60:	60a4      	str	r4, [r4, #8]
 800ec62:	f884 800c 	strb.w	r8, [r4, #12]
 800ec66:	f104 0420 	add.w	r4, r4, #32
 800ec6a:	d1f3      	bne.n	800ec54 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ec6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop

0800ec74 <rmw_uxrce_fini_session_memory>:
 800ec74:	4601      	mov	r1, r0
 800ec76:	4801      	ldr	r0, [pc, #4]	@ (800ec7c <rmw_uxrce_fini_session_memory+0x8>)
 800ec78:	f007 bb10 	b.w	801629c <put_memory>
 800ec7c:	2000e1f4 	.word	0x2000e1f4

0800ec80 <rmw_uxrce_fini_node_memory>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	4604      	mov	r4, r0
 800ec84:	6800      	ldr	r0, [r0, #0]
 800ec86:	b128      	cbz	r0, 800ec94 <rmw_uxrce_fini_node_memory+0x14>
 800ec88:	4b07      	ldr	r3, [pc, #28]	@ (800eca8 <rmw_uxrce_fini_node_memory+0x28>)
 800ec8a:	6819      	ldr	r1, [r3, #0]
 800ec8c:	f7f1 fac0 	bl	8000210 <strcmp>
 800ec90:	b940      	cbnz	r0, 800eca4 <rmw_uxrce_fini_node_memory+0x24>
 800ec92:	6020      	str	r0, [r4, #0]
 800ec94:	6861      	ldr	r1, [r4, #4]
 800ec96:	b129      	cbz	r1, 800eca4 <rmw_uxrce_fini_node_memory+0x24>
 800ec98:	2500      	movs	r5, #0
 800ec9a:	4804      	ldr	r0, [pc, #16]	@ (800ecac <rmw_uxrce_fini_node_memory+0x2c>)
 800ec9c:	610d      	str	r5, [r1, #16]
 800ec9e:	f007 fafd 	bl	801629c <put_memory>
 800eca2:	6065      	str	r5, [r4, #4]
 800eca4:	bd38      	pop	{r3, r4, r5, pc}
 800eca6:	bf00      	nop
 800eca8:	0801b1e0 	.word	0x0801b1e0
 800ecac:	2000e1c4 	.word	0x2000e1c4

0800ecb0 <rmw_uxrce_fini_publisher_memory>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	6800      	ldr	r0, [r0, #0]
 800ecb6:	b128      	cbz	r0, 800ecc4 <rmw_uxrce_fini_publisher_memory+0x14>
 800ecb8:	4b06      	ldr	r3, [pc, #24]	@ (800ecd4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ecba:	6819      	ldr	r1, [r3, #0]
 800ecbc:	f7f1 faa8 	bl	8000210 <strcmp>
 800ecc0:	b938      	cbnz	r0, 800ecd2 <rmw_uxrce_fini_publisher_memory+0x22>
 800ecc2:	6020      	str	r0, [r4, #0]
 800ecc4:	6861      	ldr	r1, [r4, #4]
 800ecc6:	b121      	cbz	r1, 800ecd2 <rmw_uxrce_fini_publisher_memory+0x22>
 800ecc8:	4803      	ldr	r0, [pc, #12]	@ (800ecd8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ecca:	f007 fae7 	bl	801629c <put_memory>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	bd10      	pop	{r4, pc}
 800ecd4:	0801b1e0 	.word	0x0801b1e0
 800ecd8:	2000e1d4 	.word	0x2000e1d4

0800ecdc <rmw_uxrce_fini_subscription_memory>:
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	6800      	ldr	r0, [r0, #0]
 800ece2:	b128      	cbz	r0, 800ecf0 <rmw_uxrce_fini_subscription_memory+0x14>
 800ece4:	4b06      	ldr	r3, [pc, #24]	@ (800ed00 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ece6:	6819      	ldr	r1, [r3, #0]
 800ece8:	f7f1 fa92 	bl	8000210 <strcmp>
 800ecec:	b938      	cbnz	r0, 800ecfe <rmw_uxrce_fini_subscription_memory+0x22>
 800ecee:	6020      	str	r0, [r4, #0]
 800ecf0:	6861      	ldr	r1, [r4, #4]
 800ecf2:	b121      	cbz	r1, 800ecfe <rmw_uxrce_fini_subscription_memory+0x22>
 800ecf4:	4803      	ldr	r0, [pc, #12]	@ (800ed04 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ecf6:	f007 fad1 	bl	801629c <put_memory>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	6063      	str	r3, [r4, #4]
 800ecfe:	bd10      	pop	{r4, pc}
 800ed00:	0801b1e0 	.word	0x0801b1e0
 800ed04:	2000e214 	.word	0x2000e214

0800ed08 <rmw_uxrce_fini_service_memory>:
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	6800      	ldr	r0, [r0, #0]
 800ed0e:	b128      	cbz	r0, 800ed1c <rmw_uxrce_fini_service_memory+0x14>
 800ed10:	4b06      	ldr	r3, [pc, #24]	@ (800ed2c <rmw_uxrce_fini_service_memory+0x24>)
 800ed12:	6819      	ldr	r1, [r3, #0]
 800ed14:	f7f1 fa7c 	bl	8000210 <strcmp>
 800ed18:	b938      	cbnz	r0, 800ed2a <rmw_uxrce_fini_service_memory+0x22>
 800ed1a:	6020      	str	r0, [r4, #0]
 800ed1c:	6861      	ldr	r1, [r4, #4]
 800ed1e:	b121      	cbz	r1, 800ed2a <rmw_uxrce_fini_service_memory+0x22>
 800ed20:	4803      	ldr	r0, [pc, #12]	@ (800ed30 <rmw_uxrce_fini_service_memory+0x28>)
 800ed22:	f007 fabb 	bl	801629c <put_memory>
 800ed26:	2300      	movs	r3, #0
 800ed28:	6063      	str	r3, [r4, #4]
 800ed2a:	bd10      	pop	{r4, pc}
 800ed2c:	0801b1e0 	.word	0x0801b1e0
 800ed30:	2000e1e4 	.word	0x2000e1e4

0800ed34 <rmw_uxrce_fini_client_memory>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	4604      	mov	r4, r0
 800ed38:	6800      	ldr	r0, [r0, #0]
 800ed3a:	b128      	cbz	r0, 800ed48 <rmw_uxrce_fini_client_memory+0x14>
 800ed3c:	4b06      	ldr	r3, [pc, #24]	@ (800ed58 <rmw_uxrce_fini_client_memory+0x24>)
 800ed3e:	6819      	ldr	r1, [r3, #0]
 800ed40:	f7f1 fa66 	bl	8000210 <strcmp>
 800ed44:	b938      	cbnz	r0, 800ed56 <rmw_uxrce_fini_client_memory+0x22>
 800ed46:	6020      	str	r0, [r4, #0]
 800ed48:	6861      	ldr	r1, [r4, #4]
 800ed4a:	b121      	cbz	r1, 800ed56 <rmw_uxrce_fini_client_memory+0x22>
 800ed4c:	4803      	ldr	r0, [pc, #12]	@ (800ed5c <rmw_uxrce_fini_client_memory+0x28>)
 800ed4e:	f007 faa5 	bl	801629c <put_memory>
 800ed52:	2300      	movs	r3, #0
 800ed54:	6063      	str	r3, [r4, #4]
 800ed56:	bd10      	pop	{r4, pc}
 800ed58:	0801b1e0 	.word	0x0801b1e0
 800ed5c:	200098f4 	.word	0x200098f4

0800ed60 <rmw_uxrce_fini_topic_memory>:
 800ed60:	b510      	push	{r4, lr}
 800ed62:	4604      	mov	r4, r0
 800ed64:	4621      	mov	r1, r4
 800ed66:	4803      	ldr	r0, [pc, #12]	@ (800ed74 <rmw_uxrce_fini_topic_memory+0x14>)
 800ed68:	f007 fa98 	bl	801629c <put_memory>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	61a3      	str	r3, [r4, #24]
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	bf00      	nop
 800ed74:	2000e224 	.word	0x2000e224

0800ed78 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ed78:	b082      	sub	sp, #8
 800ed7a:	b530      	push	{r4, r5, lr}
 800ed7c:	4925      	ldr	r1, [pc, #148]	@ (800ee14 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ed7e:	680d      	ldr	r5, [r1, #0]
 800ed80:	ac03      	add	r4, sp, #12
 800ed82:	e884 000c 	stmia.w	r4, {r2, r3}
 800ed86:	461c      	mov	r4, r3
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	d041      	beq.n	800ee10 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ed8c:	462b      	mov	r3, r5
 800ed8e:	2100      	movs	r1, #0
 800ed90:	689a      	ldr	r2, [r3, #8]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ed98:	4290      	cmp	r0, r2
 800ed9a:	bf08      	it	eq
 800ed9c:	3101      	addeq	r1, #1
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1f6      	bne.n	800ed90 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800eda2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d029      	beq.n	800edfe <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800edaa:	d907      	bls.n	800edbc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800edac:	2b03      	cmp	r3, #3
 800edae:	d005      	beq.n	800edbc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800edb0:	2100      	movs	r1, #0
 800edb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edb6:	4608      	mov	r0, r1
 800edb8:	b002      	add	sp, #8
 800edba:	4770      	bx	lr
 800edbc:	b314      	cbz	r4, 800ee04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800edbe:	428c      	cmp	r4, r1
 800edc0:	d820      	bhi.n	800ee04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800edc2:	2d00      	cmp	r5, #0
 800edc4:	d0f4      	beq.n	800edb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800edc6:	2100      	movs	r1, #0
 800edc8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800edcc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800edd0:	e002      	b.n	800edd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800edd2:	686d      	ldr	r5, [r5, #4]
 800edd4:	2d00      	cmp	r5, #0
 800edd6:	d0ec      	beq.n	800edb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800edd8:	68ab      	ldr	r3, [r5, #8]
 800edda:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800edde:	4290      	cmp	r0, r2
 800ede0:	d1f7      	bne.n	800edd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ede2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ede6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800edea:	4562      	cmp	r2, ip
 800edec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800edf0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800edf4:	daed      	bge.n	800edd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800edf6:	4694      	mov	ip, r2
 800edf8:	461c      	mov	r4, r3
 800edfa:	4629      	mov	r1, r5
 800edfc:	e7e9      	b.n	800edd2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800edfe:	b10c      	cbz	r4, 800ee04 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ee00:	428c      	cmp	r4, r1
 800ee02:	d9d5      	bls.n	800edb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ee04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee08:	4802      	ldr	r0, [pc, #8]	@ (800ee14 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ee0a:	b002      	add	sp, #8
 800ee0c:	f007 ba36 	b.w	801627c <get_memory>
 800ee10:	4629      	mov	r1, r5
 800ee12:	e7c6      	b.n	800eda2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ee14:	2000e204 	.word	0x2000e204

0800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ee18:	4b11      	ldr	r3, [pc, #68]	@ (800ee60 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	b530      	push	{r4, r5, lr}
 800ee1e:	b1e3      	cbz	r3, 800ee5a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ee20:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ee24:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ee28:	2400      	movs	r4, #0
 800ee2a:	e001      	b.n	800ee30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	b193      	cbz	r3, 800ee56 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ee30:	689a      	ldr	r2, [r3, #8]
 800ee32:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ee36:	4288      	cmp	r0, r1
 800ee38:	d1f8      	bne.n	800ee2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ee3a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ee3e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ee42:	4571      	cmp	r1, lr
 800ee44:	eb72 050c 	sbcs.w	r5, r2, ip
 800ee48:	daf0      	bge.n	800ee2c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ee4a:	461c      	mov	r4, r3
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	468e      	mov	lr, r1
 800ee50:	4694      	mov	ip, r2
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1ec      	bne.n	800ee30 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ee56:	4620      	mov	r0, r4
 800ee58:	bd30      	pop	{r4, r5, pc}
 800ee5a:	461c      	mov	r4, r3
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	bd30      	pop	{r4, r5, pc}
 800ee60:	2000e204 	.word	0x2000e204
 800ee64:	00000000 	.word	0x00000000

0800ee68 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	4b3c      	ldr	r3, [pc, #240]	@ (800ef60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ee6e:	ed2d 8b06 	vpush	{d8-d10}
 800ee72:	681f      	ldr	r7, [r3, #0]
 800ee74:	b08d      	sub	sp, #52	@ 0x34
 800ee76:	f7ff fd8f 	bl	800e998 <rmw_uros_epoch_nanos>
 800ee7a:	2f00      	cmp	r7, #0
 800ee7c:	d05d      	beq.n	800ef3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ee7e:	46b8      	mov	r8, r7
 800ee80:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800ef48 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ee84:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee88:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ee8c:	2b04      	cmp	r3, #4
 800ee8e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ef50 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ee92:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ef58 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ee96:	4681      	mov	r9, r0
 800ee98:	468a      	mov	sl, r1
 800ee9a:	ac04      	add	r4, sp, #16
 800ee9c:	d03f      	beq.n	800ef1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ee9e:	2b05      	cmp	r3, #5
 800eea0:	d044      	beq.n	800ef2c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	d03b      	beq.n	800ef1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800eea6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eeaa:	ed8d ab06 	vstr	d10, [sp, #24]
 800eeae:	ed8d 8b08 	vstr	d8, [sp, #32]
 800eeb2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800eeb6:	ab08      	add	r3, sp, #32
 800eeb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eeba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800eebe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eec2:	f007 f8e1 	bl	8016088 <rmw_time_equal>
 800eec6:	b118      	cbz	r0, 800eed0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800eec8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800eecc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eed0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eed4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800eed8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800eedc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800eee0:	f007 f926 	bl	8016130 <rmw_time_total_nsec>
 800eee4:	1830      	adds	r0, r6, r0
 800eee6:	eb47 0101 	adc.w	r1, r7, r1
 800eeea:	4548      	cmp	r0, r9
 800eeec:	eb71 030a 	sbcs.w	r3, r1, sl
 800eef0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800eef4:	db05      	blt.n	800ef02 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800eef6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800eefa:	4591      	cmp	r9, r2
 800eefc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ef00:	da03      	bge.n	800ef0a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ef02:	4817      	ldr	r0, [pc, #92]	@ (800ef60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ef04:	4641      	mov	r1, r8
 800ef06:	f007 f9c9 	bl	801629c <put_memory>
 800ef0a:	f1bb 0f00 	cmp.w	fp, #0
 800ef0e:	d014      	beq.n	800ef3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ef10:	46d8      	mov	r8, fp
 800ef12:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ef16:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ef1a:	2b04      	cmp	r3, #4
 800ef1c:	d1bf      	bne.n	800ee9e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ef1e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ef22:	3340      	adds	r3, #64	@ 0x40
 800ef24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ef2a:	e7c0      	b.n	800eeae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ef2c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ef30:	3348      	adds	r3, #72	@ 0x48
 800ef32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ef38:	e7b9      	b.n	800eeae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ef3a:	b00d      	add	sp, #52	@ 0x34
 800ef3c:	ecbd 8b06 	vpop	{d8-d10}
 800ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef44:	f3af 8000 	nop.w
	...
 800ef50:	00000001 	.word	0x00000001
 800ef54:	00000000 	.word	0x00000000
 800ef58:	0000001e 	.word	0x0000001e
 800ef5c:	00000000 	.word	0x00000000
 800ef60:	2000e204 	.word	0x2000e204

0800ef64 <run_xrce_session>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	788c      	ldrb	r4, [r1, #2]
 800ef68:	b086      	sub	sp, #24
 800ef6a:	2c01      	cmp	r4, #1
 800ef6c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ef70:	d00c      	beq.n	800ef8c <run_xrce_session+0x28>
 800ef72:	4619      	mov	r1, r3
 800ef74:	2301      	movs	r3, #1
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	f10d 020e 	add.w	r2, sp, #14
 800ef7c:	f10d 0317 	add.w	r3, sp, #23
 800ef80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef84:	f001 ff0e 	bl	8010da4 <uxr_run_session_until_all_status>
 800ef88:	b006      	add	sp, #24
 800ef8a:	bd10      	pop	{r4, pc}
 800ef8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef90:	f001 fb22 	bl	80105d8 <uxr_flash_output_streams>
 800ef94:	4620      	mov	r0, r4
 800ef96:	b006      	add	sp, #24
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	bf00      	nop

0800ef9c <convert_qos_profile>:
 800ef9c:	7a4a      	ldrb	r2, [r1, #9]
 800ef9e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800efa2:	2a02      	cmp	r2, #2
 800efa4:	bf18      	it	ne
 800efa6:	2200      	movne	r2, #0
 800efa8:	7002      	strb	r2, [r0, #0]
 800efaa:	780a      	ldrb	r2, [r1, #0]
 800efac:	8889      	ldrh	r1, [r1, #4]
 800efae:	8081      	strh	r1, [r0, #4]
 800efb0:	f1ac 0c02 	sub.w	ip, ip, #2
 800efb4:	f1a2 0202 	sub.w	r2, r2, #2
 800efb8:	fabc fc8c 	clz	ip, ip
 800efbc:	fab2 f282 	clz	r2, r2
 800efc0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800efc4:	0952      	lsrs	r2, r2, #5
 800efc6:	f880 c001 	strb.w	ip, [r0, #1]
 800efca:	7082      	strb	r2, [r0, #2]
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop

0800efd0 <generate_type_name>:
 800efd0:	b530      	push	{r4, r5, lr}
 800efd2:	2300      	movs	r3, #0
 800efd4:	700b      	strb	r3, [r1, #0]
 800efd6:	6803      	ldr	r3, [r0, #0]
 800efd8:	b087      	sub	sp, #28
 800efda:	4614      	mov	r4, r2
 800efdc:	b1d3      	cbz	r3, 800f014 <generate_type_name+0x44>
 800efde:	4a0f      	ldr	r2, [pc, #60]	@ (800f01c <generate_type_name+0x4c>)
 800efe0:	4615      	mov	r5, r2
 800efe2:	9203      	str	r2, [sp, #12]
 800efe4:	9500      	str	r5, [sp, #0]
 800efe6:	6842      	ldr	r2, [r0, #4]
 800efe8:	480d      	ldr	r0, [pc, #52]	@ (800f020 <generate_type_name+0x50>)
 800efea:	9001      	str	r0, [sp, #4]
 800efec:	4608      	mov	r0, r1
 800efee:	490d      	ldr	r1, [pc, #52]	@ (800f024 <generate_type_name+0x54>)
 800eff0:	9204      	str	r2, [sp, #16]
 800eff2:	9105      	str	r1, [sp, #20]
 800eff4:	9102      	str	r1, [sp, #8]
 800eff6:	4a0c      	ldr	r2, [pc, #48]	@ (800f028 <generate_type_name+0x58>)
 800eff8:	4621      	mov	r1, r4
 800effa:	f00a f87f 	bl	80190fc <sniprintf>
 800effe:	2800      	cmp	r0, #0
 800f000:	db05      	blt.n	800f00e <generate_type_name+0x3e>
 800f002:	4284      	cmp	r4, r0
 800f004:	bfd4      	ite	le
 800f006:	2000      	movle	r0, #0
 800f008:	2001      	movgt	r0, #1
 800f00a:	b007      	add	sp, #28
 800f00c:	bd30      	pop	{r4, r5, pc}
 800f00e:	2000      	movs	r0, #0
 800f010:	b007      	add	sp, #28
 800f012:	bd30      	pop	{r4, r5, pc}
 800f014:	4b05      	ldr	r3, [pc, #20]	@ (800f02c <generate_type_name+0x5c>)
 800f016:	4a01      	ldr	r2, [pc, #4]	@ (800f01c <generate_type_name+0x4c>)
 800f018:	461d      	mov	r5, r3
 800f01a:	e7e2      	b.n	800efe2 <generate_type_name+0x12>
 800f01c:	0801ab7c 	.word	0x0801ab7c
 800f020:	0801ab94 	.word	0x0801ab94
 800f024:	0801ab90 	.word	0x0801ab90
 800f028:	0801ab80 	.word	0x0801ab80
 800f02c:	0801b230 	.word	0x0801b230

0800f030 <generate_topic_name>:
 800f030:	b510      	push	{r4, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	4614      	mov	r4, r2
 800f036:	9000      	str	r0, [sp, #0]
 800f038:	4b08      	ldr	r3, [pc, #32]	@ (800f05c <generate_topic_name+0x2c>)
 800f03a:	4a09      	ldr	r2, [pc, #36]	@ (800f060 <generate_topic_name+0x30>)
 800f03c:	4608      	mov	r0, r1
 800f03e:	4621      	mov	r1, r4
 800f040:	f00a f85c 	bl	80190fc <sniprintf>
 800f044:	2800      	cmp	r0, #0
 800f046:	db05      	blt.n	800f054 <generate_topic_name+0x24>
 800f048:	4284      	cmp	r4, r0
 800f04a:	bfd4      	ite	le
 800f04c:	2000      	movle	r0, #0
 800f04e:	2001      	movgt	r0, #1
 800f050:	b002      	add	sp, #8
 800f052:	bd10      	pop	{r4, pc}
 800f054:	2000      	movs	r0, #0
 800f056:	b002      	add	sp, #8
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	bf00      	nop
 800f05c:	0801ab98 	.word	0x0801ab98
 800f060:	0801a620 	.word	0x0801a620

0800f064 <is_uxrce_rmw_identifier_valid>:
 800f064:	b510      	push	{r4, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	b140      	cbz	r0, 800f07c <is_uxrce_rmw_identifier_valid+0x18>
 800f06a:	f007 f96f 	bl	801634c <rmw_get_implementation_identifier>
 800f06e:	4601      	mov	r1, r0
 800f070:	4620      	mov	r0, r4
 800f072:	f7f1 f8cd 	bl	8000210 <strcmp>
 800f076:	fab0 f080 	clz	r0, r0
 800f07a:	0940      	lsrs	r0, r0, #5
 800f07c:	bd10      	pop	{r4, pc}
 800f07e:	bf00      	nop

0800f080 <get_message_typesupport_handle>:
 800f080:	6883      	ldr	r3, [r0, #8]
 800f082:	4718      	bx	r3

0800f084 <get_message_typesupport_handle_function>:
 800f084:	b510      	push	{r4, lr}
 800f086:	4604      	mov	r4, r0
 800f088:	6800      	ldr	r0, [r0, #0]
 800f08a:	f7f1 f8c1 	bl	8000210 <strcmp>
 800f08e:	2800      	cmp	r0, #0
 800f090:	bf0c      	ite	eq
 800f092:	4620      	moveq	r0, r4
 800f094:	2000      	movne	r0, #0
 800f096:	bd10      	pop	{r4, pc}

0800f098 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	6805      	ldr	r5, [r0, #0]
 800f09e:	4604      	mov	r4, r0
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	460e      	mov	r6, r1
 800f0a4:	f7f1 f8b4 	bl	8000210 <strcmp>
 800f0a8:	b1c8      	cbz	r0, 800f0de <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f0aa:	4b11      	ldr	r3, [pc, #68]	@ (800f0f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	429d      	cmp	r5, r3
 800f0b0:	d112      	bne.n	800f0d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f0b2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f0b6:	f8d8 4000 	ldr.w	r4, [r8]
 800f0ba:	b16c      	cbz	r4, 800f0d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f0bc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f0c0:	2700      	movs	r7, #0
 800f0c2:	3d04      	subs	r5, #4
 800f0c4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	f7f1 f8a1 	bl	8000210 <strcmp>
 800f0ce:	00bb      	lsls	r3, r7, #2
 800f0d0:	b140      	cbz	r0, 800f0e4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f0d2:	3701      	adds	r7, #1
 800f0d4:	42bc      	cmp	r4, r7
 800f0d6:	d1f5      	bne.n	800f0c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f0d8:	2000      	movs	r0, #0
 800f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0de:	4620      	mov	r0, r4
 800f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ec:	58d3      	ldr	r3, [r2, r3]
 800f0ee:	4718      	bx	r3
 800f0f0:	200001d0 	.word	0x200001d0

0800f0f4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f0f4:	4b04      	ldr	r3, [pc, #16]	@ (800f108 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	b10a      	cbz	r2, 800f0fe <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xa>
 800f0fa:	4803      	ldr	r0, [pc, #12]	@ (800f108 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800f0fc:	4770      	bx	lr
 800f0fe:	4a03      	ldr	r2, [pc, #12]	@ (800f10c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x18>)
 800f100:	4801      	ldr	r0, [pc, #4]	@ (800f108 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800f102:	6812      	ldr	r2, [r2, #0]
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	4770      	bx	lr
 800f108:	200001e0 	.word	0x200001e0
 800f10c:	200001d0 	.word	0x200001d0

0800f110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f110:	4a02      	ldr	r2, [pc, #8]	@ (800f11c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xc>)
 800f112:	4b03      	ldr	r3, [pc, #12]	@ (800f120 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x10>)
 800f114:	6812      	ldr	r2, [r2, #0]
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	200001d0 	.word	0x200001d0
 800f120:	200001e0 	.word	0x200001e0

0800f124 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__name>:
 800f124:	6840      	ldr	r0, [r0, #4]
 800f126:	4770      	bx	lr

0800f128 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__name>:
 800f128:	6800      	ldr	r0, [r0, #0]
 800f12a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f12e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f132:	4770      	bx	lr

0800f134 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__name>:
 800f134:	6803      	ldr	r3, [r0, #0]
 800f136:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f13a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f13e:	4613      	mov	r3, r2
 800f140:	c907      	ldmia	r1, {r0, r1, r2}
 800f142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f146:	4770      	bx	lr

0800f148 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__name>:
 800f148:	4603      	mov	r3, r0
 800f14a:	468c      	mov	ip, r1
 800f14c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800f154:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800f158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop

0800f160 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__position>:
 800f160:	6840      	ldr	r0, [r0, #4]
 800f162:	4770      	bx	lr

0800f164 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__position>:
 800f164:	6800      	ldr	r0, [r0, #0]
 800f166:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f16a:	4770      	bx	lr

0800f16c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__position>:
 800f16c:	6803      	ldr	r3, [r0, #0]
 800f16e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f176:	e9c2 0100 	strd	r0, r1, [r2]
 800f17a:	4770      	bx	lr

0800f17c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__position>:
 800f17c:	6803      	ldr	r3, [r0, #0]
 800f17e:	ed92 7b00 	vldr	d7, [r2]
 800f182:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f186:	ed81 7b00 	vstr	d7, [r1]
 800f18a:	4770      	bx	lr

0800f18c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_init_function>:
 800f18c:	f008 b874 	b.w	8017278 <sensor_msgs__msg__JointState__init>

0800f190 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_fini_function>:
 800f190:	f008 b8e4 	b.w	801735c <sensor_msgs__msg__JointState__fini>

0800f194 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__name>:
 800f194:	b510      	push	{r4, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	4604      	mov	r4, r0
 800f19a:	9101      	str	r1, [sp, #4]
 800f19c:	f008 f804 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 800f1a0:	9901      	ldr	r1, [sp, #4]
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	b002      	add	sp, #8
 800f1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1aa:	f007 bfb5 	b.w	8017118 <rosidl_runtime_c__String__Sequence__init>
 800f1ae:	bf00      	nop

0800f1b0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__position>:
 800f1b0:	b510      	push	{r4, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	9101      	str	r1, [sp, #4]
 800f1b8:	f007 ff3c 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 800f1bc:	9901      	ldr	r1, [sp, #4]
 800f1be:	4620      	mov	r0, r4
 800f1c0:	b002      	add	sp, #8
 800f1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1c6:	f007 bf1d 	b.w	8017004 <rosidl_runtime_c__double__Sequence__init>
 800f1ca:	bf00      	nop

0800f1cc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__effort>:
 800f1cc:	6840      	ldr	r0, [r0, #4]
 800f1ce:	4770      	bx	lr

0800f1d0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__velocity>:
 800f1d0:	6840      	ldr	r0, [r0, #4]
 800f1d2:	4770      	bx	lr

0800f1d4 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__effort>:
 800f1d4:	6800      	ldr	r0, [r0, #0]
 800f1d6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f1da:	4770      	bx	lr

0800f1dc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__effort>:
 800f1dc:	6800      	ldr	r0, [r0, #0]
 800f1de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f1e2:	4770      	bx	lr

0800f1e4 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__velocity>:
 800f1e4:	6800      	ldr	r0, [r0, #0]
 800f1e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f1ea:	4770      	bx	lr

0800f1ec <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__name>:
 800f1ec:	6800      	ldr	r0, [r0, #0]
 800f1ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f1f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f1f6:	4770      	bx	lr

0800f1f8 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__position>:
 800f1f8:	6800      	ldr	r0, [r0, #0]
 800f1fa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f1fe:	4770      	bx	lr

0800f200 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__velocity>:
 800f200:	6800      	ldr	r0, [r0, #0]
 800f202:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f206:	4770      	bx	lr

0800f208 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__effort>:
 800f208:	6803      	ldr	r3, [r0, #0]
 800f20a:	ed92 7b00 	vldr	d7, [r2]
 800f20e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f212:	ed81 7b00 	vstr	d7, [r1]
 800f216:	4770      	bx	lr

0800f218 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__effort>:
 800f218:	6803      	ldr	r3, [r0, #0]
 800f21a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f222:	e9c2 0100 	strd	r0, r1, [r2]
 800f226:	4770      	bx	lr

0800f228 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__velocity>:
 800f228:	6803      	ldr	r3, [r0, #0]
 800f22a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f232:	e9c2 0100 	strd	r0, r1, [r2]
 800f236:	4770      	bx	lr

0800f238 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__velocity>:
 800f238:	6803      	ldr	r3, [r0, #0]
 800f23a:	ed92 7b00 	vldr	d7, [r2]
 800f23e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f242:	ed81 7b00 	vstr	d7, [r1]
 800f246:	4770      	bx	lr

0800f248 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__effort>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	4604      	mov	r4, r0
 800f24e:	9101      	str	r1, [sp, #4]
 800f250:	f007 fef0 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 800f254:	9901      	ldr	r1, [sp, #4]
 800f256:	4620      	mov	r0, r4
 800f258:	b002      	add	sp, #8
 800f25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f25e:	f007 bed1 	b.w	8017004 <rosidl_runtime_c__double__Sequence__init>
 800f262:	bf00      	nop

0800f264 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__velocity>:
 800f264:	b510      	push	{r4, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	4604      	mov	r4, r0
 800f26a:	9101      	str	r1, [sp, #4]
 800f26c:	f007 fee2 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 800f270:	9901      	ldr	r1, [sp, #4]
 800f272:	4620      	mov	r0, r4
 800f274:	b002      	add	sp, #8
 800f276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f27a:	f007 bec3 	b.w	8017004 <rosidl_runtime_c__double__Sequence__init>
 800f27e:	bf00      	nop

0800f280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f280:	b508      	push	{r3, lr}
 800f282:	f000 f983 	bl	800f58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f286:	4b06      	ldr	r3, [pc, #24]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800f288:	4906      	ldr	r1, [pc, #24]	@ (800f2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x24>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	60c8      	str	r0, [r1, #12]
 800f28e:	b10a      	cbz	r2, 800f294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>
 800f290:	4803      	ldr	r0, [pc, #12]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800f292:	bd08      	pop	{r3, pc}
 800f294:	4a04      	ldr	r2, [pc, #16]	@ (800f2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x28>)
 800f296:	4802      	ldr	r0, [pc, #8]	@ (800f2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800f298:	6812      	ldr	r2, [r2, #0]
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	bd08      	pop	{r3, pc}
 800f29e:	bf00      	nop
 800f2a0:	20000318 	.word	0x20000318
 800f2a4:	200001ec 	.word	0x200001ec
 800f2a8:	200001d4 	.word	0x200001d4

0800f2ac <_JointState__max_serialized_size>:
 800f2ac:	b500      	push	{lr}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	f10d 0007 	add.w	r0, sp, #7
 800f2b8:	f88d 3007 	strb.w	r3, [sp, #7]
 800f2bc:	f000 fa02 	bl	800f6c4 <max_serialized_size_std_msgs__msg__Header>
 800f2c0:	b003      	add	sp, #12
 800f2c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2c6:	bf00      	nop

0800f2c8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800f2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	4688      	mov	r8, r1
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	f000 f980 	bl	800f5d4 <get_serialized_size_std_msgs__msg__Header>
 800f2d4:	eb08 0400 	add.w	r4, r8, r0
 800f2d8:	4620      	mov	r0, r4
 800f2da:	2104      	movs	r1, #4
 800f2dc:	69b7      	ldr	r7, [r6, #24]
 800f2de:	f7fc fb4b 	bl	800b978 <ucdr_alignment>
 800f2e2:	3004      	adds	r0, #4
 800f2e4:	4404      	add	r4, r0
 800f2e6:	b18f      	cbz	r7, 800f30c <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x44>
 800f2e8:	2500      	movs	r5, #0
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	2104      	movs	r1, #4
 800f2ee:	f7fc fb43 	bl	800b978 <ucdr_alignment>
 800f2f2:	6973      	ldr	r3, [r6, #20]
 800f2f4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800f2f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f2fc:	4420      	add	r0, r4
 800f2fe:	3501      	adds	r5, #1
 800f300:	685c      	ldr	r4, [r3, #4]
 800f302:	42af      	cmp	r7, r5
 800f304:	f100 0305 	add.w	r3, r0, #5
 800f308:	441c      	add	r4, r3
 800f30a:	d1ee      	bne.n	800f2ea <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800f30c:	4620      	mov	r0, r4
 800f30e:	2104      	movs	r1, #4
 800f310:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 800f312:	f7fc fb31 	bl	800b978 <ucdr_alignment>
 800f316:	4420      	add	r0, r4
 800f318:	1d04      	adds	r4, r0, #4
 800f31a:	b99d      	cbnz	r5, 800f344 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x7c>
 800f31c:	4620      	mov	r0, r4
 800f31e:	2104      	movs	r1, #4
 800f320:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800f322:	f7fc fb29 	bl	800b978 <ucdr_alignment>
 800f326:	4404      	add	r4, r0
 800f328:	3404      	adds	r4, #4
 800f32a:	b9f5      	cbnz	r5, 800f36a <get_serialized_size_sensor_msgs__msg__JointState.part.0+0xa2>
 800f32c:	4620      	mov	r0, r4
 800f32e:	2104      	movs	r1, #4
 800f330:	6bf5      	ldr	r5, [r6, #60]	@ 0x3c
 800f332:	f7fc fb21 	bl	800b978 <ucdr_alignment>
 800f336:	4404      	add	r4, r0
 800f338:	3404      	adds	r4, #4
 800f33a:	b95d      	cbnz	r5, 800f354 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x8c>
 800f33c:	eba4 0008 	sub.w	r0, r4, r8
 800f340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f344:	4620      	mov	r0, r4
 800f346:	2108      	movs	r1, #8
 800f348:	f7fc fb16 	bl	800b978 <ucdr_alignment>
 800f34c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f350:	4404      	add	r4, r0
 800f352:	e7e3      	b.n	800f31c <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x54>
 800f354:	4620      	mov	r0, r4
 800f356:	2108      	movs	r1, #8
 800f358:	f7fc fb0e 	bl	800b978 <ucdr_alignment>
 800f35c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f360:	4404      	add	r4, r0
 800f362:	eba4 0008 	sub.w	r0, r4, r8
 800f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36a:	4620      	mov	r0, r4
 800f36c:	2108      	movs	r1, #8
 800f36e:	f7fc fb03 	bl	800b978 <ucdr_alignment>
 800f372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f376:	4404      	add	r4, r0
 800f378:	e7d8      	b.n	800f32c <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x64>
 800f37a:	bf00      	nop

0800f37c <get_serialized_size_sensor_msgs__msg__JointState>:
 800f37c:	b108      	cbz	r0, 800f382 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800f37e:	f7ff bfa3 	b.w	800f2c8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800f382:	4770      	bx	lr

0800f384 <_JointState__get_serialized_size>:
 800f384:	b110      	cbz	r0, 800f38c <_JointState__get_serialized_size+0x8>
 800f386:	2100      	movs	r1, #0
 800f388:	f7ff bf9e 	b.w	800f2c8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop

0800f390 <_JointState__cdr_deserialize>:
 800f390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f394:	460d      	mov	r5, r1
 800f396:	b083      	sub	sp, #12
 800f398:	2900      	cmp	r1, #0
 800f39a:	d075      	beq.n	800f488 <_JointState__cdr_deserialize+0xf8>
 800f39c:	4606      	mov	r6, r0
 800f39e:	f000 f99b 	bl	800f6d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f3a2:	6843      	ldr	r3, [r0, #4]
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	4798      	blx	r3
 800f3ac:	4669      	mov	r1, sp
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f7fb fb42 	bl	800aa38 <ucdr_deserialize_uint32_t>
 800f3b4:	9900      	ldr	r1, [sp, #0]
 800f3b6:	69eb      	ldr	r3, [r5, #28]
 800f3b8:	428b      	cmp	r3, r1
 800f3ba:	d34f      	bcc.n	800f45c <_JointState__cdr_deserialize+0xcc>
 800f3bc:	61a9      	str	r1, [r5, #24]
 800f3be:	f10d 0804 	add.w	r8, sp, #4
 800f3c2:	b330      	cbz	r0, 800f412 <_JointState__cdr_deserialize+0x82>
 800f3c4:	2400      	movs	r4, #0
 800f3c6:	f10d 0804 	add.w	r8, sp, #4
 800f3ca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f3ce:	428c      	cmp	r4, r1
 800f3d0:	4643      	mov	r3, r8
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800f3d8:	d21b      	bcs.n	800f412 <_JointState__cdr_deserialize+0x82>
 800f3da:	6969      	ldr	r1, [r5, #20]
 800f3dc:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800f3e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f3e4:	f8dc 9008 	ldr.w	r9, [ip, #8]
 800f3e8:	464a      	mov	r2, r9
 800f3ea:	3401      	adds	r4, #1
 800f3ec:	f000 fa3a 	bl	800f864 <ucdr_deserialize_sequence_char>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d038      	beq.n	800f466 <_JointState__cdr_deserialize+0xd6>
 800f3f4:	9a01      	ldr	r2, [sp, #4]
 800f3f6:	b102      	cbz	r2, 800f3fa <_JointState__cdr_deserialize+0x6a>
 800f3f8:	3a01      	subs	r2, #1
 800f3fa:	696b      	ldr	r3, [r5, #20]
 800f3fc:	9900      	ldr	r1, [sp, #0]
 800f3fe:	443b      	add	r3, r7
 800f400:	428c      	cmp	r4, r1
 800f402:	605a      	str	r2, [r3, #4]
 800f404:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f408:	4643      	mov	r3, r8
 800f40a:	4630      	mov	r0, r6
 800f40c:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800f410:	d3e3      	bcc.n	800f3da <_JointState__cdr_deserialize+0x4a>
 800f412:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800f414:	6a29      	ldr	r1, [r5, #32]
 800f416:	4643      	mov	r3, r8
 800f418:	4622      	mov	r2, r4
 800f41a:	4630      	mov	r0, r6
 800f41c:	f000 fa7a 	bl	800f914 <ucdr_deserialize_sequence_double>
 800f420:	9b01      	ldr	r3, [sp, #4]
 800f422:	2800      	cmp	r0, #0
 800f424:	d055      	beq.n	800f4d2 <_JointState__cdr_deserialize+0x142>
 800f426:	626b      	str	r3, [r5, #36]	@ 0x24
 800f428:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 800f42a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800f42c:	4643      	mov	r3, r8
 800f42e:	4622      	mov	r2, r4
 800f430:	4630      	mov	r0, r6
 800f432:	f000 fa6f 	bl	800f914 <ucdr_deserialize_sequence_double>
 800f436:	9b01      	ldr	r3, [sp, #4]
 800f438:	2800      	cmp	r0, #0
 800f43a:	d03a      	beq.n	800f4b2 <_JointState__cdr_deserialize+0x122>
 800f43c:	632b      	str	r3, [r5, #48]	@ 0x30
 800f43e:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
 800f440:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800f442:	4643      	mov	r3, r8
 800f444:	463a      	mov	r2, r7
 800f446:	4630      	mov	r0, r6
 800f448:	f000 fa64 	bl	800f914 <ucdr_deserialize_sequence_double>
 800f44c:	9b01      	ldr	r3, [sp, #4]
 800f44e:	4604      	mov	r4, r0
 800f450:	b1f8      	cbz	r0, 800f492 <_JointState__cdr_deserialize+0x102>
 800f452:	4620      	mov	r0, r4
 800f454:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800f456:	b003      	add	sp, #12
 800f458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f45c:	2400      	movs	r4, #0
 800f45e:	4620      	mov	r0, r4
 800f460:	b003      	add	sp, #12
 800f462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f466:	9b01      	ldr	r3, [sp, #4]
 800f468:	4599      	cmp	r9, r3
 800f46a:	d2d2      	bcs.n	800f412 <_JointState__cdr_deserialize+0x82>
 800f46c:	2101      	movs	r1, #1
 800f46e:	7571      	strb	r1, [r6, #21]
 800f470:	696b      	ldr	r3, [r5, #20]
 800f472:	75b0      	strb	r0, [r6, #22]
 800f474:	443b      	add	r3, r7
 800f476:	6058      	str	r0, [r3, #4]
 800f478:	4630      	mov	r0, r6
 800f47a:	f7fc fa93 	bl	800b9a4 <ucdr_align_to>
 800f47e:	9901      	ldr	r1, [sp, #4]
 800f480:	4630      	mov	r0, r6
 800f482:	f7fc fac5 	bl	800ba10 <ucdr_advance_buffer>
 800f486:	e7c4      	b.n	800f412 <_JointState__cdr_deserialize+0x82>
 800f488:	460c      	mov	r4, r1
 800f48a:	4620      	mov	r0, r4
 800f48c:	b003      	add	sp, #12
 800f48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f492:	429f      	cmp	r7, r3
 800f494:	d2e3      	bcs.n	800f45e <_JointState__cdr_deserialize+0xce>
 800f496:	2301      	movs	r3, #1
 800f498:	75b0      	strb	r0, [r6, #22]
 800f49a:	7573      	strb	r3, [r6, #21]
 800f49c:	4630      	mov	r0, r6
 800f49e:	63ec      	str	r4, [r5, #60]	@ 0x3c
 800f4a0:	2108      	movs	r1, #8
 800f4a2:	f7fc fa7f 	bl	800b9a4 <ucdr_align_to>
 800f4a6:	9901      	ldr	r1, [sp, #4]
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	00c9      	lsls	r1, r1, #3
 800f4ac:	f7fc fab0 	bl	800ba10 <ucdr_advance_buffer>
 800f4b0:	e7d5      	b.n	800f45e <_JointState__cdr_deserialize+0xce>
 800f4b2:	429c      	cmp	r4, r3
 800f4b4:	d2c3      	bcs.n	800f43e <_JointState__cdr_deserialize+0xae>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	75b0      	strb	r0, [r6, #22]
 800f4ba:	7573      	strb	r3, [r6, #21]
 800f4bc:	2108      	movs	r1, #8
 800f4be:	6328      	str	r0, [r5, #48]	@ 0x30
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7fc fa6f 	bl	800b9a4 <ucdr_align_to>
 800f4c6:	9901      	ldr	r1, [sp, #4]
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	00c9      	lsls	r1, r1, #3
 800f4cc:	f7fc faa0 	bl	800ba10 <ucdr_advance_buffer>
 800f4d0:	e7b5      	b.n	800f43e <_JointState__cdr_deserialize+0xae>
 800f4d2:	429c      	cmp	r4, r3
 800f4d4:	d2a8      	bcs.n	800f428 <_JointState__cdr_deserialize+0x98>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	75b0      	strb	r0, [r6, #22]
 800f4da:	7573      	strb	r3, [r6, #21]
 800f4dc:	2108      	movs	r1, #8
 800f4de:	6268      	str	r0, [r5, #36]	@ 0x24
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f7fc fa5f 	bl	800b9a4 <ucdr_align_to>
 800f4e6:	9901      	ldr	r1, [sp, #4]
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	00c9      	lsls	r1, r1, #3
 800f4ec:	f7fc fa90 	bl	800ba10 <ucdr_advance_buffer>
 800f4f0:	e79a      	b.n	800f428 <_JointState__cdr_deserialize+0x98>
 800f4f2:	bf00      	nop

0800f4f4 <_JointState__cdr_serialize>:
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d040      	beq.n	800f57a <_JointState__cdr_serialize+0x86>
 800f4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4fc:	460f      	mov	r7, r1
 800f4fe:	4606      	mov	r6, r0
 800f500:	f000 f8ea 	bl	800f6d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f504:	6843      	ldr	r3, [r0, #4]
 800f506:	4639      	mov	r1, r7
 800f508:	689b      	ldr	r3, [r3, #8]
 800f50a:	4630      	mov	r0, r6
 800f50c:	4798      	blx	r3
 800f50e:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800f512:	4638      	mov	r0, r7
 800f514:	4641      	mov	r1, r8
 800f516:	f7fb f95f 	bl	800a7d8 <ucdr_serialize_uint32_t>
 800f51a:	b1e8      	cbz	r0, 800f558 <_JointState__cdr_serialize+0x64>
 800f51c:	f1b8 0f00 	cmp.w	r8, #0
 800f520:	d01a      	beq.n	800f558 <_JointState__cdr_serialize+0x64>
 800f522:	2400      	movs	r4, #0
 800f524:	e00c      	b.n	800f540 <_JointState__cdr_serialize+0x4c>
 800f526:	f7f0 fe7d 	bl	8000224 <strlen>
 800f52a:	1c42      	adds	r2, r0, #1
 800f52c:	f8c9 0004 	str.w	r0, [r9, #4]
 800f530:	4629      	mov	r1, r5
 800f532:	4638      	mov	r0, r7
 800f534:	f000 f984 	bl	800f840 <ucdr_serialize_sequence_char>
 800f538:	3401      	adds	r4, #1
 800f53a:	b168      	cbz	r0, 800f558 <_JointState__cdr_serialize+0x64>
 800f53c:	45a0      	cmp	r8, r4
 800f53e:	d00b      	beq.n	800f558 <_JointState__cdr_serialize+0x64>
 800f540:	6973      	ldr	r3, [r6, #20]
 800f542:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f546:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800f54a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f54e:	4628      	mov	r0, r5
 800f550:	2d00      	cmp	r5, #0
 800f552:	d1e8      	bne.n	800f526 <_JointState__cdr_serialize+0x32>
 800f554:	462a      	mov	r2, r5
 800f556:	e7e9      	b.n	800f52c <_JointState__cdr_serialize+0x38>
 800f558:	e9d6 1208 	ldrd	r1, r2, [r6, #32]
 800f55c:	4638      	mov	r0, r7
 800f55e:	f000 f9c7 	bl	800f8f0 <ucdr_serialize_sequence_double>
 800f562:	e9d6 120b 	ldrd	r1, r2, [r6, #44]	@ 0x2c
 800f566:	4638      	mov	r0, r7
 800f568:	f000 f9c2 	bl	800f8f0 <ucdr_serialize_sequence_double>
 800f56c:	e9d6 120e 	ldrd	r1, r2, [r6, #56]	@ 0x38
 800f570:	4638      	mov	r0, r7
 800f572:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f576:	f000 b9bb 	b.w	800f8f0 <ucdr_serialize_sequence_double>
 800f57a:	4770      	bx	lr

0800f57c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800f57c:	4800      	ldr	r0, [pc, #0]	@ (800f580 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800f57e:	4770      	bx	lr
 800f580:	20000324 	.word	0x20000324

0800f584 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f584:	f007 bf02 	b.w	801738c <std_msgs__msg__Header__init>

0800f588 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f588:	f007 bf24 	b.w	80173d4 <std_msgs__msg__Header__fini>

0800f58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f58c:	b508      	push	{r3, lr}
 800f58e:	f000 f8ab 	bl	800f6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f592:	4b06      	ldr	r3, [pc, #24]	@ (800f5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f594:	4906      	ldr	r1, [pc, #24]	@ (800f5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	60c8      	str	r0, [r1, #12]
 800f59a:	b10a      	cbz	r2, 800f5a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f59c:	4803      	ldr	r0, [pc, #12]	@ (800f5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f59e:	bd08      	pop	{r3, pc}
 800f5a0:	4a04      	ldr	r2, [pc, #16]	@ (800f5b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f5a2:	4802      	ldr	r0, [pc, #8]	@ (800f5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f5a4:	6812      	ldr	r2, [r2, #0]
 800f5a6:	601a      	str	r2, [r3, #0]
 800f5a8:	bd08      	pop	{r3, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200003c4 	.word	0x200003c4
 800f5b0:	2000034c 	.word	0x2000034c
 800f5b4:	200001d4 	.word	0x200001d4

0800f5b8 <_Header__max_serialized_size>:
 800f5b8:	b500      	push	{lr}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	2301      	movs	r3, #1
 800f5be:	2100      	movs	r1, #0
 800f5c0:	f10d 0007 	add.w	r0, sp, #7
 800f5c4:	f88d 3007 	strb.w	r3, [sp, #7]
 800f5c8:	f000 f8ec 	bl	800f7a4 <max_serialized_size_builtin_interfaces__msg__Time>
 800f5cc:	b003      	add	sp, #12
 800f5ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5d2:	bf00      	nop

0800f5d4 <get_serialized_size_std_msgs__msg__Header>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	b168      	cbz	r0, 800f5f6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f5da:	460c      	mov	r4, r1
 800f5dc:	f000 f892 	bl	800f704 <get_serialized_size_builtin_interfaces__msg__Time>
 800f5e0:	1826      	adds	r6, r4, r0
 800f5e2:	2104      	movs	r1, #4
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f7fc f9c7 	bl	800b978 <ucdr_alignment>
 800f5ea:	68e9      	ldr	r1, [r5, #12]
 800f5ec:	f1c4 0405 	rsb	r4, r4, #5
 800f5f0:	440c      	add	r4, r1
 800f5f2:	4404      	add	r4, r0
 800f5f4:	19a0      	adds	r0, r4, r6
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}

0800f5f8 <_Header__cdr_deserialize>:
 800f5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fa:	460c      	mov	r4, r1
 800f5fc:	b083      	sub	sp, #12
 800f5fe:	b1e1      	cbz	r1, 800f63a <_Header__cdr_deserialize+0x42>
 800f600:	4606      	mov	r6, r0
 800f602:	f000 f8e3 	bl	800f7cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f606:	6843      	ldr	r3, [r0, #4]
 800f608:	4621      	mov	r1, r4
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	4630      	mov	r0, r6
 800f60e:	4798      	blx	r3
 800f610:	6927      	ldr	r7, [r4, #16]
 800f612:	68a1      	ldr	r1, [r4, #8]
 800f614:	ab01      	add	r3, sp, #4
 800f616:	463a      	mov	r2, r7
 800f618:	4630      	mov	r0, r6
 800f61a:	f000 f923 	bl	800f864 <ucdr_deserialize_sequence_char>
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	4605      	mov	r5, r0
 800f622:	b920      	cbnz	r0, 800f62e <_Header__cdr_deserialize+0x36>
 800f624:	429f      	cmp	r7, r3
 800f626:	d30c      	bcc.n	800f642 <_Header__cdr_deserialize+0x4a>
 800f628:	4628      	mov	r0, r5
 800f62a:	b003      	add	sp, #12
 800f62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62e:	b103      	cbz	r3, 800f632 <_Header__cdr_deserialize+0x3a>
 800f630:	3b01      	subs	r3, #1
 800f632:	4628      	mov	r0, r5
 800f634:	60e3      	str	r3, [r4, #12]
 800f636:	b003      	add	sp, #12
 800f638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f63a:	460d      	mov	r5, r1
 800f63c:	4628      	mov	r0, r5
 800f63e:	b003      	add	sp, #12
 800f640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f642:	2101      	movs	r1, #1
 800f644:	75b0      	strb	r0, [r6, #22]
 800f646:	7571      	strb	r1, [r6, #21]
 800f648:	4630      	mov	r0, r6
 800f64a:	60e5      	str	r5, [r4, #12]
 800f64c:	f7fc f9aa 	bl	800b9a4 <ucdr_align_to>
 800f650:	4630      	mov	r0, r6
 800f652:	9901      	ldr	r1, [sp, #4]
 800f654:	f7fc f9dc 	bl	800ba10 <ucdr_advance_buffer>
 800f658:	4628      	mov	r0, r5
 800f65a:	b003      	add	sp, #12
 800f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65e:	bf00      	nop

0800f660 <_Header__cdr_serialize>:
 800f660:	b1f8      	cbz	r0, 800f6a2 <_Header__cdr_serialize+0x42>
 800f662:	b570      	push	{r4, r5, r6, lr}
 800f664:	4604      	mov	r4, r0
 800f666:	460d      	mov	r5, r1
 800f668:	f000 f8b0 	bl	800f7cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f66c:	6843      	ldr	r3, [r0, #4]
 800f66e:	4629      	mov	r1, r5
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	4620      	mov	r0, r4
 800f674:	4798      	blx	r3
 800f676:	68a6      	ldr	r6, [r4, #8]
 800f678:	b156      	cbz	r6, 800f690 <_Header__cdr_serialize+0x30>
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7f0 fdd2 	bl	8000224 <strlen>
 800f680:	4631      	mov	r1, r6
 800f682:	60e0      	str	r0, [r4, #12]
 800f684:	1c42      	adds	r2, r0, #1
 800f686:	4628      	mov	r0, r5
 800f688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f68c:	f000 b8d8 	b.w	800f840 <ucdr_serialize_sequence_char>
 800f690:	4630      	mov	r0, r6
 800f692:	60e0      	str	r0, [r4, #12]
 800f694:	4632      	mov	r2, r6
 800f696:	4631      	mov	r1, r6
 800f698:	4628      	mov	r0, r5
 800f69a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f69e:	f000 b8cf 	b.w	800f840 <ucdr_serialize_sequence_char>
 800f6a2:	4770      	bx	lr

0800f6a4 <_Header__get_serialized_size>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	b150      	cbz	r0, 800f6c0 <_Header__get_serialized_size+0x1c>
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	f000 f82a 	bl	800f704 <get_serialized_size_builtin_interfaces__msg__Time>
 800f6b0:	2104      	movs	r1, #4
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	f7fc f960 	bl	800b978 <ucdr_alignment>
 800f6b8:	68e2      	ldr	r2, [r4, #12]
 800f6ba:	3205      	adds	r2, #5
 800f6bc:	1953      	adds	r3, r2, r5
 800f6be:	4418      	add	r0, r3
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
 800f6c2:	bf00      	nop

0800f6c4 <max_serialized_size_std_msgs__msg__Header>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	7003      	strb	r3, [r0, #0]
 800f6cc:	f000 f86a 	bl	800f7a4 <max_serialized_size_builtin_interfaces__msg__Time>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	7023      	strb	r3, [r4, #0]
 800f6d4:	bd10      	pop	{r4, pc}
 800f6d6:	bf00      	nop

0800f6d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f6d8:	4800      	ldr	r0, [pc, #0]	@ (800f6dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f6da:	4770      	bx	lr
 800f6dc:	200003d0 	.word	0x200003d0

0800f6e0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f6e0:	f007 be84 	b.w	80173ec <builtin_interfaces__msg__Time__init>

0800f6e4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f6e4:	f007 be86 	b.w	80173f4 <builtin_interfaces__msg__Time__fini>

0800f6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f6e8:	4b04      	ldr	r3, [pc, #16]	@ (800f6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	b10a      	cbz	r2, 800f6f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f6ee:	4803      	ldr	r0, [pc, #12]	@ (800f6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6f0:	4770      	bx	lr
 800f6f2:	4a03      	ldr	r2, [pc, #12]	@ (800f700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f6f4:	4801      	ldr	r0, [pc, #4]	@ (800f6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6f6:	6812      	ldr	r2, [r2, #0]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	4770      	bx	lr
 800f6fc:	20000470 	.word	0x20000470
 800f700:	200001d4 	.word	0x200001d4

0800f704 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f704:	b180      	cbz	r0, 800f728 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f706:	b538      	push	{r3, r4, r5, lr}
 800f708:	460d      	mov	r5, r1
 800f70a:	4628      	mov	r0, r5
 800f70c:	2104      	movs	r1, #4
 800f70e:	f7fc f933 	bl	800b978 <ucdr_alignment>
 800f712:	1d2b      	adds	r3, r5, #4
 800f714:	181c      	adds	r4, r3, r0
 800f716:	2104      	movs	r1, #4
 800f718:	4620      	mov	r0, r4
 800f71a:	f7fc f92d 	bl	800b978 <ucdr_alignment>
 800f71e:	f1c5 0504 	rsb	r5, r5, #4
 800f722:	4428      	add	r0, r5
 800f724:	4420      	add	r0, r4
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop

0800f72c <_Time__cdr_deserialize>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	460c      	mov	r4, r1
 800f730:	b141      	cbz	r1, 800f744 <_Time__cdr_deserialize+0x18>
 800f732:	4605      	mov	r5, r0
 800f734:	f7fb fd02 	bl	800b13c <ucdr_deserialize_int32_t>
 800f738:	1d21      	adds	r1, r4, #4
 800f73a:	4628      	mov	r0, r5
 800f73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f740:	f7fb b97a 	b.w	800aa38 <ucdr_deserialize_uint32_t>
 800f744:	4608      	mov	r0, r1
 800f746:	bd38      	pop	{r3, r4, r5, pc}

0800f748 <_Time__cdr_serialize>:
 800f748:	b160      	cbz	r0, 800f764 <_Time__cdr_serialize+0x1c>
 800f74a:	b538      	push	{r3, r4, r5, lr}
 800f74c:	460d      	mov	r5, r1
 800f74e:	4604      	mov	r4, r0
 800f750:	6801      	ldr	r1, [r0, #0]
 800f752:	4628      	mov	r0, r5
 800f754:	f7fb fc5a 	bl	800b00c <ucdr_serialize_int32_t>
 800f758:	6861      	ldr	r1, [r4, #4]
 800f75a:	4628      	mov	r0, r5
 800f75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f760:	f7fb b83a 	b.w	800a7d8 <ucdr_serialize_uint32_t>
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop

0800f768 <_Time__get_serialized_size>:
 800f768:	b160      	cbz	r0, 800f784 <_Time__get_serialized_size+0x1c>
 800f76a:	b510      	push	{r4, lr}
 800f76c:	2104      	movs	r1, #4
 800f76e:	2000      	movs	r0, #0
 800f770:	f7fc f902 	bl	800b978 <ucdr_alignment>
 800f774:	1d04      	adds	r4, r0, #4
 800f776:	2104      	movs	r1, #4
 800f778:	4620      	mov	r0, r4
 800f77a:	f7fc f8fd 	bl	800b978 <ucdr_alignment>
 800f77e:	3004      	adds	r0, #4
 800f780:	4420      	add	r0, r4
 800f782:	bd10      	pop	{r4, pc}
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop

0800f788 <_Time__max_serialized_size>:
 800f788:	b510      	push	{r4, lr}
 800f78a:	2104      	movs	r1, #4
 800f78c:	2000      	movs	r0, #0
 800f78e:	f7fc f8f3 	bl	800b978 <ucdr_alignment>
 800f792:	1d04      	adds	r4, r0, #4
 800f794:	2104      	movs	r1, #4
 800f796:	4620      	mov	r0, r4
 800f798:	f7fc f8ee 	bl	800b978 <ucdr_alignment>
 800f79c:	3004      	adds	r0, #4
 800f79e:	4420      	add	r0, r4
 800f7a0:	bd10      	pop	{r4, pc}
 800f7a2:	bf00      	nop

0800f7a4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	7003      	strb	r3, [r0, #0]
 800f7ac:	2104      	movs	r1, #4
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f7fc f8e2 	bl	800b978 <ucdr_alignment>
 800f7b4:	1d25      	adds	r5, r4, #4
 800f7b6:	4405      	add	r5, r0
 800f7b8:	2104      	movs	r1, #4
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	f7fc f8dc 	bl	800b978 <ucdr_alignment>
 800f7c0:	f1c4 0404 	rsb	r4, r4, #4
 800f7c4:	4420      	add	r0, r4
 800f7c6:	4428      	add	r0, r5
 800f7c8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ca:	bf00      	nop

0800f7cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f7cc:	4800      	ldr	r0, [pc, #0]	@ (800f7d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f7ce:	4770      	bx	lr
 800f7d0:	2000047c 	.word	0x2000047c

0800f7d4 <geometry_msgs__msg__Twist__init>:
 800f7d4:	b570      	push	{r4, r5, r6, lr}
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	b1a8      	cbz	r0, 800f806 <geometry_msgs__msg__Twist__init+0x32>
 800f7da:	f000 f82b 	bl	800f834 <geometry_msgs__msg__Vector3__init>
 800f7de:	4604      	mov	r4, r0
 800f7e0:	b140      	cbz	r0, 800f7f4 <geometry_msgs__msg__Twist__init+0x20>
 800f7e2:	f105 0618 	add.w	r6, r5, #24
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f000 f824 	bl	800f834 <geometry_msgs__msg__Vector3__init>
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	b168      	cbz	r0, 800f80c <geometry_msgs__msg__Twist__init+0x38>
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	f000 f821 	bl	800f83c <geometry_msgs__msg__Vector3__fini>
 800f7fa:	f105 0018 	add.w	r0, r5, #24
 800f7fe:	f000 f81d 	bl	800f83c <geometry_msgs__msg__Vector3__fini>
 800f802:	4620      	mov	r0, r4
 800f804:	bd70      	pop	{r4, r5, r6, pc}
 800f806:	4604      	mov	r4, r0
 800f808:	4620      	mov	r0, r4
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	4628      	mov	r0, r5
 800f80e:	f000 f815 	bl	800f83c <geometry_msgs__msg__Vector3__fini>
 800f812:	4630      	mov	r0, r6
 800f814:	f000 f812 	bl	800f83c <geometry_msgs__msg__Vector3__fini>
 800f818:	e7ea      	b.n	800f7f0 <geometry_msgs__msg__Twist__init+0x1c>
 800f81a:	bf00      	nop

0800f81c <geometry_msgs__msg__Twist__fini>:
 800f81c:	b148      	cbz	r0, 800f832 <geometry_msgs__msg__Twist__fini+0x16>
 800f81e:	b510      	push	{r4, lr}
 800f820:	4604      	mov	r4, r0
 800f822:	f000 f80b 	bl	800f83c <geometry_msgs__msg__Vector3__fini>
 800f826:	f104 0018 	add.w	r0, r4, #24
 800f82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f82e:	f000 b805 	b.w	800f83c <geometry_msgs__msg__Vector3__fini>
 800f832:	4770      	bx	lr

0800f834 <geometry_msgs__msg__Vector3__init>:
 800f834:	3800      	subs	r0, #0
 800f836:	bf18      	it	ne
 800f838:	2001      	movne	r0, #1
 800f83a:	4770      	bx	lr

0800f83c <geometry_msgs__msg__Vector3__fini>:
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop

0800f840 <ucdr_serialize_sequence_char>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	4615      	mov	r5, r2
 800f844:	460e      	mov	r6, r1
 800f846:	7d01      	ldrb	r1, [r0, #20]
 800f848:	4604      	mov	r4, r0
 800f84a:	f7fb f85d 	bl	800a908 <ucdr_serialize_endian_uint32_t>
 800f84e:	b90d      	cbnz	r5, 800f854 <ucdr_serialize_sequence_char+0x14>
 800f850:	2001      	movs	r0, #1
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	7d21      	ldrb	r1, [r4, #20]
 800f856:	462b      	mov	r3, r5
 800f858:	4632      	mov	r2, r6
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f860:	f007 bdca 	b.w	80173f8 <ucdr_serialize_endian_array_char>

0800f864 <ucdr_deserialize_sequence_char>:
 800f864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f868:	461d      	mov	r5, r3
 800f86a:	4616      	mov	r6, r2
 800f86c:	460f      	mov	r7, r1
 800f86e:	461a      	mov	r2, r3
 800f870:	7d01      	ldrb	r1, [r0, #20]
 800f872:	4604      	mov	r4, r0
 800f874:	f7fb f970 	bl	800ab58 <ucdr_deserialize_endian_uint32_t>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	429e      	cmp	r6, r3
 800f87c:	bf3c      	itt	cc
 800f87e:	2201      	movcc	r2, #1
 800f880:	75a2      	strbcc	r2, [r4, #22]
 800f882:	b913      	cbnz	r3, 800f88a <ucdr_deserialize_sequence_char+0x26>
 800f884:	2001      	movs	r0, #1
 800f886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88a:	7d21      	ldrb	r1, [r4, #20]
 800f88c:	463a      	mov	r2, r7
 800f88e:	4620      	mov	r0, r4
 800f890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	f007 bde2 	b.w	801745c <ucdr_deserialize_endian_array_char>

0800f898 <ucdr_serialize_sequence_uint8_t>:
 800f898:	b570      	push	{r4, r5, r6, lr}
 800f89a:	4615      	mov	r5, r2
 800f89c:	460e      	mov	r6, r1
 800f89e:	7d01      	ldrb	r1, [r0, #20]
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	f7fb f831 	bl	800a908 <ucdr_serialize_endian_uint32_t>
 800f8a6:	b90d      	cbnz	r5, 800f8ac <ucdr_serialize_sequence_uint8_t+0x14>
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	7d21      	ldrb	r1, [r4, #20]
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8b8:	f007 be34 	b.w	8017524 <ucdr_serialize_endian_array_uint8_t>

0800f8bc <ucdr_deserialize_sequence_uint8_t>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	461d      	mov	r5, r3
 800f8c2:	4616      	mov	r6, r2
 800f8c4:	460f      	mov	r7, r1
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	7d01      	ldrb	r1, [r0, #20]
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	f7fb f944 	bl	800ab58 <ucdr_deserialize_endian_uint32_t>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	429e      	cmp	r6, r3
 800f8d4:	bf3c      	itt	cc
 800f8d6:	2201      	movcc	r2, #1
 800f8d8:	75a2      	strbcc	r2, [r4, #22]
 800f8da:	b913      	cbnz	r3, 800f8e2 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f8dc:	2001      	movs	r0, #1
 800f8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e2:	7d21      	ldrb	r1, [r4, #20]
 800f8e4:	463a      	mov	r2, r7
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ec:	f007 be7e 	b.w	80175ec <ucdr_deserialize_endian_array_uint8_t>

0800f8f0 <ucdr_serialize_sequence_double>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	4615      	mov	r5, r2
 800f8f4:	460e      	mov	r6, r1
 800f8f6:	7d01      	ldrb	r1, [r0, #20]
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	f7fb f805 	bl	800a908 <ucdr_serialize_endian_uint32_t>
 800f8fe:	b90d      	cbnz	r5, 800f904 <ucdr_serialize_sequence_double+0x14>
 800f900:	2001      	movs	r0, #1
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	7d21      	ldrb	r1, [r4, #20]
 800f906:	462b      	mov	r3, r5
 800f908:	4632      	mov	r2, r6
 800f90a:	4620      	mov	r0, r4
 800f90c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f910:	f007 be9e 	b.w	8017650 <ucdr_serialize_endian_array_double>

0800f914 <ucdr_deserialize_sequence_double>:
 800f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f918:	461d      	mov	r5, r3
 800f91a:	4616      	mov	r6, r2
 800f91c:	460f      	mov	r7, r1
 800f91e:	461a      	mov	r2, r3
 800f920:	7d01      	ldrb	r1, [r0, #20]
 800f922:	4604      	mov	r4, r0
 800f924:	f7fb f918 	bl	800ab58 <ucdr_deserialize_endian_uint32_t>
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	429e      	cmp	r6, r3
 800f92c:	bf3c      	itt	cc
 800f92e:	2201      	movcc	r2, #1
 800f930:	75a2      	strbcc	r2, [r4, #22]
 800f932:	b913      	cbnz	r3, 800f93a <ucdr_deserialize_sequence_double+0x26>
 800f934:	2001      	movs	r0, #1
 800f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93a:	7d21      	ldrb	r1, [r4, #20]
 800f93c:	463a      	mov	r2, r7
 800f93e:	4620      	mov	r0, r4
 800f940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	f007 bed8 	b.w	80176f8 <ucdr_deserialize_endian_array_double>

0800f948 <uxr_buffer_delete_entity>:
 800f948:	b510      	push	{r4, lr}
 800f94a:	2300      	movs	r3, #0
 800f94c:	b08e      	sub	sp, #56	@ 0x38
 800f94e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f952:	2303      	movs	r3, #3
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	2204      	movs	r2, #4
 800f958:	ab06      	add	r3, sp, #24
 800f95a:	4604      	mov	r4, r0
 800f95c:	9103      	str	r1, [sp, #12]
 800f95e:	f001 fc73 	bl	8011248 <uxr_prepare_stream_to_write_submessage>
 800f962:	b918      	cbnz	r0, 800f96c <uxr_buffer_delete_entity+0x24>
 800f964:	4604      	mov	r4, r0
 800f966:	4620      	mov	r0, r4
 800f968:	b00e      	add	sp, #56	@ 0x38
 800f96a:	bd10      	pop	{r4, pc}
 800f96c:	9902      	ldr	r1, [sp, #8]
 800f96e:	aa05      	add	r2, sp, #20
 800f970:	4620      	mov	r0, r4
 800f972:	f001 fd9f 	bl	80114b4 <uxr_init_base_object_request>
 800f976:	a905      	add	r1, sp, #20
 800f978:	4604      	mov	r4, r0
 800f97a:	a806      	add	r0, sp, #24
 800f97c:	f003 fc96 	bl	80132ac <uxr_serialize_DELETE_Payload>
 800f980:	4620      	mov	r0, r4
 800f982:	b00e      	add	sp, #56	@ 0x38
 800f984:	bd10      	pop	{r4, pc}
 800f986:	bf00      	nop

0800f988 <uxr_common_create_entity>:
 800f988:	b510      	push	{r4, lr}
 800f98a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f98e:	b08c      	sub	sp, #48	@ 0x30
 800f990:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f994:	f1bc 0f01 	cmp.w	ip, #1
 800f998:	bf0c      	ite	eq
 800f99a:	f003 0201 	andeq.w	r2, r3, #1
 800f99e:	2200      	movne	r2, #0
 800f9a0:	330e      	adds	r3, #14
 800f9a2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f9a6:	9101      	str	r1, [sp, #4]
 800f9a8:	441a      	add	r2, r3
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	9903      	ldr	r1, [sp, #12]
 800f9b0:	ab04      	add	r3, sp, #16
 800f9b2:	b292      	uxth	r2, r2
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	f001 fc47 	bl	8011248 <uxr_prepare_stream_to_write_submessage>
 800f9ba:	b918      	cbnz	r0, 800f9c4 <uxr_common_create_entity+0x3c>
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4620      	mov	r0, r4
 800f9c0:	b00c      	add	sp, #48	@ 0x30
 800f9c2:	bd10      	pop	{r4, pc}
 800f9c4:	9902      	ldr	r1, [sp, #8]
 800f9c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f001 fd73 	bl	80114b4 <uxr_init_base_object_request>
 800f9ce:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	a804      	add	r0, sp, #16
 800f9d4:	f003 fbb2 	bl	801313c <uxr_serialize_CREATE_Payload>
 800f9d8:	4620      	mov	r0, r4
 800f9da:	b00c      	add	sp, #48	@ 0x30
 800f9dc:	bd10      	pop	{r4, pc}
 800f9de:	bf00      	nop

0800f9e0 <uxr_buffer_create_participant_bin>:
 800f9e0:	b570      	push	{r4, r5, r6, lr}
 800f9e2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f9e6:	ac11      	add	r4, sp, #68	@ 0x44
 800f9e8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f9f2:	7223      	strb	r3, [r4, #8]
 800f9f4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f9f6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	4605      	mov	r5, r0
 800fa00:	7122      	strb	r2, [r4, #4]
 800fa02:	f88d 1014 	strb.w	r1, [sp, #20]
 800fa06:	b1cb      	cbz	r3, 800fa3c <uxr_buffer_create_participant_bin+0x5c>
 800fa08:	f88d 201c 	strb.w	r2, [sp, #28]
 800fa0c:	9308      	str	r3, [sp, #32]
 800fa0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa12:	a915      	add	r1, sp, #84	@ 0x54
 800fa14:	a809      	add	r0, sp, #36	@ 0x24
 800fa16:	f7fb ffab 	bl	800b970 <ucdr_init_buffer>
 800fa1a:	a905      	add	r1, sp, #20
 800fa1c:	a809      	add	r0, sp, #36	@ 0x24
 800fa1e:	f002 ff6f 	bl	8012900 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fa22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa24:	9600      	str	r6, [sp, #0]
 800fa26:	9401      	str	r4, [sp, #4]
 800fa28:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa2c:	60e3      	str	r3, [r4, #12]
 800fa2e:	4628      	mov	r0, r5
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	f7ff ffa9 	bl	800f988 <uxr_common_create_entity>
 800fa36:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa40:	e7e5      	b.n	800fa0e <uxr_buffer_create_participant_bin+0x2e>
 800fa42:	bf00      	nop

0800fa44 <uxr_buffer_create_topic_bin>:
 800fa44:	b570      	push	{r4, r5, r6, lr}
 800fa46:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fa4a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fa4e:	9105      	str	r1, [sp, #20]
 800fa50:	4605      	mov	r5, r0
 800fa52:	a997      	add	r1, sp, #604	@ 0x25c
 800fa54:	4618      	mov	r0, r3
 800fa56:	2302      	movs	r3, #2
 800fa58:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fa5c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fa60:	f000 fa58 	bl	800ff14 <uxr_object_id_to_raw>
 800fa64:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fa66:	9306      	str	r3, [sp, #24]
 800fa68:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fa6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fa72:	2301      	movs	r3, #1
 800fa74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa78:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fa7c:	a917      	add	r1, sp, #92	@ 0x5c
 800fa7e:	2300      	movs	r3, #0
 800fa80:	a80b      	add	r0, sp, #44	@ 0x2c
 800fa82:	f88d 301c 	strb.w	r3, [sp, #28]
 800fa86:	f7fb ff73 	bl	800b970 <ucdr_init_buffer>
 800fa8a:	a906      	add	r1, sp, #24
 800fa8c:	a80b      	add	r0, sp, #44	@ 0x2c
 800fa8e:	f002 ff59 	bl	8012944 <uxr_serialize_OBJK_Topic_Binary>
 800fa92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa94:	9316      	str	r3, [sp, #88]	@ 0x58
 800fa96:	ac13      	add	r4, sp, #76	@ 0x4c
 800fa98:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa9c:	9600      	str	r6, [sp, #0]
 800fa9e:	9401      	str	r4, [sp, #4]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4628      	mov	r0, r5
 800faa4:	f7ff ff70 	bl	800f988 <uxr_common_create_entity>
 800faa8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800faac:	bd70      	pop	{r4, r5, r6, pc}
 800faae:	bf00      	nop

0800fab0 <uxr_buffer_create_publisher_bin>:
 800fab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fab2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fab6:	4605      	mov	r5, r0
 800fab8:	9105      	str	r1, [sp, #20]
 800faba:	4618      	mov	r0, r3
 800fabc:	2603      	movs	r6, #3
 800fabe:	a992      	add	r1, sp, #584	@ 0x248
 800fac0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fac4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fac8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800facc:	f000 fa22 	bl	800ff14 <uxr_object_id_to_raw>
 800fad0:	2300      	movs	r3, #0
 800fad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fad6:	a912      	add	r1, sp, #72	@ 0x48
 800fad8:	a806      	add	r0, sp, #24
 800fada:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fade:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fae2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fae6:	f7fb ff43 	bl	800b970 <ucdr_init_buffer>
 800faea:	a993      	add	r1, sp, #588	@ 0x24c
 800faec:	a806      	add	r0, sp, #24
 800faee:	f002 ffdd 	bl	8012aac <uxr_serialize_OBJK_Publisher_Binary>
 800faf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faf4:	9311      	str	r3, [sp, #68]	@ 0x44
 800faf6:	ac0e      	add	r4, sp, #56	@ 0x38
 800faf8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fafc:	9700      	str	r7, [sp, #0]
 800fafe:	9401      	str	r4, [sp, #4]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4628      	mov	r0, r5
 800fb04:	f7ff ff40 	bl	800f988 <uxr_common_create_entity>
 800fb08:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb0e:	bf00      	nop

0800fb10 <uxr_buffer_create_subscriber_bin>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fb16:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb1a:	9105      	str	r1, [sp, #20]
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	a992      	add	r1, sp, #584	@ 0x248
 800fb20:	4618      	mov	r0, r3
 800fb22:	2304      	movs	r3, #4
 800fb24:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fb28:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fb2c:	f000 f9f2 	bl	800ff14 <uxr_object_id_to_raw>
 800fb30:	2300      	movs	r3, #0
 800fb32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb36:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fb3a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fb3e:	a912      	add	r1, sp, #72	@ 0x48
 800fb40:	2303      	movs	r3, #3
 800fb42:	a806      	add	r0, sp, #24
 800fb44:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800fb48:	f7fb ff12 	bl	800b970 <ucdr_init_buffer>
 800fb4c:	a993      	add	r1, sp, #588	@ 0x24c
 800fb4e:	a806      	add	r0, sp, #24
 800fb50:	f003 f85c 	bl	8012c0c <uxr_serialize_OBJK_Subscriber_Binary>
 800fb54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb56:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb58:	ac0e      	add	r4, sp, #56	@ 0x38
 800fb5a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb5e:	9600      	str	r6, [sp, #0]
 800fb60:	9401      	str	r4, [sp, #4]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4628      	mov	r0, r5
 800fb66:	f7ff ff0f 	bl	800f988 <uxr_common_create_entity>
 800fb6a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}

0800fb70 <uxr_buffer_create_datawriter_bin>:
 800fb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb74:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fb78:	ac1d      	add	r4, sp, #116	@ 0x74
 800fb7a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb7e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fb82:	9105      	str	r1, [sp, #20]
 800fb84:	4606      	mov	r6, r0
 800fb86:	a9a1      	add	r1, sp, #644	@ 0x284
 800fb88:	4618      	mov	r0, r3
 800fb8a:	2305      	movs	r3, #5
 800fb8c:	7123      	strb	r3, [r4, #4]
 800fb8e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fb92:	2703      	movs	r7, #3
 800fb94:	f000 f9be 	bl	800ff14 <uxr_object_id_to_raw>
 800fb98:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fb9a:	7227      	strb	r7, [r4, #8]
 800fb9c:	a90e      	add	r1, sp, #56	@ 0x38
 800fb9e:	f000 f9b9 	bl	800ff14 <uxr_object_id_to_raw>
 800fba2:	2300      	movs	r3, #0
 800fba4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fba8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fbac:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fbb0:	3d00      	subs	r5, #0
 800fbb2:	bf18      	it	ne
 800fbb4:	2501      	movne	r5, #1
 800fbb6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fbba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fbbe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fbc2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fbcc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fbd0:	bb8a      	cbnz	r2, 800fc36 <uxr_buffer_create_datawriter_bin+0xc6>
 800fbd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fbd6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fbda:	f04f 0c13 	mov.w	ip, #19
 800fbde:	250b      	movs	r5, #11
 800fbe0:	2221      	movs	r2, #33	@ 0x21
 800fbe2:	2111      	movs	r1, #17
 800fbe4:	2009      	movs	r0, #9
 800fbe6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fbea:	b923      	cbnz	r3, 800fbf6 <uxr_buffer_create_datawriter_bin+0x86>
 800fbec:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fbf0:	4672      	mov	r2, lr
 800fbf2:	4661      	mov	r1, ip
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d025      	beq.n	800fc4a <uxr_buffer_create_datawriter_bin+0xda>
 800fbfe:	2b03      	cmp	r3, #3
 800fc00:	d029      	beq.n	800fc56 <uxr_buffer_create_datawriter_bin+0xe6>
 800fc02:	b32b      	cbz	r3, 800fc50 <uxr_buffer_create_datawriter_bin+0xe0>
 800fc04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc08:	a921      	add	r1, sp, #132	@ 0x84
 800fc0a:	a806      	add	r0, sp, #24
 800fc0c:	f7fb feb0 	bl	800b970 <ucdr_init_buffer>
 800fc10:	a90e      	add	r1, sp, #56	@ 0x38
 800fc12:	a806      	add	r0, sp, #24
 800fc14:	f003 f8ac 	bl	8012d70 <uxr_serialize_OBJK_DataWriter_Binary>
 800fc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc1a:	f8cd 8000 	str.w	r8, [sp]
 800fc1e:	9401      	str	r4, [sp, #4]
 800fc20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc24:	60e3      	str	r3, [r4, #12]
 800fc26:	4630      	mov	r0, r6
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f7ff fead 	bl	800f988 <uxr_common_create_entity>
 800fc2e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc36:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fc3a:	f04f 0c12 	mov.w	ip, #18
 800fc3e:	250a      	movs	r5, #10
 800fc40:	2220      	movs	r2, #32
 800fc42:	2110      	movs	r1, #16
 800fc44:	2008      	movs	r0, #8
 800fc46:	2702      	movs	r7, #2
 800fc48:	e7cd      	b.n	800fbe6 <uxr_buffer_create_datawriter_bin+0x76>
 800fc4a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fc4e:	e7d9      	b.n	800fc04 <uxr_buffer_create_datawriter_bin+0x94>
 800fc50:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fc54:	e7d6      	b.n	800fc04 <uxr_buffer_create_datawriter_bin+0x94>
 800fc56:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fc5a:	e7d3      	b.n	800fc04 <uxr_buffer_create_datawriter_bin+0x94>

0800fc5c <uxr_buffer_create_datareader_bin>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fc64:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fc66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc6a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800fc6e:	9105      	str	r1, [sp, #20]
 800fc70:	4606      	mov	r6, r0
 800fc72:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fc74:	4618      	mov	r0, r3
 800fc76:	2306      	movs	r3, #6
 800fc78:	7123      	strb	r3, [r4, #4]
 800fc7a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800fc7e:	2703      	movs	r7, #3
 800fc80:	f000 f948 	bl	800ff14 <uxr_object_id_to_raw>
 800fc84:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800fc86:	7227      	strb	r7, [r4, #8]
 800fc88:	a90e      	add	r1, sp, #56	@ 0x38
 800fc8a:	f000 f943 	bl	800ff14 <uxr_object_id_to_raw>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fc94:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800fc98:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800fc9c:	3d00      	subs	r5, #0
 800fc9e:	bf18      	it	ne
 800fca0:	2501      	movne	r5, #1
 800fca2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fca6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fcaa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fcae:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fcb2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fcbc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fcc0:	bb8a      	cbnz	r2, 800fd26 <uxr_buffer_create_datareader_bin+0xca>
 800fcc2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcc6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fcca:	f04f 0c13 	mov.w	ip, #19
 800fcce:	250b      	movs	r5, #11
 800fcd0:	2221      	movs	r2, #33	@ 0x21
 800fcd2:	2111      	movs	r1, #17
 800fcd4:	2009      	movs	r0, #9
 800fcd6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800fcda:	b923      	cbnz	r3, 800fce6 <uxr_buffer_create_datareader_bin+0x8a>
 800fcdc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fce0:	4672      	mov	r2, lr
 800fce2:	4661      	mov	r1, ip
 800fce4:	4628      	mov	r0, r5
 800fce6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d025      	beq.n	800fd3a <uxr_buffer_create_datareader_bin+0xde>
 800fcee:	2b03      	cmp	r3, #3
 800fcf0:	d029      	beq.n	800fd46 <uxr_buffer_create_datareader_bin+0xea>
 800fcf2:	b32b      	cbz	r3, 800fd40 <uxr_buffer_create_datareader_bin+0xe4>
 800fcf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcf8:	a923      	add	r1, sp, #140	@ 0x8c
 800fcfa:	a806      	add	r0, sp, #24
 800fcfc:	f7fb fe38 	bl	800b970 <ucdr_init_buffer>
 800fd00:	a90e      	add	r1, sp, #56	@ 0x38
 800fd02:	a806      	add	r0, sp, #24
 800fd04:	f002 fff8 	bl	8012cf8 <uxr_serialize_OBJK_DataReader_Binary>
 800fd08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd0a:	f8cd 8000 	str.w	r8, [sp]
 800fd0e:	9401      	str	r4, [sp, #4]
 800fd10:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd14:	60e3      	str	r3, [r4, #12]
 800fd16:	4630      	mov	r0, r6
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	f7ff fe35 	bl	800f988 <uxr_common_create_entity>
 800fd1e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd26:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fd2a:	f04f 0c12 	mov.w	ip, #18
 800fd2e:	250a      	movs	r5, #10
 800fd30:	2220      	movs	r2, #32
 800fd32:	2110      	movs	r1, #16
 800fd34:	2008      	movs	r0, #8
 800fd36:	2702      	movs	r7, #2
 800fd38:	e7cd      	b.n	800fcd6 <uxr_buffer_create_datareader_bin+0x7a>
 800fd3a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fd3e:	e7d9      	b.n	800fcf4 <uxr_buffer_create_datareader_bin+0x98>
 800fd40:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fd44:	e7d6      	b.n	800fcf4 <uxr_buffer_create_datareader_bin+0x98>
 800fd46:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fd4a:	e7d3      	b.n	800fcf4 <uxr_buffer_create_datareader_bin+0x98>

0800fd4c <get_custom_error>:
 800fd4c:	4b01      	ldr	r3, [pc, #4]	@ (800fd54 <get_custom_error+0x8>)
 800fd4e:	7818      	ldrb	r0, [r3, #0]
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	2000e244 	.word	0x2000e244

0800fd58 <recv_custom_msg>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	4693      	mov	fp, r2
 800fd5e:	b089      	sub	sp, #36	@ 0x24
 800fd60:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fd64:	9305      	str	r3, [sp, #20]
 800fd66:	468a      	mov	sl, r1
 800fd68:	2100      	movs	r1, #0
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	f88d 101e 	strb.w	r1, [sp, #30]
 800fd70:	b322      	cbz	r2, 800fdbc <recv_custom_msg+0x64>
 800fd72:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fd76:	f10d 081f 	add.w	r8, sp, #31
 800fd7a:	af05      	add	r7, sp, #20
 800fd7c:	f10d 061e 	add.w	r6, sp, #30
 800fd80:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fd84:	e002      	b.n	800fd8c <recv_custom_msg+0x34>
 800fd86:	9b05      	ldr	r3, [sp, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	dd0f      	ble.n	800fdac <recv_custom_msg+0x54>
 800fd8c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fd90:	4623      	mov	r3, r4
 800fd92:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fd96:	e9cd 5600 	strd	r5, r6, [sp]
 800fd9a:	4622      	mov	r2, r4
 800fd9c:	4648      	mov	r0, r9
 800fd9e:	f001 fdb7 	bl	8011910 <uxr_read_framed_msg>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d0ef      	beq.n	800fd86 <recv_custom_msg+0x2e>
 800fda6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fdaa:	b1b3      	cbz	r3, 800fdda <recv_custom_msg+0x82>
 800fdac:	4b0f      	ldr	r3, [pc, #60]	@ (800fdec <recv_custom_msg+0x94>)
 800fdae:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	b009      	add	sp, #36	@ 0x24
 800fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbc:	f10d 021f 	add.w	r2, sp, #31
 800fdc0:	9200      	str	r2, [sp, #0]
 800fdc2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fdc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdca:	4601      	mov	r1, r0
 800fdcc:	47a8      	blx	r5
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d0ec      	beq.n	800fdac <recv_custom_msg+0x54>
 800fdd2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1e8      	bne.n	800fdac <recv_custom_msg+0x54>
 800fdda:	f8cb 0000 	str.w	r0, [fp]
 800fdde:	2001      	movs	r0, #1
 800fde0:	f8ca 4000 	str.w	r4, [sl]
 800fde4:	b009      	add	sp, #36	@ 0x24
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	bf00      	nop
 800fdec:	2000e244 	.word	0x2000e244

0800fdf0 <send_custom_msg>:
 800fdf0:	b530      	push	{r4, r5, lr}
 800fdf2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800fdf6:	b087      	sub	sp, #28
 800fdf8:	4615      	mov	r5, r2
 800fdfa:	b974      	cbnz	r4, 800fe1a <send_custom_msg+0x2a>
 800fdfc:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fe00:	f10d 0317 	add.w	r3, sp, #23
 800fe04:	47a0      	blx	r4
 800fe06:	b108      	cbz	r0, 800fe0c <send_custom_msg+0x1c>
 800fe08:	42a8      	cmp	r0, r5
 800fe0a:	d015      	beq.n	800fe38 <send_custom_msg+0x48>
 800fe0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fe40 <send_custom_msg+0x50>)
 800fe0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fe12:	701a      	strb	r2, [r3, #0]
 800fe14:	2000      	movs	r0, #0
 800fe16:	b007      	add	sp, #28
 800fe18:	bd30      	pop	{r4, r5, pc}
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f10d 0117 	add.w	r1, sp, #23
 800fe22:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fe26:	4602      	mov	r2, r0
 800fe28:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800fe2c:	9500      	str	r5, [sp, #0]
 800fe2e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fe32:	f001 fb75 	bl	8011520 <uxr_write_framed_msg>
 800fe36:	e7e6      	b.n	800fe06 <send_custom_msg+0x16>
 800fe38:	2001      	movs	r0, #1
 800fe3a:	b007      	add	sp, #28
 800fe3c:	bd30      	pop	{r4, r5, pc}
 800fe3e:	bf00      	nop
 800fe40:	2000e244 	.word	0x2000e244

0800fe44 <uxr_set_custom_transport_callbacks>:
 800fe44:	b410      	push	{r4}
 800fe46:	9c01      	ldr	r4, [sp, #4]
 800fe48:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fe4c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fe50:	9b02      	ldr	r3, [sp, #8]
 800fe52:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fe56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe5a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fe5e:	4770      	bx	lr

0800fe60 <uxr_init_custom_transport>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fe66:	b303      	cbz	r3, 800feaa <uxr_init_custom_transport+0x4a>
 800fe68:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	b1e2      	cbz	r2, 800feaa <uxr_init_custom_transport+0x4a>
 800fe70:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fe74:	b1ca      	cbz	r2, 800feaa <uxr_init_custom_transport+0x4a>
 800fe76:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fe7a:	b1b2      	cbz	r2, 800feaa <uxr_init_custom_transport+0x4a>
 800fe7c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fe80:	4798      	blx	r3
 800fe82:	4605      	mov	r5, r0
 800fe84:	b188      	cbz	r0, 800feaa <uxr_init_custom_transport+0x4a>
 800fe86:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800fe8a:	b98b      	cbnz	r3, 800feb0 <uxr_init_custom_transport+0x50>
 800fe8c:	490b      	ldr	r1, [pc, #44]	@ (800febc <uxr_init_custom_transport+0x5c>)
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fec0 <uxr_init_custom_transport+0x60>)
 800fe90:	4a0c      	ldr	r2, [pc, #48]	@ (800fec4 <uxr_init_custom_transport+0x64>)
 800fe92:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800fe96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe9a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800fe9e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800fea2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800fea6:	4628      	mov	r0, r5
 800fea8:	bd38      	pop	{r3, r4, r5, pc}
 800feaa:	2500      	movs	r5, #0
 800feac:	4628      	mov	r0, r5
 800feae:	bd38      	pop	{r3, r4, r5, pc}
 800feb0:	2100      	movs	r1, #0
 800feb2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800feb6:	f001 fb2d 	bl	8011514 <uxr_init_framing_io>
 800feba:	e7e7      	b.n	800fe8c <uxr_init_custom_transport+0x2c>
 800febc:	0800fdf1 	.word	0x0800fdf1
 800fec0:	0800fd59 	.word	0x0800fd59
 800fec4:	0800fd4d 	.word	0x0800fd4d

0800fec8 <uxr_close_custom_transport>:
 800fec8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fecc:	4718      	bx	r3
 800fece:	bf00      	nop

0800fed0 <uxr_object_id>:
 800fed0:	b082      	sub	sp, #8
 800fed2:	2300      	movs	r3, #0
 800fed4:	f88d 1006 	strb.w	r1, [sp, #6]
 800fed8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fedc:	f360 030f 	bfi	r3, r0, #0, #16
 800fee0:	f362 431f 	bfi	r3, r2, #16, #16
 800fee4:	4618      	mov	r0, r3
 800fee6:	b002      	add	sp, #8
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop

0800feec <uxr_object_id_from_raw>:
 800feec:	7843      	ldrb	r3, [r0, #1]
 800feee:	7801      	ldrb	r1, [r0, #0]
 800fef0:	b082      	sub	sp, #8
 800fef2:	f003 020f 	and.w	r2, r3, #15
 800fef6:	f88d 2006 	strb.w	r2, [sp, #6]
 800fefa:	091b      	lsrs	r3, r3, #4
 800fefc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff00:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff04:	2000      	movs	r0, #0
 800ff06:	f363 000f 	bfi	r0, r3, #0, #16
 800ff0a:	f362 401f 	bfi	r0, r2, #16, #16
 800ff0e:	b002      	add	sp, #8
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop

0800ff14 <uxr_object_id_to_raw>:
 800ff14:	4602      	mov	r2, r0
 800ff16:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ff20:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ff24:	f881 c000 	strb.w	ip, [r1]
 800ff28:	7048      	strb	r0, [r1, #1]
 800ff2a:	b002      	add	sp, #8
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop

0800ff30 <uxr_ping_agent_session>:
 800ff30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff34:	4617      	mov	r7, r2
 800ff36:	b091      	sub	sp, #68	@ 0x44
 800ff38:	2210      	movs	r2, #16
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	4688      	mov	r8, r1
 800ff3e:	a808      	add	r0, sp, #32
 800ff40:	eb0d 0102 	add.w	r1, sp, r2
 800ff44:	f7fb fd14 	bl	800b970 <ucdr_init_buffer>
 800ff48:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc4 <uxr_ping_agent_session+0x94>)
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800ff52:	9500      	str	r5, [sp, #0]
 800ff54:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ff58:	2402      	movs	r4, #2
 800ff5a:	7831      	ldrb	r1, [r6, #0]
 800ff5c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ff60:	462a      	mov	r2, r5
 800ff62:	a808      	add	r0, sp, #32
 800ff64:	462b      	mov	r3, r5
 800ff66:	9403      	str	r4, [sp, #12]
 800ff68:	f002 fa98 	bl	801249c <uxr_serialize_message_header>
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	462b      	mov	r3, r5
 800ff70:	2208      	movs	r2, #8
 800ff72:	a808      	add	r0, sp, #32
 800ff74:	f002 f898 	bl	80120a8 <uxr_buffer_submessage_header>
 800ff78:	a902      	add	r1, sp, #8
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	a808      	add	r0, sp, #32
 800ff7e:	f003 f96d 	bl	801325c <uxr_serialize_GET_INFO_Payload>
 800ff82:	b104      	cbz	r4, 800ff86 <uxr_ping_agent_session+0x56>
 800ff84:	b918      	cbnz	r0, 800ff8e <uxr_ping_agent_session+0x5e>
 800ff86:	2000      	movs	r0, #0
 800ff88:	b011      	add	sp, #68	@ 0x44
 800ff8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff8e:	a808      	add	r0, sp, #32
 800ff90:	f7fb fd1a 	bl	800b9c8 <ucdr_buffer_length>
 800ff94:	4681      	mov	r9, r0
 800ff96:	e00d      	b.n	800ffb4 <uxr_ping_agent_session+0x84>
 800ff98:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800ff9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ff9e:	47a0      	blx	r4
 800ffa0:	4641      	mov	r1, r8
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	f000 ff4f 	bl	8010e48 <uxr_run_session_until_pong>
 800ffaa:	ea04 0c00 	and.w	ip, r4, r0
 800ffae:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 800ffb2:	d1e9      	bne.n	800ff88 <uxr_ping_agent_session+0x58>
 800ffb4:	42af      	cmp	r7, r5
 800ffb6:	464a      	mov	r2, r9
 800ffb8:	a904      	add	r1, sp, #16
 800ffba:	f105 0501 	add.w	r5, r5, #1
 800ffbe:	d1eb      	bne.n	800ff98 <uxr_ping_agent_session+0x68>
 800ffc0:	e7e1      	b.n	800ff86 <uxr_ping_agent_session+0x56>
 800ffc2:	bf00      	nop
 800ffc4:	0801a3f0 	.word	0x0801a3f0

0800ffc8 <uxr_ping_agent_attempts>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	ed2d 8b02 	vpush	{d8}
 800ffd0:	b0d1      	sub	sp, #324	@ 0x144
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	4688      	mov	r8, r1
 800ffd6:	a80e      	add	r0, sp, #56	@ 0x38
 800ffd8:	a90a      	add	r1, sp, #40	@ 0x28
 800ffda:	4615      	mov	r5, r2
 800ffdc:	2210      	movs	r2, #16
 800ffde:	f7fb fcc7 	bl	800b970 <ucdr_init_buffer>
 800ffe2:	4b54      	ldr	r3, [pc, #336]	@ (8010134 <uxr_ping_agent_attempts+0x16c>)
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 800ffea:	2300      	movs	r3, #0
 800ffec:	2402      	movs	r4, #2
 800ffee:	461a      	mov	r2, r3
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	2180      	movs	r1, #128	@ 0x80
 800fff4:	a80e      	add	r0, sp, #56	@ 0x38
 800fff6:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 800fffa:	941f      	str	r4, [sp, #124]	@ 0x7c
 800fffc:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8010000:	f002 fa4c 	bl	801249c <uxr_serialize_message_header>
 8010004:	4621      	mov	r1, r4
 8010006:	2300      	movs	r3, #0
 8010008:	2208      	movs	r2, #8
 801000a:	a80e      	add	r0, sp, #56	@ 0x38
 801000c:	f002 f84c 	bl	80120a8 <uxr_buffer_submessage_header>
 8010010:	a91e      	add	r1, sp, #120	@ 0x78
 8010012:	4604      	mov	r4, r0
 8010014:	a80e      	add	r0, sp, #56	@ 0x38
 8010016:	f003 f921 	bl	801325c <uxr_serialize_GET_INFO_Payload>
 801001a:	b104      	cbz	r4, 801001e <uxr_ping_agent_attempts+0x56>
 801001c:	b938      	cbnz	r0, 801002e <uxr_ping_agent_attempts+0x66>
 801001e:	f04f 0b00 	mov.w	fp, #0
 8010022:	4658      	mov	r0, fp
 8010024:	b051      	add	sp, #324	@ 0x144
 8010026:	ecbd 8b02 	vpop	{d8}
 801002a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002e:	a80e      	add	r0, sp, #56	@ 0x38
 8010030:	f7fb fcca 	bl	800b9c8 <ucdr_buffer_length>
 8010034:	1c6b      	adds	r3, r5, #1
 8010036:	ee08 0a10 	vmov	s16, r0
 801003a:	9303      	str	r3, [sp, #12]
 801003c:	f04f 0901 	mov.w	r9, #1
 8010040:	9b03      	ldr	r3, [sp, #12]
 8010042:	454b      	cmp	r3, r9
 8010044:	d0eb      	beq.n	801001e <uxr_ping_agent_attempts+0x56>
 8010046:	e9d6 0300 	ldrd	r0, r3, [r6]
 801004a:	ee18 2a10 	vmov	r2, s16
 801004e:	a90a      	add	r1, sp, #40	@ 0x28
 8010050:	4798      	blx	r3
 8010052:	f002 f86f 	bl	8012134 <uxr_millis>
 8010056:	4645      	mov	r5, r8
 8010058:	4604      	mov	r4, r0
 801005a:	f04f 0a00 	mov.w	sl, #0
 801005e:	68b7      	ldr	r7, [r6, #8]
 8010060:	6830      	ldr	r0, [r6, #0]
 8010062:	f8cd a018 	str.w	sl, [sp, #24]
 8010066:	4643      	mov	r3, r8
 8010068:	aa07      	add	r2, sp, #28
 801006a:	a906      	add	r1, sp, #24
 801006c:	47b8      	blx	r7
 801006e:	4607      	mov	r7, r0
 8010070:	b958      	cbnz	r0, 801008a <uxr_ping_agent_attempts+0xc2>
 8010072:	f002 f85f 	bl	8012134 <uxr_millis>
 8010076:	1b00      	subs	r0, r0, r4
 8010078:	1a2d      	subs	r5, r5, r0
 801007a:	f002 f85b 	bl	8012134 <uxr_millis>
 801007e:	2d00      	cmp	r5, #0
 8010080:	4604      	mov	r4, r0
 8010082:	dcec      	bgt.n	801005e <uxr_ping_agent_attempts+0x96>
 8010084:	f109 0901 	add.w	r9, r9, #1
 8010088:	e7da      	b.n	8010040 <uxr_ping_agent_attempts+0x78>
 801008a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801008e:	a816      	add	r0, sp, #88	@ 0x58
 8010090:	f7fb fc6e 	bl	800b970 <ucdr_init_buffer>
 8010094:	ab05      	add	r3, sp, #20
 8010096:	f10d 0211 	add.w	r2, sp, #17
 801009a:	a916      	add	r1, sp, #88	@ 0x58
 801009c:	a808      	add	r0, sp, #32
 801009e:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80100a2:	f001 f9bd 	bl	8011420 <uxr_read_session_header>
 80100a6:	22c8      	movs	r2, #200	@ 0xc8
 80100a8:	2100      	movs	r1, #0
 80100aa:	a81e      	add	r0, sp, #120	@ 0x78
 80100ac:	f009 f994 	bl	80193d8 <memset>
 80100b0:	a816      	add	r0, sp, #88	@ 0x58
 80100b2:	f7fb fc8d 	bl	800b9d0 <ucdr_buffer_remaining>
 80100b6:	2804      	cmp	r0, #4
 80100b8:	d814      	bhi.n	80100e4 <uxr_ping_agent_attempts+0x11c>
 80100ba:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 80100be:	f002 f839 	bl	8012134 <uxr_millis>
 80100c2:	1b00      	subs	r0, r0, r4
 80100c4:	1a2d      	subs	r5, r5, r0
 80100c6:	f002 f835 	bl	8012134 <uxr_millis>
 80100ca:	2d00      	cmp	r5, #0
 80100cc:	4604      	mov	r4, r0
 80100ce:	dd2a      	ble.n	8010126 <uxr_ping_agent_attempts+0x15e>
 80100d0:	f1bb 0f00 	cmp.w	fp, #0
 80100d4:	d0c3      	beq.n	801005e <uxr_ping_agent_attempts+0x96>
 80100d6:	46bb      	mov	fp, r7
 80100d8:	4658      	mov	r0, fp
 80100da:	b051      	add	sp, #324	@ 0x144
 80100dc:	ecbd 8b02 	vpop	{d8}
 80100e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e4:	f10d 0316 	add.w	r3, sp, #22
 80100e8:	f10d 0213 	add.w	r2, sp, #19
 80100ec:	f10d 0112 	add.w	r1, sp, #18
 80100f0:	a816      	add	r0, sp, #88	@ 0x58
 80100f2:	f88d a012 	strb.w	sl, [sp, #18]
 80100f6:	f8ad a016 	strh.w	sl, [sp, #22]
 80100fa:	f88d a013 	strb.w	sl, [sp, #19]
 80100fe:	f002 fa1f 	bl	8012540 <uxr_deserialize_submessage_header>
 8010102:	a816      	add	r0, sp, #88	@ 0x58
 8010104:	f7fb fc64 	bl	800b9d0 <ucdr_buffer_remaining>
 8010108:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801010c:	4298      	cmp	r0, r3
 801010e:	d3d4      	bcc.n	80100ba <uxr_ping_agent_attempts+0xf2>
 8010110:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8010114:	2b06      	cmp	r3, #6
 8010116:	d1d0      	bne.n	80100ba <uxr_ping_agent_attempts+0xf2>
 8010118:	a916      	add	r1, sp, #88	@ 0x58
 801011a:	a81e      	add	r0, sp, #120	@ 0x78
 801011c:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8010120:	f000 fad0 	bl	80106c4 <read_submessage_info>
 8010124:	e7c9      	b.n	80100ba <uxr_ping_agent_attempts+0xf2>
 8010126:	f1bb 0f00 	cmp.w	fp, #0
 801012a:	d1d4      	bne.n	80100d6 <uxr_ping_agent_attempts+0x10e>
 801012c:	f109 0901 	add.w	r9, r9, #1
 8010130:	e786      	b.n	8010040 <uxr_ping_agent_attempts+0x78>
 8010132:	bf00      	nop
 8010134:	0801a3f0 	.word	0x0801a3f0

08010138 <uxr_buffer_request_data>:
 8010138:	b530      	push	{r4, r5, lr}
 801013a:	b095      	sub	sp, #84	@ 0x54
 801013c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010140:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010142:	9303      	str	r3, [sp, #12]
 8010144:	2200      	movs	r2, #0
 8010146:	2d00      	cmp	r5, #0
 8010148:	bf14      	ite	ne
 801014a:	2101      	movne	r1, #1
 801014c:	4611      	moveq	r1, r2
 801014e:	4604      	mov	r4, r0
 8010150:	f88d 301c 	strb.w	r3, [sp, #28]
 8010154:	f88d 201d 	strb.w	r2, [sp, #29]
 8010158:	f88d 201e 	strb.w	r2, [sp, #30]
 801015c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010160:	d021      	beq.n	80101a6 <uxr_buffer_request_data+0x6e>
 8010162:	682a      	ldr	r2, [r5, #0]
 8010164:	686b      	ldr	r3, [r5, #4]
 8010166:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801016a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801016e:	2210      	movs	r2, #16
 8010170:	2308      	movs	r3, #8
 8010172:	2100      	movs	r1, #0
 8010174:	e9cd 3100 	strd	r3, r1, [sp]
 8010178:	4620      	mov	r0, r4
 801017a:	9905      	ldr	r1, [sp, #20]
 801017c:	ab0c      	add	r3, sp, #48	@ 0x30
 801017e:	f001 f863 	bl	8011248 <uxr_prepare_stream_to_write_submessage>
 8010182:	b918      	cbnz	r0, 801018c <uxr_buffer_request_data+0x54>
 8010184:	4604      	mov	r4, r0
 8010186:	4620      	mov	r0, r4
 8010188:	b015      	add	sp, #84	@ 0x54
 801018a:	bd30      	pop	{r4, r5, pc}
 801018c:	9904      	ldr	r1, [sp, #16]
 801018e:	aa06      	add	r2, sp, #24
 8010190:	4620      	mov	r0, r4
 8010192:	f001 f98f 	bl	80114b4 <uxr_init_base_object_request>
 8010196:	a906      	add	r1, sp, #24
 8010198:	4604      	mov	r4, r0
 801019a:	a80c      	add	r0, sp, #48	@ 0x30
 801019c:	f003 f930 	bl	8013400 <uxr_serialize_READ_DATA_Payload>
 80101a0:	4620      	mov	r0, r4
 80101a2:	b015      	add	sp, #84	@ 0x54
 80101a4:	bd30      	pop	{r4, r5, pc}
 80101a6:	2208      	movs	r2, #8
 80101a8:	e7e2      	b.n	8010170 <uxr_buffer_request_data+0x38>
 80101aa:	bf00      	nop

080101ac <uxr_buffer_cancel_data>:
 80101ac:	b510      	push	{r4, lr}
 80101ae:	b094      	sub	sp, #80	@ 0x50
 80101b0:	2300      	movs	r3, #0
 80101b2:	9202      	str	r2, [sp, #8]
 80101b4:	9205      	str	r2, [sp, #20]
 80101b6:	9301      	str	r3, [sp, #4]
 80101b8:	2201      	movs	r2, #1
 80101ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 80101be:	f88d 301e 	strb.w	r3, [sp, #30]
 80101c2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80101c6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80101ca:	2308      	movs	r3, #8
 80101cc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	2210      	movs	r2, #16
 80101d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80101d6:	4604      	mov	r4, r0
 80101d8:	9103      	str	r1, [sp, #12]
 80101da:	f001 f835 	bl	8011248 <uxr_prepare_stream_to_write_submessage>
 80101de:	b918      	cbnz	r0, 80101e8 <uxr_buffer_cancel_data+0x3c>
 80101e0:	4604      	mov	r4, r0
 80101e2:	4620      	mov	r0, r4
 80101e4:	b014      	add	sp, #80	@ 0x50
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	9905      	ldr	r1, [sp, #20]
 80101ea:	aa06      	add	r2, sp, #24
 80101ec:	4620      	mov	r0, r4
 80101ee:	f001 f961 	bl	80114b4 <uxr_init_base_object_request>
 80101f2:	a906      	add	r1, sp, #24
 80101f4:	4604      	mov	r4, r0
 80101f6:	a80c      	add	r0, sp, #48	@ 0x30
 80101f8:	f003 f902 	bl	8013400 <uxr_serialize_READ_DATA_Payload>
 80101fc:	4620      	mov	r0, r4
 80101fe:	b014      	add	sp, #80	@ 0x50
 8010200:	bd10      	pop	{r4, pc}
 8010202:	bf00      	nop

08010204 <read_submessage_format>:
 8010204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010208:	b095      	sub	sp, #84	@ 0x54
 801020a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801020e:	b113      	cbz	r3, 8010216 <read_submessage_format+0x12>
 8010210:	b015      	add	sp, #84	@ 0x54
 8010212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010216:	460c      	mov	r4, r1
 8010218:	4615      	mov	r5, r2
 801021a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801021e:	4607      	mov	r7, r0
 8010220:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010222:	9004      	str	r0, [sp, #16]
 8010224:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010226:	9005      	str	r0, [sp, #20]
 8010228:	1a52      	subs	r2, r2, r1
 801022a:	a80c      	add	r0, sp, #48	@ 0x30
 801022c:	4699      	mov	r9, r3
 801022e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010232:	f7fb fb9d 	bl	800b970 <ucdr_init_buffer>
 8010236:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801023a:	a80c      	add	r0, sp, #48	@ 0x30
 801023c:	f7fb fb6c 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8010240:	69e2      	ldr	r2, [r4, #28]
 8010242:	b19a      	cbz	r2, 801026c <read_submessage_format+0x68>
 8010244:	f1b8 0f07 	cmp.w	r8, #7
 8010248:	f882 9014 	strb.w	r9, [r2, #20]
 801024c:	d040      	beq.n	80102d0 <read_submessage_format+0xcc>
 801024e:	f1b8 0f08 	cmp.w	r8, #8
 8010252:	d02e      	beq.n	80102b2 <read_submessage_format+0xae>
 8010254:	f1b8 0f06 	cmp.w	r8, #6
 8010258:	d011      	beq.n	801027e <read_submessage_format+0x7a>
 801025a:	2301      	movs	r3, #1
 801025c:	7513      	strb	r3, [r2, #20]
 801025e:	4629      	mov	r1, r5
 8010260:	4620      	mov	r0, r4
 8010262:	f7fb fbd5 	bl	800ba10 <ucdr_advance_buffer>
 8010266:	b015      	add	sp, #84	@ 0x54
 8010268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801026c:	f1b8 0f07 	cmp.w	r8, #7
 8010270:	d02e      	beq.n	80102d0 <read_submessage_format+0xcc>
 8010272:	f1b8 0f08 	cmp.w	r8, #8
 8010276:	d01c      	beq.n	80102b2 <read_submessage_format+0xae>
 8010278:	f1b8 0f06 	cmp.w	r8, #6
 801027c:	d1ef      	bne.n	801025e <read_submessage_format+0x5a>
 801027e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010282:	f1b8 0f00 	cmp.w	r8, #0
 8010286:	d011      	beq.n	80102ac <read_submessage_format+0xa8>
 8010288:	ab0c      	add	r3, sp, #48	@ 0x30
 801028a:	e9cd 3500 	strd	r3, r5, [sp]
 801028e:	2306      	movs	r3, #6
 8010290:	f88d 3016 	strb.w	r3, [sp, #22]
 8010294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010298:	9302      	str	r3, [sp, #8]
 801029a:	4632      	mov	r2, r6
 801029c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80102a0:	4638      	mov	r0, r7
 80102a2:	47c0      	blx	r8
 80102a4:	2301      	movs	r3, #1
 80102a6:	69e2      	ldr	r2, [r4, #28]
 80102a8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80102ac:	2a00      	cmp	r2, #0
 80102ae:	d1d4      	bne.n	801025a <read_submessage_format+0x56>
 80102b0:	e7d5      	b.n	801025e <read_submessage_format+0x5a>
 80102b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d0f8      	beq.n	80102ac <read_submessage_format+0xa8>
 80102ba:	a906      	add	r1, sp, #24
 80102bc:	a80c      	add	r0, sp, #48	@ 0x30
 80102be:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80102c2:	f003 f963 	bl	801358c <uxr_deserialize_SampleIdentity>
 80102c6:	b9a0      	cbnz	r0, 80102f2 <read_submessage_format+0xee>
 80102c8:	69e2      	ldr	r2, [r4, #28]
 80102ca:	2a00      	cmp	r2, #0
 80102cc:	d1c5      	bne.n	801025a <read_submessage_format+0x56>
 80102ce:	e7c6      	b.n	801025e <read_submessage_format+0x5a>
 80102d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102d4:	b13b      	cbz	r3, 80102e6 <read_submessage_format+0xe2>
 80102d6:	a906      	add	r1, sp, #24
 80102d8:	a80c      	add	r0, sp, #48	@ 0x30
 80102da:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80102de:	f002 fe15 	bl	8012f0c <uxr_deserialize_BaseObjectRequest>
 80102e2:	bb60      	cbnz	r0, 801033e <read_submessage_format+0x13a>
 80102e4:	69e2      	ldr	r2, [r4, #28]
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	442b      	add	r3, r5
 80102ea:	60a3      	str	r3, [r4, #8]
 80102ec:	2a00      	cmp	r2, #0
 80102ee:	d1b4      	bne.n	801025a <read_submessage_format+0x56>
 80102f0:	e7b5      	b.n	801025e <read_submessage_format+0x5a>
 80102f2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80102f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102f8:	1a52      	subs	r2, r2, r1
 80102fa:	eba8 0803 	sub.w	r8, r8, r3
 80102fe:	a80c      	add	r0, sp, #48	@ 0x30
 8010300:	f7fb fb36 	bl	800b970 <ucdr_init_buffer>
 8010304:	44a8      	add	r8, r5
 8010306:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801030a:	a80c      	add	r0, sp, #48	@ 0x30
 801030c:	f7fb fb04 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8010310:	fa1f f888 	uxth.w	r8, r8
 8010314:	ab0c      	add	r3, sp, #48	@ 0x30
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	f8cd 8004 	str.w	r8, [sp, #4]
 801031c:	2108      	movs	r1, #8
 801031e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010322:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010326:	9102      	str	r1, [sp, #8]
 8010328:	ab06      	add	r3, sp, #24
 801032a:	4632      	mov	r2, r6
 801032c:	9905      	ldr	r1, [sp, #20]
 801032e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010332:	4638      	mov	r0, r7
 8010334:	47b0      	blx	r6
 8010336:	2301      	movs	r3, #1
 8010338:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801033c:	e7c4      	b.n	80102c8 <read_submessage_format+0xc4>
 801033e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010342:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010344:	1a52      	subs	r2, r2, r1
 8010346:	a80c      	add	r0, sp, #48	@ 0x30
 8010348:	eba8 0803 	sub.w	r8, r8, r3
 801034c:	f7fb fb10 	bl	800b970 <ucdr_init_buffer>
 8010350:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010354:	a80c      	add	r0, sp, #48	@ 0x30
 8010356:	f7fb fadf 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 801035a:	ab0c      	add	r3, sp, #48	@ 0x30
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010362:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010366:	44a8      	add	r8, r5
 8010368:	fa1f f888 	uxth.w	r8, r8
 801036c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010370:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010374:	2107      	movs	r1, #7
 8010376:	f88d 1016 	strb.w	r1, [sp, #22]
 801037a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801037e:	9102      	str	r1, [sp, #8]
 8010380:	4632      	mov	r2, r6
 8010382:	b29b      	uxth	r3, r3
 8010384:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010388:	9905      	ldr	r1, [sp, #20]
 801038a:	4638      	mov	r0, r7
 801038c:	47b0      	blx	r6
 801038e:	2301      	movs	r3, #1
 8010390:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010394:	e7a6      	b.n	80102e4 <read_submessage_format+0xe0>
 8010396:	bf00      	nop

08010398 <on_get_fragmentation_info>:
 8010398:	b500      	push	{lr}
 801039a:	b08b      	sub	sp, #44	@ 0x2c
 801039c:	4601      	mov	r1, r0
 801039e:	2204      	movs	r2, #4
 80103a0:	a802      	add	r0, sp, #8
 80103a2:	f7fb fae5 	bl	800b970 <ucdr_init_buffer>
 80103a6:	f10d 0305 	add.w	r3, sp, #5
 80103aa:	f10d 0206 	add.w	r2, sp, #6
 80103ae:	a901      	add	r1, sp, #4
 80103b0:	a802      	add	r0, sp, #8
 80103b2:	f001 fe93 	bl	80120dc <uxr_read_submessage_header>
 80103b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80103ba:	2b0d      	cmp	r3, #13
 80103bc:	d003      	beq.n	80103c6 <on_get_fragmentation_info+0x2e>
 80103be:	2000      	movs	r0, #0
 80103c0:	b00b      	add	sp, #44	@ 0x2c
 80103c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80103c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80103ca:	f013 0f02 	tst.w	r3, #2
 80103ce:	bf14      	ite	ne
 80103d0:	2002      	movne	r0, #2
 80103d2:	2001      	moveq	r0, #1
 80103d4:	b00b      	add	sp, #44	@ 0x2c
 80103d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80103da:	bf00      	nop

080103dc <read_submessage_get_info>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	2500      	movs	r5, #0
 80103e0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80103e4:	4604      	mov	r4, r0
 80103e6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80103ea:	460e      	mov	r6, r1
 80103ec:	a810      	add	r0, sp, #64	@ 0x40
 80103ee:	4629      	mov	r1, r5
 80103f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80103f4:	f008 fff0 	bl	80193d8 <memset>
 80103f8:	a903      	add	r1, sp, #12
 80103fa:	4630      	mov	r0, r6
 80103fc:	f002 ff42 	bl	8013284 <uxr_deserialize_GET_INFO_Payload>
 8010400:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010404:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010408:	4620      	mov	r0, r4
 801040a:	f001 f84b 	bl	80114a4 <uxr_session_header_offset>
 801040e:	462b      	mov	r3, r5
 8010410:	9000      	str	r0, [sp, #0]
 8010412:	220c      	movs	r2, #12
 8010414:	a905      	add	r1, sp, #20
 8010416:	a808      	add	r0, sp, #32
 8010418:	f7fb fa98 	bl	800b94c <ucdr_init_buffer_origin_offset>
 801041c:	a910      	add	r1, sp, #64	@ 0x40
 801041e:	a808      	add	r0, sp, #32
 8010420:	f002 ffa2 	bl	8013368 <uxr_serialize_INFO_Payload>
 8010424:	9b08      	ldr	r3, [sp, #32]
 8010426:	462a      	mov	r2, r5
 8010428:	4629      	mov	r1, r5
 801042a:	4620      	mov	r0, r4
 801042c:	f000 ffe4 	bl	80113f8 <uxr_stamp_session_header>
 8010430:	a808      	add	r0, sp, #32
 8010432:	f7fb fac9 	bl	800b9c8 <ucdr_buffer_length>
 8010436:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010438:	4602      	mov	r2, r0
 801043a:	a905      	add	r1, sp, #20
 801043c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010440:	47a0      	blx	r4
 8010442:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010446:	bd70      	pop	{r4, r5, r6, pc}

08010448 <write_submessage_acknack.isra.0>:
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	b092      	sub	sp, #72	@ 0x48
 801044c:	4605      	mov	r5, r0
 801044e:	460e      	mov	r6, r1
 8010450:	4614      	mov	r4, r2
 8010452:	f001 f827 	bl	80114a4 <uxr_session_header_offset>
 8010456:	a905      	add	r1, sp, #20
 8010458:	9000      	str	r0, [sp, #0]
 801045a:	2300      	movs	r3, #0
 801045c:	a80a      	add	r0, sp, #40	@ 0x28
 801045e:	2211      	movs	r2, #17
 8010460:	f7fb fa74 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8010464:	2218      	movs	r2, #24
 8010466:	fb02 5404 	mla	r4, r2, r4, r5
 801046a:	2300      	movs	r3, #0
 801046c:	2205      	movs	r2, #5
 801046e:	3450      	adds	r4, #80	@ 0x50
 8010470:	210a      	movs	r1, #10
 8010472:	a80a      	add	r0, sp, #40	@ 0x28
 8010474:	f001 fe18 	bl	80120a8 <uxr_buffer_submessage_header>
 8010478:	a903      	add	r1, sp, #12
 801047a:	4620      	mov	r0, r4
 801047c:	f007 fb4c 	bl	8017b18 <uxr_compute_acknack>
 8010480:	ba40      	rev16	r0, r0
 8010482:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010486:	a903      	add	r1, sp, #12
 8010488:	a80a      	add	r0, sp, #40	@ 0x28
 801048a:	f88d 6010 	strb.w	r6, [sp, #16]
 801048e:	f002 ffdb 	bl	8013448 <uxr_serialize_ACKNACK_Payload>
 8010492:	2200      	movs	r2, #0
 8010494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010496:	4611      	mov	r1, r2
 8010498:	4628      	mov	r0, r5
 801049a:	f000 ffad 	bl	80113f8 <uxr_stamp_session_header>
 801049e:	a80a      	add	r0, sp, #40	@ 0x28
 80104a0:	f7fb fa92 	bl	800b9c8 <ucdr_buffer_length>
 80104a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80104a6:	4602      	mov	r2, r0
 80104a8:	a905      	add	r1, sp, #20
 80104aa:	e9d3 0400 	ldrd	r0, r4, [r3]
 80104ae:	47a0      	blx	r4
 80104b0:	b012      	add	sp, #72	@ 0x48
 80104b2:	bd70      	pop	{r4, r5, r6, pc}
 80104b4:	0000      	movs	r0, r0
	...

080104b8 <uxr_init_session>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80104f0 <uxr_init_session+0x38>
 80104be:	2300      	movs	r3, #0
 80104c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80104c4:	4604      	mov	r4, r0
 80104c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80104ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80104ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80104d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80104d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80104da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80104de:	2181      	movs	r1, #129	@ 0x81
 80104e0:	f000 fef6 	bl	80112d0 <uxr_init_session_info>
 80104e4:	f104 0008 	add.w	r0, r4, #8
 80104e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ec:	f001 bcf8 	b.w	8011ee0 <uxr_init_stream_storage>
	...

080104f8 <uxr_set_status_callback>:
 80104f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop

08010500 <uxr_set_topic_callback>:
 8010500:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <uxr_set_request_callback>:
 8010508:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop

08010510 <uxr_set_reply_callback>:
 8010510:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop

08010518 <uxr_create_output_best_effort_stream>:
 8010518:	b510      	push	{r4, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	e9cd 2100 	strd	r2, r1, [sp]
 8010520:	4604      	mov	r4, r0
 8010522:	f000 ffbf 	bl	80114a4 <uxr_session_header_offset>
 8010526:	e9dd 2100 	ldrd	r2, r1, [sp]
 801052a:	4603      	mov	r3, r0
 801052c:	f104 0008 	add.w	r0, r4, #8
 8010530:	b004      	add	sp, #16
 8010532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010536:	f001 bd1d 	b.w	8011f74 <uxr_add_output_best_effort_buffer>
 801053a:	bf00      	nop

0801053c <uxr_create_output_reliable_stream>:
 801053c:	b510      	push	{r4, lr}
 801053e:	b088      	sub	sp, #32
 8010540:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010544:	4604      	mov	r4, r0
 8010546:	9303      	str	r3, [sp, #12]
 8010548:	f000 ffac 	bl	80114a4 <uxr_session_header_offset>
 801054c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010550:	9000      	str	r0, [sp, #0]
 8010552:	9905      	ldr	r1, [sp, #20]
 8010554:	f104 0008 	add.w	r0, r4, #8
 8010558:	f001 fd20 	bl	8011f9c <uxr_add_output_reliable_buffer>
 801055c:	2200      	movs	r2, #0
 801055e:	b2c3      	uxtb	r3, r0
 8010560:	f363 0207 	bfi	r2, r3, #0, #8
 8010564:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010568:	f363 220f 	bfi	r2, r3, #8, #8
 801056c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010570:	f363 4217 	bfi	r2, r3, #16, #8
 8010574:	0e03      	lsrs	r3, r0, #24
 8010576:	f363 621f 	bfi	r2, r3, #24, #8
 801057a:	4610      	mov	r0, r2
 801057c:	b008      	add	sp, #32
 801057e:	bd10      	pop	{r4, pc}

08010580 <uxr_create_input_best_effort_stream>:
 8010580:	b082      	sub	sp, #8
 8010582:	3008      	adds	r0, #8
 8010584:	b002      	add	sp, #8
 8010586:	f001 bd23 	b.w	8011fd0 <uxr_add_input_best_effort_buffer>
 801058a:	bf00      	nop

0801058c <uxr_create_input_reliable_stream>:
 801058c:	b510      	push	{r4, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	4c0b      	ldr	r4, [pc, #44]	@ (80105c0 <uxr_create_input_reliable_stream+0x34>)
 8010592:	9400      	str	r4, [sp, #0]
 8010594:	3008      	adds	r0, #8
 8010596:	f001 fd31 	bl	8011ffc <uxr_add_input_reliable_buffer>
 801059a:	2200      	movs	r2, #0
 801059c:	b2c3      	uxtb	r3, r0
 801059e:	f363 0207 	bfi	r2, r3, #0, #8
 80105a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80105a6:	f363 220f 	bfi	r2, r3, #8, #8
 80105aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80105ae:	f363 4217 	bfi	r2, r3, #16, #8
 80105b2:	0e03      	lsrs	r3, r0, #24
 80105b4:	f363 621f 	bfi	r2, r3, #24, #8
 80105b8:	4610      	mov	r0, r2
 80105ba:	b004      	add	sp, #16
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	08010399 	.word	0x08010399

080105c4 <uxr_epoch_nanos>:
 80105c4:	b510      	push	{r4, lr}
 80105c6:	4604      	mov	r4, r0
 80105c8:	f001 fdce 	bl	8012168 <uxr_nanos>
 80105cc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80105d0:	1ac0      	subs	r0, r0, r3
 80105d2:	eb61 0102 	sbc.w	r1, r1, r2
 80105d6:	bd10      	pop	{r4, pc}

080105d8 <uxr_flash_output_streams>:
 80105d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105dc:	7e03      	ldrb	r3, [r0, #24]
 80105de:	b084      	sub	sp, #16
 80105e0:	4604      	mov	r4, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d035      	beq.n	8010652 <uxr_flash_output_streams+0x7a>
 80105e6:	f04f 0900 	mov.w	r9, #0
 80105ea:	4648      	mov	r0, r9
 80105ec:	f10d 0802 	add.w	r8, sp, #2
 80105f0:	af03      	add	r7, sp, #12
 80105f2:	ae02      	add	r6, sp, #8
 80105f4:	e006      	b.n	8010604 <uxr_flash_output_streams+0x2c>
 80105f6:	7e23      	ldrb	r3, [r4, #24]
 80105f8:	f109 0901 	add.w	r9, r9, #1
 80105fc:	fa5f f089 	uxtb.w	r0, r9
 8010600:	4283      	cmp	r3, r0
 8010602:	d926      	bls.n	8010652 <uxr_flash_output_streams+0x7a>
 8010604:	2201      	movs	r2, #1
 8010606:	4611      	mov	r1, r2
 8010608:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801060c:	f001 fc14 	bl	8011e38 <uxr_stream_id>
 8010610:	3508      	adds	r5, #8
 8010612:	4684      	mov	ip, r0
 8010614:	4643      	mov	r3, r8
 8010616:	463a      	mov	r2, r7
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	f8cd c004 	str.w	ip, [sp, #4]
 8010620:	f007 fb00 	bl	8017c24 <uxr_prepare_best_effort_buffer_to_send>
 8010624:	2800      	cmp	r0, #0
 8010626:	d0e6      	beq.n	80105f6 <uxr_flash_output_streams+0x1e>
 8010628:	9b02      	ldr	r3, [sp, #8]
 801062a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801062e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010632:	4620      	mov	r0, r4
 8010634:	f000 fee0 	bl	80113f8 <uxr_stamp_session_header>
 8010638:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801063a:	9a03      	ldr	r2, [sp, #12]
 801063c:	685d      	ldr	r5, [r3, #4]
 801063e:	6818      	ldr	r0, [r3, #0]
 8010640:	9902      	ldr	r1, [sp, #8]
 8010642:	47a8      	blx	r5
 8010644:	f109 0901 	add.w	r9, r9, #1
 8010648:	7e23      	ldrb	r3, [r4, #24]
 801064a:	fa5f f089 	uxtb.w	r0, r9
 801064e:	4283      	cmp	r3, r0
 8010650:	d8d8      	bhi.n	8010604 <uxr_flash_output_streams+0x2c>
 8010652:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010656:	b38b      	cbz	r3, 80106bc <uxr_flash_output_streams+0xe4>
 8010658:	f04f 0900 	mov.w	r9, #0
 801065c:	f10d 0802 	add.w	r8, sp, #2
 8010660:	af03      	add	r7, sp, #12
 8010662:	ae02      	add	r6, sp, #8
 8010664:	4648      	mov	r0, r9
 8010666:	2201      	movs	r2, #1
 8010668:	2102      	movs	r1, #2
 801066a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801066e:	f001 fbe3 	bl	8011e38 <uxr_stream_id>
 8010672:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010676:	3520      	adds	r5, #32
 8010678:	9001      	str	r0, [sp, #4]
 801067a:	e00d      	b.n	8010698 <uxr_flash_output_streams+0xc0>
 801067c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010680:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010684:	9b02      	ldr	r3, [sp, #8]
 8010686:	f000 feb7 	bl	80113f8 <uxr_stamp_session_header>
 801068a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801068c:	9a03      	ldr	r2, [sp, #12]
 801068e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010692:	9902      	ldr	r1, [sp, #8]
 8010694:	6818      	ldr	r0, [r3, #0]
 8010696:	47d0      	blx	sl
 8010698:	4643      	mov	r3, r8
 801069a:	463a      	mov	r2, r7
 801069c:	4631      	mov	r1, r6
 801069e:	4628      	mov	r0, r5
 80106a0:	f007 fcde 	bl	8018060 <uxr_prepare_next_reliable_buffer_to_send>
 80106a4:	4603      	mov	r3, r0
 80106a6:	4620      	mov	r0, r4
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e7      	bne.n	801067c <uxr_flash_output_streams+0xa4>
 80106ac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80106b0:	f109 0901 	add.w	r9, r9, #1
 80106b4:	fa5f f089 	uxtb.w	r0, r9
 80106b8:	4283      	cmp	r3, r0
 80106ba:	d8d4      	bhi.n	8010666 <uxr_flash_output_streams+0x8e>
 80106bc:	b004      	add	sp, #16
 80106be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106c2:	bf00      	nop

080106c4 <read_submessage_info>:
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	460d      	mov	r5, r1
 80106ca:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80106ce:	4669      	mov	r1, sp
 80106d0:	4607      	mov	r7, r0
 80106d2:	4628      	mov	r0, r5
 80106d4:	f002 fcd0 	bl	8013078 <uxr_deserialize_BaseObjectReply>
 80106d8:	a902      	add	r1, sp, #8
 80106da:	4604      	mov	r4, r0
 80106dc:	4628      	mov	r0, r5
 80106de:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80106e2:	f7f9 fe4b 	bl	800a37c <ucdr_deserialize_bool>
 80106e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80106ea:	4004      	ands	r4, r0
 80106ec:	b2e4      	uxtb	r4, r4
 80106ee:	b95b      	cbnz	r3, 8010708 <read_submessage_info+0x44>
 80106f0:	a987      	add	r1, sp, #540	@ 0x21c
 80106f2:	4628      	mov	r0, r5
 80106f4:	f7f9 fe42 	bl	800a37c <ucdr_deserialize_bool>
 80106f8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80106fc:	4606      	mov	r6, r0
 80106fe:	b94b      	cbnz	r3, 8010714 <read_submessage_info+0x50>
 8010700:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010708:	a903      	add	r1, sp, #12
 801070a:	4628      	mov	r0, r5
 801070c:	f002 fb5c 	bl	8012dc8 <uxr_deserialize_ObjectVariant>
 8010710:	4004      	ands	r4, r0
 8010712:	e7ed      	b.n	80106f0 <read_submessage_info+0x2c>
 8010714:	a988      	add	r1, sp, #544	@ 0x220
 8010716:	4628      	mov	r0, r5
 8010718:	f7f9 fe5e 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 801071c:	4234      	tst	r4, r6
 801071e:	d0ef      	beq.n	8010700 <read_submessage_info+0x3c>
 8010720:	2800      	cmp	r0, #0
 8010722:	d0ed      	beq.n	8010700 <read_submessage_info+0x3c>
 8010724:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010728:	2b0d      	cmp	r3, #13
 801072a:	d1e9      	bne.n	8010700 <read_submessage_info+0x3c>
 801072c:	a98a      	add	r1, sp, #552	@ 0x228
 801072e:	4628      	mov	r0, r5
 8010730:	f7fa fbf8 	bl	800af24 <ucdr_deserialize_int16_t>
 8010734:	b140      	cbz	r0, 8010748 <read_submessage_info+0x84>
 8010736:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801073a:	2b00      	cmp	r3, #0
 801073c:	dd07      	ble.n	801074e <read_submessage_info+0x8a>
 801073e:	f1b8 0f00 	cmp.w	r8, #0
 8010742:	bf14      	ite	ne
 8010744:	2001      	movne	r0, #1
 8010746:	2002      	moveq	r0, #2
 8010748:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801074c:	e7d8      	b.n	8010700 <read_submessage_info+0x3c>
 801074e:	2000      	movs	r0, #0
 8010750:	e7fa      	b.n	8010748 <read_submessage_info+0x84>
 8010752:	bf00      	nop

08010754 <read_submessage_list>:
 8010754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010758:	b097      	sub	sp, #92	@ 0x5c
 801075a:	4ec1      	ldr	r6, [pc, #772]	@ (8010a60 <read_submessage_list+0x30c>)
 801075c:	9209      	str	r2, [sp, #36]	@ 0x24
 801075e:	4604      	mov	r4, r0
 8010760:	460d      	mov	r5, r1
 8010762:	f04f 0801 	mov.w	r8, #1
 8010766:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801076a:	aa0c      	add	r2, sp, #48	@ 0x30
 801076c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010770:	4628      	mov	r0, r5
 8010772:	f001 fcb3 	bl	80120dc <uxr_read_submessage_header>
 8010776:	2800      	cmp	r0, #0
 8010778:	f000 813e 	beq.w	80109f8 <read_submessage_list+0x2a4>
 801077c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010780:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010784:	3b02      	subs	r3, #2
 8010786:	2b0d      	cmp	r3, #13
 8010788:	d8ed      	bhi.n	8010766 <read_submessage_list+0x12>
 801078a:	a101      	add	r1, pc, #4	@ (adr r1, 8010790 <read_submessage_list+0x3c>)
 801078c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010790:	080109ef 	.word	0x080109ef
 8010794:	08010767 	.word	0x08010767
 8010798:	080109df 	.word	0x080109df
 801079c:	0801097d 	.word	0x0801097d
 80107a0:	08010973 	.word	0x08010973
 80107a4:	08010767 	.word	0x08010767
 80107a8:	08010767 	.word	0x08010767
 80107ac:	080108d3 	.word	0x080108d3
 80107b0:	08010863 	.word	0x08010863
 80107b4:	08010823 	.word	0x08010823
 80107b8:	08010767 	.word	0x08010767
 80107bc:	08010767 	.word	0x08010767
 80107c0:	08010767 	.word	0x08010767
 80107c4:	080107c9 	.word	0x080107c9
 80107c8:	a910      	add	r1, sp, #64	@ 0x40
 80107ca:	4628      	mov	r0, r5
 80107cc:	f002 fe8c 	bl	80134e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80107d0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80107d4:	f1b9 0f00 	cmp.w	r9, #0
 80107d8:	f000 8116 	beq.w	8010a08 <read_submessage_list+0x2b4>
 80107dc:	f001 fcc4 	bl	8012168 <uxr_nanos>
 80107e0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80107e8:	2100      	movs	r1, #0
 80107ea:	468c      	mov	ip, r1
 80107ec:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80107f0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80107f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80107f6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80107f8:	468c      	mov	ip, r1
 80107fa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80107fe:	46e2      	mov	sl, ip
 8010800:	46bc      	mov	ip, r7
 8010802:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010806:	fbc0 7106 	smlal	r7, r1, r0, r6
 801080a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801080e:	e9cd 7100 	strd	r7, r1, [sp]
 8010812:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010816:	9106      	str	r1, [sp, #24]
 8010818:	4620      	mov	r0, r4
 801081a:	47c8      	blx	r9
 801081c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010820:	e7a1      	b.n	8010766 <read_submessage_list+0x12>
 8010822:	a910      	add	r1, sp, #64	@ 0x40
 8010824:	4628      	mov	r0, r5
 8010826:	f002 fe4d 	bl	80134c4 <uxr_deserialize_HEARTBEAT_Payload>
 801082a:	2100      	movs	r1, #0
 801082c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010830:	f001 fb2c 	bl	8011e8c <uxr_stream_id_from_raw>
 8010834:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010838:	900f      	str	r0, [sp, #60]	@ 0x3c
 801083a:	4639      	mov	r1, r7
 801083c:	f104 0008 	add.w	r0, r4, #8
 8010840:	f001 fc12 	bl	8012068 <uxr_get_input_reliable_stream>
 8010844:	2800      	cmp	r0, #0
 8010846:	d08e      	beq.n	8010766 <read_submessage_list+0x12>
 8010848:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801084c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010850:	f007 f956 	bl	8017b00 <uxr_process_heartbeat>
 8010854:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010858:	463a      	mov	r2, r7
 801085a:	4620      	mov	r0, r4
 801085c:	f7ff fdf4 	bl	8010448 <write_submessage_acknack.isra.0>
 8010860:	e781      	b.n	8010766 <read_submessage_list+0x12>
 8010862:	a910      	add	r1, sp, #64	@ 0x40
 8010864:	4628      	mov	r0, r5
 8010866:	f002 fe05 	bl	8013474 <uxr_deserialize_ACKNACK_Payload>
 801086a:	2100      	movs	r1, #0
 801086c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010870:	f001 fb0c 	bl	8011e8c <uxr_stream_id_from_raw>
 8010874:	900d      	str	r0, [sp, #52]	@ 0x34
 8010876:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801087a:	f104 0008 	add.w	r0, r4, #8
 801087e:	f001 fbdf 	bl	8012040 <uxr_get_output_reliable_stream>
 8010882:	4607      	mov	r7, r0
 8010884:	2800      	cmp	r0, #0
 8010886:	f43f af6e 	beq.w	8010766 <read_submessage_list+0x12>
 801088a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801088e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010892:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010896:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801089a:	b289      	uxth	r1, r1
 801089c:	f007 fc8a 	bl	80181b4 <uxr_process_acknack>
 80108a0:	4638      	mov	r0, r7
 80108a2:	f007 fc47 	bl	8018134 <uxr_begin_output_nack_buffer_it>
 80108a6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80108aa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80108ae:	e006      	b.n	80108be <read_submessage_list+0x16a>
 80108b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80108b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80108b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80108ba:	6818      	ldr	r0, [r3, #0]
 80108bc:	47c8      	blx	r9
 80108be:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80108c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80108c4:	4651      	mov	r1, sl
 80108c6:	4638      	mov	r0, r7
 80108c8:	f007 fc36 	bl	8018138 <uxr_next_reliable_nack_buffer_to_send>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d1ef      	bne.n	80108b0 <read_submessage_list+0x15c>
 80108d0:	e749      	b.n	8010766 <read_submessage_list+0x12>
 80108d2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80108d6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80108da:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80108de:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80108e2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80108e6:	4651      	mov	r1, sl
 80108e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80108ec:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80108f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80108f4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80108f8:	4628      	mov	r0, r5
 80108fa:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80108fe:	f002 fb05 	bl	8012f0c <uxr_deserialize_BaseObjectRequest>
 8010902:	4650      	mov	r0, sl
 8010904:	a90f      	add	r1, sp, #60	@ 0x3c
 8010906:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801090a:	f000 fdf1 	bl	80114f0 <uxr_parse_base_object_request>
 801090e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010912:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010914:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010918:	9110      	str	r1, [sp, #64]	@ 0x40
 801091a:	3f04      	subs	r7, #4
 801091c:	f009 090e 	and.w	r9, r9, #14
 8010920:	b2bf      	uxth	r7, r7
 8010922:	f1bb 0f00 	cmp.w	fp, #0
 8010926:	d006      	beq.n	8010936 <read_submessage_list+0x1e2>
 8010928:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	4652      	mov	r2, sl
 8010930:	2300      	movs	r3, #0
 8010932:	4620      	mov	r0, r4
 8010934:	47d8      	blx	fp
 8010936:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010938:	b16a      	cbz	r2, 8010956 <read_submessage_list+0x202>
 801093a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801093c:	2100      	movs	r1, #0
 801093e:	3802      	subs	r0, #2
 8010940:	e002      	b.n	8010948 <read_submessage_list+0x1f4>
 8010942:	3101      	adds	r1, #1
 8010944:	4291      	cmp	r1, r2
 8010946:	d006      	beq.n	8010956 <read_submessage_list+0x202>
 8010948:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801094c:	4553      	cmp	r3, sl
 801094e:	d1f8      	bne.n	8010942 <read_submessage_list+0x1ee>
 8010950:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010952:	2200      	movs	r2, #0
 8010954:	545a      	strb	r2, [r3, r1]
 8010956:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801095a:	9102      	str	r1, [sp, #8]
 801095c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801095e:	9101      	str	r1, [sp, #4]
 8010960:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010962:	9100      	str	r1, [sp, #0]
 8010964:	464b      	mov	r3, r9
 8010966:	463a      	mov	r2, r7
 8010968:	4629      	mov	r1, r5
 801096a:	4620      	mov	r0, r4
 801096c:	f7ff fc4a 	bl	8010204 <read_submessage_format>
 8010970:	e6f9      	b.n	8010766 <read_submessage_list+0x12>
 8010972:	4629      	mov	r1, r5
 8010974:	4620      	mov	r0, r4
 8010976:	f7ff fea5 	bl	80106c4 <read_submessage_info>
 801097a:	e6f4      	b.n	8010766 <read_submessage_list+0x12>
 801097c:	2a00      	cmp	r2, #0
 801097e:	d03e      	beq.n	80109fe <read_submessage_list+0x2aa>
 8010980:	a910      	add	r1, sp, #64	@ 0x40
 8010982:	4628      	mov	r0, r5
 8010984:	f002 fcd2 	bl	801332c <uxr_deserialize_STATUS_Payload>
 8010988:	a90e      	add	r1, sp, #56	@ 0x38
 801098a:	aa0d      	add	r2, sp, #52	@ 0x34
 801098c:	a810      	add	r0, sp, #64	@ 0x40
 801098e:	f000 fdaf 	bl	80114f0 <uxr_parse_base_object_request>
 8010992:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010996:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010998:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801099c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80109a0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80109a2:	f1ba 0f00 	cmp.w	sl, #0
 80109a6:	d006      	beq.n	80109b6 <read_submessage_list+0x262>
 80109a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	463a      	mov	r2, r7
 80109b0:	464b      	mov	r3, r9
 80109b2:	4620      	mov	r0, r4
 80109b4:	47d0      	blx	sl
 80109b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80109b8:	2a00      	cmp	r2, #0
 80109ba:	f43f aed4 	beq.w	8010766 <read_submessage_list+0x12>
 80109be:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80109c0:	2100      	movs	r1, #0
 80109c2:	3802      	subs	r0, #2
 80109c4:	e003      	b.n	80109ce <read_submessage_list+0x27a>
 80109c6:	3101      	adds	r1, #1
 80109c8:	4291      	cmp	r1, r2
 80109ca:	f43f aecc 	beq.w	8010766 <read_submessage_list+0x12>
 80109ce:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80109d2:	42bb      	cmp	r3, r7
 80109d4:	d1f7      	bne.n	80109c6 <read_submessage_list+0x272>
 80109d6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80109d8:	f803 9001 	strb.w	r9, [r3, r1]
 80109dc:	e6c3      	b.n	8010766 <read_submessage_list+0x12>
 80109de:	2a00      	cmp	r2, #0
 80109e0:	f47f aec1 	bne.w	8010766 <read_submessage_list+0x12>
 80109e4:	4629      	mov	r1, r5
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 fcc8 	bl	801137c <uxr_read_create_session_status>
 80109ec:	e6bb      	b.n	8010766 <read_submessage_list+0x12>
 80109ee:	4629      	mov	r1, r5
 80109f0:	4620      	mov	r0, r4
 80109f2:	f7ff fcf3 	bl	80103dc <read_submessage_get_info>
 80109f6:	e6b6      	b.n	8010766 <read_submessage_list+0x12>
 80109f8:	b017      	add	sp, #92	@ 0x5c
 80109fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fe:	4629      	mov	r1, r5
 8010a00:	4620      	mov	r0, r4
 8010a02:	f000 fcc7 	bl	8011394 <uxr_read_delete_session_status>
 8010a06:	e6ae      	b.n	8010766 <read_submessage_list+0x12>
 8010a08:	f001 fbae 	bl	8012168 <uxr_nanos>
 8010a0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010a10:	464f      	mov	r7, r9
 8010a12:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010a16:	1812      	adds	r2, r2, r0
 8010a18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a1a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010a1c:	eb47 0101 	adc.w	r1, r7, r1
 8010a20:	464f      	mov	r7, r9
 8010a22:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010a26:	463b      	mov	r3, r7
 8010a28:	4684      	mov	ip, r0
 8010a2a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010a2e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010a32:	eb1c 0c00 	adds.w	ip, ip, r0
 8010a36:	464f      	mov	r7, r9
 8010a38:	eb43 0307 	adc.w	r3, r3, r7
 8010a3c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010a40:	eb61 0303 	sbc.w	r3, r1, r3
 8010a44:	0fda      	lsrs	r2, r3, #31
 8010a46:	eb12 020c 	adds.w	r2, r2, ip
 8010a4a:	f143 0300 	adc.w	r3, r3, #0
 8010a4e:	0852      	lsrs	r2, r2, #1
 8010a50:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010a54:	105b      	asrs	r3, r3, #1
 8010a56:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010a5a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010a5e:	e6dd      	b.n	801081c <read_submessage_list+0xc8>
 8010a60:	3b9aca00 	.word	0x3b9aca00

08010a64 <listen_message_reliably>:
 8010a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	1e0b      	subs	r3, r1, #0
 8010a6a:	b09d      	sub	sp, #116	@ 0x74
 8010a6c:	bfb8      	it	lt
 8010a6e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010a72:	4680      	mov	r8, r0
 8010a74:	9305      	str	r3, [sp, #20]
 8010a76:	f001 fb5d 	bl	8012134 <uxr_millis>
 8010a7a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010a7e:	4681      	mov	r9, r0
 8010a80:	2a00      	cmp	r2, #0
 8010a82:	f000 80a1 	beq.w	8010bc8 <listen_message_reliably+0x164>
 8010a86:	2600      	movs	r6, #0
 8010a88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010a8c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010a90:	9303      	str	r3, [sp, #12]
 8010a92:	4630      	mov	r0, r6
 8010a94:	460f      	mov	r7, r1
 8010a96:	e00f      	b.n	8010ab8 <listen_message_reliably+0x54>
 8010a98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010a9c:	9903      	ldr	r1, [sp, #12]
 8010a9e:	455a      	cmp	r2, fp
 8010aa0:	f106 0601 	add.w	r6, r6, #1
 8010aa4:	eb73 0101 	sbcs.w	r1, r3, r1
 8010aa8:	b2f0      	uxtb	r0, r6
 8010aaa:	da01      	bge.n	8010ab0 <listen_message_reliably+0x4c>
 8010aac:	4693      	mov	fp, r2
 8010aae:	9303      	str	r3, [sp, #12]
 8010ab0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010ab4:	4283      	cmp	r3, r0
 8010ab6:	d960      	bls.n	8010b7a <listen_message_reliably+0x116>
 8010ab8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010abc:	2102      	movs	r1, #2
 8010abe:	2201      	movs	r2, #1
 8010ac0:	f001 f9ba 	bl	8011e38 <uxr_stream_id>
 8010ac4:	00e4      	lsls	r4, r4, #3
 8010ac6:	f104 0520 	add.w	r5, r4, #32
 8010aca:	4445      	add	r5, r8
 8010acc:	4601      	mov	r1, r0
 8010ace:	463b      	mov	r3, r7
 8010ad0:	464a      	mov	r2, r9
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ad6:	f007 fb03 	bl	80180e0 <uxr_update_output_stream_heartbeat_timestamp>
 8010ada:	eb08 0304 	add.w	r3, r8, r4
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d0da      	beq.n	8010a98 <listen_message_reliably+0x34>
 8010ae2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010ae6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	4640      	mov	r0, r8
 8010aee:	f000 fcd9 	bl	80114a4 <uxr_session_header_offset>
 8010af2:	3501      	adds	r5, #1
 8010af4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010af8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010afc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010b00:	2300      	movs	r3, #0
 8010b02:	2211      	movs	r2, #17
 8010b04:	9000      	str	r0, [sp, #0]
 8010b06:	a90c      	add	r1, sp, #48	@ 0x30
 8010b08:	4650      	mov	r0, sl
 8010b0a:	f7fa ff1f 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	2205      	movs	r2, #5
 8010b12:	210b      	movs	r1, #11
 8010b14:	4650      	mov	r0, sl
 8010b16:	f001 fac7 	bl	80120a8 <uxr_buffer_submessage_header>
 8010b1a:	8968      	ldrh	r0, [r5, #10]
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	f007 fba1 	bl	8018264 <uxr_seq_num_add>
 8010b22:	892b      	ldrh	r3, [r5, #8]
 8010b24:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010b28:	4602      	mov	r2, r0
 8010b2a:	9b04      	ldr	r3, [sp, #16]
 8010b2c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010b30:	a90a      	add	r1, sp, #40	@ 0x28
 8010b32:	4650      	mov	r0, sl
 8010b34:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010b38:	f002 fcb0 	bl	801349c <uxr_serialize_HEARTBEAT_Payload>
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	4611      	mov	r1, r2
 8010b40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010b42:	4640      	mov	r0, r8
 8010b44:	f000 fc58 	bl	80113f8 <uxr_stamp_session_header>
 8010b48:	4650      	mov	r0, sl
 8010b4a:	f7fa ff3d 	bl	800b9c8 <ucdr_buffer_length>
 8010b4e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010b52:	4602      	mov	r2, r0
 8010b54:	a90c      	add	r1, sp, #48	@ 0x30
 8010b56:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010b5a:	4444      	add	r4, r8
 8010b5c:	47a8      	blx	r5
 8010b5e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010b62:	9903      	ldr	r1, [sp, #12]
 8010b64:	455a      	cmp	r2, fp
 8010b66:	f106 0601 	add.w	r6, r6, #1
 8010b6a:	eb73 0101 	sbcs.w	r1, r3, r1
 8010b6e:	b2f0      	uxtb	r0, r6
 8010b70:	db9c      	blt.n	8010aac <listen_message_reliably+0x48>
 8010b72:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010b76:	4283      	cmp	r3, r0
 8010b78:	d89e      	bhi.n	8010ab8 <listen_message_reliably+0x54>
 8010b7a:	9a03      	ldr	r2, [sp, #12]
 8010b7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b80:	429a      	cmp	r2, r3
 8010b82:	bf08      	it	eq
 8010b84:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010b88:	d01e      	beq.n	8010bc8 <listen_message_reliably+0x164>
 8010b8a:	ebab 0309 	sub.w	r3, fp, r9
 8010b8e:	9905      	ldr	r1, [sp, #20]
 8010b90:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bf08      	it	eq
 8010b98:	2301      	moveq	r3, #1
 8010b9a:	4299      	cmp	r1, r3
 8010b9c:	bfa8      	it	ge
 8010b9e:	4619      	movge	r1, r3
 8010ba0:	6894      	ldr	r4, [r2, #8]
 8010ba2:	6810      	ldr	r0, [r2, #0]
 8010ba4:	4689      	mov	r9, r1
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	aa08      	add	r2, sp, #32
 8010baa:	a907      	add	r1, sp, #28
 8010bac:	47a0      	blx	r4
 8010bae:	b968      	cbnz	r0, 8010bcc <listen_message_reliably+0x168>
 8010bb0:	9b05      	ldr	r3, [sp, #20]
 8010bb2:	eba3 0309 	sub.w	r3, r3, r9
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	9305      	str	r3, [sp, #20]
 8010bba:	f73f af5c 	bgt.w	8010a76 <listen_message_reliably+0x12>
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	b01d      	add	sp, #116	@ 0x74
 8010bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc8:	9b05      	ldr	r3, [sp, #20]
 8010bca:	e7e0      	b.n	8010b8e <listen_message_reliably+0x12a>
 8010bcc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	a80c      	add	r0, sp, #48	@ 0x30
 8010bd4:	f7fa fecc 	bl	800b970 <ucdr_init_buffer>
 8010bd8:	2500      	movs	r5, #0
 8010bda:	f10d 031a 	add.w	r3, sp, #26
 8010bde:	aa06      	add	r2, sp, #24
 8010be0:	a90c      	add	r1, sp, #48	@ 0x30
 8010be2:	4640      	mov	r0, r8
 8010be4:	f88d 5018 	strb.w	r5, [sp, #24]
 8010be8:	f000 fc1a 	bl	8011420 <uxr_read_session_header>
 8010bec:	b918      	cbnz	r0, 8010bf6 <listen_message_reliably+0x192>
 8010bee:	4620      	mov	r0, r4
 8010bf0:	b01d      	add	sp, #116	@ 0x74
 8010bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010bfc:	f001 f946 	bl	8011e8c <uxr_stream_id_from_raw>
 8010c00:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010c04:	2d01      	cmp	r5, #1
 8010c06:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010c0a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010c0e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010c12:	d04b      	beq.n	8010cac <listen_message_reliably+0x248>
 8010c14:	2d02      	cmp	r5, #2
 8010c16:	d00f      	beq.n	8010c38 <listen_message_reliably+0x1d4>
 8010c18:	2d00      	cmp	r5, #0
 8010c1a:	d1e8      	bne.n	8010bee <listen_message_reliably+0x18a>
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f001 f934 	bl	8011e8c <uxr_stream_id_from_raw>
 8010c24:	a90c      	add	r1, sp, #48	@ 0x30
 8010c26:	4602      	mov	r2, r0
 8010c28:	4640      	mov	r0, r8
 8010c2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010c2c:	f7ff fd92 	bl	8010754 <read_submessage_list>
 8010c30:	4620      	mov	r0, r4
 8010c32:	b01d      	add	sp, #116	@ 0x74
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	4631      	mov	r1, r6
 8010c3a:	f108 0008 	add.w	r0, r8, #8
 8010c3e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010c42:	f001 fa11 	bl	8012068 <uxr_get_input_reliable_stream>
 8010c46:	4607      	mov	r7, r0
 8010c48:	b338      	cbz	r0, 8010c9a <listen_message_reliably+0x236>
 8010c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c4c:	9203      	str	r2, [sp, #12]
 8010c4e:	a80c      	add	r0, sp, #48	@ 0x30
 8010c50:	f7fa febe 	bl	800b9d0 <ucdr_buffer_remaining>
 8010c54:	4603      	mov	r3, r0
 8010c56:	f10d 0019 	add.w	r0, sp, #25
 8010c5a:	9000      	str	r0, [sp, #0]
 8010c5c:	9a03      	ldr	r2, [sp, #12]
 8010c5e:	4651      	mov	r1, sl
 8010c60:	4638      	mov	r0, r7
 8010c62:	f006 fe53 	bl	801790c <uxr_receive_reliable_message>
 8010c66:	b1c0      	cbz	r0, 8010c9a <listen_message_reliably+0x236>
 8010c68:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010c6c:	b393      	cbz	r3, 8010cd4 <listen_message_reliably+0x270>
 8010c6e:	ad14      	add	r5, sp, #80	@ 0x50
 8010c70:	f04f 0a02 	mov.w	sl, #2
 8010c74:	e00a      	b.n	8010c8c <listen_message_reliably+0x228>
 8010c76:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010c7a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010c7e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c84:	4629      	mov	r1, r5
 8010c86:	4640      	mov	r0, r8
 8010c88:	f7ff fd64 	bl	8010754 <read_submessage_list>
 8010c8c:	2204      	movs	r2, #4
 8010c8e:	4629      	mov	r1, r5
 8010c90:	4638      	mov	r0, r7
 8010c92:	f006 febb 	bl	8017a0c <uxr_next_input_reliable_buffer_available>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d1ed      	bne.n	8010c76 <listen_message_reliably+0x212>
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	4632      	mov	r2, r6
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f7ff fbd2 	bl	8010448 <write_submessage_acknack.isra.0>
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	b01d      	add	sp, #116	@ 0x74
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	4631      	mov	r1, r6
 8010cae:	f108 0008 	add.w	r0, r8, #8
 8010cb2:	f001 f9cf 	bl	8012054 <uxr_get_input_best_effort_stream>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d099      	beq.n	8010bee <listen_message_reliably+0x18a>
 8010cba:	4651      	mov	r1, sl
 8010cbc:	f006 fd92 	bl	80177e4 <uxr_receive_best_effort_message>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d094      	beq.n	8010bee <listen_message_reliably+0x18a>
 8010cc4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010cc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cca:	a90c      	add	r1, sp, #48	@ 0x30
 8010ccc:	4640      	mov	r0, r8
 8010cce:	f7ff fd41 	bl	8010754 <read_submessage_list>
 8010cd2:	e78c      	b.n	8010bee <listen_message_reliably+0x18a>
 8010cd4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010cd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cda:	a90c      	add	r1, sp, #48	@ 0x30
 8010cdc:	4640      	mov	r0, r8
 8010cde:	f7ff fd39 	bl	8010754 <read_submessage_list>
 8010ce2:	e7c4      	b.n	8010c6e <listen_message_reliably+0x20a>

08010ce4 <uxr_run_session_timeout>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	460d      	mov	r5, r1
 8010cea:	f001 fa23 	bl	8012134 <uxr_millis>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7ff fc71 	bl	80105d8 <uxr_flash_output_streams>
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f7ff feb3 	bl	8010a64 <listen_message_reliably>
 8010cfe:	f001 fa19 	bl	8012134 <uxr_millis>
 8010d02:	1b83      	subs	r3, r0, r6
 8010d04:	1ae9      	subs	r1, r5, r3
 8010d06:	2900      	cmp	r1, #0
 8010d08:	dcf6      	bgt.n	8010cf8 <uxr_run_session_timeout+0x14>
 8010d0a:	f104 0008 	add.w	r0, r4, #8
 8010d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d12:	f001 b9b3 	b.w	801207c <uxr_output_streams_confirmed>
 8010d16:	bf00      	nop

08010d18 <uxr_run_session_until_data>:
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	f001 fa09 	bl	8012134 <uxr_millis>
 8010d22:	4606      	mov	r6, r0
 8010d24:	4620      	mov	r0, r4
 8010d26:	f7ff fc57 	bl	80105d8 <uxr_flash_output_streams>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010d30:	4629      	mov	r1, r5
 8010d32:	e005      	b.n	8010d40 <uxr_run_session_until_data+0x28>
 8010d34:	f001 f9fe 	bl	8012134 <uxr_millis>
 8010d38:	1b83      	subs	r3, r0, r6
 8010d3a:	1ae9      	subs	r1, r5, r3
 8010d3c:	2900      	cmp	r1, #0
 8010d3e:	dd07      	ble.n	8010d50 <uxr_run_session_until_data+0x38>
 8010d40:	4620      	mov	r0, r4
 8010d42:	f7ff fe8f 	bl	8010a64 <listen_message_reliably>
 8010d46:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d0f2      	beq.n	8010d34 <uxr_run_session_until_data+0x1c>
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010d54:	bd70      	pop	{r4, r5, r6, pc}
 8010d56:	bf00      	nop

08010d58 <uxr_run_session_until_confirm_delivery>:
 8010d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5c:	4606      	mov	r6, r0
 8010d5e:	460d      	mov	r5, r1
 8010d60:	f001 f9e8 	bl	8012134 <uxr_millis>
 8010d64:	4607      	mov	r7, r0
 8010d66:	4630      	mov	r0, r6
 8010d68:	f7ff fc36 	bl	80105d8 <uxr_flash_output_streams>
 8010d6c:	2d00      	cmp	r5, #0
 8010d6e:	f106 0808 	add.w	r8, r6, #8
 8010d72:	bfa8      	it	ge
 8010d74:	462c      	movge	r4, r5
 8010d76:	da07      	bge.n	8010d88 <uxr_run_session_until_confirm_delivery+0x30>
 8010d78:	e00e      	b.n	8010d98 <uxr_run_session_until_confirm_delivery+0x40>
 8010d7a:	f7ff fe73 	bl	8010a64 <listen_message_reliably>
 8010d7e:	f001 f9d9 	bl	8012134 <uxr_millis>
 8010d82:	1bc3      	subs	r3, r0, r7
 8010d84:	1aec      	subs	r4, r5, r3
 8010d86:	d407      	bmi.n	8010d98 <uxr_run_session_until_confirm_delivery+0x40>
 8010d88:	4640      	mov	r0, r8
 8010d8a:	f001 f977 	bl	801207c <uxr_output_streams_confirmed>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	4621      	mov	r1, r4
 8010d92:	4630      	mov	r0, r6
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d0f0      	beq.n	8010d7a <uxr_run_session_until_confirm_delivery+0x22>
 8010d98:	4640      	mov	r0, r8
 8010d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9e:	f001 b96d 	b.w	801207c <uxr_output_streams_confirmed>
 8010da2:	bf00      	nop

08010da4 <uxr_run_session_until_all_status>:
 8010da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010da8:	9c08      	ldr	r4, [sp, #32]
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	4691      	mov	r9, r2
 8010db0:	461d      	mov	r5, r3
 8010db2:	f7ff fc11 	bl	80105d8 <uxr_flash_output_streams>
 8010db6:	b124      	cbz	r4, 8010dc2 <uxr_run_session_until_all_status+0x1e>
 8010db8:	4622      	mov	r2, r4
 8010dba:	21ff      	movs	r1, #255	@ 0xff
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f008 fb0b 	bl	80193d8 <memset>
 8010dc2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010dc6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010dc8:	f001 f9b4 	bl	8012134 <uxr_millis>
 8010dcc:	3d01      	subs	r5, #1
 8010dce:	f1a9 0902 	sub.w	r9, r9, #2
 8010dd2:	4680      	mov	r8, r0
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f7ff fe44 	bl	8010a64 <listen_message_reliably>
 8010ddc:	f001 f9aa 	bl	8012134 <uxr_millis>
 8010de0:	eba0 0008 	sub.w	r0, r0, r8
 8010de4:	1a39      	subs	r1, r7, r0
 8010de6:	b344      	cbz	r4, 8010e3a <uxr_run_session_until_all_status+0x96>
 8010de8:	4628      	mov	r0, r5
 8010dea:	46ac      	mov	ip, r5
 8010dec:	2301      	movs	r3, #1
 8010dee:	e002      	b.n	8010df6 <uxr_run_session_until_all_status+0x52>
 8010df0:	42a3      	cmp	r3, r4
 8010df2:	d20d      	bcs.n	8010e10 <uxr_run_session_until_all_status+0x6c>
 8010df4:	3301      	adds	r3, #1
 8010df6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010dfa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010dfe:	d1f7      	bne.n	8010df0 <uxr_run_session_until_all_status+0x4c>
 8010e00:	42a3      	cmp	r3, r4
 8010e02:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010e06:	d213      	bcs.n	8010e30 <uxr_run_session_until_all_status+0x8c>
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	d0f3      	beq.n	8010df4 <uxr_run_session_until_all_status+0x50>
 8010e0c:	2900      	cmp	r1, #0
 8010e0e:	dce2      	bgt.n	8010dd6 <uxr_run_session_until_all_status+0x32>
 8010e10:	2300      	movs	r3, #0
 8010e12:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010e14:	442c      	add	r4, r5
 8010e16:	e001      	b.n	8010e1c <uxr_run_session_until_all_status+0x78>
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d812      	bhi.n	8010e42 <uxr_run_session_until_all_status+0x9e>
 8010e1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010e20:	4284      	cmp	r4, r0
 8010e22:	d1f9      	bne.n	8010e18 <uxr_run_session_until_all_status+0x74>
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	bf8c      	ite	hi
 8010e28:	2000      	movhi	r0, #0
 8010e2a:	2001      	movls	r0, #1
 8010e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e30:	2900      	cmp	r1, #0
 8010e32:	dded      	ble.n	8010e10 <uxr_run_session_until_all_status+0x6c>
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	d1ce      	bne.n	8010dd6 <uxr_run_session_until_all_status+0x32>
 8010e38:	e7ea      	b.n	8010e10 <uxr_run_session_until_all_status+0x6c>
 8010e3a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e42:	2000      	movs	r0, #0
 8010e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010e48 <uxr_run_session_until_pong>:
 8010e48:	b570      	push	{r4, r5, r6, lr}
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	460d      	mov	r5, r1
 8010e4e:	f001 f971 	bl	8012134 <uxr_millis>
 8010e52:	4606      	mov	r6, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	f7ff fbbf 	bl	80105d8 <uxr_flash_output_streams>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8010e60:	4629      	mov	r1, r5
 8010e62:	e005      	b.n	8010e70 <uxr_run_session_until_pong+0x28>
 8010e64:	f001 f966 	bl	8012134 <uxr_millis>
 8010e68:	1b83      	subs	r3, r0, r6
 8010e6a:	1ae9      	subs	r1, r5, r3
 8010e6c:	2900      	cmp	r1, #0
 8010e6e:	dd0c      	ble.n	8010e8a <uxr_run_session_until_pong+0x42>
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff fdf7 	bl	8010a64 <listen_message_reliably>
 8010e76:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d0f2      	beq.n	8010e64 <uxr_run_session_until_pong+0x1c>
 8010e7e:	f1a0 0001 	sub.w	r0, r0, #1
 8010e82:	fab0 f080 	clz	r0, r0
 8010e86:	0940      	lsrs	r0, r0, #5
 8010e88:	bd70      	pop	{r4, r5, r6, pc}
 8010e8a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010e8e:	f1a0 0001 	sub.w	r0, r0, #1
 8010e92:	fab0 f080 	clz	r0, r0
 8010e96:	0940      	lsrs	r0, r0, #5
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
 8010e9a:	bf00      	nop

08010e9c <wait_session_status>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	b09d      	sub	sp, #116	@ 0x74
 8010ea4:	20ff      	movs	r0, #255	@ 0xff
 8010ea6:	7160      	strb	r0, [r4, #5]
 8010ea8:	9303      	str	r3, [sp, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 80b6 	beq.w	801101c <wait_session_status+0x180>
 8010eb0:	468a      	mov	sl, r1
 8010eb2:	4691      	mov	r9, r2
 8010eb4:	f04f 0b00 	mov.w	fp, #0
 8010eb8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010eba:	464a      	mov	r2, r9
 8010ebc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ec0:	4651      	mov	r1, sl
 8010ec2:	47a8      	blx	r5
 8010ec4:	f001 f936 	bl	8012134 <uxr_millis>
 8010ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ecc:	4605      	mov	r5, r0
 8010ece:	e009      	b.n	8010ee4 <wait_session_status+0x48>
 8010ed0:	f001 f930 	bl	8012134 <uxr_millis>
 8010ed4:	1b40      	subs	r0, r0, r5
 8010ed6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dd40      	ble.n	8010f60 <wait_session_status+0xc4>
 8010ede:	7960      	ldrb	r0, [r4, #5]
 8010ee0:	28ff      	cmp	r0, #255	@ 0xff
 8010ee2:	d145      	bne.n	8010f70 <wait_session_status+0xd4>
 8010ee4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010ee6:	a908      	add	r1, sp, #32
 8010ee8:	6896      	ldr	r6, [r2, #8]
 8010eea:	6810      	ldr	r0, [r2, #0]
 8010eec:	aa09      	add	r2, sp, #36	@ 0x24
 8010eee:	47b0      	blx	r6
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	d0ed      	beq.n	8010ed0 <wait_session_status+0x34>
 8010ef4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010ef8:	a80c      	add	r0, sp, #48	@ 0x30
 8010efa:	f7fa fd39 	bl	800b970 <ucdr_init_buffer>
 8010efe:	2600      	movs	r6, #0
 8010f00:	f10d 031e 	add.w	r3, sp, #30
 8010f04:	aa07      	add	r2, sp, #28
 8010f06:	a90c      	add	r1, sp, #48	@ 0x30
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f88d 601c 	strb.w	r6, [sp, #28]
 8010f0e:	f000 fa87 	bl	8011420 <uxr_read_session_header>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d0dc      	beq.n	8010ed0 <wait_session_status+0x34>
 8010f16:	4631      	mov	r1, r6
 8010f18:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010f1c:	f000 ffb6 	bl	8011e8c <uxr_stream_id_from_raw>
 8010f20:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010f24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010f28:	9302      	str	r3, [sp, #8]
 8010f2a:	2f01      	cmp	r7, #1
 8010f2c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010f30:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010f34:	d05c      	beq.n	8010ff0 <wait_session_status+0x154>
 8010f36:	2f02      	cmp	r7, #2
 8010f38:	d020      	beq.n	8010f7c <wait_session_status+0xe0>
 8010f3a:	2f00      	cmp	r7, #0
 8010f3c:	d1c8      	bne.n	8010ed0 <wait_session_status+0x34>
 8010f3e:	4639      	mov	r1, r7
 8010f40:	4638      	mov	r0, r7
 8010f42:	f000 ffa3 	bl	8011e8c <uxr_stream_id_from_raw>
 8010f46:	a90c      	add	r1, sp, #48	@ 0x30
 8010f48:	4602      	mov	r2, r0
 8010f4a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f7ff fc01 	bl	8010754 <read_submessage_list>
 8010f52:	f001 f8ef 	bl	8012134 <uxr_millis>
 8010f56:	1b40      	subs	r0, r0, r5
 8010f58:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	dcbe      	bgt.n	8010ede <wait_session_status+0x42>
 8010f60:	9b03      	ldr	r3, [sp, #12]
 8010f62:	7960      	ldrb	r0, [r4, #5]
 8010f64:	f10b 0b01 	add.w	fp, fp, #1
 8010f68:	455b      	cmp	r3, fp
 8010f6a:	d001      	beq.n	8010f70 <wait_session_status+0xd4>
 8010f6c:	28ff      	cmp	r0, #255	@ 0xff
 8010f6e:	d0a3      	beq.n	8010eb8 <wait_session_status+0x1c>
 8010f70:	38ff      	subs	r0, #255	@ 0xff
 8010f72:	bf18      	it	ne
 8010f74:	2001      	movne	r0, #1
 8010f76:	b01d      	add	sp, #116	@ 0x74
 8010f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	4631      	mov	r1, r6
 8010f84:	f104 0008 	add.w	r0, r4, #8
 8010f88:	f001 f86e 	bl	8012068 <uxr_get_input_reliable_stream>
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	b348      	cbz	r0, 8010fe4 <wait_session_status+0x148>
 8010f90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f92:	9205      	str	r2, [sp, #20]
 8010f94:	a80c      	add	r0, sp, #48	@ 0x30
 8010f96:	f7fa fd1b 	bl	800b9d0 <ucdr_buffer_remaining>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	f10d 001d 	add.w	r0, sp, #29
 8010fa0:	9000      	str	r0, [sp, #0]
 8010fa2:	9a05      	ldr	r2, [sp, #20]
 8010fa4:	9902      	ldr	r1, [sp, #8]
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f006 fcb0 	bl	801790c <uxr_receive_reliable_message>
 8010fac:	b1d0      	cbz	r0, 8010fe4 <wait_session_status+0x148>
 8010fae:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d03a      	beq.n	801102c <wait_session_status+0x190>
 8010fb6:	9f04      	ldr	r7, [sp, #16]
 8010fb8:	e00a      	b.n	8010fd0 <wait_session_status+0x134>
 8010fba:	f04f 0302 	mov.w	r3, #2
 8010fbe:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010fc2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010fc6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010fca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010fcc:	f7ff fbc2 	bl	8010754 <read_submessage_list>
 8010fd0:	a914      	add	r1, sp, #80	@ 0x50
 8010fd2:	2204      	movs	r2, #4
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	f006 fd19 	bl	8017a0c <uxr_next_input_reliable_buffer_available>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	a914      	add	r1, sp, #80	@ 0x50
 8010fde:	4620      	mov	r0, r4
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1ea      	bne.n	8010fba <wait_session_status+0x11e>
 8010fe4:	9904      	ldr	r1, [sp, #16]
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f7ff fa2d 	bl	8010448 <write_submessage_acknack.isra.0>
 8010fee:	e76f      	b.n	8010ed0 <wait_session_status+0x34>
 8010ff0:	4631      	mov	r1, r6
 8010ff2:	f104 0008 	add.w	r0, r4, #8
 8010ff6:	f001 f82d 	bl	8012054 <uxr_get_input_best_effort_stream>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	f43f af68 	beq.w	8010ed0 <wait_session_status+0x34>
 8011000:	9902      	ldr	r1, [sp, #8]
 8011002:	f006 fbef 	bl	80177e4 <uxr_receive_best_effort_message>
 8011006:	2800      	cmp	r0, #0
 8011008:	f43f af62 	beq.w	8010ed0 <wait_session_status+0x34>
 801100c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011010:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011012:	a90c      	add	r1, sp, #48	@ 0x30
 8011014:	4620      	mov	r0, r4
 8011016:	f7ff fb9d 	bl	8010754 <read_submessage_list>
 801101a:	e759      	b.n	8010ed0 <wait_session_status+0x34>
 801101c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801101e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011022:	47a0      	blx	r4
 8011024:	2001      	movs	r0, #1
 8011026:	b01d      	add	sp, #116	@ 0x74
 8011028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011030:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011032:	a90c      	add	r1, sp, #48	@ 0x30
 8011034:	4620      	mov	r0, r4
 8011036:	f7ff fb8d 	bl	8010754 <read_submessage_list>
 801103a:	e7bc      	b.n	8010fb6 <wait_session_status+0x11a>

0801103c <uxr_delete_session_retries>:
 801103c:	b530      	push	{r4, r5, lr}
 801103e:	b08f      	sub	sp, #60	@ 0x3c
 8011040:	4604      	mov	r4, r0
 8011042:	460d      	mov	r5, r1
 8011044:	f000 fa2e 	bl	80114a4 <uxr_session_header_offset>
 8011048:	2300      	movs	r3, #0
 801104a:	2210      	movs	r2, #16
 801104c:	9000      	str	r0, [sp, #0]
 801104e:	a902      	add	r1, sp, #8
 8011050:	a806      	add	r0, sp, #24
 8011052:	f7fa fc7b 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8011056:	a906      	add	r1, sp, #24
 8011058:	4620      	mov	r0, r4
 801105a:	f000 f973 	bl	8011344 <uxr_buffer_delete_session>
 801105e:	2200      	movs	r2, #0
 8011060:	4611      	mov	r1, r2
 8011062:	9b06      	ldr	r3, [sp, #24]
 8011064:	4620      	mov	r0, r4
 8011066:	f000 f9c7 	bl	80113f8 <uxr_stamp_session_header>
 801106a:	a806      	add	r0, sp, #24
 801106c:	f7fa fcac 	bl	800b9c8 <ucdr_buffer_length>
 8011070:	462b      	mov	r3, r5
 8011072:	4602      	mov	r2, r0
 8011074:	a902      	add	r1, sp, #8
 8011076:	4620      	mov	r0, r4
 8011078:	f7ff ff10 	bl	8010e9c <wait_session_status>
 801107c:	b118      	cbz	r0, 8011086 <uxr_delete_session_retries+0x4a>
 801107e:	7960      	ldrb	r0, [r4, #5]
 8011080:	fab0 f080 	clz	r0, r0
 8011084:	0940      	lsrs	r0, r0, #5
 8011086:	b00f      	add	sp, #60	@ 0x3c
 8011088:	bd30      	pop	{r4, r5, pc}
 801108a:	bf00      	nop

0801108c <uxr_create_session>:
 801108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011090:	f100 0b08 	add.w	fp, r0, #8
 8011094:	b0ab      	sub	sp, #172	@ 0xac
 8011096:	4604      	mov	r4, r0
 8011098:	4658      	mov	r0, fp
 801109a:	f000 ff2b 	bl	8011ef4 <uxr_reset_stream_storage>
 801109e:	4620      	mov	r0, r4
 80110a0:	f000 fa00 	bl	80114a4 <uxr_session_header_offset>
 80110a4:	2300      	movs	r3, #0
 80110a6:	9000      	str	r0, [sp, #0]
 80110a8:	221c      	movs	r2, #28
 80110aa:	a90b      	add	r1, sp, #44	@ 0x2c
 80110ac:	a812      	add	r0, sp, #72	@ 0x48
 80110ae:	f7fa fc4d 	bl	800b94c <ucdr_init_buffer_origin_offset>
 80110b2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110b4:	8a1a      	ldrh	r2, [r3, #16]
 80110b6:	3a04      	subs	r2, #4
 80110b8:	b292      	uxth	r2, r2
 80110ba:	a912      	add	r1, sp, #72	@ 0x48
 80110bc:	4620      	mov	r0, r4
 80110be:	f000 f917 	bl	80112f0 <uxr_buffer_create_session>
 80110c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80110c4:	4620      	mov	r0, r4
 80110c6:	f000 f983 	bl	80113d0 <uxr_stamp_create_session_header>
 80110ca:	a812      	add	r0, sp, #72	@ 0x48
 80110cc:	f7fa fc7c 	bl	800b9c8 <ucdr_buffer_length>
 80110d0:	23ff      	movs	r3, #255	@ 0xff
 80110d2:	7163      	strb	r3, [r4, #5]
 80110d4:	230a      	movs	r3, #10
 80110d6:	46da      	mov	sl, fp
 80110d8:	9303      	str	r3, [sp, #12]
 80110da:	4683      	mov	fp, r0
 80110dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110de:	465a      	mov	r2, fp
 80110e0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80110e4:	a90b      	add	r1, sp, #44	@ 0x2c
 80110e6:	47a8      	blx	r5
 80110e8:	f001 f824 	bl	8012134 <uxr_millis>
 80110ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110f0:	4605      	mov	r5, r0
 80110f2:	e009      	b.n	8011108 <uxr_create_session+0x7c>
 80110f4:	f001 f81e 	bl	8012134 <uxr_millis>
 80110f8:	1b40      	subs	r0, r0, r5
 80110fa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80110fe:	2b00      	cmp	r3, #0
 8011100:	7962      	ldrb	r2, [r4, #5]
 8011102:	dd38      	ble.n	8011176 <uxr_create_session+0xea>
 8011104:	2aff      	cmp	r2, #255	@ 0xff
 8011106:	d13c      	bne.n	8011182 <uxr_create_session+0xf6>
 8011108:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801110a:	a907      	add	r1, sp, #28
 801110c:	6896      	ldr	r6, [r2, #8]
 801110e:	6810      	ldr	r0, [r2, #0]
 8011110:	aa08      	add	r2, sp, #32
 8011112:	47b0      	blx	r6
 8011114:	2800      	cmp	r0, #0
 8011116:	d0ed      	beq.n	80110f4 <uxr_create_session+0x68>
 8011118:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801111c:	a81a      	add	r0, sp, #104	@ 0x68
 801111e:	f7fa fc27 	bl	800b970 <ucdr_init_buffer>
 8011122:	2600      	movs	r6, #0
 8011124:	f10d 031a 	add.w	r3, sp, #26
 8011128:	aa06      	add	r2, sp, #24
 801112a:	a91a      	add	r1, sp, #104	@ 0x68
 801112c:	4620      	mov	r0, r4
 801112e:	f88d 6018 	strb.w	r6, [sp, #24]
 8011132:	f000 f975 	bl	8011420 <uxr_read_session_header>
 8011136:	2800      	cmp	r0, #0
 8011138:	d0dc      	beq.n	80110f4 <uxr_create_session+0x68>
 801113a:	4631      	mov	r1, r6
 801113c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011140:	f000 fea4 	bl	8011e8c <uxr_stream_id_from_raw>
 8011144:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011148:	2e01      	cmp	r6, #1
 801114a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801114e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011152:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011156:	d053      	beq.n	8011200 <uxr_create_session+0x174>
 8011158:	2e02      	cmp	r6, #2
 801115a:	d018      	beq.n	801118e <uxr_create_session+0x102>
 801115c:	2e00      	cmp	r6, #0
 801115e:	d1c9      	bne.n	80110f4 <uxr_create_session+0x68>
 8011160:	4631      	mov	r1, r6
 8011162:	4630      	mov	r0, r6
 8011164:	f000 fe92 	bl	8011e8c <uxr_stream_id_from_raw>
 8011168:	a91a      	add	r1, sp, #104	@ 0x68
 801116a:	4602      	mov	r2, r0
 801116c:	900a      	str	r0, [sp, #40]	@ 0x28
 801116e:	4620      	mov	r0, r4
 8011170:	f7ff faf0 	bl	8010754 <read_submessage_list>
 8011174:	e7be      	b.n	80110f4 <uxr_create_session+0x68>
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	3b01      	subs	r3, #1
 801117a:	9303      	str	r3, [sp, #12]
 801117c:	d001      	beq.n	8011182 <uxr_create_session+0xf6>
 801117e:	2aff      	cmp	r2, #255	@ 0xff
 8011180:	d0ac      	beq.n	80110dc <uxr_create_session+0x50>
 8011182:	2a00      	cmp	r2, #0
 8011184:	d051      	beq.n	801122a <uxr_create_session+0x19e>
 8011186:	2000      	movs	r0, #0
 8011188:	b02b      	add	sp, #172	@ 0xac
 801118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011192:	9304      	str	r3, [sp, #16]
 8011194:	4639      	mov	r1, r7
 8011196:	4650      	mov	r0, sl
 8011198:	f000 ff66 	bl	8012068 <uxr_get_input_reliable_stream>
 801119c:	4680      	mov	r8, r0
 801119e:	b348      	cbz	r0, 80111f4 <uxr_create_session+0x168>
 80111a0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80111a2:	9205      	str	r2, [sp, #20]
 80111a4:	a81a      	add	r0, sp, #104	@ 0x68
 80111a6:	f7fa fc13 	bl	800b9d0 <ucdr_buffer_remaining>
 80111aa:	4603      	mov	r3, r0
 80111ac:	f10d 0019 	add.w	r0, sp, #25
 80111b0:	9000      	str	r0, [sp, #0]
 80111b2:	9a05      	ldr	r2, [sp, #20]
 80111b4:	4649      	mov	r1, r9
 80111b6:	4640      	mov	r0, r8
 80111b8:	f006 fba8 	bl	801790c <uxr_receive_reliable_message>
 80111bc:	b1d0      	cbz	r0, 80111f4 <uxr_create_session+0x168>
 80111be:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d038      	beq.n	8011238 <uxr_create_session+0x1ac>
 80111c6:	9e04      	ldr	r6, [sp, #16]
 80111c8:	e00a      	b.n	80111e0 <uxr_create_session+0x154>
 80111ca:	f04f 0302 	mov.w	r3, #2
 80111ce:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80111d2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80111d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111dc:	f7ff faba 	bl	8010754 <read_submessage_list>
 80111e0:	a922      	add	r1, sp, #136	@ 0x88
 80111e2:	2204      	movs	r2, #4
 80111e4:	4640      	mov	r0, r8
 80111e6:	f006 fc11 	bl	8017a0c <uxr_next_input_reliable_buffer_available>
 80111ea:	4603      	mov	r3, r0
 80111ec:	a922      	add	r1, sp, #136	@ 0x88
 80111ee:	4620      	mov	r0, r4
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d1ea      	bne.n	80111ca <uxr_create_session+0x13e>
 80111f4:	9904      	ldr	r1, [sp, #16]
 80111f6:	463a      	mov	r2, r7
 80111f8:	4620      	mov	r0, r4
 80111fa:	f7ff f925 	bl	8010448 <write_submessage_acknack.isra.0>
 80111fe:	e779      	b.n	80110f4 <uxr_create_session+0x68>
 8011200:	4639      	mov	r1, r7
 8011202:	4650      	mov	r0, sl
 8011204:	f000 ff26 	bl	8012054 <uxr_get_input_best_effort_stream>
 8011208:	2800      	cmp	r0, #0
 801120a:	f43f af73 	beq.w	80110f4 <uxr_create_session+0x68>
 801120e:	4649      	mov	r1, r9
 8011210:	f006 fae8 	bl	80177e4 <uxr_receive_best_effort_message>
 8011214:	2800      	cmp	r0, #0
 8011216:	f43f af6d 	beq.w	80110f4 <uxr_create_session+0x68>
 801121a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801121e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011220:	a91a      	add	r1, sp, #104	@ 0x68
 8011222:	4620      	mov	r0, r4
 8011224:	f7ff fa96 	bl	8010754 <read_submessage_list>
 8011228:	e764      	b.n	80110f4 <uxr_create_session+0x68>
 801122a:	4650      	mov	r0, sl
 801122c:	f000 fe62 	bl	8011ef4 <uxr_reset_stream_storage>
 8011230:	2001      	movs	r0, #1
 8011232:	b02b      	add	sp, #172	@ 0xac
 8011234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011238:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801123c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801123e:	a91a      	add	r1, sp, #104	@ 0x68
 8011240:	4620      	mov	r0, r4
 8011242:	f7ff fa87 	bl	8010754 <read_submessage_list>
 8011246:	e7be      	b.n	80111c6 <uxr_create_session+0x13a>

08011248 <uxr_prepare_stream_to_write_submessage>:
 8011248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801124c:	b082      	sub	sp, #8
 801124e:	4682      	mov	sl, r0
 8011250:	4610      	mov	r0, r2
 8011252:	4615      	mov	r5, r2
 8011254:	461e      	mov	r6, r3
 8011256:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801125a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801125e:	9101      	str	r1, [sp, #4]
 8011260:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011264:	f000 ff60 	bl	8012128 <uxr_submessage_padding>
 8011268:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801126c:	f105 0904 	add.w	r9, r5, #4
 8011270:	2b01      	cmp	r3, #1
 8011272:	4481      	add	r9, r0
 8011274:	d01d      	beq.n	80112b2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011276:	2b02      	cmp	r3, #2
 8011278:	d116      	bne.n	80112a8 <uxr_prepare_stream_to_write_submessage+0x60>
 801127a:	4621      	mov	r1, r4
 801127c:	f10a 0008 	add.w	r0, sl, #8
 8011280:	f000 fede 	bl	8012040 <uxr_get_output_reliable_stream>
 8011284:	4604      	mov	r4, r0
 8011286:	b158      	cbz	r0, 80112a0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011288:	4649      	mov	r1, r9
 801128a:	4632      	mov	r2, r6
 801128c:	f006 fd7a 	bl	8017d84 <uxr_prepare_reliable_buffer_to_write>
 8011290:	4604      	mov	r4, r0
 8011292:	b12c      	cbz	r4, 80112a0 <uxr_prepare_stream_to_write_submessage+0x58>
 8011294:	4643      	mov	r3, r8
 8011296:	b2aa      	uxth	r2, r5
 8011298:	4639      	mov	r1, r7
 801129a:	4630      	mov	r0, r6
 801129c:	f000 ff04 	bl	80120a8 <uxr_buffer_submessage_header>
 80112a0:	4620      	mov	r0, r4
 80112a2:	b002      	add	sp, #8
 80112a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112a8:	2400      	movs	r4, #0
 80112aa:	4620      	mov	r0, r4
 80112ac:	b002      	add	sp, #8
 80112ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b2:	4621      	mov	r1, r4
 80112b4:	f10a 0008 	add.w	r0, sl, #8
 80112b8:	f000 feba 	bl	8012030 <uxr_get_output_best_effort_stream>
 80112bc:	4604      	mov	r4, r0
 80112be:	2800      	cmp	r0, #0
 80112c0:	d0ee      	beq.n	80112a0 <uxr_prepare_stream_to_write_submessage+0x58>
 80112c2:	4649      	mov	r1, r9
 80112c4:	4632      	mov	r2, r6
 80112c6:	f006 fc8d 	bl	8017be4 <uxr_prepare_best_effort_buffer_to_write>
 80112ca:	4604      	mov	r4, r0
 80112cc:	e7e1      	b.n	8011292 <uxr_prepare_stream_to_write_submessage+0x4a>
 80112ce:	bf00      	nop

080112d0 <uxr_init_session_info>:
 80112d0:	0e13      	lsrs	r3, r2, #24
 80112d2:	7043      	strb	r3, [r0, #1]
 80112d4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80112d8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80112dc:	7001      	strb	r1, [r0, #0]
 80112de:	70c3      	strb	r3, [r0, #3]
 80112e0:	2109      	movs	r1, #9
 80112e2:	23ff      	movs	r3, #255	@ 0xff
 80112e4:	f880 c002 	strb.w	ip, [r0, #2]
 80112e8:	7102      	strb	r2, [r0, #4]
 80112ea:	80c1      	strh	r1, [r0, #6]
 80112ec:	7143      	strb	r3, [r0, #5]
 80112ee:	4770      	bx	lr

080112f0 <uxr_buffer_create_session>:
 80112f0:	b530      	push	{r4, r5, lr}
 80112f2:	b089      	sub	sp, #36	@ 0x24
 80112f4:	2300      	movs	r3, #0
 80112f6:	4d12      	ldr	r5, [pc, #72]	@ (8011340 <uxr_buffer_create_session+0x50>)
 80112f8:	9307      	str	r3, [sp, #28]
 80112fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80112fe:	2201      	movs	r2, #1
 8011300:	9301      	str	r3, [sp, #4]
 8011302:	80c2      	strh	r2, [r0, #6]
 8011304:	f88d 2004 	strb.w	r2, [sp, #4]
 8011308:	682a      	ldr	r2, [r5, #0]
 801130a:	9200      	str	r2, [sp, #0]
 801130c:	88aa      	ldrh	r2, [r5, #4]
 801130e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011312:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011316:	9202      	str	r2, [sp, #8]
 8011318:	460c      	mov	r4, r1
 801131a:	7802      	ldrb	r2, [r0, #0]
 801131c:	9303      	str	r3, [sp, #12]
 801131e:	4619      	mov	r1, r3
 8011320:	f88d 200c 	strb.w	r2, [sp, #12]
 8011324:	4620      	mov	r0, r4
 8011326:	2210      	movs	r2, #16
 8011328:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801132c:	9306      	str	r3, [sp, #24]
 801132e:	f000 febb 	bl	80120a8 <uxr_buffer_submessage_header>
 8011332:	4669      	mov	r1, sp
 8011334:	4620      	mov	r0, r4
 8011336:	f001 feff 	bl	8013138 <uxr_serialize_CREATE_CLIENT_Payload>
 801133a:	b009      	add	sp, #36	@ 0x24
 801133c:	bd30      	pop	{r4, r5, pc}
 801133e:	bf00      	nop
 8011340:	0801a3f4 	.word	0x0801a3f4

08011344 <uxr_buffer_delete_session>:
 8011344:	b510      	push	{r4, lr}
 8011346:	4b0c      	ldr	r3, [pc, #48]	@ (8011378 <uxr_buffer_delete_session+0x34>)
 8011348:	b082      	sub	sp, #8
 801134a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801134e:	f8ad c006 	strh.w	ip, [sp, #6]
 8011352:	460c      	mov	r4, r1
 8011354:	2202      	movs	r2, #2
 8011356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801135a:	80c2      	strh	r2, [r0, #6]
 801135c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011360:	2204      	movs	r2, #4
 8011362:	2300      	movs	r3, #0
 8011364:	2103      	movs	r1, #3
 8011366:	4620      	mov	r0, r4
 8011368:	f000 fe9e 	bl	80120a8 <uxr_buffer_submessage_header>
 801136c:	a901      	add	r1, sp, #4
 801136e:	4620      	mov	r0, r4
 8011370:	f001 ff9c 	bl	80132ac <uxr_serialize_DELETE_Payload>
 8011374:	b002      	add	sp, #8
 8011376:	bd10      	pop	{r4, pc}
 8011378:	0801a3f4 	.word	0x0801a3f4

0801137c <uxr_read_create_session_status>:
 801137c:	b510      	push	{r4, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	4604      	mov	r4, r0
 8011382:	4608      	mov	r0, r1
 8011384:	a901      	add	r1, sp, #4
 8011386:	f001 ffa1 	bl	80132cc <uxr_deserialize_STATUS_AGENT_Payload>
 801138a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801138e:	7163      	strb	r3, [r4, #5]
 8011390:	b008      	add	sp, #32
 8011392:	bd10      	pop	{r4, pc}

08011394 <uxr_read_delete_session_status>:
 8011394:	b510      	push	{r4, lr}
 8011396:	4604      	mov	r4, r0
 8011398:	b084      	sub	sp, #16
 801139a:	4608      	mov	r0, r1
 801139c:	a902      	add	r1, sp, #8
 801139e:	f001 ffc5 	bl	801332c <uxr_deserialize_STATUS_Payload>
 80113a2:	88e3      	ldrh	r3, [r4, #6]
 80113a4:	2b02      	cmp	r3, #2
 80113a6:	d001      	beq.n	80113ac <uxr_read_delete_session_status+0x18>
 80113a8:	b004      	add	sp, #16
 80113aa:	bd10      	pop	{r4, pc}
 80113ac:	f10d 000a 	add.w	r0, sp, #10
 80113b0:	f7fe fd9c 	bl	800feec <uxr_object_id_from_raw>
 80113b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80113b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80113bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	2b02      	cmp	r3, #2
 80113c4:	bf04      	itt	eq
 80113c6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80113ca:	7163      	strbeq	r3, [r4, #5]
 80113cc:	b004      	add	sp, #16
 80113ce:	bd10      	pop	{r4, pc}

080113d0 <uxr_stamp_create_session_header>:
 80113d0:	b510      	push	{r4, lr}
 80113d2:	2208      	movs	r2, #8
 80113d4:	b08a      	sub	sp, #40	@ 0x28
 80113d6:	4604      	mov	r4, r0
 80113d8:	eb0d 0002 	add.w	r0, sp, r2
 80113dc:	f7fa fac8 	bl	800b970 <ucdr_init_buffer>
 80113e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113e4:	9400      	str	r4, [sp, #0]
 80113e6:	2300      	movs	r3, #0
 80113e8:	461a      	mov	r2, r3
 80113ea:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80113ee:	a802      	add	r0, sp, #8
 80113f0:	f001 f854 	bl	801249c <uxr_serialize_message_header>
 80113f4:	b00a      	add	sp, #40	@ 0x28
 80113f6:	bd10      	pop	{r4, pc}

080113f8 <uxr_stamp_session_header>:
 80113f8:	b530      	push	{r4, r5, lr}
 80113fa:	b08d      	sub	sp, #52	@ 0x34
 80113fc:	4604      	mov	r4, r0
 80113fe:	460d      	mov	r5, r1
 8011400:	9203      	str	r2, [sp, #12]
 8011402:	4619      	mov	r1, r3
 8011404:	a804      	add	r0, sp, #16
 8011406:	2208      	movs	r2, #8
 8011408:	f7fa fab2 	bl	800b970 <ucdr_init_buffer>
 801140c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	9400      	str	r4, [sp, #0]
 8011414:	462a      	mov	r2, r5
 8011416:	a804      	add	r0, sp, #16
 8011418:	f001 f840 	bl	801249c <uxr_serialize_message_header>
 801141c:	b00d      	add	sp, #52	@ 0x34
 801141e:	bd30      	pop	{r4, r5, pc}

08011420 <uxr_read_session_header>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	4607      	mov	r7, r0
 8011426:	b084      	sub	sp, #16
 8011428:	4608      	mov	r0, r1
 801142a:	460c      	mov	r4, r1
 801142c:	4615      	mov	r5, r2
 801142e:	461e      	mov	r6, r3
 8011430:	f7fa face 	bl	800b9d0 <ucdr_buffer_remaining>
 8011434:	2808      	cmp	r0, #8
 8011436:	d803      	bhi.n	8011440 <uxr_read_session_header+0x20>
 8011438:	2000      	movs	r0, #0
 801143a:	b004      	add	sp, #16
 801143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011440:	f10d 080c 	add.w	r8, sp, #12
 8011444:	4633      	mov	r3, r6
 8011446:	462a      	mov	r2, r5
 8011448:	f8cd 8000 	str.w	r8, [sp]
 801144c:	4620      	mov	r0, r4
 801144e:	f10d 010b 	add.w	r1, sp, #11
 8011452:	f001 f841 	bl	80124d8 <uxr_deserialize_message_header>
 8011456:	783a      	ldrb	r2, [r7, #0]
 8011458:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801145c:	4293      	cmp	r3, r2
 801145e:	d1eb      	bne.n	8011438 <uxr_read_session_header+0x18>
 8011460:	061b      	lsls	r3, r3, #24
 8011462:	d41c      	bmi.n	801149e <uxr_read_session_header+0x7e>
 8011464:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011468:	787b      	ldrb	r3, [r7, #1]
 801146a:	429a      	cmp	r2, r3
 801146c:	d003      	beq.n	8011476 <uxr_read_session_header+0x56>
 801146e:	2001      	movs	r0, #1
 8011470:	f080 0001 	eor.w	r0, r0, #1
 8011474:	e7e1      	b.n	801143a <uxr_read_session_header+0x1a>
 8011476:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801147a:	78bb      	ldrb	r3, [r7, #2]
 801147c:	429a      	cmp	r2, r3
 801147e:	f107 0102 	add.w	r1, r7, #2
 8011482:	d1f4      	bne.n	801146e <uxr_read_session_header+0x4e>
 8011484:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011488:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801148c:	429a      	cmp	r2, r3
 801148e:	d1ee      	bne.n	801146e <uxr_read_session_header+0x4e>
 8011490:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011494:	784b      	ldrb	r3, [r1, #1]
 8011496:	429a      	cmp	r2, r3
 8011498:	d1e9      	bne.n	801146e <uxr_read_session_header+0x4e>
 801149a:	2000      	movs	r0, #0
 801149c:	e7e8      	b.n	8011470 <uxr_read_session_header+0x50>
 801149e:	2001      	movs	r0, #1
 80114a0:	e7cb      	b.n	801143a <uxr_read_session_header+0x1a>
 80114a2:	bf00      	nop

080114a4 <uxr_session_header_offset>:
 80114a4:	f990 3000 	ldrsb.w	r3, [r0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	bfac      	ite	ge
 80114ac:	2008      	movge	r0, #8
 80114ae:	2004      	movlt	r0, #4
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop

080114b4 <uxr_init_base_object_request>:
 80114b4:	b510      	push	{r4, lr}
 80114b6:	88c3      	ldrh	r3, [r0, #6]
 80114b8:	b082      	sub	sp, #8
 80114ba:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80114be:	9101      	str	r1, [sp, #4]
 80114c0:	f1a3 010a 	sub.w	r1, r3, #10
 80114c4:	b289      	uxth	r1, r1
 80114c6:	42a1      	cmp	r1, r4
 80114c8:	d80e      	bhi.n	80114e8 <uxr_init_base_object_request+0x34>
 80114ca:	3301      	adds	r3, #1
 80114cc:	b29c      	uxth	r4, r3
 80114ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	80c4      	strh	r4, [r0, #6]
 80114d6:	9801      	ldr	r0, [sp, #4]
 80114d8:	7011      	strb	r1, [r2, #0]
 80114da:	7053      	strb	r3, [r2, #1]
 80114dc:	1c91      	adds	r1, r2, #2
 80114de:	f7fe fd19 	bl	800ff14 <uxr_object_id_to_raw>
 80114e2:	4620      	mov	r0, r4
 80114e4:	b002      	add	sp, #8
 80114e6:	bd10      	pop	{r4, pc}
 80114e8:	230a      	movs	r3, #10
 80114ea:	2100      	movs	r1, #0
 80114ec:	461c      	mov	r4, r3
 80114ee:	e7f1      	b.n	80114d4 <uxr_init_base_object_request+0x20>

080114f0 <uxr_parse_base_object_request>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	4604      	mov	r4, r0
 80114f4:	3002      	adds	r0, #2
 80114f6:	460d      	mov	r5, r1
 80114f8:	4616      	mov	r6, r2
 80114fa:	f7fe fcf7 	bl	800feec <uxr_object_id_from_raw>
 80114fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011502:	8028      	strh	r0, [r5, #0]
 8011504:	806b      	strh	r3, [r5, #2]
 8011506:	7822      	ldrb	r2, [r4, #0]
 8011508:	7863      	ldrb	r3, [r4, #1]
 801150a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801150e:	8033      	strh	r3, [r6, #0]
 8011510:	bd70      	pop	{r4, r5, r6, pc}
 8011512:	bf00      	nop

08011514 <uxr_init_framing_io>:
 8011514:	2300      	movs	r3, #0
 8011516:	7041      	strb	r1, [r0, #1]
 8011518:	7003      	strb	r3, [r0, #0]
 801151a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop

08011520 <uxr_write_framed_msg>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	4617      	mov	r7, r2
 8011526:	7842      	ldrb	r2, [r0, #1]
 8011528:	b083      	sub	sp, #12
 801152a:	460e      	mov	r6, r1
 801152c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011530:	469a      	mov	sl, r3
 8011532:	2901      	cmp	r1, #1
 8011534:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011538:	4604      	mov	r4, r0
 801153a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801153e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011542:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011546:	f240 8137 	bls.w	80117b8 <uxr_write_framed_msg+0x298>
 801154a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801154e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011552:	2901      	cmp	r1, #1
 8011554:	f04f 0202 	mov.w	r2, #2
 8011558:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801155c:	f240 808f 	bls.w	801167e <uxr_write_framed_msg+0x15e>
 8011560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011562:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011566:	b2dd      	uxtb	r5, r3
 8011568:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801156c:	2203      	movs	r2, #3
 801156e:	2901      	cmp	r1, #1
 8011570:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011574:	f240 809a 	bls.w	80116ac <uxr_write_framed_msg+0x18c>
 8011578:	18a1      	adds	r1, r4, r2
 801157a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801157c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011580:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011584:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011588:	3201      	adds	r2, #1
 801158a:	2801      	cmp	r0, #1
 801158c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011590:	f240 80a0 	bls.w	80116d4 <uxr_write_framed_msg+0x1b4>
 8011594:	18a0      	adds	r0, r4, r2
 8011596:	3201      	adds	r2, #1
 8011598:	b2d2      	uxtb	r2, r2
 801159a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801159e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f000 80a9 	beq.w	80116fa <uxr_write_framed_msg+0x1da>
 80115a8:	f04f 0900 	mov.w	r9, #0
 80115ac:	46c8      	mov	r8, r9
 80115ae:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80115b2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80115b6:	2901      	cmp	r1, #1
 80115b8:	f240 80c3 	bls.w	8011742 <uxr_write_framed_msg+0x222>
 80115bc:	2a29      	cmp	r2, #41	@ 0x29
 80115be:	f200 809f 	bhi.w	8011700 <uxr_write_framed_msg+0x1e0>
 80115c2:	18a1      	adds	r1, r4, r2
 80115c4:	3201      	adds	r2, #1
 80115c6:	b2d2      	uxtb	r2, r2
 80115c8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80115cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115d0:	ea89 0303 	eor.w	r3, r9, r3
 80115d4:	498c      	ldr	r1, [pc, #560]	@ (8011808 <uxr_write_framed_msg+0x2e8>)
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f108 0801 	add.w	r8, r8, #1
 80115dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115e0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80115e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115e6:	4543      	cmp	r3, r8
 80115e8:	d8e1      	bhi.n	80115ae <uxr_write_framed_msg+0x8e>
 80115ea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80115ee:	fa5f f889 	uxtb.w	r8, r9
 80115f2:	9301      	str	r3, [sp, #4]
 80115f4:	f04f 0900 	mov.w	r9, #0
 80115f8:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80115fc:	fa5f f18a 	uxtb.w	r1, sl
 8011600:	2901      	cmp	r1, #1
 8011602:	d921      	bls.n	8011648 <uxr_write_framed_msg+0x128>
 8011604:	2a29      	cmp	r2, #41	@ 0x29
 8011606:	f240 80af 	bls.w	8011768 <uxr_write_framed_msg+0x248>
 801160a:	2500      	movs	r5, #0
 801160c:	e000      	b.n	8011610 <uxr_write_framed_msg+0xf0>
 801160e:	b160      	cbz	r0, 801162a <uxr_write_framed_msg+0x10a>
 8011610:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011614:	1b52      	subs	r2, r2, r5
 8011616:	465b      	mov	r3, fp
 8011618:	4421      	add	r1, r4
 801161a:	4638      	mov	r0, r7
 801161c:	47b0      	blx	r6
 801161e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011622:	4405      	add	r5, r0
 8011624:	4295      	cmp	r5, r2
 8011626:	d3f2      	bcc.n	801160e <uxr_write_framed_msg+0xee>
 8011628:	d003      	beq.n	8011632 <uxr_write_framed_msg+0x112>
 801162a:	2000      	movs	r0, #0
 801162c:	b003      	add	sp, #12
 801162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011632:	fa5f f18a 	uxtb.w	r1, sl
 8011636:	f04f 0300 	mov.w	r3, #0
 801163a:	2901      	cmp	r1, #1
 801163c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011640:	f04f 0200 	mov.w	r2, #0
 8011644:	f200 8090 	bhi.w	8011768 <uxr_write_framed_msg+0x248>
 8011648:	1c51      	adds	r1, r2, #1
 801164a:	b2c9      	uxtb	r1, r1
 801164c:	2929      	cmp	r1, #41	@ 0x29
 801164e:	d8dc      	bhi.n	801160a <uxr_write_framed_msg+0xea>
 8011650:	18a5      	adds	r5, r4, r2
 8011652:	4421      	add	r1, r4
 8011654:	3202      	adds	r2, #2
 8011656:	f088 0820 	eor.w	r8, r8, #32
 801165a:	4648      	mov	r0, r9
 801165c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011660:	b2d2      	uxtb	r2, r2
 8011662:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011666:	f04f 0901 	mov.w	r9, #1
 801166a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801166e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011672:	2800      	cmp	r0, #0
 8011674:	f040 8085 	bne.w	8011782 <uxr_write_framed_msg+0x262>
 8011678:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801167c:	e7bc      	b.n	80115f8 <uxr_write_framed_msg+0xd8>
 801167e:	4611      	mov	r1, r2
 8011680:	f04f 0c03 	mov.w	ip, #3
 8011684:	2204      	movs	r2, #4
 8011686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011688:	4421      	add	r1, r4
 801168a:	b2dd      	uxtb	r5, r3
 801168c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011690:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011694:	44a4      	add	ip, r4
 8011696:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801169a:	f080 0020 	eor.w	r0, r0, #32
 801169e:	2901      	cmp	r1, #1
 80116a0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80116a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116a8:	f63f af66 	bhi.w	8011578 <uxr_write_framed_msg+0x58>
 80116ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116ae:	18a0      	adds	r0, r4, r2
 80116b0:	f085 0520 	eor.w	r5, r5, #32
 80116b4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80116b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80116bc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80116c0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80116c4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80116c8:	3202      	adds	r2, #2
 80116ca:	2801      	cmp	r0, #1
 80116cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116d0:	f63f af60 	bhi.w	8011594 <uxr_write_framed_msg+0x74>
 80116d4:	1c50      	adds	r0, r2, #1
 80116d6:	18a5      	adds	r5, r4, r2
 80116d8:	fa54 f080 	uxtab	r0, r4, r0
 80116dc:	3202      	adds	r2, #2
 80116de:	f081 0120 	eor.w	r1, r1, #32
 80116e2:	b2d2      	uxtb	r2, r2
 80116e4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80116e8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80116ec:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80116f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f47f af57 	bne.w	80115a8 <uxr_write_framed_msg+0x88>
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	4698      	mov	r8, r3
 80116fe:	e779      	b.n	80115f4 <uxr_write_framed_msg+0xd4>
 8011700:	2500      	movs	r5, #0
 8011702:	e001      	b.n	8011708 <uxr_write_framed_msg+0x1e8>
 8011704:	2800      	cmp	r0, #0
 8011706:	d090      	beq.n	801162a <uxr_write_framed_msg+0x10a>
 8011708:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801170c:	1b52      	subs	r2, r2, r5
 801170e:	465b      	mov	r3, fp
 8011710:	4421      	add	r1, r4
 8011712:	4638      	mov	r0, r7
 8011714:	47b0      	blx	r6
 8011716:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801171a:	4405      	add	r5, r0
 801171c:	4295      	cmp	r5, r2
 801171e:	d3f1      	bcc.n	8011704 <uxr_write_framed_msg+0x1e4>
 8011720:	d183      	bne.n	801162a <uxr_write_framed_msg+0x10a>
 8011722:	f04f 0300 	mov.w	r3, #0
 8011726:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801172a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801172c:	4543      	cmp	r3, r8
 801172e:	d964      	bls.n	80117fa <uxr_write_framed_msg+0x2da>
 8011730:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011734:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011738:	2901      	cmp	r1, #1
 801173a:	f04f 0200 	mov.w	r2, #0
 801173e:	f63f af3d 	bhi.w	80115bc <uxr_write_framed_msg+0x9c>
 8011742:	1c51      	adds	r1, r2, #1
 8011744:	b2c9      	uxtb	r1, r1
 8011746:	2929      	cmp	r1, #41	@ 0x29
 8011748:	d8da      	bhi.n	8011700 <uxr_write_framed_msg+0x1e0>
 801174a:	18a0      	adds	r0, r4, r2
 801174c:	4421      	add	r1, r4
 801174e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011752:	3202      	adds	r2, #2
 8011754:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011758:	b2d2      	uxtb	r2, r2
 801175a:	f083 0020 	eor.w	r0, r3, #32
 801175e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011762:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011766:	e733      	b.n	80115d0 <uxr_write_framed_msg+0xb0>
 8011768:	18a1      	adds	r1, r4, r2
 801176a:	3201      	adds	r2, #1
 801176c:	4648      	mov	r0, r9
 801176e:	b2d2      	uxtb	r2, r2
 8011770:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011774:	f04f 0901 	mov.w	r9, #1
 8011778:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801177c:	2800      	cmp	r0, #0
 801177e:	f43f af7b 	beq.w	8011678 <uxr_write_framed_msg+0x158>
 8011782:	2500      	movs	r5, #0
 8011784:	e002      	b.n	801178c <uxr_write_framed_msg+0x26c>
 8011786:	2800      	cmp	r0, #0
 8011788:	f43f af4f 	beq.w	801162a <uxr_write_framed_msg+0x10a>
 801178c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011790:	1b52      	subs	r2, r2, r5
 8011792:	465b      	mov	r3, fp
 8011794:	4421      	add	r1, r4
 8011796:	4638      	mov	r0, r7
 8011798:	47b0      	blx	r6
 801179a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801179e:	4405      	add	r5, r0
 80117a0:	4295      	cmp	r5, r2
 80117a2:	d3f0      	bcc.n	8011786 <uxr_write_framed_msg+0x266>
 80117a4:	f47f af41 	bne.w	801162a <uxr_write_framed_msg+0x10a>
 80117a8:	2300      	movs	r3, #0
 80117aa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80117ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117b0:	b298      	uxth	r0, r3
 80117b2:	b003      	add	sp, #12
 80117b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b8:	217d      	movs	r1, #125	@ 0x7d
 80117ba:	f082 0220 	eor.w	r2, r2, #32
 80117be:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80117c2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80117c6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80117ca:	2901      	cmp	r1, #1
 80117cc:	f04f 0203 	mov.w	r2, #3
 80117d0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117d4:	d804      	bhi.n	80117e0 <uxr_write_framed_msg+0x2c0>
 80117d6:	4611      	mov	r1, r2
 80117d8:	f04f 0c04 	mov.w	ip, #4
 80117dc:	2205      	movs	r2, #5
 80117de:	e752      	b.n	8011686 <uxr_write_framed_msg+0x166>
 80117e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117e2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80117e6:	b2dd      	uxtb	r5, r3
 80117e8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80117ec:	2204      	movs	r2, #4
 80117ee:	2901      	cmp	r1, #1
 80117f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117f4:	f63f aec0 	bhi.w	8011578 <uxr_write_framed_msg+0x58>
 80117f8:	e758      	b.n	80116ac <uxr_write_framed_msg+0x18c>
 80117fa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80117fe:	fa5f f889 	uxtb.w	r8, r9
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	e6f5      	b.n	80115f4 <uxr_write_framed_msg+0xd4>
 8011808:	0801ade0 	.word	0x0801ade0

0801180c <uxr_framing_read_transport>:
 801180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	4604      	mov	r4, r0
 8011812:	b083      	sub	sp, #12
 8011814:	461f      	mov	r7, r3
 8011816:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801181a:	4689      	mov	r9, r1
 801181c:	4692      	mov	sl, r2
 801181e:	f000 fc89 	bl	8012134 <uxr_millis>
 8011822:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011826:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801182a:	42b3      	cmp	r3, r6
 801182c:	4680      	mov	r8, r0
 801182e:	d061      	beq.n	80118f4 <uxr_framing_read_transport+0xe8>
 8011830:	d81c      	bhi.n	801186c <uxr_framing_read_transport+0x60>
 8011832:	1e75      	subs	r5, r6, #1
 8011834:	1aed      	subs	r5, r5, r3
 8011836:	b2ed      	uxtb	r5, r5
 8011838:	2600      	movs	r6, #0
 801183a:	455d      	cmp	r5, fp
 801183c:	d81f      	bhi.n	801187e <uxr_framing_read_transport+0x72>
 801183e:	19ab      	adds	r3, r5, r6
 8011840:	455b      	cmp	r3, fp
 8011842:	bf84      	itt	hi
 8011844:	ebab 0605 	subhi.w	r6, fp, r5
 8011848:	b2f6      	uxtbhi	r6, r6
 801184a:	b9ed      	cbnz	r5, 8011888 <uxr_framing_read_transport+0x7c>
 801184c:	f04f 0b00 	mov.w	fp, #0
 8011850:	f000 fc70 	bl	8012134 <uxr_millis>
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	eba0 0808 	sub.w	r8, r0, r8
 801185a:	eba3 0308 	sub.w	r3, r3, r8
 801185e:	4658      	mov	r0, fp
 8011860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011864:	603b      	str	r3, [r7, #0]
 8011866:	b003      	add	sp, #12
 8011868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186c:	2e00      	cmp	r6, #0
 801186e:	d049      	beq.n	8011904 <uxr_framing_read_transport+0xf8>
 8011870:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011874:	b2ed      	uxtb	r5, r5
 8011876:	3e01      	subs	r6, #1
 8011878:	455d      	cmp	r5, fp
 801187a:	b2f6      	uxtb	r6, r6
 801187c:	d9df      	bls.n	801183e <uxr_framing_read_transport+0x32>
 801187e:	fa5f f58b 	uxtb.w	r5, fp
 8011882:	2600      	movs	r6, #0
 8011884:	2d00      	cmp	r5, #0
 8011886:	d0e1      	beq.n	801184c <uxr_framing_read_transport+0x40>
 8011888:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801188c:	3102      	adds	r1, #2
 801188e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011890:	9300      	str	r3, [sp, #0]
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	4421      	add	r1, r4
 8011896:	462a      	mov	r2, r5
 8011898:	4650      	mov	r0, sl
 801189a:	47c8      	blx	r9
 801189c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80118a0:	4a1a      	ldr	r2, [pc, #104]	@ (801190c <uxr_framing_read_transport+0x100>)
 80118a2:	4403      	add	r3, r0
 80118a4:	0859      	lsrs	r1, r3, #1
 80118a6:	fba2 2101 	umull	r2, r1, r2, r1
 80118aa:	0889      	lsrs	r1, r1, #2
 80118ac:	222a      	movs	r2, #42	@ 0x2a
 80118ae:	fb02 3111 	mls	r1, r2, r1, r3
 80118b2:	4683      	mov	fp, r0
 80118b4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80118b8:	2800      	cmp	r0, #0
 80118ba:	d0c7      	beq.n	801184c <uxr_framing_read_transport+0x40>
 80118bc:	42a8      	cmp	r0, r5
 80118be:	d1c7      	bne.n	8011850 <uxr_framing_read_transport+0x44>
 80118c0:	2e00      	cmp	r6, #0
 80118c2:	d0c5      	beq.n	8011850 <uxr_framing_read_transport+0x44>
 80118c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	3102      	adds	r1, #2
 80118ca:	4632      	mov	r2, r6
 80118cc:	4421      	add	r1, r4
 80118ce:	2300      	movs	r3, #0
 80118d0:	4650      	mov	r0, sl
 80118d2:	47c8      	blx	r9
 80118d4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80118d8:	4a0c      	ldr	r2, [pc, #48]	@ (801190c <uxr_framing_read_transport+0x100>)
 80118da:	180b      	adds	r3, r1, r0
 80118dc:	0859      	lsrs	r1, r3, #1
 80118de:	fba2 1201 	umull	r1, r2, r2, r1
 80118e2:	0892      	lsrs	r2, r2, #2
 80118e4:	212a      	movs	r1, #42	@ 0x2a
 80118e6:	fb01 3312 	mls	r3, r1, r2, r3
 80118ea:	eb00 0b05 	add.w	fp, r0, r5
 80118ee:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80118f2:	e7ad      	b.n	8011850 <uxr_framing_read_transport+0x44>
 80118f4:	2600      	movs	r6, #0
 80118f6:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80118fa:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80118fc:	d9bf      	bls.n	801187e <uxr_framing_read_transport+0x72>
 80118fe:	2102      	movs	r1, #2
 8011900:	2529      	movs	r5, #41	@ 0x29
 8011902:	e7c4      	b.n	801188e <uxr_framing_read_transport+0x82>
 8011904:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011908:	b2ed      	uxtb	r5, r5
 801190a:	e796      	b.n	801183a <uxr_framing_read_transport+0x2e>
 801190c:	30c30c31 	.word	0x30c30c31

08011910 <uxr_read_framed_msg>:
 8011910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011914:	461e      	mov	r6, r3
 8011916:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801191a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801191e:	429d      	cmp	r5, r3
 8011920:	b083      	sub	sp, #12
 8011922:	4604      	mov	r4, r0
 8011924:	4688      	mov	r8, r1
 8011926:	4691      	mov	r9, r2
 8011928:	f000 8188 	beq.w	8011c3c <uxr_read_framed_msg+0x32c>
 801192c:	7823      	ldrb	r3, [r4, #0]
 801192e:	4dc1      	ldr	r5, [pc, #772]	@ (8011c34 <uxr_read_framed_msg+0x324>)
 8011930:	4fc1      	ldr	r7, [pc, #772]	@ (8011c38 <uxr_read_framed_msg+0x328>)
 8011932:	2b07      	cmp	r3, #7
 8011934:	d8fd      	bhi.n	8011932 <uxr_read_framed_msg+0x22>
 8011936:	e8df f013 	tbh	[pc, r3, lsl #1]
 801193a:	0115      	.short	0x0115
 801193c:	00d600f6 	.word	0x00d600f6
 8011940:	009000b9 	.word	0x009000b9
 8011944:	0030004d 	.word	0x0030004d
 8011948:	0008      	.short	0x0008
 801194a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801194e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011952:	4299      	cmp	r1, r3
 8011954:	f000 814a 	beq.w	8011bec <uxr_read_framed_msg+0x2dc>
 8011958:	18e2      	adds	r2, r4, r3
 801195a:	7892      	ldrb	r2, [r2, #2]
 801195c:	2a7d      	cmp	r2, #125	@ 0x7d
 801195e:	f000 8199 	beq.w	8011c94 <uxr_read_framed_msg+0x384>
 8011962:	3301      	adds	r3, #1
 8011964:	0858      	lsrs	r0, r3, #1
 8011966:	fba5 1000 	umull	r1, r0, r5, r0
 801196a:	0880      	lsrs	r0, r0, #2
 801196c:	212a      	movs	r1, #42	@ 0x2a
 801196e:	fb01 3310 	mls	r3, r1, r0, r3
 8011972:	2a7e      	cmp	r2, #126	@ 0x7e
 8011974:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011978:	f000 8252 	beq.w	8011e20 <uxr_read_framed_msg+0x510>
 801197c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801197e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011980:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011984:	b29b      	uxth	r3, r3
 8011986:	2200      	movs	r2, #0
 8011988:	4299      	cmp	r1, r3
 801198a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801198c:	7022      	strb	r2, [r4, #0]
 801198e:	f000 8179 	beq.w	8011c84 <uxr_read_framed_msg+0x374>
 8011992:	2000      	movs	r0, #0
 8011994:	b003      	add	sp, #12
 8011996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801199e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80119a2:	4299      	cmp	r1, r3
 80119a4:	f000 8131 	beq.w	8011c0a <uxr_read_framed_msg+0x2fa>
 80119a8:	18e2      	adds	r2, r4, r3
 80119aa:	7890      	ldrb	r0, [r2, #2]
 80119ac:	287d      	cmp	r0, #125	@ 0x7d
 80119ae:	f000 8190 	beq.w	8011cd2 <uxr_read_framed_msg+0x3c2>
 80119b2:	3301      	adds	r3, #1
 80119b4:	085a      	lsrs	r2, r3, #1
 80119b6:	fba5 1202 	umull	r1, r2, r5, r2
 80119ba:	0892      	lsrs	r2, r2, #2
 80119bc:	212a      	movs	r1, #42	@ 0x2a
 80119be:	fb01 3312 	mls	r3, r1, r2, r3
 80119c2:	287e      	cmp	r0, #126	@ 0x7e
 80119c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119c8:	f000 821a 	beq.w	8011e00 <uxr_read_framed_msg+0x4f0>
 80119cc:	2307      	movs	r3, #7
 80119ce:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80119d0:	7023      	strb	r3, [r4, #0]
 80119d2:	e7ae      	b.n	8011932 <uxr_read_framed_msg+0x22>
 80119d4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80119d6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80119da:	459e      	cmp	lr, r3
 80119dc:	d938      	bls.n	8011a50 <uxr_read_framed_msg+0x140>
 80119de:	ee07 8a90 	vmov	s15, r8
 80119e2:	212a      	movs	r1, #42	@ 0x2a
 80119e4:	e020      	b.n	8011a28 <uxr_read_framed_msg+0x118>
 80119e6:	f89b c002 	ldrb.w	ip, [fp, #2]
 80119ea:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80119ee:	f000 80d4 	beq.w	8011b9a <uxr_read_framed_msg+0x28a>
 80119f2:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80119f6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80119fa:	f000 8219 	beq.w	8011e30 <uxr_read_framed_msg+0x520>
 80119fe:	f806 c003 	strb.w	ip, [r6, r3]
 8011a02:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011a06:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011a08:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011a0c:	ea8a 000c 	eor.w	r0, sl, ip
 8011a10:	b2c0      	uxtb	r0, r0
 8011a12:	3301      	adds	r3, #1
 8011a14:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011a1e:	4573      	cmp	r3, lr
 8011a20:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011a22:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011a24:	f080 8120 	bcs.w	8011c68 <uxr_read_framed_msg+0x358>
 8011a28:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011a2c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011a30:	f100 0c01 	add.w	ip, r0, #1
 8011a34:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011a38:	fba5 8202 	umull	r8, r2, r5, r2
 8011a3c:	0892      	lsrs	r2, r2, #2
 8011a3e:	4582      	cmp	sl, r0
 8011a40:	eb04 0b00 	add.w	fp, r4, r0
 8011a44:	fb01 c212 	mls	r2, r1, r2, ip
 8011a48:	d1cd      	bne.n	80119e6 <uxr_read_framed_msg+0xd6>
 8011a4a:	ee17 8a90 	vmov	r8, s15
 8011a4e:	459e      	cmp	lr, r3
 8011a50:	f040 8111 	bne.w	8011c76 <uxr_read_framed_msg+0x366>
 8011a54:	2306      	movs	r3, #6
 8011a56:	7023      	strb	r3, [r4, #0]
 8011a58:	e76b      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011a5a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011a5e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a62:	4298      	cmp	r0, r3
 8011a64:	f000 80c2 	beq.w	8011bec <uxr_read_framed_msg+0x2dc>
 8011a68:	18e2      	adds	r2, r4, r3
 8011a6a:	7891      	ldrb	r1, [r2, #2]
 8011a6c:	297d      	cmp	r1, #125	@ 0x7d
 8011a6e:	f000 814c 	beq.w	8011d0a <uxr_read_framed_msg+0x3fa>
 8011a72:	3301      	adds	r3, #1
 8011a74:	085a      	lsrs	r2, r3, #1
 8011a76:	fba5 0202 	umull	r0, r2, r5, r2
 8011a7a:	0892      	lsrs	r2, r2, #2
 8011a7c:	202a      	movs	r0, #42	@ 0x2a
 8011a7e:	fb00 3312 	mls	r3, r0, r2, r3
 8011a82:	297e      	cmp	r1, #126	@ 0x7e
 8011a84:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011a88:	f000 81ca 	beq.w	8011e20 <uxr_read_framed_msg+0x510>
 8011a8c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011a8e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011a92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	2000      	movs	r0, #0
 8011a98:	428b      	cmp	r3, r1
 8011a9a:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011a9c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011a9e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011aa0:	f240 80df 	bls.w	8011c62 <uxr_read_framed_msg+0x352>
 8011aa4:	7020      	strb	r0, [r4, #0]
 8011aa6:	b003      	add	sp, #12
 8011aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011ab0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011ab4:	4299      	cmp	r1, r3
 8011ab6:	f000 80a8 	beq.w	8011c0a <uxr_read_framed_msg+0x2fa>
 8011aba:	18e2      	adds	r2, r4, r3
 8011abc:	7890      	ldrb	r0, [r2, #2]
 8011abe:	287d      	cmp	r0, #125	@ 0x7d
 8011ac0:	f000 8164 	beq.w	8011d8c <uxr_read_framed_msg+0x47c>
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	085a      	lsrs	r2, r3, #1
 8011ac8:	fba5 1202 	umull	r1, r2, r5, r2
 8011acc:	0892      	lsrs	r2, r2, #2
 8011ace:	212a      	movs	r1, #42	@ 0x2a
 8011ad0:	fb01 3312 	mls	r3, r1, r2, r3
 8011ad4:	287e      	cmp	r0, #126	@ 0x7e
 8011ad6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ada:	f000 8191 	beq.w	8011e00 <uxr_read_framed_msg+0x4f0>
 8011ade:	2304      	movs	r3, #4
 8011ae0:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011ae2:	7023      	strb	r3, [r4, #0]
 8011ae4:	e725      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011ae6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011aea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011aee:	4290      	cmp	r0, r2
 8011af0:	f000 80b3 	beq.w	8011c5a <uxr_read_framed_msg+0x34a>
 8011af4:	18a3      	adds	r3, r4, r2
 8011af6:	7899      	ldrb	r1, [r3, #2]
 8011af8:	297d      	cmp	r1, #125	@ 0x7d
 8011afa:	f000 8164 	beq.w	8011dc6 <uxr_read_framed_msg+0x4b6>
 8011afe:	3201      	adds	r2, #1
 8011b00:	0850      	lsrs	r0, r2, #1
 8011b02:	fba5 3000 	umull	r3, r0, r5, r0
 8011b06:	0880      	lsrs	r0, r0, #2
 8011b08:	232a      	movs	r3, #42	@ 0x2a
 8011b0a:	fb03 2210 	mls	r2, r3, r0, r2
 8011b0e:	297e      	cmp	r1, #126	@ 0x7e
 8011b10:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011b14:	f000 8188 	beq.w	8011e28 <uxr_read_framed_msg+0x518>
 8011b18:	7863      	ldrb	r3, [r4, #1]
 8011b1a:	428b      	cmp	r3, r1
 8011b1c:	bf0c      	ite	eq
 8011b1e:	2303      	moveq	r3, #3
 8011b20:	2300      	movne	r3, #0
 8011b22:	7023      	strb	r3, [r4, #0]
 8011b24:	e705      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011b26:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011b2a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4299      	cmp	r1, r3
 8011b32:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011b36:	d06c      	beq.n	8011c12 <uxr_read_framed_msg+0x302>
 8011b38:	18e2      	adds	r2, r4, r3
 8011b3a:	7890      	ldrb	r0, [r2, #2]
 8011b3c:	287d      	cmp	r0, #125	@ 0x7d
 8011b3e:	f000 8101 	beq.w	8011d44 <uxr_read_framed_msg+0x434>
 8011b42:	3301      	adds	r3, #1
 8011b44:	085a      	lsrs	r2, r3, #1
 8011b46:	fba5 1202 	umull	r1, r2, r5, r2
 8011b4a:	0892      	lsrs	r2, r2, #2
 8011b4c:	212a      	movs	r1, #42	@ 0x2a
 8011b4e:	fb01 3312 	mls	r3, r1, r2, r3
 8011b52:	287e      	cmp	r0, #126	@ 0x7e
 8011b54:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011b58:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b5c:	d059      	beq.n	8011c12 <uxr_read_framed_msg+0x302>
 8011b5e:	2302      	movs	r3, #2
 8011b60:	7023      	strb	r3, [r4, #0]
 8011b62:	e6e6      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011b64:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011b68:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011b6c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011b70:	1c51      	adds	r1, r2, #1
 8011b72:	084b      	lsrs	r3, r1, #1
 8011b74:	fba5 c303 	umull	ip, r3, r5, r3
 8011b78:	089b      	lsrs	r3, r3, #2
 8011b7a:	fb0e 1313 	mls	r3, lr, r3, r1
 8011b7e:	4592      	cmp	sl, r2
 8011b80:	eb04 0002 	add.w	r0, r4, r2
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	f43f af04 	beq.w	8011992 <uxr_read_framed_msg+0x82>
 8011b8a:	7883      	ldrb	r3, [r0, #2]
 8011b8c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011b90:	2b7e      	cmp	r3, #126	@ 0x7e
 8011b92:	d1ed      	bne.n	8011b70 <uxr_read_framed_msg+0x260>
 8011b94:	2301      	movs	r3, #1
 8011b96:	7023      	strb	r3, [r4, #0]
 8011b98:	e6cb      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011b9a:	f100 0c01 	add.w	ip, r0, #1
 8011b9e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011ba2:	fba5 8202 	umull	r8, r2, r5, r2
 8011ba6:	0892      	lsrs	r2, r2, #2
 8011ba8:	fb01 c212 	mls	r2, r1, r2, ip
 8011bac:	eb04 0c02 	add.w	ip, r4, r2
 8011bb0:	b2d2      	uxtb	r2, r2
 8011bb2:	4592      	cmp	sl, r2
 8011bb4:	f100 0002 	add.w	r0, r0, #2
 8011bb8:	f43f af47 	beq.w	8011a4a <uxr_read_framed_msg+0x13a>
 8011bbc:	0842      	lsrs	r2, r0, #1
 8011bbe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011bc2:	fba5 8202 	umull	r8, r2, r5, r2
 8011bc6:	0892      	lsrs	r2, r2, #2
 8011bc8:	fb01 0012 	mls	r0, r1, r2, r0
 8011bcc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011bd0:	f08a 0c20 	eor.w	ip, sl, #32
 8011bd4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011bd8:	f47f af11 	bne.w	80119fe <uxr_read_framed_msg+0xee>
 8011bdc:	459e      	cmp	lr, r3
 8011bde:	ee17 8a90 	vmov	r8, s15
 8011be2:	f43f af37 	beq.w	8011a54 <uxr_read_framed_msg+0x144>
 8011be6:	2301      	movs	r3, #1
 8011be8:	7023      	strb	r3, [r4, #0]
 8011bea:	e6a2      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	9301      	str	r3, [sp, #4]
 8011bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bf6:	464a      	mov	r2, r9
 8011bf8:	4641      	mov	r1, r8
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f7ff fe06 	bl	801180c <uxr_framing_read_transport>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	f43f aec6 	beq.w	8011992 <uxr_read_framed_msg+0x82>
 8011c06:	7823      	ldrb	r3, [r4, #0]
 8011c08:	e693      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	2302      	movs	r3, #2
 8011c10:	e7ef      	b.n	8011bf2 <uxr_read_framed_msg+0x2e2>
 8011c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	2304      	movs	r3, #4
 8011c18:	9301      	str	r3, [sp, #4]
 8011c1a:	464a      	mov	r2, r9
 8011c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c1e:	4641      	mov	r1, r8
 8011c20:	4620      	mov	r0, r4
 8011c22:	f7ff fdf3 	bl	801180c <uxr_framing_read_transport>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d1ed      	bne.n	8011c06 <uxr_read_framed_msg+0x2f6>
 8011c2a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011c2e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011c30:	d0e9      	beq.n	8011c06 <uxr_read_framed_msg+0x2f6>
 8011c32:	e6ae      	b.n	8011992 <uxr_read_framed_msg+0x82>
 8011c34:	30c30c31 	.word	0x30c30c31
 8011c38:	0801ade0 	.word	0x0801ade0
 8011c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	2305      	movs	r3, #5
 8011c42:	9301      	str	r3, [sp, #4]
 8011c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c46:	f7ff fde1 	bl	801180c <uxr_framing_read_transport>
 8011c4a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011c4e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011c52:	429a      	cmp	r2, r3
 8011c54:	f43f ae9d 	beq.w	8011992 <uxr_read_framed_msg+0x82>
 8011c58:	e668      	b.n	801192c <uxr_read_framed_msg+0x1c>
 8011c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	2303      	movs	r3, #3
 8011c60:	e7c7      	b.n	8011bf2 <uxr_read_framed_msg+0x2e2>
 8011c62:	2305      	movs	r3, #5
 8011c64:	7023      	strb	r3, [r4, #0]
 8011c66:	e664      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011c68:	ee17 8a90 	vmov	r8, s15
 8011c6c:	f43f aef2 	beq.w	8011a54 <uxr_read_framed_msg+0x144>
 8011c70:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011c74:	d08e      	beq.n	8011b94 <uxr_read_framed_msg+0x284>
 8011c76:	ebae 0303 	sub.w	r3, lr, r3
 8011c7a:	3302      	adds	r3, #2
 8011c7c:	9301      	str	r3, [sp, #4]
 8011c7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	e7b7      	b.n	8011bf4 <uxr_read_framed_msg+0x2e4>
 8011c84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c86:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011c8a:	7013      	strb	r3, [r2, #0]
 8011c8c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011c8e:	b003      	add	sp, #12
 8011c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c94:	f103 0c01 	add.w	ip, r3, #1
 8011c98:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c9c:	fba5 0202 	umull	r0, r2, r5, r2
 8011ca0:	0892      	lsrs	r2, r2, #2
 8011ca2:	202a      	movs	r0, #42	@ 0x2a
 8011ca4:	fb00 c212 	mls	r2, r0, r2, ip
 8011ca8:	fa5f fc82 	uxtb.w	ip, r2
 8011cac:	4561      	cmp	r1, ip
 8011cae:	d09d      	beq.n	8011bec <uxr_read_framed_msg+0x2dc>
 8011cb0:	3302      	adds	r3, #2
 8011cb2:	4422      	add	r2, r4
 8011cb4:	0859      	lsrs	r1, r3, #1
 8011cb6:	7892      	ldrb	r2, [r2, #2]
 8011cb8:	fba5 c101 	umull	ip, r1, r5, r1
 8011cbc:	0889      	lsrs	r1, r1, #2
 8011cbe:	fb00 3311 	mls	r3, r0, r1, r3
 8011cc2:	2a7e      	cmp	r2, #126	@ 0x7e
 8011cc4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011cc8:	f000 80aa 	beq.w	8011e20 <uxr_read_framed_msg+0x510>
 8011ccc:	f082 0220 	eor.w	r2, r2, #32
 8011cd0:	e654      	b.n	801197c <uxr_read_framed_msg+0x6c>
 8011cd2:	1c58      	adds	r0, r3, #1
 8011cd4:	0842      	lsrs	r2, r0, #1
 8011cd6:	fba5 c202 	umull	ip, r2, r5, r2
 8011cda:	0892      	lsrs	r2, r2, #2
 8011cdc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011ce0:	fb0c 0212 	mls	r2, ip, r2, r0
 8011ce4:	b2d0      	uxtb	r0, r2
 8011ce6:	4281      	cmp	r1, r0
 8011ce8:	d08f      	beq.n	8011c0a <uxr_read_framed_msg+0x2fa>
 8011cea:	4422      	add	r2, r4
 8011cec:	3302      	adds	r3, #2
 8011cee:	7890      	ldrb	r0, [r2, #2]
 8011cf0:	085a      	lsrs	r2, r3, #1
 8011cf2:	fba5 1202 	umull	r1, r2, r5, r2
 8011cf6:	0892      	lsrs	r2, r2, #2
 8011cf8:	fb0c 3312 	mls	r3, ip, r2, r3
 8011cfc:	287e      	cmp	r0, #126	@ 0x7e
 8011cfe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011d02:	d07d      	beq.n	8011e00 <uxr_read_framed_msg+0x4f0>
 8011d04:	f080 0020 	eor.w	r0, r0, #32
 8011d08:	e660      	b.n	80119cc <uxr_read_framed_msg+0xbc>
 8011d0a:	1c59      	adds	r1, r3, #1
 8011d0c:	084a      	lsrs	r2, r1, #1
 8011d0e:	fba5 c202 	umull	ip, r2, r5, r2
 8011d12:	0892      	lsrs	r2, r2, #2
 8011d14:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011d18:	fb0c 1212 	mls	r2, ip, r2, r1
 8011d1c:	b2d1      	uxtb	r1, r2
 8011d1e:	4288      	cmp	r0, r1
 8011d20:	f43f af64 	beq.w	8011bec <uxr_read_framed_msg+0x2dc>
 8011d24:	4422      	add	r2, r4
 8011d26:	3302      	adds	r3, #2
 8011d28:	7891      	ldrb	r1, [r2, #2]
 8011d2a:	085a      	lsrs	r2, r3, #1
 8011d2c:	fba5 0202 	umull	r0, r2, r5, r2
 8011d30:	0892      	lsrs	r2, r2, #2
 8011d32:	fb0c 3312 	mls	r3, ip, r2, r3
 8011d36:	297e      	cmp	r1, #126	@ 0x7e
 8011d38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011d3c:	d070      	beq.n	8011e20 <uxr_read_framed_msg+0x510>
 8011d3e:	f081 0120 	eor.w	r1, r1, #32
 8011d42:	e6a3      	b.n	8011a8c <uxr_read_framed_msg+0x17c>
 8011d44:	f103 0c01 	add.w	ip, r3, #1
 8011d48:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011d4c:	fba5 0202 	umull	r0, r2, r5, r2
 8011d50:	0892      	lsrs	r2, r2, #2
 8011d52:	202a      	movs	r0, #42	@ 0x2a
 8011d54:	fb00 c212 	mls	r2, r0, r2, ip
 8011d58:	fa5f fc82 	uxtb.w	ip, r2
 8011d5c:	4561      	cmp	r1, ip
 8011d5e:	f43f af58 	beq.w	8011c12 <uxr_read_framed_msg+0x302>
 8011d62:	4422      	add	r2, r4
 8011d64:	3302      	adds	r3, #2
 8011d66:	7891      	ldrb	r1, [r2, #2]
 8011d68:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011d6c:	085a      	lsrs	r2, r3, #1
 8011d6e:	fba5 c202 	umull	ip, r2, r5, r2
 8011d72:	0892      	lsrs	r2, r2, #2
 8011d74:	fb00 3312 	mls	r3, r0, r2, r3
 8011d78:	297e      	cmp	r1, #126	@ 0x7e
 8011d7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011d7e:	f43f af48 	beq.w	8011c12 <uxr_read_framed_msg+0x302>
 8011d82:	f081 0120 	eor.w	r1, r1, #32
 8011d86:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011d8a:	e6e8      	b.n	8011b5e <uxr_read_framed_msg+0x24e>
 8011d8c:	1c58      	adds	r0, r3, #1
 8011d8e:	0842      	lsrs	r2, r0, #1
 8011d90:	fba5 c202 	umull	ip, r2, r5, r2
 8011d94:	0892      	lsrs	r2, r2, #2
 8011d96:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011d9a:	fb0c 0212 	mls	r2, ip, r2, r0
 8011d9e:	b2d0      	uxtb	r0, r2
 8011da0:	4281      	cmp	r1, r0
 8011da2:	f43f af32 	beq.w	8011c0a <uxr_read_framed_msg+0x2fa>
 8011da6:	4422      	add	r2, r4
 8011da8:	3302      	adds	r3, #2
 8011daa:	7890      	ldrb	r0, [r2, #2]
 8011dac:	085a      	lsrs	r2, r3, #1
 8011dae:	fba5 1202 	umull	r1, r2, r5, r2
 8011db2:	0892      	lsrs	r2, r2, #2
 8011db4:	fb0c 3312 	mls	r3, ip, r2, r3
 8011db8:	287e      	cmp	r0, #126	@ 0x7e
 8011dba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011dbe:	d01f      	beq.n	8011e00 <uxr_read_framed_msg+0x4f0>
 8011dc0:	f080 0020 	eor.w	r0, r0, #32
 8011dc4:	e68b      	b.n	8011ade <uxr_read_framed_msg+0x1ce>
 8011dc6:	1c51      	adds	r1, r2, #1
 8011dc8:	084b      	lsrs	r3, r1, #1
 8011dca:	fba5 c303 	umull	ip, r3, r5, r3
 8011dce:	089b      	lsrs	r3, r3, #2
 8011dd0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011dd4:	fb0c 1313 	mls	r3, ip, r3, r1
 8011dd8:	b2d9      	uxtb	r1, r3
 8011dda:	4288      	cmp	r0, r1
 8011ddc:	f43f af3d 	beq.w	8011c5a <uxr_read_framed_msg+0x34a>
 8011de0:	3202      	adds	r2, #2
 8011de2:	4423      	add	r3, r4
 8011de4:	0850      	lsrs	r0, r2, #1
 8011de6:	789b      	ldrb	r3, [r3, #2]
 8011de8:	fba5 1000 	umull	r1, r0, r5, r0
 8011dec:	0880      	lsrs	r0, r0, #2
 8011dee:	fb0c 2210 	mls	r2, ip, r0, r2
 8011df2:	2b7e      	cmp	r3, #126	@ 0x7e
 8011df4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011df8:	d016      	beq.n	8011e28 <uxr_read_framed_msg+0x518>
 8011dfa:	f083 0120 	eor.w	r1, r3, #32
 8011dfe:	e68b      	b.n	8011b18 <uxr_read_framed_msg+0x208>
 8011e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	2302      	movs	r3, #2
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	464a      	mov	r2, r9
 8011e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e0c:	4641      	mov	r1, r8
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f7ff fcfc 	bl	801180c <uxr_framing_read_transport>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f47f aef6 	bne.w	8011c06 <uxr_read_framed_msg+0x2f6>
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	7023      	strb	r3, [r4, #0]
 8011e1e:	e588      	b.n	8011932 <uxr_read_framed_msg+0x22>
 8011e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	2301      	movs	r3, #1
 8011e26:	e7ee      	b.n	8011e06 <uxr_read_framed_msg+0x4f6>
 8011e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	2303      	movs	r3, #3
 8011e2e:	e7ea      	b.n	8011e06 <uxr_read_framed_msg+0x4f6>
 8011e30:	ee17 8a90 	vmov	r8, s15
 8011e34:	e6ae      	b.n	8011b94 <uxr_read_framed_msg+0x284>
 8011e36:	bf00      	nop

08011e38 <uxr_stream_id>:
 8011e38:	2901      	cmp	r1, #1
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	d01d      	beq.n	8011e7a <uxr_stream_id+0x42>
 8011e3e:	2902      	cmp	r1, #2
 8011e40:	f04f 0c00 	mov.w	ip, #0
 8011e44:	d01e      	beq.n	8011e84 <uxr_stream_id+0x4c>
 8011e46:	2300      	movs	r3, #0
 8011e48:	f36c 0307 	bfi	r3, ip, #0, #8
 8011e4c:	f360 230f 	bfi	r3, r0, #8, #8
 8011e50:	f361 4317 	bfi	r3, r1, #16, #8
 8011e54:	f362 631f 	bfi	r3, r2, #24, #8
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	f362 0007 	bfi	r0, r2, #0, #8
 8011e60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011e64:	f362 200f 	bfi	r0, r2, #8, #8
 8011e68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e6c:	f362 4017 	bfi	r0, r2, #16, #8
 8011e70:	0e1b      	lsrs	r3, r3, #24
 8011e72:	f363 601f 	bfi	r0, r3, #24, #8
 8011e76:	b002      	add	sp, #8
 8011e78:	4770      	bx	lr
 8011e7a:	f100 0c01 	add.w	ip, r0, #1
 8011e7e:	fa5f fc8c 	uxtb.w	ip, ip
 8011e82:	e7e0      	b.n	8011e46 <uxr_stream_id+0xe>
 8011e84:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011e88:	e7dd      	b.n	8011e46 <uxr_stream_id+0xe>
 8011e8a:	bf00      	nop

08011e8c <uxr_stream_id_from_raw>:
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	b130      	cbz	r0, 8011e9e <uxr_stream_id_from_raw+0x12>
 8011e90:	0603      	lsls	r3, r0, #24
 8011e92:	d420      	bmi.n	8011ed6 <uxr_stream_id_from_raw+0x4a>
 8011e94:	1e42      	subs	r2, r0, #1
 8011e96:	b2d2      	uxtb	r2, r2
 8011e98:	f04f 0c01 	mov.w	ip, #1
 8011e9c:	e001      	b.n	8011ea2 <uxr_stream_id_from_raw+0x16>
 8011e9e:	4684      	mov	ip, r0
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f360 0307 	bfi	r3, r0, #0, #8
 8011ea8:	f362 230f 	bfi	r3, r2, #8, #8
 8011eac:	f36c 4317 	bfi	r3, ip, #16, #8
 8011eb0:	f361 631f 	bfi	r3, r1, #24, #8
 8011eb4:	b2da      	uxtb	r2, r3
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	f362 0007 	bfi	r0, r2, #0, #8
 8011ebc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011ec0:	f362 200f 	bfi	r0, r2, #8, #8
 8011ec4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ec8:	f362 4017 	bfi	r0, r2, #16, #8
 8011ecc:	0e1b      	lsrs	r3, r3, #24
 8011ece:	f363 601f 	bfi	r0, r3, #24, #8
 8011ed2:	b002      	add	sp, #8
 8011ed4:	4770      	bx	lr
 8011ed6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011eda:	f04f 0c02 	mov.w	ip, #2
 8011ede:	e7e0      	b.n	8011ea2 <uxr_stream_id_from_raw+0x16>

08011ee0 <uxr_init_stream_storage>:
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	7403      	strb	r3, [r0, #16]
 8011ee4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011ee8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011eec:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop

08011ef4 <uxr_reset_stream_storage>:
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	7c03      	ldrb	r3, [r0, #16]
 8011ef8:	4604      	mov	r4, r0
 8011efa:	b153      	cbz	r3, 8011f12 <uxr_reset_stream_storage+0x1e>
 8011efc:	4606      	mov	r6, r0
 8011efe:	2500      	movs	r5, #0
 8011f00:	4630      	mov	r0, r6
 8011f02:	f005 fe69 	bl	8017bd8 <uxr_reset_output_best_effort_stream>
 8011f06:	7c23      	ldrb	r3, [r4, #16]
 8011f08:	3501      	adds	r5, #1
 8011f0a:	42ab      	cmp	r3, r5
 8011f0c:	f106 0610 	add.w	r6, r6, #16
 8011f10:	d8f6      	bhi.n	8011f00 <uxr_reset_stream_storage+0xc>
 8011f12:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f16:	b163      	cbz	r3, 8011f32 <uxr_reset_stream_storage+0x3e>
 8011f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f1c:	2500      	movs	r5, #0
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f005 fc5c 	bl	80177dc <uxr_reset_input_best_effort_stream>
 8011f24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f28:	3501      	adds	r5, #1
 8011f2a:	42ab      	cmp	r3, r5
 8011f2c:	f106 0602 	add.w	r6, r6, #2
 8011f30:	d8f5      	bhi.n	8011f1e <uxr_reset_stream_storage+0x2a>
 8011f32:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011f36:	b163      	cbz	r3, 8011f52 <uxr_reset_stream_storage+0x5e>
 8011f38:	f104 0618 	add.w	r6, r4, #24
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	4630      	mov	r0, r6
 8011f40:	f005 fef6 	bl	8017d30 <uxr_reset_output_reliable_stream>
 8011f44:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011f48:	3501      	adds	r5, #1
 8011f4a:	42ab      	cmp	r3, r5
 8011f4c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011f50:	d8f5      	bhi.n	8011f3e <uxr_reset_stream_storage+0x4a>
 8011f52:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011f56:	b163      	cbz	r3, 8011f72 <uxr_reset_stream_storage+0x7e>
 8011f58:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011f5c:	2500      	movs	r5, #0
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f005 fcb0 	bl	80178c4 <uxr_reset_input_reliable_stream>
 8011f64:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011f68:	3501      	adds	r5, #1
 8011f6a:	42ab      	cmp	r3, r5
 8011f6c:	f106 0618 	add.w	r6, r6, #24
 8011f70:	d8f5      	bhi.n	8011f5e <uxr_reset_stream_storage+0x6a>
 8011f72:	bd70      	pop	{r4, r5, r6, pc}

08011f74 <uxr_add_output_best_effort_buffer>:
 8011f74:	b510      	push	{r4, lr}
 8011f76:	7c04      	ldrb	r4, [r0, #16]
 8011f78:	f104 0c01 	add.w	ip, r4, #1
 8011f7c:	b082      	sub	sp, #8
 8011f7e:	f880 c010 	strb.w	ip, [r0, #16]
 8011f82:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011f86:	f005 fe1d 	bl	8017bc4 <uxr_init_output_best_effort_stream>
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	4611      	mov	r1, r2
 8011f8e:	4620      	mov	r0, r4
 8011f90:	b002      	add	sp, #8
 8011f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f96:	f7ff bf4f 	b.w	8011e38 <uxr_stream_id>
 8011f9a:	bf00      	nop

08011f9c <uxr_add_output_reliable_buffer>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	4684      	mov	ip, r0
 8011fa2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011fa6:	9000      	str	r0, [sp, #0]
 8011fa8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011fac:	2028      	movs	r0, #40	@ 0x28
 8011fae:	fb00 c004 	mla	r0, r0, r4, ip
 8011fb2:	f104 0e01 	add.w	lr, r4, #1
 8011fb6:	3018      	adds	r0, #24
 8011fb8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011fbc:	f005 fe80 	bl	8017cc0 <uxr_init_output_reliable_stream>
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	2102      	movs	r1, #2
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	b004      	add	sp, #16
 8011fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fcc:	f7ff bf34 	b.w	8011e38 <uxr_stream_id>

08011fd0 <uxr_add_input_best_effort_buffer>:
 8011fd0:	b510      	push	{r4, lr}
 8011fd2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	1c62      	adds	r2, r4, #1
 8011fda:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011fde:	b082      	sub	sp, #8
 8011fe0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011fe8:	f005 fbf4 	bl	80177d4 <uxr_init_input_best_effort_stream>
 8011fec:	2200      	movs	r2, #0
 8011fee:	2101      	movs	r1, #1
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	b002      	add	sp, #8
 8011ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff8:	f7ff bf1e 	b.w	8011e38 <uxr_stream_id>

08011ffc <uxr_add_input_reliable_buffer>:
 8011ffc:	b510      	push	{r4, lr}
 8011ffe:	b084      	sub	sp, #16
 8012000:	4684      	mov	ip, r0
 8012002:	9806      	ldr	r0, [sp, #24]
 8012004:	9000      	str	r0, [sp, #0]
 8012006:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801200a:	2018      	movs	r0, #24
 801200c:	fb00 c004 	mla	r0, r0, r4, ip
 8012010:	f104 0e01 	add.w	lr, r4, #1
 8012014:	3048      	adds	r0, #72	@ 0x48
 8012016:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801201a:	f005 fc27 	bl	801786c <uxr_init_input_reliable_stream>
 801201e:	2200      	movs	r2, #0
 8012020:	2102      	movs	r1, #2
 8012022:	4620      	mov	r0, r4
 8012024:	b004      	add	sp, #16
 8012026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801202a:	f7ff bf05 	b.w	8011e38 <uxr_stream_id>
 801202e:	bf00      	nop

08012030 <uxr_get_output_best_effort_stream>:
 8012030:	7c03      	ldrb	r3, [r0, #16]
 8012032:	428b      	cmp	r3, r1
 8012034:	bf8c      	ite	hi
 8012036:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801203a:	2000      	movls	r0, #0
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop

08012040 <uxr_get_output_reliable_stream>:
 8012040:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012044:	428b      	cmp	r3, r1
 8012046:	bf83      	ittte	hi
 8012048:	2328      	movhi	r3, #40	@ 0x28
 801204a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801204e:	3018      	addhi	r0, #24
 8012050:	2000      	movls	r0, #0
 8012052:	4770      	bx	lr

08012054 <uxr_get_input_best_effort_stream>:
 8012054:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012058:	428b      	cmp	r3, r1
 801205a:	bf86      	itte	hi
 801205c:	3121      	addhi	r1, #33	@ 0x21
 801205e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012062:	2000      	movls	r0, #0
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop

08012068 <uxr_get_input_reliable_stream>:
 8012068:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801206c:	428b      	cmp	r3, r1
 801206e:	bf83      	ittte	hi
 8012070:	2318      	movhi	r3, #24
 8012072:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012076:	3048      	addhi	r0, #72	@ 0x48
 8012078:	2000      	movls	r0, #0
 801207a:	4770      	bx	lr

0801207c <uxr_output_streams_confirmed>:
 801207c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012080:	b183      	cbz	r3, 80120a4 <uxr_output_streams_confirmed+0x28>
 8012082:	b570      	push	{r4, r5, r6, lr}
 8012084:	4606      	mov	r6, r0
 8012086:	f100 0518 	add.w	r5, r0, #24
 801208a:	2400      	movs	r4, #0
 801208c:	e001      	b.n	8012092 <uxr_output_streams_confirmed+0x16>
 801208e:	3528      	adds	r5, #40	@ 0x28
 8012090:	b138      	cbz	r0, 80120a2 <uxr_output_streams_confirmed+0x26>
 8012092:	4628      	mov	r0, r5
 8012094:	f006 f8bc 	bl	8018210 <uxr_is_output_up_to_date>
 8012098:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801209c:	3401      	adds	r4, #1
 801209e:	42a3      	cmp	r3, r4
 80120a0:	d8f5      	bhi.n	801208e <uxr_output_streams_confirmed+0x12>
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	2001      	movs	r0, #1
 80120a6:	4770      	bx	lr

080120a8 <uxr_buffer_submessage_header>:
 80120a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120aa:	4604      	mov	r4, r0
 80120ac:	460e      	mov	r6, r1
 80120ae:	2104      	movs	r1, #4
 80120b0:	4615      	mov	r5, r2
 80120b2:	461f      	mov	r7, r3
 80120b4:	f7f9 fc76 	bl	800b9a4 <ucdr_align_to>
 80120b8:	2301      	movs	r3, #1
 80120ba:	ea47 0203 	orr.w	r2, r7, r3
 80120be:	4631      	mov	r1, r6
 80120c0:	7523      	strb	r3, [r4, #20]
 80120c2:	4620      	mov	r0, r4
 80120c4:	462b      	mov	r3, r5
 80120c6:	f000 fa27 	bl	8012518 <uxr_serialize_submessage_header>
 80120ca:	4620      	mov	r0, r4
 80120cc:	f7f9 fc80 	bl	800b9d0 <ucdr_buffer_remaining>
 80120d0:	42a8      	cmp	r0, r5
 80120d2:	bf34      	ite	cc
 80120d4:	2000      	movcc	r0, #0
 80120d6:	2001      	movcs	r0, #1
 80120d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120da:	bf00      	nop

080120dc <uxr_read_submessage_header>:
 80120dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e0:	4604      	mov	r4, r0
 80120e2:	460d      	mov	r5, r1
 80120e4:	2104      	movs	r1, #4
 80120e6:	4616      	mov	r6, r2
 80120e8:	4698      	mov	r8, r3
 80120ea:	f7f9 fc5b 	bl	800b9a4 <ucdr_align_to>
 80120ee:	4620      	mov	r0, r4
 80120f0:	f7f9 fc6e 	bl	800b9d0 <ucdr_buffer_remaining>
 80120f4:	2803      	cmp	r0, #3
 80120f6:	bf8c      	ite	hi
 80120f8:	2701      	movhi	r7, #1
 80120fa:	2700      	movls	r7, #0
 80120fc:	d802      	bhi.n	8012104 <uxr_read_submessage_header+0x28>
 80120fe:	4638      	mov	r0, r7
 8012100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012104:	4633      	mov	r3, r6
 8012106:	4642      	mov	r2, r8
 8012108:	4620      	mov	r0, r4
 801210a:	4629      	mov	r1, r5
 801210c:	f000 fa18 	bl	8012540 <uxr_deserialize_submessage_header>
 8012110:	f898 3000 	ldrb.w	r3, [r8]
 8012114:	f003 0201 	and.w	r2, r3, #1
 8012118:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801211c:	f888 3000 	strb.w	r3, [r8]
 8012120:	7522      	strb	r2, [r4, #20]
 8012122:	4638      	mov	r0, r7
 8012124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012128 <uxr_submessage_padding>:
 8012128:	f010 0003 	ands.w	r0, r0, #3
 801212c:	bf18      	it	ne
 801212e:	f1c0 0004 	rsbne	r0, r0, #4
 8012132:	4770      	bx	lr

08012134 <uxr_millis>:
 8012134:	b510      	push	{r4, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	4669      	mov	r1, sp
 801213a:	2001      	movs	r0, #1
 801213c:	f7f0 f9ec 	bl	8002518 <clock_gettime>
 8012140:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012144:	4906      	ldr	r1, [pc, #24]	@ (8012160 <uxr_millis+0x2c>)
 8012146:	fba0 0301 	umull	r0, r3, r0, r1
 801214a:	1900      	adds	r0, r0, r4
 801214c:	fb01 3102 	mla	r1, r1, r2, r3
 8012150:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012154:	4a03      	ldr	r2, [pc, #12]	@ (8012164 <uxr_millis+0x30>)
 8012156:	2300      	movs	r3, #0
 8012158:	f7ee fd68 	bl	8000c2c <__aeabi_ldivmod>
 801215c:	b004      	add	sp, #16
 801215e:	bd10      	pop	{r4, pc}
 8012160:	3b9aca00 	.word	0x3b9aca00
 8012164:	000f4240 	.word	0x000f4240

08012168 <uxr_nanos>:
 8012168:	b510      	push	{r4, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	4669      	mov	r1, sp
 801216e:	2001      	movs	r0, #1
 8012170:	f7f0 f9d2 	bl	8002518 <clock_gettime>
 8012174:	4a06      	ldr	r2, [pc, #24]	@ (8012190 <uxr_nanos+0x28>)
 8012176:	9800      	ldr	r0, [sp, #0]
 8012178:	9902      	ldr	r1, [sp, #8]
 801217a:	9c01      	ldr	r4, [sp, #4]
 801217c:	fba0 0302 	umull	r0, r3, r0, r2
 8012180:	1840      	adds	r0, r0, r1
 8012182:	fb02 3304 	mla	r3, r2, r4, r3
 8012186:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801218a:	b004      	add	sp, #16
 801218c:	bd10      	pop	{r4, pc}
 801218e:	bf00      	nop
 8012190:	3b9aca00 	.word	0x3b9aca00

08012194 <on_full_output_buffer_fragmented>:
 8012194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012198:	460c      	mov	r4, r1
 801219a:	b08a      	sub	sp, #40	@ 0x28
 801219c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80121a0:	4606      	mov	r6, r0
 80121a2:	f104 0008 	add.w	r0, r4, #8
 80121a6:	f7ff ff4b 	bl	8012040 <uxr_get_output_reliable_stream>
 80121aa:	4605      	mov	r5, r0
 80121ac:	f006 f83a 	bl	8018224 <get_available_free_slots>
 80121b0:	b968      	cbnz	r0, 80121ce <on_full_output_buffer_fragmented+0x3a>
 80121b2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80121b6:	4620      	mov	r0, r4
 80121b8:	4798      	blx	r3
 80121ba:	b918      	cbnz	r0, 80121c4 <on_full_output_buffer_fragmented+0x30>
 80121bc:	2001      	movs	r0, #1
 80121be:	b00a      	add	sp, #40	@ 0x28
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	4628      	mov	r0, r5
 80121c6:	f006 f82d 	bl	8018224 <get_available_free_slots>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d0f6      	beq.n	80121bc <on_full_output_buffer_fragmented+0x28>
 80121ce:	8929      	ldrh	r1, [r5, #8]
 80121d0:	89eb      	ldrh	r3, [r5, #14]
 80121d2:	7b28      	ldrb	r0, [r5, #12]
 80121d4:	686a      	ldr	r2, [r5, #4]
 80121d6:	fbb2 f8f1 	udiv	r8, r2, r1
 80121da:	fbb3 f2f1 	udiv	r2, r3, r1
 80121de:	fb01 3112 	mls	r1, r1, r2, r3
 80121e2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80121e6:	b289      	uxth	r1, r1
 80121e8:	fb08 f101 	mul.w	r1, r8, r1
 80121ec:	30fc      	adds	r0, #252	@ 0xfc
 80121ee:	f1a8 0804 	sub.w	r8, r8, #4
 80121f2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80121f6:	4440      	add	r0, r8
 80121f8:	b287      	uxth	r7, r0
 80121fa:	1bdb      	subs	r3, r3, r7
 80121fc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012200:	682b      	ldr	r3, [r5, #0]
 8012202:	3104      	adds	r1, #4
 8012204:	4419      	add	r1, r3
 8012206:	4642      	mov	r2, r8
 8012208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	a802      	add	r0, sp, #8
 8012210:	2300      	movs	r3, #0
 8012212:	f7f9 fb9b 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8012216:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801221a:	f102 0308 	add.w	r3, r2, #8
 801221e:	4543      	cmp	r3, r8
 8012220:	d928      	bls.n	8012274 <on_full_output_buffer_fragmented+0xe0>
 8012222:	463a      	mov	r2, r7
 8012224:	2300      	movs	r3, #0
 8012226:	210d      	movs	r1, #13
 8012228:	a802      	add	r0, sp, #8
 801222a:	f7ff ff3d 	bl	80120a8 <uxr_buffer_submessage_header>
 801222e:	8929      	ldrh	r1, [r5, #8]
 8012230:	89eb      	ldrh	r3, [r5, #14]
 8012232:	fbb3 f2f1 	udiv	r2, r3, r1
 8012236:	fb01 3312 	mls	r3, r1, r2, r3
 801223a:	b29b      	uxth	r3, r3
 801223c:	686a      	ldr	r2, [r5, #4]
 801223e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012242:	fb02 f303 	mul.w	r3, r2, r3
 8012246:	682a      	ldr	r2, [r5, #0]
 8012248:	f842 8003 	str.w	r8, [r2, r3]
 801224c:	89e8      	ldrh	r0, [r5, #14]
 801224e:	2101      	movs	r1, #1
 8012250:	f006 f808 	bl	8018264 <uxr_seq_num_add>
 8012254:	9904      	ldr	r1, [sp, #16]
 8012256:	9a03      	ldr	r2, [sp, #12]
 8012258:	81e8      	strh	r0, [r5, #14]
 801225a:	1a52      	subs	r2, r2, r1
 801225c:	4630      	mov	r0, r6
 801225e:	f7f9 fb87 	bl	800b970 <ucdr_init_buffer>
 8012262:	4630      	mov	r0, r6
 8012264:	490f      	ldr	r1, [pc, #60]	@ (80122a4 <on_full_output_buffer_fragmented+0x110>)
 8012266:	4622      	mov	r2, r4
 8012268:	f7f9 fb56 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 801226c:	2000      	movs	r0, #0
 801226e:	b00a      	add	sp, #40	@ 0x28
 8012270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012274:	b292      	uxth	r2, r2
 8012276:	2302      	movs	r3, #2
 8012278:	210d      	movs	r1, #13
 801227a:	a802      	add	r0, sp, #8
 801227c:	f7ff ff14 	bl	80120a8 <uxr_buffer_submessage_header>
 8012280:	8928      	ldrh	r0, [r5, #8]
 8012282:	89eb      	ldrh	r3, [r5, #14]
 8012284:	fbb3 f1f0 	udiv	r1, r3, r0
 8012288:	fb00 3311 	mls	r3, r0, r1, r3
 801228c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012290:	6869      	ldr	r1, [r5, #4]
 8012292:	fbb1 f1f0 	udiv	r1, r1, r0
 8012296:	b29b      	uxth	r3, r3
 8012298:	fb01 f303 	mul.w	r3, r1, r3
 801229c:	6829      	ldr	r1, [r5, #0]
 801229e:	3208      	adds	r2, #8
 80122a0:	50ca      	str	r2, [r1, r3]
 80122a2:	e7d3      	b.n	801224c <on_full_output_buffer_fragmented+0xb8>
 80122a4:	08012195 	.word	0x08012195

080122a8 <uxr_prepare_output_stream>:
 80122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122aa:	b087      	sub	sp, #28
 80122ac:	2707      	movs	r7, #7
 80122ae:	9202      	str	r2, [sp, #8]
 80122b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122b2:	9103      	str	r1, [sp, #12]
 80122b4:	2500      	movs	r5, #0
 80122b6:	3204      	adds	r2, #4
 80122b8:	e9cd 7500 	strd	r7, r5, [sp]
 80122bc:	461c      	mov	r4, r3
 80122be:	4606      	mov	r6, r0
 80122c0:	f7fe ffc2 	bl	8011248 <uxr_prepare_stream_to_write_submessage>
 80122c4:	f080 0201 	eor.w	r2, r0, #1
 80122c8:	b2d2      	uxtb	r2, r2
 80122ca:	75a2      	strb	r2, [r4, #22]
 80122cc:	b112      	cbz	r2, 80122d4 <uxr_prepare_output_stream+0x2c>
 80122ce:	4628      	mov	r0, r5
 80122d0:	b007      	add	sp, #28
 80122d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122d4:	aa05      	add	r2, sp, #20
 80122d6:	9902      	ldr	r1, [sp, #8]
 80122d8:	4630      	mov	r0, r6
 80122da:	f7ff f8eb 	bl	80114b4 <uxr_init_base_object_request>
 80122de:	a905      	add	r1, sp, #20
 80122e0:	4605      	mov	r5, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	f001 f8a0 	bl	8013428 <uxr_serialize_WRITE_DATA_Payload_Data>
 80122e8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80122ec:	69a6      	ldr	r6, [r4, #24]
 80122ee:	69e7      	ldr	r7, [r4, #28]
 80122f0:	1a52      	subs	r2, r2, r1
 80122f2:	4620      	mov	r0, r4
 80122f4:	f7f9 fb3c 	bl	800b970 <ucdr_init_buffer>
 80122f8:	4620      	mov	r0, r4
 80122fa:	463a      	mov	r2, r7
 80122fc:	4631      	mov	r1, r6
 80122fe:	f7f9 fb0b 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8012302:	4628      	mov	r0, r5
 8012304:	b007      	add	sp, #28
 8012306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012308 <uxr_prepare_output_stream_fragmented>:
 8012308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230c:	b091      	sub	sp, #68	@ 0x44
 801230e:	4605      	mov	r5, r0
 8012310:	9105      	str	r1, [sp, #20]
 8012312:	3008      	adds	r0, #8
 8012314:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012318:	461e      	mov	r6, r3
 801231a:	9204      	str	r2, [sp, #16]
 801231c:	f7ff fe90 	bl	8012040 <uxr_get_output_reliable_stream>
 8012320:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012324:	2b01      	cmp	r3, #1
 8012326:	f000 8091 	beq.w	801244c <uxr_prepare_output_stream_fragmented+0x144>
 801232a:	4604      	mov	r4, r0
 801232c:	2800      	cmp	r0, #0
 801232e:	f000 808d 	beq.w	801244c <uxr_prepare_output_stream_fragmented+0x144>
 8012332:	f005 ff77 	bl	8018224 <get_available_free_slots>
 8012336:	2800      	cmp	r0, #0
 8012338:	f000 8083 	beq.w	8012442 <uxr_prepare_output_stream_fragmented+0x13a>
 801233c:	8922      	ldrh	r2, [r4, #8]
 801233e:	89e7      	ldrh	r7, [r4, #14]
 8012340:	fbb7 f9f2 	udiv	r9, r7, r2
 8012344:	fb02 7919 	mls	r9, r2, r9, r7
 8012348:	fa1f f989 	uxth.w	r9, r9
 801234c:	6863      	ldr	r3, [r4, #4]
 801234e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	9203      	str	r2, [sp, #12]
 8012356:	fb02 f909 	mul.w	r9, r2, r9
 801235a:	f109 0904 	add.w	r9, r9, #4
 801235e:	4499      	add	r9, r3
 8012360:	7b23      	ldrb	r3, [r4, #12]
 8012362:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012366:	4543      	cmp	r3, r8
 8012368:	f1a2 0b04 	sub.w	fp, r2, #4
 801236c:	d37a      	bcc.n	8012464 <uxr_prepare_output_stream_fragmented+0x15c>
 801236e:	f1ab 0a04 	sub.w	sl, fp, #4
 8012372:	ebaa 0a03 	sub.w	sl, sl, r3
 8012376:	465a      	mov	r2, fp
 8012378:	2300      	movs	r3, #0
 801237a:	4649      	mov	r1, r9
 801237c:	a808      	add	r0, sp, #32
 801237e:	f8cd 8000 	str.w	r8, [sp]
 8012382:	f7f9 fae3 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8012386:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012388:	fa1f fa8a 	uxth.w	sl, sl
 801238c:	4652      	mov	r2, sl
 801238e:	f103 0a08 	add.w	sl, r3, #8
 8012392:	45da      	cmp	sl, fp
 8012394:	bf34      	ite	cc
 8012396:	2302      	movcc	r3, #2
 8012398:	2300      	movcs	r3, #0
 801239a:	210d      	movs	r1, #13
 801239c:	a808      	add	r0, sp, #32
 801239e:	f7ff fe83 	bl	80120a8 <uxr_buffer_submessage_header>
 80123a2:	8921      	ldrh	r1, [r4, #8]
 80123a4:	fbb7 f2f1 	udiv	r2, r7, r1
 80123a8:	fb01 7212 	mls	r2, r1, r2, r7
 80123ac:	b292      	uxth	r2, r2
 80123ae:	6863      	ldr	r3, [r4, #4]
 80123b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80123b4:	fb02 f303 	mul.w	r3, r2, r3
 80123b8:	6822      	ldr	r2, [r4, #0]
 80123ba:	4638      	mov	r0, r7
 80123bc:	f842 b003 	str.w	fp, [r2, r3]
 80123c0:	2101      	movs	r1, #1
 80123c2:	f005 ff4f 	bl	8018264 <uxr_seq_num_add>
 80123c6:	9b03      	ldr	r3, [sp, #12]
 80123c8:	f108 0104 	add.w	r1, r8, #4
 80123cc:	f1a3 0208 	sub.w	r2, r3, #8
 80123d0:	eba2 0208 	sub.w	r2, r2, r8
 80123d4:	4449      	add	r1, r9
 80123d6:	4607      	mov	r7, r0
 80123d8:	4630      	mov	r0, r6
 80123da:	f7f9 fac9 	bl	800b970 <ucdr_init_buffer>
 80123de:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80123e0:	81e7      	strh	r7, [r4, #14]
 80123e2:	1d1a      	adds	r2, r3, #4
 80123e4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80123e8:	bf28      	it	cs
 80123ea:	2200      	movcs	r2, #0
 80123ec:	2300      	movs	r3, #0
 80123ee:	b292      	uxth	r2, r2
 80123f0:	2107      	movs	r1, #7
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ff fe58 	bl	80120a8 <uxr_buffer_submessage_header>
 80123f8:	9904      	ldr	r1, [sp, #16]
 80123fa:	aa07      	add	r2, sp, #28
 80123fc:	4628      	mov	r0, r5
 80123fe:	f7ff f859 	bl	80114b4 <uxr_init_base_object_request>
 8012402:	4604      	mov	r4, r0
 8012404:	b318      	cbz	r0, 801244e <uxr_prepare_output_stream_fragmented+0x146>
 8012406:	a907      	add	r1, sp, #28
 8012408:	4630      	mov	r0, r6
 801240a:	f001 f80d 	bl	8013428 <uxr_serialize_WRITE_DATA_Payload_Data>
 801240e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012412:	4630      	mov	r0, r6
 8012414:	1a52      	subs	r2, r2, r1
 8012416:	f7f9 faab 	bl	800b970 <ucdr_init_buffer>
 801241a:	9b05      	ldr	r3, [sp, #20]
 801241c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012420:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012422:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012426:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012428:	491b      	ldr	r1, [pc, #108]	@ (8012498 <uxr_prepare_output_stream_fragmented+0x190>)
 801242a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801242e:	4630      	mov	r0, r6
 8012430:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012434:	462a      	mov	r2, r5
 8012436:	f7f9 fa6f 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 801243a:	4620      	mov	r0, r4
 801243c:	b011      	add	sp, #68	@ 0x44
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012444:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012446:	4628      	mov	r0, r5
 8012448:	4798      	blx	r3
 801244a:	b920      	cbnz	r0, 8012456 <uxr_prepare_output_stream_fragmented+0x14e>
 801244c:	2400      	movs	r4, #0
 801244e:	4620      	mov	r0, r4
 8012450:	b011      	add	sp, #68	@ 0x44
 8012452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012456:	4620      	mov	r0, r4
 8012458:	f005 fee4 	bl	8018224 <get_available_free_slots>
 801245c:	2800      	cmp	r0, #0
 801245e:	f47f af6d 	bne.w	801233c <uxr_prepare_output_stream_fragmented+0x34>
 8012462:	e7f3      	b.n	801244c <uxr_prepare_output_stream_fragmented+0x144>
 8012464:	4638      	mov	r0, r7
 8012466:	2101      	movs	r1, #1
 8012468:	f005 fefc 	bl	8018264 <uxr_seq_num_add>
 801246c:	8921      	ldrh	r1, [r4, #8]
 801246e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012472:	fb01 0912 	mls	r9, r1, r2, r0
 8012476:	fa1f f289 	uxth.w	r2, r9
 801247a:	6863      	ldr	r3, [r4, #4]
 801247c:	fbb3 f9f1 	udiv	r9, r3, r1
 8012480:	6823      	ldr	r3, [r4, #0]
 8012482:	fb02 f909 	mul.w	r9, r2, r9
 8012486:	f109 0904 	add.w	r9, r9, #4
 801248a:	4499      	add	r9, r3
 801248c:	4607      	mov	r7, r0
 801248e:	7b23      	ldrb	r3, [r4, #12]
 8012490:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012494:	e76b      	b.n	801236e <uxr_prepare_output_stream_fragmented+0x66>
 8012496:	bf00      	nop
 8012498:	08012195 	.word	0x08012195

0801249c <uxr_serialize_message_header>:
 801249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801249e:	b083      	sub	sp, #12
 80124a0:	4616      	mov	r6, r2
 80124a2:	4604      	mov	r4, r0
 80124a4:	9301      	str	r3, [sp, #4]
 80124a6:	460d      	mov	r5, r1
 80124a8:	9f08      	ldr	r7, [sp, #32]
 80124aa:	f7f7 ff7f 	bl	800a3ac <ucdr_serialize_uint8_t>
 80124ae:	4631      	mov	r1, r6
 80124b0:	4620      	mov	r0, r4
 80124b2:	f7f7 ff7b 	bl	800a3ac <ucdr_serialize_uint8_t>
 80124b6:	9a01      	ldr	r2, [sp, #4]
 80124b8:	2101      	movs	r1, #1
 80124ba:	4620      	mov	r0, r4
 80124bc:	f7f8 f822 	bl	800a504 <ucdr_serialize_endian_uint16_t>
 80124c0:	062b      	lsls	r3, r5, #24
 80124c2:	d501      	bpl.n	80124c8 <uxr_serialize_message_header+0x2c>
 80124c4:	b003      	add	sp, #12
 80124c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c8:	2204      	movs	r2, #4
 80124ca:	4639      	mov	r1, r7
 80124cc:	4620      	mov	r0, r4
 80124ce:	b003      	add	sp, #12
 80124d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80124d4:	f004 bff4 	b.w	80174c0 <ucdr_serialize_array_uint8_t>

080124d8 <uxr_deserialize_message_header>:
 80124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124da:	b083      	sub	sp, #12
 80124dc:	4616      	mov	r6, r2
 80124de:	4604      	mov	r4, r0
 80124e0:	9301      	str	r3, [sp, #4]
 80124e2:	460d      	mov	r5, r1
 80124e4:	9f08      	ldr	r7, [sp, #32]
 80124e6:	f7f7 ff77 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80124ea:	4631      	mov	r1, r6
 80124ec:	4620      	mov	r0, r4
 80124ee:	f7f7 ff73 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80124f2:	9a01      	ldr	r2, [sp, #4]
 80124f4:	2101      	movs	r1, #1
 80124f6:	4620      	mov	r0, r4
 80124f8:	f7f8 f8f8 	bl	800a6ec <ucdr_deserialize_endian_uint16_t>
 80124fc:	f995 3000 	ldrsb.w	r3, [r5]
 8012500:	2b00      	cmp	r3, #0
 8012502:	da01      	bge.n	8012508 <uxr_deserialize_message_header+0x30>
 8012504:	b003      	add	sp, #12
 8012506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012508:	2204      	movs	r2, #4
 801250a:	4639      	mov	r1, r7
 801250c:	4620      	mov	r0, r4
 801250e:	b003      	add	sp, #12
 8012510:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012514:	f005 b838 	b.w	8017588 <ucdr_deserialize_array_uint8_t>

08012518 <uxr_serialize_submessage_header>:
 8012518:	b530      	push	{r4, r5, lr}
 801251a:	b083      	sub	sp, #12
 801251c:	4615      	mov	r5, r2
 801251e:	4604      	mov	r4, r0
 8012520:	9301      	str	r3, [sp, #4]
 8012522:	f7f7 ff43 	bl	800a3ac <ucdr_serialize_uint8_t>
 8012526:	4629      	mov	r1, r5
 8012528:	4620      	mov	r0, r4
 801252a:	f7f7 ff3f 	bl	800a3ac <ucdr_serialize_uint8_t>
 801252e:	9a01      	ldr	r2, [sp, #4]
 8012530:	2101      	movs	r1, #1
 8012532:	4620      	mov	r0, r4
 8012534:	b003      	add	sp, #12
 8012536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801253a:	f7f7 bfe3 	b.w	800a504 <ucdr_serialize_endian_uint16_t>
 801253e:	bf00      	nop

08012540 <uxr_deserialize_submessage_header>:
 8012540:	b530      	push	{r4, r5, lr}
 8012542:	b083      	sub	sp, #12
 8012544:	4615      	mov	r5, r2
 8012546:	4604      	mov	r4, r0
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	f7f7 ff45 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 801254e:	4629      	mov	r1, r5
 8012550:	4620      	mov	r0, r4
 8012552:	f7f7 ff41 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8012556:	9a01      	ldr	r2, [sp, #4]
 8012558:	2101      	movs	r1, #1
 801255a:	4620      	mov	r0, r4
 801255c:	b003      	add	sp, #12
 801255e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012562:	f7f8 b8c3 	b.w	800a6ec <ucdr_deserialize_endian_uint16_t>
 8012566:	bf00      	nop

08012568 <uxr_serialize_CLIENT_Representation>:
 8012568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801256c:	2204      	movs	r2, #4
 801256e:	460e      	mov	r6, r1
 8012570:	4605      	mov	r5, r0
 8012572:	f004 ffa5 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012576:	2202      	movs	r2, #2
 8012578:	4607      	mov	r7, r0
 801257a:	1d31      	adds	r1, r6, #4
 801257c:	4628      	mov	r0, r5
 801257e:	f004 ff9f 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012582:	4038      	ands	r0, r7
 8012584:	2202      	movs	r2, #2
 8012586:	1db1      	adds	r1, r6, #6
 8012588:	b2c7      	uxtb	r7, r0
 801258a:	4628      	mov	r0, r5
 801258c:	f004 ff98 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012590:	2204      	movs	r2, #4
 8012592:	4007      	ands	r7, r0
 8012594:	f106 0108 	add.w	r1, r6, #8
 8012598:	4628      	mov	r0, r5
 801259a:	f004 ff91 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801259e:	7b31      	ldrb	r1, [r6, #12]
 80125a0:	4007      	ands	r7, r0
 80125a2:	4628      	mov	r0, r5
 80125a4:	f7f7 ff02 	bl	800a3ac <ucdr_serialize_uint8_t>
 80125a8:	7b71      	ldrb	r1, [r6, #13]
 80125aa:	4007      	ands	r7, r0
 80125ac:	4628      	mov	r0, r5
 80125ae:	f7f7 fecf 	bl	800a350 <ucdr_serialize_bool>
 80125b2:	7b73      	ldrb	r3, [r6, #13]
 80125b4:	ea07 0800 	and.w	r8, r7, r0
 80125b8:	b93b      	cbnz	r3, 80125ca <uxr_serialize_CLIENT_Representation+0x62>
 80125ba:	8bb1      	ldrh	r1, [r6, #28]
 80125bc:	4628      	mov	r0, r5
 80125be:	f7f7 ff21 	bl	800a404 <ucdr_serialize_uint16_t>
 80125c2:	ea08 0000 	and.w	r0, r8, r0
 80125c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ca:	6931      	ldr	r1, [r6, #16]
 80125cc:	4628      	mov	r0, r5
 80125ce:	f7f8 f903 	bl	800a7d8 <ucdr_serialize_uint32_t>
 80125d2:	6933      	ldr	r3, [r6, #16]
 80125d4:	b1e3      	cbz	r3, 8012610 <uxr_serialize_CLIENT_Representation+0xa8>
 80125d6:	b1c0      	cbz	r0, 801260a <uxr_serialize_CLIENT_Representation+0xa2>
 80125d8:	4637      	mov	r7, r6
 80125da:	f04f 0900 	mov.w	r9, #0
 80125de:	e001      	b.n	80125e4 <uxr_serialize_CLIENT_Representation+0x7c>
 80125e0:	3708      	adds	r7, #8
 80125e2:	b194      	cbz	r4, 801260a <uxr_serialize_CLIENT_Representation+0xa2>
 80125e4:	6979      	ldr	r1, [r7, #20]
 80125e6:	4628      	mov	r0, r5
 80125e8:	f005 f8dc 	bl	80177a4 <ucdr_serialize_string>
 80125ec:	69b9      	ldr	r1, [r7, #24]
 80125ee:	4604      	mov	r4, r0
 80125f0:	4628      	mov	r0, r5
 80125f2:	f005 f8d7 	bl	80177a4 <ucdr_serialize_string>
 80125f6:	6933      	ldr	r3, [r6, #16]
 80125f8:	f109 0901 	add.w	r9, r9, #1
 80125fc:	4004      	ands	r4, r0
 80125fe:	4599      	cmp	r9, r3
 8012600:	b2e4      	uxtb	r4, r4
 8012602:	d3ed      	bcc.n	80125e0 <uxr_serialize_CLIENT_Representation+0x78>
 8012604:	ea08 0804 	and.w	r8, r8, r4
 8012608:	e7d7      	b.n	80125ba <uxr_serialize_CLIENT_Representation+0x52>
 801260a:	f04f 0800 	mov.w	r8, #0
 801260e:	e7d4      	b.n	80125ba <uxr_serialize_CLIENT_Representation+0x52>
 8012610:	ea08 0800 	and.w	r8, r8, r0
 8012614:	e7d1      	b.n	80125ba <uxr_serialize_CLIENT_Representation+0x52>
 8012616:	bf00      	nop

08012618 <uxr_deserialize_CLIENT_Representation>:
 8012618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801261c:	2204      	movs	r2, #4
 801261e:	460c      	mov	r4, r1
 8012620:	4605      	mov	r5, r0
 8012622:	f004 ffb1 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012626:	2202      	movs	r2, #2
 8012628:	4607      	mov	r7, r0
 801262a:	1d21      	adds	r1, r4, #4
 801262c:	4628      	mov	r0, r5
 801262e:	f004 ffab 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012632:	4038      	ands	r0, r7
 8012634:	2202      	movs	r2, #2
 8012636:	1da1      	adds	r1, r4, #6
 8012638:	b2c6      	uxtb	r6, r0
 801263a:	4628      	mov	r0, r5
 801263c:	f004 ffa4 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012640:	2204      	movs	r2, #4
 8012642:	4006      	ands	r6, r0
 8012644:	f104 0108 	add.w	r1, r4, #8
 8012648:	4628      	mov	r0, r5
 801264a:	f004 ff9d 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801264e:	f104 010c 	add.w	r1, r4, #12
 8012652:	4006      	ands	r6, r0
 8012654:	4628      	mov	r0, r5
 8012656:	f7f7 febf 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 801265a:	f104 010d 	add.w	r1, r4, #13
 801265e:	ea06 0700 	and.w	r7, r6, r0
 8012662:	4628      	mov	r0, r5
 8012664:	f7f7 fe8a 	bl	800a37c <ucdr_deserialize_bool>
 8012668:	7b63      	ldrb	r3, [r4, #13]
 801266a:	4007      	ands	r7, r0
 801266c:	b93b      	cbnz	r3, 801267e <uxr_deserialize_CLIENT_Representation+0x66>
 801266e:	f104 011c 	add.w	r1, r4, #28
 8012672:	4628      	mov	r0, r5
 8012674:	f7f7 ffc6 	bl	800a604 <ucdr_deserialize_uint16_t>
 8012678:	4038      	ands	r0, r7
 801267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801267e:	f104 0110 	add.w	r1, r4, #16
 8012682:	4628      	mov	r0, r5
 8012684:	f7f8 f9d8 	bl	800aa38 <ucdr_deserialize_uint32_t>
 8012688:	6923      	ldr	r3, [r4, #16]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d903      	bls.n	8012696 <uxr_deserialize_CLIENT_Representation+0x7e>
 801268e:	2301      	movs	r3, #1
 8012690:	75ab      	strb	r3, [r5, #22]
 8012692:	2700      	movs	r7, #0
 8012694:	e7eb      	b.n	801266e <uxr_deserialize_CLIENT_Representation+0x56>
 8012696:	b30b      	cbz	r3, 80126dc <uxr_deserialize_CLIENT_Representation+0xc4>
 8012698:	2800      	cmp	r0, #0
 801269a:	d0fa      	beq.n	8012692 <uxr_deserialize_CLIENT_Representation+0x7a>
 801269c:	46a0      	mov	r8, r4
 801269e:	f04f 0900 	mov.w	r9, #0
 80126a2:	e001      	b.n	80126a8 <uxr_deserialize_CLIENT_Representation+0x90>
 80126a4:	2e00      	cmp	r6, #0
 80126a6:	d0f4      	beq.n	8012692 <uxr_deserialize_CLIENT_Representation+0x7a>
 80126a8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80126ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126b0:	4628      	mov	r0, r5
 80126b2:	f005 f887 	bl	80177c4 <ucdr_deserialize_string>
 80126b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126ba:	4606      	mov	r6, r0
 80126bc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80126c0:	4628      	mov	r0, r5
 80126c2:	f005 f87f 	bl	80177c4 <ucdr_deserialize_string>
 80126c6:	6923      	ldr	r3, [r4, #16]
 80126c8:	f109 0901 	add.w	r9, r9, #1
 80126cc:	4006      	ands	r6, r0
 80126ce:	4599      	cmp	r9, r3
 80126d0:	f108 0808 	add.w	r8, r8, #8
 80126d4:	b2f6      	uxtb	r6, r6
 80126d6:	d3e5      	bcc.n	80126a4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80126d8:	4037      	ands	r7, r6
 80126da:	e7c8      	b.n	801266e <uxr_deserialize_CLIENT_Representation+0x56>
 80126dc:	4007      	ands	r7, r0
 80126de:	e7c6      	b.n	801266e <uxr_deserialize_CLIENT_Representation+0x56>

080126e0 <uxr_serialize_AGENT_Representation>:
 80126e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126e4:	2204      	movs	r2, #4
 80126e6:	460f      	mov	r7, r1
 80126e8:	4605      	mov	r5, r0
 80126ea:	f004 fee9 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 80126ee:	2202      	movs	r2, #2
 80126f0:	4604      	mov	r4, r0
 80126f2:	1d39      	adds	r1, r7, #4
 80126f4:	4628      	mov	r0, r5
 80126f6:	f004 fee3 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 80126fa:	4020      	ands	r0, r4
 80126fc:	2202      	movs	r2, #2
 80126fe:	1db9      	adds	r1, r7, #6
 8012700:	b2c4      	uxtb	r4, r0
 8012702:	4628      	mov	r0, r5
 8012704:	f004 fedc 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012708:	7a39      	ldrb	r1, [r7, #8]
 801270a:	4004      	ands	r4, r0
 801270c:	4628      	mov	r0, r5
 801270e:	f7f7 fe1f 	bl	800a350 <ucdr_serialize_bool>
 8012712:	7a3b      	ldrb	r3, [r7, #8]
 8012714:	ea00 0804 	and.w	r8, r0, r4
 8012718:	b913      	cbnz	r3, 8012720 <uxr_serialize_AGENT_Representation+0x40>
 801271a:	4640      	mov	r0, r8
 801271c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012720:	68f9      	ldr	r1, [r7, #12]
 8012722:	4628      	mov	r0, r5
 8012724:	f7f8 f858 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	b303      	cbz	r3, 801276e <uxr_serialize_AGENT_Representation+0x8e>
 801272c:	b1d0      	cbz	r0, 8012764 <uxr_serialize_AGENT_Representation+0x84>
 801272e:	463e      	mov	r6, r7
 8012730:	f04f 0900 	mov.w	r9, #0
 8012734:	e001      	b.n	801273a <uxr_serialize_AGENT_Representation+0x5a>
 8012736:	3608      	adds	r6, #8
 8012738:	b1a4      	cbz	r4, 8012764 <uxr_serialize_AGENT_Representation+0x84>
 801273a:	6931      	ldr	r1, [r6, #16]
 801273c:	4628      	mov	r0, r5
 801273e:	f005 f831 	bl	80177a4 <ucdr_serialize_string>
 8012742:	6971      	ldr	r1, [r6, #20]
 8012744:	4604      	mov	r4, r0
 8012746:	4628      	mov	r0, r5
 8012748:	f005 f82c 	bl	80177a4 <ucdr_serialize_string>
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f109 0901 	add.w	r9, r9, #1
 8012752:	4004      	ands	r4, r0
 8012754:	4599      	cmp	r9, r3
 8012756:	b2e4      	uxtb	r4, r4
 8012758:	d3ed      	bcc.n	8012736 <uxr_serialize_AGENT_Representation+0x56>
 801275a:	ea08 0804 	and.w	r8, r8, r4
 801275e:	4640      	mov	r0, r8
 8012760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012764:	f04f 0800 	mov.w	r8, #0
 8012768:	4640      	mov	r0, r8
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	ea08 0800 	and.w	r8, r8, r0
 8012772:	e7d2      	b.n	801271a <uxr_serialize_AGENT_Representation+0x3a>

08012774 <uxr_serialize_DATAWRITER_Representation>:
 8012774:	b570      	push	{r4, r5, r6, lr}
 8012776:	460d      	mov	r5, r1
 8012778:	7809      	ldrb	r1, [r1, #0]
 801277a:	4606      	mov	r6, r0
 801277c:	f7f7 fe16 	bl	800a3ac <ucdr_serialize_uint8_t>
 8012780:	4604      	mov	r4, r0
 8012782:	b130      	cbz	r0, 8012792 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012784:	782b      	ldrb	r3, [r5, #0]
 8012786:	2b02      	cmp	r3, #2
 8012788:	d00c      	beq.n	80127a4 <uxr_serialize_DATAWRITER_Representation+0x30>
 801278a:	2b03      	cmp	r3, #3
 801278c:	d010      	beq.n	80127b0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801278e:	2b01      	cmp	r3, #1
 8012790:	d008      	beq.n	80127a4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012792:	2202      	movs	r2, #2
 8012794:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012798:	4630      	mov	r0, r6
 801279a:	f004 fe91 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801279e:	4020      	ands	r0, r4
 80127a0:	b2c0      	uxtb	r0, r0
 80127a2:	bd70      	pop	{r4, r5, r6, pc}
 80127a4:	6869      	ldr	r1, [r5, #4]
 80127a6:	4630      	mov	r0, r6
 80127a8:	f004 fffc 	bl	80177a4 <ucdr_serialize_string>
 80127ac:	4604      	mov	r4, r0
 80127ae:	e7f0      	b.n	8012792 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127b0:	4629      	mov	r1, r5
 80127b2:	4630      	mov	r0, r6
 80127b4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80127b8:	3104      	adds	r1, #4
 80127ba:	f7fd f86d 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 80127be:	4604      	mov	r4, r0
 80127c0:	e7e7      	b.n	8012792 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127c2:	bf00      	nop

080127c4 <uxr_serialize_ObjectVariant.part.0>:
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	780b      	ldrb	r3, [r1, #0]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	460c      	mov	r4, r1
 80127cc:	4605      	mov	r5, r0
 80127ce:	2b0d      	cmp	r3, #13
 80127d0:	d854      	bhi.n	801287c <uxr_serialize_ObjectVariant.part.0+0xb8>
 80127d2:	e8df f003 	tbb	[pc, r3]
 80127d6:	0730      	.short	0x0730
 80127d8:	07071b1b 	.word	0x07071b1b
 80127dc:	0c530707 	.word	0x0c530707
 80127e0:	494e0c0c 	.word	0x494e0c0c
 80127e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127e8:	3104      	adds	r1, #4
 80127ea:	f7ff bfc3 	b.w	8012774 <uxr_serialize_DATAWRITER_Representation>
 80127ee:	7909      	ldrb	r1, [r1, #4]
 80127f0:	f7f7 fddc 	bl	800a3ac <ucdr_serialize_uint8_t>
 80127f4:	b1e8      	cbz	r0, 8012832 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80127f6:	7923      	ldrb	r3, [r4, #4]
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d001      	beq.n	8012800 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	d13d      	bne.n	801287c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012800:	68a1      	ldr	r1, [r4, #8]
 8012802:	4628      	mov	r0, r5
 8012804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012808:	f004 bfcc 	b.w	80177a4 <ucdr_serialize_string>
 801280c:	7909      	ldrb	r1, [r1, #4]
 801280e:	f7f7 fdcd 	bl	800a3ac <ucdr_serialize_uint8_t>
 8012812:	4606      	mov	r6, r0
 8012814:	b120      	cbz	r0, 8012820 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012816:	7923      	ldrb	r3, [r4, #4]
 8012818:	2b02      	cmp	r3, #2
 801281a:	d039      	beq.n	8012890 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801281c:	2b03      	cmp	r3, #3
 801281e:	d02f      	beq.n	8012880 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012820:	2202      	movs	r2, #2
 8012822:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012826:	4628      	mov	r0, r5
 8012828:	f004 fe4a 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801282c:	4030      	ands	r0, r6
 801282e:	b2c0      	uxtb	r0, r0
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	2000      	movs	r0, #0
 8012834:	bd70      	pop	{r4, r5, r6, pc}
 8012836:	7909      	ldrb	r1, [r1, #4]
 8012838:	f7f7 fdb8 	bl	800a3ac <ucdr_serialize_uint8_t>
 801283c:	4606      	mov	r6, r0
 801283e:	b158      	cbz	r0, 8012858 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012840:	7923      	ldrb	r3, [r4, #4]
 8012842:	2b02      	cmp	r3, #2
 8012844:	d003      	beq.n	801284e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012846:	2b03      	cmp	r3, #3
 8012848:	d028      	beq.n	801289c <uxr_serialize_ObjectVariant.part.0+0xd8>
 801284a:	2b01      	cmp	r3, #1
 801284c:	d104      	bne.n	8012858 <uxr_serialize_ObjectVariant.part.0+0x94>
 801284e:	68a1      	ldr	r1, [r4, #8]
 8012850:	4628      	mov	r0, r5
 8012852:	f004 ffa7 	bl	80177a4 <ucdr_serialize_string>
 8012856:	4606      	mov	r6, r0
 8012858:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801285c:	4628      	mov	r0, r5
 801285e:	f7f8 fae1 	bl	800ae24 <ucdr_serialize_int16_t>
 8012862:	4030      	ands	r0, r6
 8012864:	b2c0      	uxtb	r0, r0
 8012866:	bd70      	pop	{r4, r5, r6, pc}
 8012868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801286c:	3104      	adds	r1, #4
 801286e:	f7ff be7b 	b.w	8012568 <uxr_serialize_CLIENT_Representation>
 8012872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012876:	3104      	adds	r1, #4
 8012878:	f7ff bf32 	b.w	80126e0 <uxr_serialize_AGENT_Representation>
 801287c:	2001      	movs	r0, #1
 801287e:	bd70      	pop	{r4, r5, r6, pc}
 8012880:	68a2      	ldr	r2, [r4, #8]
 8012882:	f104 010c 	add.w	r1, r4, #12
 8012886:	4628      	mov	r0, r5
 8012888:	f7fd f806 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 801288c:	4606      	mov	r6, r0
 801288e:	e7c7      	b.n	8012820 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012890:	68a1      	ldr	r1, [r4, #8]
 8012892:	4628      	mov	r0, r5
 8012894:	f004 ff86 	bl	80177a4 <ucdr_serialize_string>
 8012898:	4606      	mov	r6, r0
 801289a:	e7c1      	b.n	8012820 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801289c:	68a2      	ldr	r2, [r4, #8]
 801289e:	f104 010c 	add.w	r1, r4, #12
 80128a2:	4628      	mov	r0, r5
 80128a4:	f7fc fff8 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 80128a8:	4606      	mov	r6, r0
 80128aa:	e7d5      	b.n	8012858 <uxr_serialize_ObjectVariant.part.0+0x94>

080128ac <uxr_deserialize_DATAWRITER_Representation>:
 80128ac:	b570      	push	{r4, r5, r6, lr}
 80128ae:	4606      	mov	r6, r0
 80128b0:	460d      	mov	r5, r1
 80128b2:	f7f7 fd91 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80128b6:	4604      	mov	r4, r0
 80128b8:	b130      	cbz	r0, 80128c8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128ba:	782b      	ldrb	r3, [r5, #0]
 80128bc:	2b02      	cmp	r3, #2
 80128be:	d00c      	beq.n	80128da <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80128c0:	2b03      	cmp	r3, #3
 80128c2:	d012      	beq.n	80128ea <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d008      	beq.n	80128da <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80128c8:	2202      	movs	r2, #2
 80128ca:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80128ce:	4630      	mov	r0, r6
 80128d0:	f004 fe5a 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 80128d4:	4020      	ands	r0, r4
 80128d6:	b2c0      	uxtb	r0, r0
 80128d8:	bd70      	pop	{r4, r5, r6, pc}
 80128da:	6869      	ldr	r1, [r5, #4]
 80128dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128e0:	4630      	mov	r0, r6
 80128e2:	f004 ff6f 	bl	80177c4 <ucdr_deserialize_string>
 80128e6:	4604      	mov	r4, r0
 80128e8:	e7ee      	b.n	80128c8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128ea:	1d2b      	adds	r3, r5, #4
 80128ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128f0:	f105 0108 	add.w	r1, r5, #8
 80128f4:	4630      	mov	r0, r6
 80128f6:	f7fc ffe1 	bl	800f8bc <ucdr_deserialize_sequence_uint8_t>
 80128fa:	4604      	mov	r4, r0
 80128fc:	e7e4      	b.n	80128c8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128fe:	bf00      	nop

08012900 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	460d      	mov	r5, r1
 8012904:	7809      	ldrb	r1, [r1, #0]
 8012906:	4606      	mov	r6, r0
 8012908:	f7f7 fd22 	bl	800a350 <ucdr_serialize_bool>
 801290c:	782b      	ldrb	r3, [r5, #0]
 801290e:	4604      	mov	r4, r0
 8012910:	b94b      	cbnz	r3, 8012926 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012912:	7a29      	ldrb	r1, [r5, #8]
 8012914:	4630      	mov	r0, r6
 8012916:	f7f7 fd1b 	bl	800a350 <ucdr_serialize_bool>
 801291a:	7a2b      	ldrb	r3, [r5, #8]
 801291c:	4004      	ands	r4, r0
 801291e:	b2e4      	uxtb	r4, r4
 8012920:	b943      	cbnz	r3, 8012934 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012922:	4620      	mov	r0, r4
 8012924:	bd70      	pop	{r4, r5, r6, pc}
 8012926:	6869      	ldr	r1, [r5, #4]
 8012928:	4630      	mov	r0, r6
 801292a:	f004 ff3b 	bl	80177a4 <ucdr_serialize_string>
 801292e:	4004      	ands	r4, r0
 8012930:	b2e4      	uxtb	r4, r4
 8012932:	e7ee      	b.n	8012912 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012934:	68e9      	ldr	r1, [r5, #12]
 8012936:	4630      	mov	r0, r6
 8012938:	f004 ff34 	bl	80177a4 <ucdr_serialize_string>
 801293c:	4004      	ands	r4, r0
 801293e:	4620      	mov	r0, r4
 8012940:	bd70      	pop	{r4, r5, r6, pc}
 8012942:	bf00      	nop

08012944 <uxr_serialize_OBJK_Topic_Binary>:
 8012944:	b570      	push	{r4, r5, r6, lr}
 8012946:	460d      	mov	r5, r1
 8012948:	6809      	ldr	r1, [r1, #0]
 801294a:	4606      	mov	r6, r0
 801294c:	f004 ff2a 	bl	80177a4 <ucdr_serialize_string>
 8012950:	7929      	ldrb	r1, [r5, #4]
 8012952:	4604      	mov	r4, r0
 8012954:	4630      	mov	r0, r6
 8012956:	f7f7 fcfb 	bl	800a350 <ucdr_serialize_bool>
 801295a:	792b      	ldrb	r3, [r5, #4]
 801295c:	4004      	ands	r4, r0
 801295e:	b2e4      	uxtb	r4, r4
 8012960:	b943      	cbnz	r3, 8012974 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012962:	7b29      	ldrb	r1, [r5, #12]
 8012964:	4630      	mov	r0, r6
 8012966:	f7f7 fcf3 	bl	800a350 <ucdr_serialize_bool>
 801296a:	7b2b      	ldrb	r3, [r5, #12]
 801296c:	4004      	ands	r4, r0
 801296e:	b93b      	cbnz	r3, 8012980 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012970:	4620      	mov	r0, r4
 8012972:	bd70      	pop	{r4, r5, r6, pc}
 8012974:	68a9      	ldr	r1, [r5, #8]
 8012976:	4630      	mov	r0, r6
 8012978:	f004 ff14 	bl	80177a4 <ucdr_serialize_string>
 801297c:	4004      	ands	r4, r0
 801297e:	e7f0      	b.n	8012962 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012980:	6929      	ldr	r1, [r5, #16]
 8012982:	4630      	mov	r0, r6
 8012984:	f004 ff0e 	bl	80177a4 <ucdr_serialize_string>
 8012988:	4004      	ands	r4, r0
 801298a:	b2e4      	uxtb	r4, r4
 801298c:	4620      	mov	r0, r4
 801298e:	bd70      	pop	{r4, r5, r6, pc}

08012990 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012994:	460c      	mov	r4, r1
 8012996:	7809      	ldrb	r1, [r1, #0]
 8012998:	4606      	mov	r6, r0
 801299a:	f7f7 fcd9 	bl	800a350 <ucdr_serialize_bool>
 801299e:	7823      	ldrb	r3, [r4, #0]
 80129a0:	4605      	mov	r5, r0
 80129a2:	b96b      	cbnz	r3, 80129c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80129a4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80129a8:	4630      	mov	r0, r6
 80129aa:	f7f7 fcd1 	bl	800a350 <ucdr_serialize_bool>
 80129ae:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80129b2:	4005      	ands	r5, r0
 80129b4:	b2ed      	uxtb	r5, r5
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d169      	bne.n	8012a8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80129ba:	4628      	mov	r0, r5
 80129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129c0:	6861      	ldr	r1, [r4, #4]
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7f7 ff08 	bl	800a7d8 <ucdr_serialize_uint32_t>
 80129c8:	6863      	ldr	r3, [r4, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d06b      	beq.n	8012aa6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80129ce:	2800      	cmp	r0, #0
 80129d0:	d067      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129d2:	68a1      	ldr	r1, [r4, #8]
 80129d4:	4630      	mov	r0, r6
 80129d6:	f004 fee5 	bl	80177a4 <ucdr_serialize_string>
 80129da:	6863      	ldr	r3, [r4, #4]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d953      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d05e      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129e4:	68e1      	ldr	r1, [r4, #12]
 80129e6:	4630      	mov	r0, r6
 80129e8:	f004 fedc 	bl	80177a4 <ucdr_serialize_string>
 80129ec:	6863      	ldr	r3, [r4, #4]
 80129ee:	2b02      	cmp	r3, #2
 80129f0:	d94a      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d055      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129f6:	6921      	ldr	r1, [r4, #16]
 80129f8:	4630      	mov	r0, r6
 80129fa:	f004 fed3 	bl	80177a4 <ucdr_serialize_string>
 80129fe:	6863      	ldr	r3, [r4, #4]
 8012a00:	2b03      	cmp	r3, #3
 8012a02:	d941      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d04c      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a08:	6961      	ldr	r1, [r4, #20]
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	f004 feca 	bl	80177a4 <ucdr_serialize_string>
 8012a10:	6863      	ldr	r3, [r4, #4]
 8012a12:	2b04      	cmp	r3, #4
 8012a14:	d938      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d043      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a1a:	69a1      	ldr	r1, [r4, #24]
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f004 fec1 	bl	80177a4 <ucdr_serialize_string>
 8012a22:	6863      	ldr	r3, [r4, #4]
 8012a24:	2b05      	cmp	r3, #5
 8012a26:	d92f      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d03a      	beq.n	8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a2c:	69e1      	ldr	r1, [r4, #28]
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f004 feb8 	bl	80177a4 <ucdr_serialize_string>
 8012a34:	6863      	ldr	r3, [r4, #4]
 8012a36:	2b06      	cmp	r3, #6
 8012a38:	d926      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a3a:	b390      	cbz	r0, 8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a3c:	6a21      	ldr	r1, [r4, #32]
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f004 feb0 	bl	80177a4 <ucdr_serialize_string>
 8012a44:	6863      	ldr	r3, [r4, #4]
 8012a46:	2b07      	cmp	r3, #7
 8012a48:	d91e      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a4a:	b350      	cbz	r0, 8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a4c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f004 fea8 	bl	80177a4 <ucdr_serialize_string>
 8012a54:	6863      	ldr	r3, [r4, #4]
 8012a56:	2b08      	cmp	r3, #8
 8012a58:	d916      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a5a:	b310      	cbz	r0, 8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a5c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f004 fea0 	bl	80177a4 <ucdr_serialize_string>
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	2b09      	cmp	r3, #9
 8012a68:	d90e      	bls.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a6a:	b1d0      	cbz	r0, 8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a6c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012a70:	2709      	movs	r7, #9
 8012a72:	e000      	b.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012a74:	b1a8      	cbz	r0, 8012aa2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a76:	f858 1b04 	ldr.w	r1, [r8], #4
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f004 fe92 	bl	80177a4 <ucdr_serialize_string>
 8012a80:	6862      	ldr	r2, [r4, #4]
 8012a82:	3701      	adds	r7, #1
 8012a84:	4297      	cmp	r7, r2
 8012a86:	d3f5      	bcc.n	8012a74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012a88:	4005      	ands	r5, r0
 8012a8a:	b2ed      	uxtb	r5, r5
 8012a8c:	e78a      	b.n	80129a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012a8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012a90:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fc feff 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 8012a9a:	4005      	ands	r5, r0
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa2:	2500      	movs	r5, #0
 8012aa4:	e77e      	b.n	80129a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012aa6:	4028      	ands	r0, r5
 8012aa8:	b2c5      	uxtb	r5, r0
 8012aaa:	e77b      	b.n	80129a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012aac <uxr_serialize_OBJK_Publisher_Binary>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	460d      	mov	r5, r1
 8012ab0:	7809      	ldrb	r1, [r1, #0]
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	f7f7 fc4c 	bl	800a350 <ucdr_serialize_bool>
 8012ab8:	782b      	ldrb	r3, [r5, #0]
 8012aba:	4604      	mov	r4, r0
 8012abc:	b94b      	cbnz	r3, 8012ad2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012abe:	7a29      	ldrb	r1, [r5, #8]
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f7f7 fc45 	bl	800a350 <ucdr_serialize_bool>
 8012ac6:	7a2b      	ldrb	r3, [r5, #8]
 8012ac8:	4004      	ands	r4, r0
 8012aca:	b2e4      	uxtb	r4, r4
 8012acc:	b943      	cbnz	r3, 8012ae0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012ace:	4620      	mov	r0, r4
 8012ad0:	bd70      	pop	{r4, r5, r6, pc}
 8012ad2:	6869      	ldr	r1, [r5, #4]
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f004 fe65 	bl	80177a4 <ucdr_serialize_string>
 8012ada:	4004      	ands	r4, r0
 8012adc:	b2e4      	uxtb	r4, r4
 8012ade:	e7ee      	b.n	8012abe <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012ae0:	f105 010c 	add.w	r1, r5, #12
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f7ff ff53 	bl	8012990 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012aea:	4004      	ands	r4, r0
 8012aec:	4620      	mov	r0, r4
 8012aee:	bd70      	pop	{r4, r5, r6, pc}

08012af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	460c      	mov	r4, r1
 8012af6:	7809      	ldrb	r1, [r1, #0]
 8012af8:	4606      	mov	r6, r0
 8012afa:	f7f7 fc29 	bl	800a350 <ucdr_serialize_bool>
 8012afe:	7823      	ldrb	r3, [r4, #0]
 8012b00:	4605      	mov	r5, r0
 8012b02:	b96b      	cbnz	r3, 8012b20 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012b04:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7f7 fc21 	bl	800a350 <ucdr_serialize_bool>
 8012b0e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012b12:	4005      	ands	r5, r0
 8012b14:	b2ed      	uxtb	r5, r5
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d169      	bne.n	8012bee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b20:	6861      	ldr	r1, [r4, #4]
 8012b22:	4630      	mov	r0, r6
 8012b24:	f7f7 fe58 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8012b28:	6863      	ldr	r3, [r4, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d06b      	beq.n	8012c06 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d067      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b32:	68a1      	ldr	r1, [r4, #8]
 8012b34:	4630      	mov	r0, r6
 8012b36:	f004 fe35 	bl	80177a4 <ucdr_serialize_string>
 8012b3a:	6863      	ldr	r3, [r4, #4]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d953      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d05e      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b44:	68e1      	ldr	r1, [r4, #12]
 8012b46:	4630      	mov	r0, r6
 8012b48:	f004 fe2c 	bl	80177a4 <ucdr_serialize_string>
 8012b4c:	6863      	ldr	r3, [r4, #4]
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	d94a      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d055      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b56:	6921      	ldr	r1, [r4, #16]
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f004 fe23 	bl	80177a4 <ucdr_serialize_string>
 8012b5e:	6863      	ldr	r3, [r4, #4]
 8012b60:	2b03      	cmp	r3, #3
 8012b62:	d941      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	d04c      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b68:	6961      	ldr	r1, [r4, #20]
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f004 fe1a 	bl	80177a4 <ucdr_serialize_string>
 8012b70:	6863      	ldr	r3, [r4, #4]
 8012b72:	2b04      	cmp	r3, #4
 8012b74:	d938      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b76:	2800      	cmp	r0, #0
 8012b78:	d043      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b7a:	69a1      	ldr	r1, [r4, #24]
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f004 fe11 	bl	80177a4 <ucdr_serialize_string>
 8012b82:	6863      	ldr	r3, [r4, #4]
 8012b84:	2b05      	cmp	r3, #5
 8012b86:	d92f      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d03a      	beq.n	8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b8c:	69e1      	ldr	r1, [r4, #28]
 8012b8e:	4630      	mov	r0, r6
 8012b90:	f004 fe08 	bl	80177a4 <ucdr_serialize_string>
 8012b94:	6863      	ldr	r3, [r4, #4]
 8012b96:	2b06      	cmp	r3, #6
 8012b98:	d926      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b9a:	b390      	cbz	r0, 8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b9c:	6a21      	ldr	r1, [r4, #32]
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	f004 fe00 	bl	80177a4 <ucdr_serialize_string>
 8012ba4:	6863      	ldr	r3, [r4, #4]
 8012ba6:	2b07      	cmp	r3, #7
 8012ba8:	d91e      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012baa:	b350      	cbz	r0, 8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f004 fdf8 	bl	80177a4 <ucdr_serialize_string>
 8012bb4:	6863      	ldr	r3, [r4, #4]
 8012bb6:	2b08      	cmp	r3, #8
 8012bb8:	d916      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bba:	b310      	cbz	r0, 8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bbc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f004 fdf0 	bl	80177a4 <ucdr_serialize_string>
 8012bc4:	6863      	ldr	r3, [r4, #4]
 8012bc6:	2b09      	cmp	r3, #9
 8012bc8:	d90e      	bls.n	8012be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bca:	b1d0      	cbz	r0, 8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bcc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012bd0:	2709      	movs	r7, #9
 8012bd2:	e000      	b.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012bd4:	b1a8      	cbz	r0, 8012c02 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bd6:	f858 1b04 	ldr.w	r1, [r8], #4
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f004 fde2 	bl	80177a4 <ucdr_serialize_string>
 8012be0:	6862      	ldr	r2, [r4, #4]
 8012be2:	3701      	adds	r7, #1
 8012be4:	4297      	cmp	r7, r2
 8012be6:	d3f5      	bcc.n	8012bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012be8:	4005      	ands	r5, r0
 8012bea:	b2ed      	uxtb	r5, r5
 8012bec:	e78a      	b.n	8012b04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012bee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012bf0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7fc fe4f 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 8012bfa:	4005      	ands	r5, r0
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c02:	2500      	movs	r5, #0
 8012c04:	e77e      	b.n	8012b04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c06:	4028      	ands	r0, r5
 8012c08:	b2c5      	uxtb	r5, r0
 8012c0a:	e77b      	b.n	8012b04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012c0c <uxr_serialize_OBJK_Subscriber_Binary>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	460d      	mov	r5, r1
 8012c10:	7809      	ldrb	r1, [r1, #0]
 8012c12:	4606      	mov	r6, r0
 8012c14:	f7f7 fb9c 	bl	800a350 <ucdr_serialize_bool>
 8012c18:	782b      	ldrb	r3, [r5, #0]
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	b94b      	cbnz	r3, 8012c32 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012c1e:	7a29      	ldrb	r1, [r5, #8]
 8012c20:	4630      	mov	r0, r6
 8012c22:	f7f7 fb95 	bl	800a350 <ucdr_serialize_bool>
 8012c26:	7a2b      	ldrb	r3, [r5, #8]
 8012c28:	4004      	ands	r4, r0
 8012c2a:	b2e4      	uxtb	r4, r4
 8012c2c:	b943      	cbnz	r3, 8012c40 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012c2e:	4620      	mov	r0, r4
 8012c30:	bd70      	pop	{r4, r5, r6, pc}
 8012c32:	6869      	ldr	r1, [r5, #4]
 8012c34:	4630      	mov	r0, r6
 8012c36:	f004 fdb5 	bl	80177a4 <ucdr_serialize_string>
 8012c3a:	4004      	ands	r4, r0
 8012c3c:	b2e4      	uxtb	r4, r4
 8012c3e:	e7ee      	b.n	8012c1e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012c40:	f105 010c 	add.w	r1, r5, #12
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ff53 	bl	8012af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012c4a:	4004      	ands	r4, r0
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}

08012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012c50:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012c54:	4688      	mov	r8, r1
 8012c56:	8809      	ldrh	r1, [r1, #0]
 8012c58:	4681      	mov	r9, r0
 8012c5a:	f7f7 fbd3 	bl	800a404 <ucdr_serialize_uint16_t>
 8012c5e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012c62:	4606      	mov	r6, r0
 8012c64:	4648      	mov	r0, r9
 8012c66:	f7f7 fb73 	bl	800a350 <ucdr_serialize_bool>
 8012c6a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012c6e:	4006      	ands	r6, r0
 8012c70:	b2f5      	uxtb	r5, r6
 8012c72:	b9eb      	cbnz	r3, 8012cb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012c74:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012c78:	4648      	mov	r0, r9
 8012c7a:	f7f7 fb69 	bl	800a350 <ucdr_serialize_bool>
 8012c7e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012c82:	4005      	ands	r5, r0
 8012c84:	bb7b      	cbnz	r3, 8012ce6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012c86:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012c8a:	4648      	mov	r0, r9
 8012c8c:	f7f7 fb60 	bl	800a350 <ucdr_serialize_bool>
 8012c90:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012c94:	4005      	ands	r5, r0
 8012c96:	b9f3      	cbnz	r3, 8012cd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012c98:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012c9c:	4648      	mov	r0, r9
 8012c9e:	f7f7 fb57 	bl	800a350 <ucdr_serialize_bool>
 8012ca2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012ca6:	4005      	ands	r5, r0
 8012ca8:	b94b      	cbnz	r3, 8012cbe <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012caa:	4628      	mov	r0, r5
 8012cac:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012cb0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012cb4:	4648      	mov	r0, r9
 8012cb6:	f7f7 fba5 	bl	800a404 <ucdr_serialize_uint16_t>
 8012cba:	4005      	ands	r5, r0
 8012cbc:	e7da      	b.n	8012c74 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012cbe:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012cc2:	f108 011c 	add.w	r1, r8, #28
 8012cc6:	4648      	mov	r0, r9
 8012cc8:	f7fc fde6 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 8012ccc:	4028      	ands	r0, r5
 8012cce:	b2c5      	uxtb	r5, r0
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012cd6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012cda:	4648      	mov	r0, r9
 8012cdc:	f7f7 fd7c 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8012ce0:	4028      	ands	r0, r5
 8012ce2:	b2c5      	uxtb	r5, r0
 8012ce4:	e7d8      	b.n	8012c98 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012ce6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012cea:	4648      	mov	r0, r9
 8012cec:	f7f7 fd74 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8012cf0:	4028      	ands	r0, r5
 8012cf2:	b2c5      	uxtb	r5, r0
 8012cf4:	e7c7      	b.n	8012c86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012cf6:	bf00      	nop

08012cf8 <uxr_serialize_OBJK_DataReader_Binary>:
 8012cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfa:	2202      	movs	r2, #2
 8012cfc:	460c      	mov	r4, r1
 8012cfe:	4606      	mov	r6, r0
 8012d00:	f004 fbde 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012d04:	78a1      	ldrb	r1, [r4, #2]
 8012d06:	4605      	mov	r5, r0
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f7f7 fb21 	bl	800a350 <ucdr_serialize_bool>
 8012d0e:	78a3      	ldrb	r3, [r4, #2]
 8012d10:	4005      	ands	r5, r0
 8012d12:	b2ed      	uxtb	r5, r5
 8012d14:	b90b      	cbnz	r3, 8012d1a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012d16:	4628      	mov	r0, r5
 8012d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d1a:	f104 0108 	add.w	r1, r4, #8
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f7ff ff96 	bl	8012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d24:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012d28:	4607      	mov	r7, r0
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f7f7 fb10 	bl	800a350 <ucdr_serialize_bool>
 8012d30:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012d34:	4038      	ands	r0, r7
 8012d36:	b2c7      	uxtb	r7, r0
 8012d38:	b95b      	cbnz	r3, 8012d52 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012d3a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f7f7 fb06 	bl	800a350 <ucdr_serialize_bool>
 8012d44:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012d48:	4007      	ands	r7, r0
 8012d4a:	b94b      	cbnz	r3, 8012d60 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012d4c:	403d      	ands	r5, r7
 8012d4e:	4628      	mov	r0, r5
 8012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d52:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012d56:	4630      	mov	r0, r6
 8012d58:	f7f7 ff94 	bl	800ac84 <ucdr_serialize_uint64_t>
 8012d5c:	4007      	ands	r7, r0
 8012d5e:	e7ec      	b.n	8012d3a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012d60:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012d62:	4630      	mov	r0, r6
 8012d64:	f004 fd1e 	bl	80177a4 <ucdr_serialize_string>
 8012d68:	4007      	ands	r7, r0
 8012d6a:	b2ff      	uxtb	r7, r7
 8012d6c:	e7ee      	b.n	8012d4c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012d6e:	bf00      	nop

08012d70 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d72:	2202      	movs	r2, #2
 8012d74:	460d      	mov	r5, r1
 8012d76:	4606      	mov	r6, r0
 8012d78:	f004 fba2 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012d7c:	78a9      	ldrb	r1, [r5, #2]
 8012d7e:	4604      	mov	r4, r0
 8012d80:	4630      	mov	r0, r6
 8012d82:	f7f7 fae5 	bl	800a350 <ucdr_serialize_bool>
 8012d86:	78ab      	ldrb	r3, [r5, #2]
 8012d88:	4004      	ands	r4, r0
 8012d8a:	b2e4      	uxtb	r4, r4
 8012d8c:	b90b      	cbnz	r3, 8012d92 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012d8e:	4620      	mov	r0, r4
 8012d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d92:	f105 0108 	add.w	r1, r5, #8
 8012d96:	4630      	mov	r0, r6
 8012d98:	f7ff ff5a 	bl	8012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d9c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012da0:	4607      	mov	r7, r0
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7f7 fad4 	bl	800a350 <ucdr_serialize_bool>
 8012da8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012dac:	4038      	ands	r0, r7
 8012dae:	b2c7      	uxtb	r7, r0
 8012db0:	b913      	cbnz	r3, 8012db8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012db2:	403c      	ands	r4, r7
 8012db4:	4620      	mov	r0, r4
 8012db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012db8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	f7f7 ff61 	bl	800ac84 <ucdr_serialize_uint64_t>
 8012dc2:	4007      	ands	r7, r0
 8012dc4:	e7f5      	b.n	8012db2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012dc6:	bf00      	nop

08012dc8 <uxr_deserialize_ObjectVariant>:
 8012dc8:	b570      	push	{r4, r5, r6, lr}
 8012dca:	4605      	mov	r5, r0
 8012dcc:	460e      	mov	r6, r1
 8012dce:	f7f7 fb03 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8012dd2:	b168      	cbz	r0, 8012df0 <uxr_deserialize_ObjectVariant+0x28>
 8012dd4:	7833      	ldrb	r3, [r6, #0]
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	4604      	mov	r4, r0
 8012dda:	2b0d      	cmp	r3, #13
 8012ddc:	d809      	bhi.n	8012df2 <uxr_deserialize_ObjectVariant+0x2a>
 8012dde:	e8df f003 	tbb	[pc, r3]
 8012de2:	0a41      	.short	0x0a41
 8012de4:	0a0a2323 	.word	0x0a0a2323
 8012de8:	10080a0a 	.word	0x10080a0a
 8012dec:	565c1010 	.word	0x565c1010
 8012df0:	2400      	movs	r4, #0
 8012df2:	4620      	mov	r0, r4
 8012df4:	bd70      	pop	{r4, r5, r6, pc}
 8012df6:	1d31      	adds	r1, r6, #4
 8012df8:	4628      	mov	r0, r5
 8012dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dfe:	f7ff bd55 	b.w	80128ac <uxr_deserialize_DATAWRITER_Representation>
 8012e02:	1d31      	adds	r1, r6, #4
 8012e04:	4628      	mov	r0, r5
 8012e06:	f7f7 fae7 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d0f0      	beq.n	8012df0 <uxr_deserialize_ObjectVariant+0x28>
 8012e0e:	7933      	ldrb	r3, [r6, #4]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d001      	beq.n	8012e18 <uxr_deserialize_ObjectVariant+0x50>
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d1ec      	bne.n	8012df2 <uxr_deserialize_ObjectVariant+0x2a>
 8012e18:	68b1      	ldr	r1, [r6, #8]
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e24:	f004 bcce 	b.w	80177c4 <ucdr_deserialize_string>
 8012e28:	1d31      	adds	r1, r6, #4
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f7f7 fad4 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8012e30:	4604      	mov	r4, r0
 8012e32:	b170      	cbz	r0, 8012e52 <uxr_deserialize_ObjectVariant+0x8a>
 8012e34:	7933      	ldrb	r3, [r6, #4]
 8012e36:	2b02      	cmp	r3, #2
 8012e38:	d04c      	beq.n	8012ed4 <uxr_deserialize_ObjectVariant+0x10c>
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	d109      	bne.n	8012e52 <uxr_deserialize_ObjectVariant+0x8a>
 8012e3e:	f106 0308 	add.w	r3, r6, #8
 8012e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e46:	f106 010c 	add.w	r1, r6, #12
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f7fc fd36 	bl	800f8bc <ucdr_deserialize_sequence_uint8_t>
 8012e50:	4604      	mov	r4, r0
 8012e52:	2202      	movs	r2, #2
 8012e54:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f004 fb95 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012e5e:	4020      	ands	r0, r4
 8012e60:	b2c4      	uxtb	r4, r0
 8012e62:	e7c6      	b.n	8012df2 <uxr_deserialize_ObjectVariant+0x2a>
 8012e64:	1d31      	adds	r1, r6, #4
 8012e66:	4628      	mov	r0, r5
 8012e68:	f7f7 fab6 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	b130      	cbz	r0, 8012e7e <uxr_deserialize_ObjectVariant+0xb6>
 8012e70:	7933      	ldrb	r3, [r6, #4]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d036      	beq.n	8012ee4 <uxr_deserialize_ObjectVariant+0x11c>
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d03c      	beq.n	8012ef4 <uxr_deserialize_ObjectVariant+0x12c>
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d032      	beq.n	8012ee4 <uxr_deserialize_ObjectVariant+0x11c>
 8012e7e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012e82:	4628      	mov	r0, r5
 8012e84:	f7f8 f84e 	bl	800af24 <ucdr_deserialize_int16_t>
 8012e88:	4020      	ands	r0, r4
 8012e8a:	b2c4      	uxtb	r4, r0
 8012e8c:	e7b1      	b.n	8012df2 <uxr_deserialize_ObjectVariant+0x2a>
 8012e8e:	1d31      	adds	r1, r6, #4
 8012e90:	4628      	mov	r0, r5
 8012e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e96:	f7ff bbbf 	b.w	8012618 <uxr_deserialize_CLIENT_Representation>
 8012e9a:	2204      	movs	r2, #4
 8012e9c:	18b1      	adds	r1, r6, r2
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f004 fb72 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	f106 0108 	add.w	r1, r6, #8
 8012eaa:	4604      	mov	r4, r0
 8012eac:	4628      	mov	r0, r5
 8012eae:	f004 fb6b 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012eb2:	2202      	movs	r2, #2
 8012eb4:	4004      	ands	r4, r0
 8012eb6:	f106 010a 	add.w	r1, r6, #10
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f004 fb64 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012ec0:	b2e4      	uxtb	r4, r4
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	f106 010c 	add.w	r1, r6, #12
 8012ec8:	4628      	mov	r0, r5
 8012eca:	401c      	ands	r4, r3
 8012ecc:	f7f7 fa56 	bl	800a37c <ucdr_deserialize_bool>
 8012ed0:	4004      	ands	r4, r0
 8012ed2:	e78e      	b.n	8012df2 <uxr_deserialize_ObjectVariant+0x2a>
 8012ed4:	68b1      	ldr	r1, [r6, #8]
 8012ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eda:	4628      	mov	r0, r5
 8012edc:	f004 fc72 	bl	80177c4 <ucdr_deserialize_string>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	e7b6      	b.n	8012e52 <uxr_deserialize_ObjectVariant+0x8a>
 8012ee4:	68b1      	ldr	r1, [r6, #8]
 8012ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eea:	4628      	mov	r0, r5
 8012eec:	f004 fc6a 	bl	80177c4 <ucdr_deserialize_string>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	e7c4      	b.n	8012e7e <uxr_deserialize_ObjectVariant+0xb6>
 8012ef4:	f106 0308 	add.w	r3, r6, #8
 8012ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012efc:	f106 010c 	add.w	r1, r6, #12
 8012f00:	4628      	mov	r0, r5
 8012f02:	f7fc fcdb 	bl	800f8bc <ucdr_deserialize_sequence_uint8_t>
 8012f06:	4604      	mov	r4, r0
 8012f08:	e7b9      	b.n	8012e7e <uxr_deserialize_ObjectVariant+0xb6>
 8012f0a:	bf00      	nop

08012f0c <uxr_deserialize_BaseObjectRequest>:
 8012f0c:	b570      	push	{r4, r5, r6, lr}
 8012f0e:	2202      	movs	r2, #2
 8012f10:	4605      	mov	r5, r0
 8012f12:	460e      	mov	r6, r1
 8012f14:	f004 fb38 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012f18:	2202      	movs	r2, #2
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	18b1      	adds	r1, r6, r2
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f004 fb32 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8012f24:	4020      	ands	r0, r4
 8012f26:	b2c0      	uxtb	r0, r0
 8012f28:	bd70      	pop	{r4, r5, r6, pc}
 8012f2a:	bf00      	nop

08012f2c <uxr_serialize_ActivityInfoVariant>:
 8012f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f30:	460d      	mov	r5, r1
 8012f32:	7809      	ldrb	r1, [r1, #0]
 8012f34:	4607      	mov	r7, r0
 8012f36:	f7f7 fa39 	bl	800a3ac <ucdr_serialize_uint8_t>
 8012f3a:	4681      	mov	r9, r0
 8012f3c:	b138      	cbz	r0, 8012f4e <uxr_serialize_ActivityInfoVariant+0x22>
 8012f3e:	782b      	ldrb	r3, [r5, #0]
 8012f40:	2b06      	cmp	r3, #6
 8012f42:	f000 8082 	beq.w	801304a <uxr_serialize_ActivityInfoVariant+0x11e>
 8012f46:	2b0d      	cmp	r3, #13
 8012f48:	d016      	beq.n	8012f78 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012f4a:	2b05      	cmp	r3, #5
 8012f4c:	d002      	beq.n	8012f54 <uxr_serialize_ActivityInfoVariant+0x28>
 8012f4e:	4648      	mov	r0, r9
 8012f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f54:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f58:	4638      	mov	r0, r7
 8012f5a:	f7f7 ff63 	bl	800ae24 <ucdr_serialize_int16_t>
 8012f5e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012f62:	4681      	mov	r9, r0
 8012f64:	4638      	mov	r0, r7
 8012f66:	f7f7 fe8d 	bl	800ac84 <ucdr_serialize_uint64_t>
 8012f6a:	ea09 0000 	and.w	r0, r9, r0
 8012f6e:	fa5f f980 	uxtb.w	r9, r0
 8012f72:	4648      	mov	r0, r9
 8012f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f78:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f7c:	4638      	mov	r0, r7
 8012f7e:	f7f7 ff51 	bl	800ae24 <ucdr_serialize_int16_t>
 8012f82:	68e9      	ldr	r1, [r5, #12]
 8012f84:	4681      	mov	r9, r0
 8012f86:	4638      	mov	r0, r7
 8012f88:	f7f7 fc26 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8012f8c:	68eb      	ldr	r3, [r5, #12]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d0eb      	beq.n	8012f6a <uxr_serialize_ActivityInfoVariant+0x3e>
 8012f92:	b320      	cbz	r0, 8012fde <uxr_serialize_ActivityInfoVariant+0xb2>
 8012f94:	f105 080c 	add.w	r8, r5, #12
 8012f98:	2600      	movs	r6, #0
 8012f9a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012f9e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012fa2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7f7 fa00 	bl	800a3ac <ucdr_serialize_uint8_t>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d053      	beq.n	8013058 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012fb0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012fb4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012fb8:	0074      	lsls	r4, r6, #1
 8012fba:	00c9      	lsls	r1, r1, #3
 8012fbc:	2b03      	cmp	r3, #3
 8012fbe:	d854      	bhi.n	801306a <uxr_serialize_ActivityInfoVariant+0x13e>
 8012fc0:	e8df f003 	tbb	[pc, r3]
 8012fc4:	02102132 	.word	0x02102132
 8012fc8:	4441      	add	r1, r8
 8012fca:	4638      	mov	r0, r7
 8012fcc:	6889      	ldr	r1, [r1, #8]
 8012fce:	f004 fbe9 	bl	80177a4 <ucdr_serialize_string>
 8012fd2:	68ea      	ldr	r2, [r5, #12]
 8012fd4:	3601      	adds	r6, #1
 8012fd6:	4296      	cmp	r6, r2
 8012fd8:	d242      	bcs.n	8013060 <uxr_serialize_ActivityInfoVariant+0x134>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d1dd      	bne.n	8012f9a <uxr_serialize_ActivityInfoVariant+0x6e>
 8012fde:	f04f 0900 	mov.w	r9, #0
 8012fe2:	e7b4      	b.n	8012f4e <uxr_serialize_ActivityInfoVariant+0x22>
 8012fe4:	3108      	adds	r1, #8
 8012fe6:	4441      	add	r1, r8
 8012fe8:	2210      	movs	r2, #16
 8012fea:	4638      	mov	r0, r7
 8012fec:	f004 fa68 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8012ff0:	4434      	add	r4, r6
 8012ff2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012ffa:	4638      	mov	r0, r7
 8012ffc:	f7f7 fbec 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8013000:	4020      	ands	r0, r4
 8013002:	b2c0      	uxtb	r0, r0
 8013004:	e7e5      	b.n	8012fd2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013006:	3108      	adds	r1, #8
 8013008:	4441      	add	r1, r8
 801300a:	2204      	movs	r2, #4
 801300c:	4638      	mov	r0, r7
 801300e:	f004 fa57 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013012:	4434      	add	r4, r6
 8013014:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013018:	4604      	mov	r4, r0
 801301a:	8b19      	ldrh	r1, [r3, #24]
 801301c:	4638      	mov	r0, r7
 801301e:	f7f7 f9f1 	bl	800a404 <ucdr_serialize_uint16_t>
 8013022:	4020      	ands	r0, r4
 8013024:	b2c0      	uxtb	r0, r0
 8013026:	e7d4      	b.n	8012fd2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013028:	3108      	adds	r1, #8
 801302a:	4441      	add	r1, r8
 801302c:	2202      	movs	r2, #2
 801302e:	4638      	mov	r0, r7
 8013030:	f004 fa46 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013034:	4434      	add	r4, r6
 8013036:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801303a:	4604      	mov	r4, r0
 801303c:	7d99      	ldrb	r1, [r3, #22]
 801303e:	4638      	mov	r0, r7
 8013040:	f7f7 f9b4 	bl	800a3ac <ucdr_serialize_uint8_t>
 8013044:	4020      	ands	r0, r4
 8013046:	b2c0      	uxtb	r0, r0
 8013048:	e7c3      	b.n	8012fd2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801304a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801304e:	4638      	mov	r0, r7
 8013050:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013054:	f7f7 bee6 	b.w	800ae24 <ucdr_serialize_int16_t>
 8013058:	68ea      	ldr	r2, [r5, #12]
 801305a:	3601      	adds	r6, #1
 801305c:	42b2      	cmp	r2, r6
 801305e:	d8be      	bhi.n	8012fde <uxr_serialize_ActivityInfoVariant+0xb2>
 8013060:	ea09 0900 	and.w	r9, r9, r0
 8013064:	fa5f f989 	uxtb.w	r9, r9
 8013068:	e771      	b.n	8012f4e <uxr_serialize_ActivityInfoVariant+0x22>
 801306a:	68eb      	ldr	r3, [r5, #12]
 801306c:	3601      	adds	r6, #1
 801306e:	429e      	cmp	r6, r3
 8013070:	f10a 0a18 	add.w	sl, sl, #24
 8013074:	d395      	bcc.n	8012fa2 <uxr_serialize_ActivityInfoVariant+0x76>
 8013076:	e76a      	b.n	8012f4e <uxr_serialize_ActivityInfoVariant+0x22>

08013078 <uxr_deserialize_BaseObjectReply>:
 8013078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801307c:	2202      	movs	r2, #2
 801307e:	4606      	mov	r6, r0
 8013080:	460f      	mov	r7, r1
 8013082:	f004 fa81 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8013086:	2202      	movs	r2, #2
 8013088:	18b9      	adds	r1, r7, r2
 801308a:	4605      	mov	r5, r0
 801308c:	4630      	mov	r0, r6
 801308e:	f004 fa7b 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8013092:	1d39      	adds	r1, r7, #4
 8013094:	4680      	mov	r8, r0
 8013096:	4630      	mov	r0, r6
 8013098:	f7f7 f99e 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 801309c:	1d79      	adds	r1, r7, #5
 801309e:	4604      	mov	r4, r0
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7f7 f999 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80130a6:	ea05 0508 	and.w	r5, r5, r8
 80130aa:	402c      	ands	r4, r5
 80130ac:	4020      	ands	r0, r4
 80130ae:	b2c0      	uxtb	r0, r0
 80130b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130b4 <uxr_serialize_ReadSpecification>:
 80130b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b8:	460e      	mov	r6, r1
 80130ba:	7809      	ldrb	r1, [r1, #0]
 80130bc:	4607      	mov	r7, r0
 80130be:	f7f7 f975 	bl	800a3ac <ucdr_serialize_uint8_t>
 80130c2:	7871      	ldrb	r1, [r6, #1]
 80130c4:	4604      	mov	r4, r0
 80130c6:	4638      	mov	r0, r7
 80130c8:	f7f7 f970 	bl	800a3ac <ucdr_serialize_uint8_t>
 80130cc:	78b1      	ldrb	r1, [r6, #2]
 80130ce:	4004      	ands	r4, r0
 80130d0:	4638      	mov	r0, r7
 80130d2:	f7f7 f93d 	bl	800a350 <ucdr_serialize_bool>
 80130d6:	78b3      	ldrb	r3, [r6, #2]
 80130d8:	b2e4      	uxtb	r4, r4
 80130da:	4004      	ands	r4, r0
 80130dc:	b94b      	cbnz	r3, 80130f2 <uxr_serialize_ReadSpecification+0x3e>
 80130de:	7a31      	ldrb	r1, [r6, #8]
 80130e0:	4638      	mov	r0, r7
 80130e2:	f7f7 f935 	bl	800a350 <ucdr_serialize_bool>
 80130e6:	7a33      	ldrb	r3, [r6, #8]
 80130e8:	4004      	ands	r4, r0
 80130ea:	b943      	cbnz	r3, 80130fe <uxr_serialize_ReadSpecification+0x4a>
 80130ec:	4620      	mov	r0, r4
 80130ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f2:	6871      	ldr	r1, [r6, #4]
 80130f4:	4638      	mov	r0, r7
 80130f6:	f004 fb55 	bl	80177a4 <ucdr_serialize_string>
 80130fa:	4004      	ands	r4, r0
 80130fc:	e7ef      	b.n	80130de <uxr_serialize_ReadSpecification+0x2a>
 80130fe:	8971      	ldrh	r1, [r6, #10]
 8013100:	4638      	mov	r0, r7
 8013102:	f7f7 f97f 	bl	800a404 <ucdr_serialize_uint16_t>
 8013106:	89b1      	ldrh	r1, [r6, #12]
 8013108:	4605      	mov	r5, r0
 801310a:	4638      	mov	r0, r7
 801310c:	f7f7 f97a 	bl	800a404 <ucdr_serialize_uint16_t>
 8013110:	89f1      	ldrh	r1, [r6, #14]
 8013112:	4005      	ands	r5, r0
 8013114:	4638      	mov	r0, r7
 8013116:	f7f7 f975 	bl	800a404 <ucdr_serialize_uint16_t>
 801311a:	8a31      	ldrh	r1, [r6, #16]
 801311c:	4680      	mov	r8, r0
 801311e:	4638      	mov	r0, r7
 8013120:	f7f7 f970 	bl	800a404 <ucdr_serialize_uint16_t>
 8013124:	b2ed      	uxtb	r5, r5
 8013126:	4025      	ands	r5, r4
 8013128:	ea08 0505 	and.w	r5, r8, r5
 801312c:	ea00 0405 	and.w	r4, r0, r5
 8013130:	4620      	mov	r0, r4
 8013132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013136:	bf00      	nop

08013138 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013138:	f7ff ba16 	b.w	8012568 <uxr_serialize_CLIENT_Representation>

0801313c <uxr_serialize_CREATE_Payload>:
 801313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313e:	2202      	movs	r2, #2
 8013140:	4607      	mov	r7, r0
 8013142:	460e      	mov	r6, r1
 8013144:	f004 f9bc 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013148:	2202      	movs	r2, #2
 801314a:	18b1      	adds	r1, r6, r2
 801314c:	4605      	mov	r5, r0
 801314e:	4638      	mov	r0, r7
 8013150:	f004 f9b6 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013154:	7931      	ldrb	r1, [r6, #4]
 8013156:	4604      	mov	r4, r0
 8013158:	4638      	mov	r0, r7
 801315a:	f7f7 f927 	bl	800a3ac <ucdr_serialize_uint8_t>
 801315e:	b170      	cbz	r0, 801317e <uxr_serialize_CREATE_Payload+0x42>
 8013160:	7933      	ldrb	r3, [r6, #4]
 8013162:	402c      	ands	r4, r5
 8013164:	3b01      	subs	r3, #1
 8013166:	b2e4      	uxtb	r4, r4
 8013168:	2b0d      	cmp	r3, #13
 801316a:	d809      	bhi.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 801316c:	e8df f003 	tbb	[pc, r3]
 8013170:	23230a4c 	.word	0x23230a4c
 8013174:	0a0a0a0a 	.word	0x0a0a0a0a
 8013178:	12121208 	.word	0x12121208
 801317c:	3e45      	.short	0x3e45
 801317e:	2400      	movs	r4, #0
 8013180:	4620      	mov	r0, r4
 8013182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013184:	f106 0108 	add.w	r1, r6, #8
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff faf3 	bl	8012774 <uxr_serialize_DATAWRITER_Representation>
 801318e:	4004      	ands	r4, r0
 8013190:	4620      	mov	r0, r4
 8013192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013194:	7a31      	ldrb	r1, [r6, #8]
 8013196:	4638      	mov	r0, r7
 8013198:	f7f7 f908 	bl	800a3ac <ucdr_serialize_uint8_t>
 801319c:	2800      	cmp	r0, #0
 801319e:	d0ee      	beq.n	801317e <uxr_serialize_CREATE_Payload+0x42>
 80131a0:	7a33      	ldrb	r3, [r6, #8]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d001      	beq.n	80131aa <uxr_serialize_CREATE_Payload+0x6e>
 80131a6:	2b02      	cmp	r3, #2
 80131a8:	d1ea      	bne.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 80131aa:	68f1      	ldr	r1, [r6, #12]
 80131ac:	4638      	mov	r0, r7
 80131ae:	f004 faf9 	bl	80177a4 <ucdr_serialize_string>
 80131b2:	4004      	ands	r4, r0
 80131b4:	e7e4      	b.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 80131b6:	7a31      	ldrb	r1, [r6, #8]
 80131b8:	4638      	mov	r0, r7
 80131ba:	f7f7 f8f7 	bl	800a3ac <ucdr_serialize_uint8_t>
 80131be:	4605      	mov	r5, r0
 80131c0:	b158      	cbz	r0, 80131da <uxr_serialize_CREATE_Payload+0x9e>
 80131c2:	7a33      	ldrb	r3, [r6, #8]
 80131c4:	2b02      	cmp	r3, #2
 80131c6:	d034      	beq.n	8013232 <uxr_serialize_CREATE_Payload+0xf6>
 80131c8:	2b03      	cmp	r3, #3
 80131ca:	d106      	bne.n	80131da <uxr_serialize_CREATE_Payload+0x9e>
 80131cc:	68f2      	ldr	r2, [r6, #12]
 80131ce:	f106 0110 	add.w	r1, r6, #16
 80131d2:	4638      	mov	r0, r7
 80131d4:	f7fc fb60 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 80131d8:	4605      	mov	r5, r0
 80131da:	2202      	movs	r2, #2
 80131dc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80131e0:	4638      	mov	r0, r7
 80131e2:	f004 f96d 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 80131e6:	4028      	ands	r0, r5
 80131e8:	4004      	ands	r4, r0
 80131ea:	e7c9      	b.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 80131ec:	f106 0108 	add.w	r1, r6, #8
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7ff f9b9 	bl	8012568 <uxr_serialize_CLIENT_Representation>
 80131f6:	4004      	ands	r4, r0
 80131f8:	e7c2      	b.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 80131fa:	f106 0108 	add.w	r1, r6, #8
 80131fe:	4638      	mov	r0, r7
 8013200:	f7ff fa6e 	bl	80126e0 <uxr_serialize_AGENT_Representation>
 8013204:	4004      	ands	r4, r0
 8013206:	e7bb      	b.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 8013208:	7a31      	ldrb	r1, [r6, #8]
 801320a:	4638      	mov	r0, r7
 801320c:	f7f7 f8ce 	bl	800a3ac <ucdr_serialize_uint8_t>
 8013210:	4605      	mov	r5, r0
 8013212:	b130      	cbz	r0, 8013222 <uxr_serialize_CREATE_Payload+0xe6>
 8013214:	7a33      	ldrb	r3, [r6, #8]
 8013216:	2b02      	cmp	r3, #2
 8013218:	d011      	beq.n	801323e <uxr_serialize_CREATE_Payload+0x102>
 801321a:	2b03      	cmp	r3, #3
 801321c:	d015      	beq.n	801324a <uxr_serialize_CREATE_Payload+0x10e>
 801321e:	2b01      	cmp	r3, #1
 8013220:	d00d      	beq.n	801323e <uxr_serialize_CREATE_Payload+0x102>
 8013222:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013226:	4638      	mov	r0, r7
 8013228:	f7f7 fdfc 	bl	800ae24 <ucdr_serialize_int16_t>
 801322c:	4028      	ands	r0, r5
 801322e:	4004      	ands	r4, r0
 8013230:	e7a6      	b.n	8013180 <uxr_serialize_CREATE_Payload+0x44>
 8013232:	68f1      	ldr	r1, [r6, #12]
 8013234:	4638      	mov	r0, r7
 8013236:	f004 fab5 	bl	80177a4 <ucdr_serialize_string>
 801323a:	4605      	mov	r5, r0
 801323c:	e7cd      	b.n	80131da <uxr_serialize_CREATE_Payload+0x9e>
 801323e:	68f1      	ldr	r1, [r6, #12]
 8013240:	4638      	mov	r0, r7
 8013242:	f004 faaf 	bl	80177a4 <ucdr_serialize_string>
 8013246:	4605      	mov	r5, r0
 8013248:	e7eb      	b.n	8013222 <uxr_serialize_CREATE_Payload+0xe6>
 801324a:	68f2      	ldr	r2, [r6, #12]
 801324c:	f106 0110 	add.w	r1, r6, #16
 8013250:	4638      	mov	r0, r7
 8013252:	f7fc fb21 	bl	800f898 <ucdr_serialize_sequence_uint8_t>
 8013256:	4605      	mov	r5, r0
 8013258:	e7e3      	b.n	8013222 <uxr_serialize_CREATE_Payload+0xe6>
 801325a:	bf00      	nop

0801325c <uxr_serialize_GET_INFO_Payload>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	2202      	movs	r2, #2
 8013260:	4605      	mov	r5, r0
 8013262:	460e      	mov	r6, r1
 8013264:	f004 f92c 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013268:	2202      	movs	r2, #2
 801326a:	18b1      	adds	r1, r6, r2
 801326c:	4604      	mov	r4, r0
 801326e:	4628      	mov	r0, r5
 8013270:	f004 f926 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013274:	6871      	ldr	r1, [r6, #4]
 8013276:	4004      	ands	r4, r0
 8013278:	4628      	mov	r0, r5
 801327a:	f7f7 faad 	bl	800a7d8 <ucdr_serialize_uint32_t>
 801327e:	b2e4      	uxtb	r4, r4
 8013280:	4020      	ands	r0, r4
 8013282:	bd70      	pop	{r4, r5, r6, pc}

08013284 <uxr_deserialize_GET_INFO_Payload>:
 8013284:	b570      	push	{r4, r5, r6, lr}
 8013286:	2202      	movs	r2, #2
 8013288:	4605      	mov	r5, r0
 801328a:	460e      	mov	r6, r1
 801328c:	f004 f97c 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8013290:	2202      	movs	r2, #2
 8013292:	18b1      	adds	r1, r6, r2
 8013294:	4604      	mov	r4, r0
 8013296:	4628      	mov	r0, r5
 8013298:	f004 f976 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801329c:	1d31      	adds	r1, r6, #4
 801329e:	4004      	ands	r4, r0
 80132a0:	4628      	mov	r0, r5
 80132a2:	f7f7 fbc9 	bl	800aa38 <ucdr_deserialize_uint32_t>
 80132a6:	b2e4      	uxtb	r4, r4
 80132a8:	4020      	ands	r0, r4
 80132aa:	bd70      	pop	{r4, r5, r6, pc}

080132ac <uxr_serialize_DELETE_Payload>:
 80132ac:	b570      	push	{r4, r5, r6, lr}
 80132ae:	2202      	movs	r2, #2
 80132b0:	4605      	mov	r5, r0
 80132b2:	460e      	mov	r6, r1
 80132b4:	f004 f904 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 80132b8:	2202      	movs	r2, #2
 80132ba:	4604      	mov	r4, r0
 80132bc:	18b1      	adds	r1, r6, r2
 80132be:	4628      	mov	r0, r5
 80132c0:	f004 f8fe 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 80132c4:	4020      	ands	r0, r4
 80132c6:	b2c0      	uxtb	r0, r0
 80132c8:	bd70      	pop	{r4, r5, r6, pc}
 80132ca:	bf00      	nop

080132cc <uxr_deserialize_STATUS_AGENT_Payload>:
 80132cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d0:	4605      	mov	r5, r0
 80132d2:	460e      	mov	r6, r1
 80132d4:	f7f7 f880 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80132d8:	1c71      	adds	r1, r6, #1
 80132da:	4604      	mov	r4, r0
 80132dc:	4628      	mov	r0, r5
 80132de:	f7f7 f87b 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80132e2:	2204      	movs	r2, #4
 80132e4:	18b1      	adds	r1, r6, r2
 80132e6:	4680      	mov	r8, r0
 80132e8:	4628      	mov	r0, r5
 80132ea:	f004 f94d 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 80132ee:	f106 0108 	add.w	r1, r6, #8
 80132f2:	4607      	mov	r7, r0
 80132f4:	2202      	movs	r2, #2
 80132f6:	4628      	mov	r0, r5
 80132f8:	f004 f946 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 80132fc:	ea04 0308 	and.w	r3, r4, r8
 8013300:	b2db      	uxtb	r3, r3
 8013302:	ea03 0407 	and.w	r4, r3, r7
 8013306:	2202      	movs	r2, #2
 8013308:	4607      	mov	r7, r0
 801330a:	f106 010a 	add.w	r1, r6, #10
 801330e:	4628      	mov	r0, r5
 8013310:	f004 f93a 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8013314:	f106 010c 	add.w	r1, r6, #12
 8013318:	4603      	mov	r3, r0
 801331a:	4628      	mov	r0, r5
 801331c:	461d      	mov	r5, r3
 801331e:	f7f7 f82d 	bl	800a37c <ucdr_deserialize_bool>
 8013322:	403c      	ands	r4, r7
 8013324:	4025      	ands	r5, r4
 8013326:	4028      	ands	r0, r5
 8013328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801332c <uxr_deserialize_STATUS_Payload>:
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	2202      	movs	r2, #2
 8013332:	4606      	mov	r6, r0
 8013334:	460f      	mov	r7, r1
 8013336:	f004 f927 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801333a:	2202      	movs	r2, #2
 801333c:	18b9      	adds	r1, r7, r2
 801333e:	4605      	mov	r5, r0
 8013340:	4630      	mov	r0, r6
 8013342:	f004 f921 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8013346:	1d39      	adds	r1, r7, #4
 8013348:	4680      	mov	r8, r0
 801334a:	4630      	mov	r0, r6
 801334c:	f7f7 f844 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8013350:	1d79      	adds	r1, r7, #5
 8013352:	4604      	mov	r4, r0
 8013354:	4630      	mov	r0, r6
 8013356:	f7f7 f83f 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 801335a:	ea05 0508 	and.w	r5, r5, r8
 801335e:	402c      	ands	r4, r5
 8013360:	4020      	ands	r0, r4
 8013362:	b2c0      	uxtb	r0, r0
 8013364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013368 <uxr_serialize_INFO_Payload>:
 8013368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801336c:	2202      	movs	r2, #2
 801336e:	460c      	mov	r4, r1
 8013370:	4605      	mov	r5, r0
 8013372:	f004 f8a5 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013376:	2202      	movs	r2, #2
 8013378:	18a1      	adds	r1, r4, r2
 801337a:	4680      	mov	r8, r0
 801337c:	4628      	mov	r0, r5
 801337e:	f004 f89f 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013382:	7921      	ldrb	r1, [r4, #4]
 8013384:	4607      	mov	r7, r0
 8013386:	4628      	mov	r0, r5
 8013388:	f7f7 f810 	bl	800a3ac <ucdr_serialize_uint8_t>
 801338c:	7961      	ldrb	r1, [r4, #5]
 801338e:	4606      	mov	r6, r0
 8013390:	4628      	mov	r0, r5
 8013392:	f7f7 f80b 	bl	800a3ac <ucdr_serialize_uint8_t>
 8013396:	ea08 0807 	and.w	r8, r8, r7
 801339a:	ea06 0608 	and.w	r6, r6, r8
 801339e:	4006      	ands	r6, r0
 80133a0:	7a21      	ldrb	r1, [r4, #8]
 80133a2:	4628      	mov	r0, r5
 80133a4:	f7f6 ffd4 	bl	800a350 <ucdr_serialize_bool>
 80133a8:	7a23      	ldrb	r3, [r4, #8]
 80133aa:	b2f7      	uxtb	r7, r6
 80133ac:	4606      	mov	r6, r0
 80133ae:	b96b      	cbnz	r3, 80133cc <uxr_serialize_INFO_Payload+0x64>
 80133b0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80133b4:	4628      	mov	r0, r5
 80133b6:	f7f6 ffcb 	bl	800a350 <ucdr_serialize_bool>
 80133ba:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80133be:	4030      	ands	r0, r6
 80133c0:	b2c6      	uxtb	r6, r0
 80133c2:	b983      	cbnz	r3, 80133e6 <uxr_serialize_INFO_Payload+0x7e>
 80133c4:	ea06 0007 	and.w	r0, r6, r7
 80133c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133cc:	7b21      	ldrb	r1, [r4, #12]
 80133ce:	4628      	mov	r0, r5
 80133d0:	f7f6 ffec 	bl	800a3ac <ucdr_serialize_uint8_t>
 80133d4:	b188      	cbz	r0, 80133fa <uxr_serialize_INFO_Payload+0x92>
 80133d6:	f104 010c 	add.w	r1, r4, #12
 80133da:	4628      	mov	r0, r5
 80133dc:	f7ff f9f2 	bl	80127c4 <uxr_serialize_ObjectVariant.part.0>
 80133e0:	4030      	ands	r0, r6
 80133e2:	b2c6      	uxtb	r6, r0
 80133e4:	e7e4      	b.n	80133b0 <uxr_serialize_INFO_Payload+0x48>
 80133e6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80133ea:	4628      	mov	r0, r5
 80133ec:	f7ff fd9e 	bl	8012f2c <uxr_serialize_ActivityInfoVariant>
 80133f0:	4006      	ands	r6, r0
 80133f2:	ea06 0007 	and.w	r0, r6, r7
 80133f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fa:	4606      	mov	r6, r0
 80133fc:	e7d8      	b.n	80133b0 <uxr_serialize_INFO_Payload+0x48>
 80133fe:	bf00      	nop

08013400 <uxr_serialize_READ_DATA_Payload>:
 8013400:	b570      	push	{r4, r5, r6, lr}
 8013402:	2202      	movs	r2, #2
 8013404:	4605      	mov	r5, r0
 8013406:	460e      	mov	r6, r1
 8013408:	f004 f85a 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801340c:	2202      	movs	r2, #2
 801340e:	18b1      	adds	r1, r6, r2
 8013410:	4604      	mov	r4, r0
 8013412:	4628      	mov	r0, r5
 8013414:	f004 f854 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013418:	1d31      	adds	r1, r6, #4
 801341a:	4004      	ands	r4, r0
 801341c:	4628      	mov	r0, r5
 801341e:	f7ff fe49 	bl	80130b4 <uxr_serialize_ReadSpecification>
 8013422:	b2e4      	uxtb	r4, r4
 8013424:	4020      	ands	r0, r4
 8013426:	bd70      	pop	{r4, r5, r6, pc}

08013428 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013428:	b570      	push	{r4, r5, r6, lr}
 801342a:	2202      	movs	r2, #2
 801342c:	4605      	mov	r5, r0
 801342e:	460e      	mov	r6, r1
 8013430:	f004 f846 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013434:	2202      	movs	r2, #2
 8013436:	4604      	mov	r4, r0
 8013438:	18b1      	adds	r1, r6, r2
 801343a:	4628      	mov	r0, r5
 801343c:	f004 f840 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013440:	4020      	ands	r0, r4
 8013442:	b2c0      	uxtb	r0, r0
 8013444:	bd70      	pop	{r4, r5, r6, pc}
 8013446:	bf00      	nop

08013448 <uxr_serialize_ACKNACK_Payload>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	460c      	mov	r4, r1
 801344c:	460e      	mov	r6, r1
 801344e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013452:	4605      	mov	r5, r0
 8013454:	f7f6 ffd6 	bl	800a404 <ucdr_serialize_uint16_t>
 8013458:	2202      	movs	r2, #2
 801345a:	4621      	mov	r1, r4
 801345c:	4604      	mov	r4, r0
 801345e:	4628      	mov	r0, r5
 8013460:	f004 f82e 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 8013464:	7931      	ldrb	r1, [r6, #4]
 8013466:	4004      	ands	r4, r0
 8013468:	4628      	mov	r0, r5
 801346a:	f7f6 ff9f 	bl	800a3ac <ucdr_serialize_uint8_t>
 801346e:	b2e4      	uxtb	r4, r4
 8013470:	4020      	ands	r0, r4
 8013472:	bd70      	pop	{r4, r5, r6, pc}

08013474 <uxr_deserialize_ACKNACK_Payload>:
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	4605      	mov	r5, r0
 8013478:	460e      	mov	r6, r1
 801347a:	f7f7 f8c3 	bl	800a604 <ucdr_deserialize_uint16_t>
 801347e:	2202      	movs	r2, #2
 8013480:	18b1      	adds	r1, r6, r2
 8013482:	4604      	mov	r4, r0
 8013484:	4628      	mov	r0, r5
 8013486:	f004 f87f 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801348a:	1d31      	adds	r1, r6, #4
 801348c:	4004      	ands	r4, r0
 801348e:	4628      	mov	r0, r5
 8013490:	f7f6 ffa2 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 8013494:	b2e4      	uxtb	r4, r4
 8013496:	4020      	ands	r0, r4
 8013498:	bd70      	pop	{r4, r5, r6, pc}
 801349a:	bf00      	nop

0801349c <uxr_serialize_HEARTBEAT_Payload>:
 801349c:	b570      	push	{r4, r5, r6, lr}
 801349e:	460d      	mov	r5, r1
 80134a0:	8809      	ldrh	r1, [r1, #0]
 80134a2:	4606      	mov	r6, r0
 80134a4:	f7f6 ffae 	bl	800a404 <ucdr_serialize_uint16_t>
 80134a8:	8869      	ldrh	r1, [r5, #2]
 80134aa:	4604      	mov	r4, r0
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7f6 ffa9 	bl	800a404 <ucdr_serialize_uint16_t>
 80134b2:	7929      	ldrb	r1, [r5, #4]
 80134b4:	4004      	ands	r4, r0
 80134b6:	4630      	mov	r0, r6
 80134b8:	f7f6 ff78 	bl	800a3ac <ucdr_serialize_uint8_t>
 80134bc:	b2e4      	uxtb	r4, r4
 80134be:	4020      	ands	r0, r4
 80134c0:	bd70      	pop	{r4, r5, r6, pc}
 80134c2:	bf00      	nop

080134c4 <uxr_deserialize_HEARTBEAT_Payload>:
 80134c4:	b570      	push	{r4, r5, r6, lr}
 80134c6:	4605      	mov	r5, r0
 80134c8:	460e      	mov	r6, r1
 80134ca:	f7f7 f89b 	bl	800a604 <ucdr_deserialize_uint16_t>
 80134ce:	1cb1      	adds	r1, r6, #2
 80134d0:	4604      	mov	r4, r0
 80134d2:	4628      	mov	r0, r5
 80134d4:	f7f7 f896 	bl	800a604 <ucdr_deserialize_uint16_t>
 80134d8:	1d31      	adds	r1, r6, #4
 80134da:	4004      	ands	r4, r0
 80134dc:	4628      	mov	r0, r5
 80134de:	f7f6 ff7b 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80134e2:	b2e4      	uxtb	r4, r4
 80134e4:	4020      	ands	r0, r4
 80134e6:	bd70      	pop	{r4, r5, r6, pc}

080134e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80134e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ec:	4605      	mov	r5, r0
 80134ee:	460e      	mov	r6, r1
 80134f0:	f7f7 fe24 	bl	800b13c <ucdr_deserialize_int32_t>
 80134f4:	1d31      	adds	r1, r6, #4
 80134f6:	4607      	mov	r7, r0
 80134f8:	4628      	mov	r0, r5
 80134fa:	f7f7 fa9d 	bl	800aa38 <ucdr_deserialize_uint32_t>
 80134fe:	f106 0108 	add.w	r1, r6, #8
 8013502:	4680      	mov	r8, r0
 8013504:	4628      	mov	r0, r5
 8013506:	f7f7 fe19 	bl	800b13c <ucdr_deserialize_int32_t>
 801350a:	f106 010c 	add.w	r1, r6, #12
 801350e:	4604      	mov	r4, r0
 8013510:	4628      	mov	r0, r5
 8013512:	f7f7 fa91 	bl	800aa38 <ucdr_deserialize_uint32_t>
 8013516:	ea07 0708 	and.w	r7, r7, r8
 801351a:	403c      	ands	r4, r7
 801351c:	f106 0110 	add.w	r1, r6, #16
 8013520:	4004      	ands	r4, r0
 8013522:	4628      	mov	r0, r5
 8013524:	f7f7 fe0a 	bl	800b13c <ucdr_deserialize_int32_t>
 8013528:	f106 0114 	add.w	r1, r6, #20
 801352c:	4607      	mov	r7, r0
 801352e:	4628      	mov	r0, r5
 8013530:	f7f7 fa82 	bl	800aa38 <ucdr_deserialize_uint32_t>
 8013534:	b2e4      	uxtb	r4, r4
 8013536:	403c      	ands	r4, r7
 8013538:	4020      	ands	r0, r4
 801353a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801353e:	bf00      	nop

08013540 <uxr_serialize_SampleIdentity>:
 8013540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013544:	220c      	movs	r2, #12
 8013546:	4604      	mov	r4, r0
 8013548:	460d      	mov	r5, r1
 801354a:	f003 ffb9 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801354e:	2203      	movs	r2, #3
 8013550:	f105 010c 	add.w	r1, r5, #12
 8013554:	4607      	mov	r7, r0
 8013556:	4620      	mov	r0, r4
 8013558:	f003 ffb2 	bl	80174c0 <ucdr_serialize_array_uint8_t>
 801355c:	7be9      	ldrb	r1, [r5, #15]
 801355e:	4680      	mov	r8, r0
 8013560:	4620      	mov	r0, r4
 8013562:	f7f6 ff23 	bl	800a3ac <ucdr_serialize_uint8_t>
 8013566:	6929      	ldr	r1, [r5, #16]
 8013568:	4606      	mov	r6, r0
 801356a:	4620      	mov	r0, r4
 801356c:	f7f7 fd4e 	bl	800b00c <ucdr_serialize_int32_t>
 8013570:	6969      	ldr	r1, [r5, #20]
 8013572:	4603      	mov	r3, r0
 8013574:	4620      	mov	r0, r4
 8013576:	ea07 0708 	and.w	r7, r7, r8
 801357a:	461c      	mov	r4, r3
 801357c:	f7f7 f92c 	bl	800a7d8 <ucdr_serialize_uint32_t>
 8013580:	403e      	ands	r6, r7
 8013582:	4034      	ands	r4, r6
 8013584:	4020      	ands	r0, r4
 8013586:	b2c0      	uxtb	r0, r0
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801358c <uxr_deserialize_SampleIdentity>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	220c      	movs	r2, #12
 8013592:	4604      	mov	r4, r0
 8013594:	460d      	mov	r5, r1
 8013596:	f003 fff7 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801359a:	2203      	movs	r2, #3
 801359c:	f105 010c 	add.w	r1, r5, #12
 80135a0:	4607      	mov	r7, r0
 80135a2:	4620      	mov	r0, r4
 80135a4:	f003 fff0 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 80135a8:	f105 010f 	add.w	r1, r5, #15
 80135ac:	4680      	mov	r8, r0
 80135ae:	4620      	mov	r0, r4
 80135b0:	f7f6 ff12 	bl	800a3d8 <ucdr_deserialize_uint8_t>
 80135b4:	f105 0110 	add.w	r1, r5, #16
 80135b8:	4606      	mov	r6, r0
 80135ba:	4620      	mov	r0, r4
 80135bc:	f7f7 fdbe 	bl	800b13c <ucdr_deserialize_int32_t>
 80135c0:	f105 0114 	add.w	r1, r5, #20
 80135c4:	4603      	mov	r3, r0
 80135c6:	4620      	mov	r0, r4
 80135c8:	ea07 0708 	and.w	r7, r7, r8
 80135cc:	461c      	mov	r4, r3
 80135ce:	f7f7 fa33 	bl	800aa38 <ucdr_deserialize_uint32_t>
 80135d2:	403e      	ands	r6, r7
 80135d4:	4034      	ands	r4, r6
 80135d6:	4020      	ands	r0, r4
 80135d8:	b2c0      	uxtb	r0, r0
 80135da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135de:	bf00      	nop

080135e0 <rcl_client_get_rmw_handle>:
 80135e0:	b118      	cbz	r0, 80135ea <rcl_client_get_rmw_handle+0xa>
 80135e2:	6800      	ldr	r0, [r0, #0]
 80135e4:	b108      	cbz	r0, 80135ea <rcl_client_get_rmw_handle+0xa>
 80135e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80135ea:	4770      	bx	lr

080135ec <rcl_send_request>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	b1e8      	cbz	r0, 801362e <rcl_send_request+0x42>
 80135f2:	4604      	mov	r4, r0
 80135f4:	6800      	ldr	r0, [r0, #0]
 80135f6:	b1d0      	cbz	r0, 801362e <rcl_send_request+0x42>
 80135f8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80135fc:	b1bb      	cbz	r3, 801362e <rcl_send_request+0x42>
 80135fe:	460e      	mov	r6, r1
 8013600:	b1d1      	cbz	r1, 8013638 <rcl_send_request+0x4c>
 8013602:	4615      	mov	r5, r2
 8013604:	b1c2      	cbz	r2, 8013638 <rcl_send_request+0x4c>
 8013606:	2105      	movs	r1, #5
 8013608:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801360c:	f7fa f91c 	bl	800d848 <__atomic_load_8>
 8013610:	6823      	ldr	r3, [r4, #0]
 8013612:	e9c5 0100 	strd	r0, r1, [r5]
 8013616:	462a      	mov	r2, r5
 8013618:	4631      	mov	r1, r6
 801361a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801361e:	f003 f9f9 	bl	8016a14 <rmw_send_request>
 8013622:	4606      	mov	r6, r0
 8013624:	b160      	cbz	r0, 8013640 <rcl_send_request+0x54>
 8013626:	2601      	movs	r6, #1
 8013628:	4630      	mov	r0, r6
 801362a:	b002      	add	sp, #8
 801362c:	bd70      	pop	{r4, r5, r6, pc}
 801362e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013632:	4630      	mov	r0, r6
 8013634:	b002      	add	sp, #8
 8013636:	bd70      	pop	{r4, r5, r6, pc}
 8013638:	260b      	movs	r6, #11
 801363a:	4630      	mov	r0, r6
 801363c:	b002      	add	sp, #8
 801363e:	bd70      	pop	{r4, r5, r6, pc}
 8013640:	6820      	ldr	r0, [r4, #0]
 8013642:	2105      	movs	r1, #5
 8013644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013648:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801364c:	9100      	str	r1, [sp, #0]
 801364e:	f7fa f967 	bl	800d920 <__atomic_exchange_8>
 8013652:	4630      	mov	r0, r6
 8013654:	b002      	add	sp, #8
 8013656:	bd70      	pop	{r4, r5, r6, pc}

08013658 <rcl_take_response>:
 8013658:	b570      	push	{r4, r5, r6, lr}
 801365a:	468e      	mov	lr, r1
 801365c:	460c      	mov	r4, r1
 801365e:	4616      	mov	r6, r2
 8013660:	4605      	mov	r5, r0
 8013662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013666:	b08c      	sub	sp, #48	@ 0x30
 8013668:	f10d 0c18 	add.w	ip, sp, #24
 801366c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013670:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013674:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013678:	b35d      	cbz	r5, 80136d2 <rcl_take_response+0x7a>
 801367a:	682b      	ldr	r3, [r5, #0]
 801367c:	b34b      	cbz	r3, 80136d2 <rcl_take_response+0x7a>
 801367e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013682:	b330      	cbz	r0, 80136d2 <rcl_take_response+0x7a>
 8013684:	b346      	cbz	r6, 80136d8 <rcl_take_response+0x80>
 8013686:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80136e0 <rcl_take_response+0x88>
 801368a:	2300      	movs	r3, #0
 801368c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013690:	4632      	mov	r2, r6
 8013692:	f10d 0307 	add.w	r3, sp, #7
 8013696:	a902      	add	r1, sp, #8
 8013698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801369c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80136a0:	f003 fac0 	bl	8016c24 <rmw_take_response>
 80136a4:	4605      	mov	r5, r0
 80136a6:	b9c8      	cbnz	r0, 80136dc <rcl_take_response+0x84>
 80136a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80136ac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80136b0:	2a00      	cmp	r2, #0
 80136b2:	bf08      	it	eq
 80136b4:	461d      	moveq	r5, r3
 80136b6:	f10d 0e18 	add.w	lr, sp, #24
 80136ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136be:	46a4      	mov	ip, r4
 80136c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80136c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80136cc:	4628      	mov	r0, r5
 80136ce:	b00c      	add	sp, #48	@ 0x30
 80136d0:	bd70      	pop	{r4, r5, r6, pc}
 80136d2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80136d6:	e7ee      	b.n	80136b6 <rcl_take_response+0x5e>
 80136d8:	250b      	movs	r5, #11
 80136da:	e7ec      	b.n	80136b6 <rcl_take_response+0x5e>
 80136dc:	2501      	movs	r5, #1
 80136de:	e7ea      	b.n	80136b6 <rcl_take_response+0x5e>
	...

080136e8 <rcl_client_is_valid>:
 80136e8:	b130      	cbz	r0, 80136f8 <rcl_client_is_valid+0x10>
 80136ea:	6800      	ldr	r0, [r0, #0]
 80136ec:	b120      	cbz	r0, 80136f8 <rcl_client_is_valid+0x10>
 80136ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80136f2:	3800      	subs	r0, #0
 80136f4:	bf18      	it	ne
 80136f6:	2001      	movne	r0, #1
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop

080136fc <rcl_convert_rmw_ret_to_rcl_ret>:
 80136fc:	280b      	cmp	r0, #11
 80136fe:	dc0d      	bgt.n	801371c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013700:	2800      	cmp	r0, #0
 8013702:	db09      	blt.n	8013718 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013704:	280b      	cmp	r0, #11
 8013706:	d807      	bhi.n	8013718 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013708:	e8df f000 	tbb	[pc, r0]
 801370c:	07060607 	.word	0x07060607
 8013710:	06060606 	.word	0x06060606
 8013714:	07070606 	.word	0x07070606
 8013718:	2001      	movs	r0, #1
 801371a:	4770      	bx	lr
 801371c:	28cb      	cmp	r0, #203	@ 0xcb
 801371e:	bf18      	it	ne
 8013720:	2001      	movne	r0, #1
 8013722:	4770      	bx	lr

08013724 <rcl_get_zero_initialized_context>:
 8013724:	4a03      	ldr	r2, [pc, #12]	@ (8013734 <rcl_get_zero_initialized_context+0x10>)
 8013726:	4603      	mov	r3, r0
 8013728:	e892 0003 	ldmia.w	r2, {r0, r1}
 801372c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013730:	4618      	mov	r0, r3
 8013732:	4770      	bx	lr
 8013734:	0801afe0 	.word	0x0801afe0

08013738 <rcl_context_is_valid>:
 8013738:	b118      	cbz	r0, 8013742 <rcl_context_is_valid+0xa>
 801373a:	6840      	ldr	r0, [r0, #4]
 801373c:	3800      	subs	r0, #0
 801373e:	bf18      	it	ne
 8013740:	2001      	movne	r0, #1
 8013742:	4770      	bx	lr

08013744 <__cleanup_context>:
 8013744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013748:	4606      	mov	r6, r0
 801374a:	6800      	ldr	r0, [r0, #0]
 801374c:	2300      	movs	r3, #0
 801374e:	6073      	str	r3, [r6, #4]
 8013750:	2800      	cmp	r0, #0
 8013752:	d049      	beq.n	80137e8 <__cleanup_context+0xa4>
 8013754:	6947      	ldr	r7, [r0, #20]
 8013756:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801375a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801375e:	b137      	cbz	r7, 801376e <__cleanup_context+0x2a>
 8013760:	3014      	adds	r0, #20
 8013762:	f000 fafb 	bl	8013d5c <rcl_init_options_fini>
 8013766:	4607      	mov	r7, r0
 8013768:	2800      	cmp	r0, #0
 801376a:	d144      	bne.n	80137f6 <__cleanup_context+0xb2>
 801376c:	6830      	ldr	r0, [r6, #0]
 801376e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013770:	b143      	cbz	r3, 8013784 <__cleanup_context+0x40>
 8013772:	3028      	adds	r0, #40	@ 0x28
 8013774:	f003 f8aa 	bl	80168cc <rmw_context_fini>
 8013778:	b118      	cbz	r0, 8013782 <__cleanup_context+0x3e>
 801377a:	2f00      	cmp	r7, #0
 801377c:	d03e      	beq.n	80137fc <__cleanup_context+0xb8>
 801377e:	f7fa f937 	bl	800d9f0 <rcutils_reset_error>
 8013782:	6830      	ldr	r0, [r6, #0]
 8013784:	6a03      	ldr	r3, [r0, #32]
 8013786:	b1db      	cbz	r3, 80137c0 <__cleanup_context+0x7c>
 8013788:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801378c:	2a01      	cmp	r2, #1
 801378e:	f17c 0100 	sbcs.w	r1, ip, #0
 8013792:	db11      	blt.n	80137b8 <__cleanup_context+0x74>
 8013794:	2400      	movs	r4, #0
 8013796:	4625      	mov	r5, r4
 8013798:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801379c:	4649      	mov	r1, r9
 801379e:	b1b8      	cbz	r0, 80137d0 <__cleanup_context+0x8c>
 80137a0:	47c0      	blx	r8
 80137a2:	6833      	ldr	r3, [r6, #0]
 80137a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80137a8:	3401      	adds	r4, #1
 80137aa:	f145 0500 	adc.w	r5, r5, #0
 80137ae:	4294      	cmp	r4, r2
 80137b0:	eb75 010c 	sbcs.w	r1, r5, ip
 80137b4:	6a1b      	ldr	r3, [r3, #32]
 80137b6:	dbef      	blt.n	8013798 <__cleanup_context+0x54>
 80137b8:	4618      	mov	r0, r3
 80137ba:	4649      	mov	r1, r9
 80137bc:	47c0      	blx	r8
 80137be:	6830      	ldr	r0, [r6, #0]
 80137c0:	4649      	mov	r1, r9
 80137c2:	47c0      	blx	r8
 80137c4:	2300      	movs	r3, #0
 80137c6:	e9c6 3300 	strd	r3, r3, [r6]
 80137ca:	4638      	mov	r0, r7
 80137cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d0:	3401      	adds	r4, #1
 80137d2:	f145 0500 	adc.w	r5, r5, #0
 80137d6:	4294      	cmp	r4, r2
 80137d8:	eb75 010c 	sbcs.w	r1, r5, ip
 80137dc:	dbdc      	blt.n	8013798 <__cleanup_context+0x54>
 80137de:	4618      	mov	r0, r3
 80137e0:	4649      	mov	r1, r9
 80137e2:	47c0      	blx	r8
 80137e4:	6830      	ldr	r0, [r6, #0]
 80137e6:	e7eb      	b.n	80137c0 <__cleanup_context+0x7c>
 80137e8:	4607      	mov	r7, r0
 80137ea:	2300      	movs	r3, #0
 80137ec:	e9c6 3300 	strd	r3, r3, [r6]
 80137f0:	4638      	mov	r0, r7
 80137f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137f6:	f7fa f8fb 	bl	800d9f0 <rcutils_reset_error>
 80137fa:	e7b7      	b.n	801376c <__cleanup_context+0x28>
 80137fc:	f7ff ff7e 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8013800:	4607      	mov	r7, r0
 8013802:	e7bc      	b.n	801377e <__cleanup_context+0x3a>

08013804 <rcl_context_fini>:
 8013804:	b178      	cbz	r0, 8013826 <rcl_context_fini+0x22>
 8013806:	b510      	push	{r4, lr}
 8013808:	4604      	mov	r4, r0
 801380a:	6800      	ldr	r0, [r0, #0]
 801380c:	b150      	cbz	r0, 8013824 <rcl_context_fini+0x20>
 801380e:	6863      	ldr	r3, [r4, #4]
 8013810:	b93b      	cbnz	r3, 8013822 <rcl_context_fini+0x1e>
 8013812:	f7fa f80b 	bl	800d82c <rcutils_allocator_is_valid>
 8013816:	b120      	cbz	r0, 8013822 <rcl_context_fini+0x1e>
 8013818:	4620      	mov	r0, r4
 801381a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801381e:	f7ff bf91 	b.w	8013744 <__cleanup_context>
 8013822:	200b      	movs	r0, #11
 8013824:	bd10      	pop	{r4, pc}
 8013826:	200b      	movs	r0, #11
 8013828:	4770      	bx	lr
 801382a:	bf00      	nop

0801382c <rcl_get_zero_initialized_guard_condition>:
 801382c:	4a03      	ldr	r2, [pc, #12]	@ (801383c <rcl_get_zero_initialized_guard_condition+0x10>)
 801382e:	4603      	mov	r3, r0
 8013830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013834:	e883 0003 	stmia.w	r3, {r0, r1}
 8013838:	4618      	mov	r0, r3
 801383a:	4770      	bx	lr
 801383c:	0801afe8 	.word	0x0801afe8

08013840 <rcl_guard_condition_init>:
 8013840:	b082      	sub	sp, #8
 8013842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013844:	b087      	sub	sp, #28
 8013846:	ac0c      	add	r4, sp, #48	@ 0x30
 8013848:	e884 000c 	stmia.w	r4, {r2, r3}
 801384c:	46a6      	mov	lr, r4
 801384e:	460d      	mov	r5, r1
 8013850:	4604      	mov	r4, r0
 8013852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013856:	f10d 0c04 	add.w	ip, sp, #4
 801385a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801385e:	f8de 3000 	ldr.w	r3, [lr]
 8013862:	f8cc 3000 	str.w	r3, [ip]
 8013866:	a801      	add	r0, sp, #4
 8013868:	f7f9 ffe0 	bl	800d82c <rcutils_allocator_is_valid>
 801386c:	b338      	cbz	r0, 80138be <rcl_guard_condition_init+0x7e>
 801386e:	b334      	cbz	r4, 80138be <rcl_guard_condition_init+0x7e>
 8013870:	6866      	ldr	r6, [r4, #4]
 8013872:	b9ee      	cbnz	r6, 80138b0 <rcl_guard_condition_init+0x70>
 8013874:	b31d      	cbz	r5, 80138be <rcl_guard_condition_init+0x7e>
 8013876:	4628      	mov	r0, r5
 8013878:	f7ff ff5e 	bl	8013738 <rcl_context_is_valid>
 801387c:	b308      	cbz	r0, 80138c2 <rcl_guard_condition_init+0x82>
 801387e:	9b01      	ldr	r3, [sp, #4]
 8013880:	9905      	ldr	r1, [sp, #20]
 8013882:	201c      	movs	r0, #28
 8013884:	4798      	blx	r3
 8013886:	4607      	mov	r7, r0
 8013888:	6060      	str	r0, [r4, #4]
 801388a:	b310      	cbz	r0, 80138d2 <rcl_guard_condition_init+0x92>
 801388c:	6828      	ldr	r0, [r5, #0]
 801388e:	3028      	adds	r0, #40	@ 0x28
 8013890:	f002 fd62 	bl	8016358 <rmw_create_guard_condition>
 8013894:	6038      	str	r0, [r7, #0]
 8013896:	6860      	ldr	r0, [r4, #4]
 8013898:	6805      	ldr	r5, [r0, #0]
 801389a:	b1a5      	cbz	r5, 80138c6 <rcl_guard_condition_init+0x86>
 801389c:	2301      	movs	r3, #1
 801389e:	ac01      	add	r4, sp, #4
 80138a0:	7103      	strb	r3, [r0, #4]
 80138a2:	f100 0708 	add.w	r7, r0, #8
 80138a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80138aa:	6823      	ldr	r3, [r4, #0]
 80138ac:	603b      	str	r3, [r7, #0]
 80138ae:	e000      	b.n	80138b2 <rcl_guard_condition_init+0x72>
 80138b0:	2664      	movs	r6, #100	@ 0x64
 80138b2:	4630      	mov	r0, r6
 80138b4:	b007      	add	sp, #28
 80138b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138ba:	b002      	add	sp, #8
 80138bc:	4770      	bx	lr
 80138be:	260b      	movs	r6, #11
 80138c0:	e7f7      	b.n	80138b2 <rcl_guard_condition_init+0x72>
 80138c2:	2665      	movs	r6, #101	@ 0x65
 80138c4:	e7f5      	b.n	80138b2 <rcl_guard_condition_init+0x72>
 80138c6:	9b02      	ldr	r3, [sp, #8]
 80138c8:	9905      	ldr	r1, [sp, #20]
 80138ca:	4798      	blx	r3
 80138cc:	2601      	movs	r6, #1
 80138ce:	6065      	str	r5, [r4, #4]
 80138d0:	e7ef      	b.n	80138b2 <rcl_guard_condition_init+0x72>
 80138d2:	260a      	movs	r6, #10
 80138d4:	e7ed      	b.n	80138b2 <rcl_guard_condition_init+0x72>
 80138d6:	bf00      	nop

080138d8 <rcl_guard_condition_init_from_rmw>:
 80138d8:	b082      	sub	sp, #8
 80138da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80138e4:	4604      	mov	r4, r0
 80138e6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80138ea:	460e      	mov	r6, r1
 80138ec:	4617      	mov	r7, r2
 80138ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138f2:	f10d 0e04 	add.w	lr, sp, #4
 80138f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138fa:	f8dc 3000 	ldr.w	r3, [ip]
 80138fe:	f8ce 3000 	str.w	r3, [lr]
 8013902:	a801      	add	r0, sp, #4
 8013904:	f7f9 ff92 	bl	800d82c <rcutils_allocator_is_valid>
 8013908:	b350      	cbz	r0, 8013960 <rcl_guard_condition_init_from_rmw+0x88>
 801390a:	b34c      	cbz	r4, 8013960 <rcl_guard_condition_init_from_rmw+0x88>
 801390c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013910:	f1b8 0f00 	cmp.w	r8, #0
 8013914:	d11e      	bne.n	8013954 <rcl_guard_condition_init_from_rmw+0x7c>
 8013916:	b31f      	cbz	r7, 8013960 <rcl_guard_condition_init_from_rmw+0x88>
 8013918:	4638      	mov	r0, r7
 801391a:	f7ff ff0d 	bl	8013738 <rcl_context_is_valid>
 801391e:	b328      	cbz	r0, 801396c <rcl_guard_condition_init_from_rmw+0x94>
 8013920:	9b01      	ldr	r3, [sp, #4]
 8013922:	9905      	ldr	r1, [sp, #20]
 8013924:	201c      	movs	r0, #28
 8013926:	4798      	blx	r3
 8013928:	4605      	mov	r5, r0
 801392a:	6060      	str	r0, [r4, #4]
 801392c:	b358      	cbz	r0, 8013986 <rcl_guard_condition_init_from_rmw+0xae>
 801392e:	b1fe      	cbz	r6, 8013970 <rcl_guard_condition_init_from_rmw+0x98>
 8013930:	6006      	str	r6, [r0, #0]
 8013932:	f880 8004 	strb.w	r8, [r0, #4]
 8013936:	ac01      	add	r4, sp, #4
 8013938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801393a:	f105 0c08 	add.w	ip, r5, #8
 801393e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013942:	6823      	ldr	r3, [r4, #0]
 8013944:	f8cc 3000 	str.w	r3, [ip]
 8013948:	2000      	movs	r0, #0
 801394a:	b006      	add	sp, #24
 801394c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013950:	b002      	add	sp, #8
 8013952:	4770      	bx	lr
 8013954:	2064      	movs	r0, #100	@ 0x64
 8013956:	b006      	add	sp, #24
 8013958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801395c:	b002      	add	sp, #8
 801395e:	4770      	bx	lr
 8013960:	200b      	movs	r0, #11
 8013962:	b006      	add	sp, #24
 8013964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013968:	b002      	add	sp, #8
 801396a:	4770      	bx	lr
 801396c:	2065      	movs	r0, #101	@ 0x65
 801396e:	e7f2      	b.n	8013956 <rcl_guard_condition_init_from_rmw+0x7e>
 8013970:	6838      	ldr	r0, [r7, #0]
 8013972:	3028      	adds	r0, #40	@ 0x28
 8013974:	f002 fcf0 	bl	8016358 <rmw_create_guard_condition>
 8013978:	6028      	str	r0, [r5, #0]
 801397a:	6865      	ldr	r5, [r4, #4]
 801397c:	682e      	ldr	r6, [r5, #0]
 801397e:	b126      	cbz	r6, 801398a <rcl_guard_condition_init_from_rmw+0xb2>
 8013980:	2301      	movs	r3, #1
 8013982:	712b      	strb	r3, [r5, #4]
 8013984:	e7d7      	b.n	8013936 <rcl_guard_condition_init_from_rmw+0x5e>
 8013986:	200a      	movs	r0, #10
 8013988:	e7e5      	b.n	8013956 <rcl_guard_condition_init_from_rmw+0x7e>
 801398a:	4628      	mov	r0, r5
 801398c:	9b02      	ldr	r3, [sp, #8]
 801398e:	9905      	ldr	r1, [sp, #20]
 8013990:	4798      	blx	r3
 8013992:	6066      	str	r6, [r4, #4]
 8013994:	2001      	movs	r0, #1
 8013996:	e7de      	b.n	8013956 <rcl_guard_condition_init_from_rmw+0x7e>

08013998 <rcl_guard_condition_fini>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	b1f0      	cbz	r0, 80139dc <rcl_guard_condition_fini+0x44>
 801399e:	6843      	ldr	r3, [r0, #4]
 80139a0:	4604      	mov	r4, r0
 80139a2:	b163      	cbz	r3, 80139be <rcl_guard_condition_fini+0x26>
 80139a4:	6818      	ldr	r0, [r3, #0]
 80139a6:	68de      	ldr	r6, [r3, #12]
 80139a8:	6999      	ldr	r1, [r3, #24]
 80139aa:	b160      	cbz	r0, 80139c6 <rcl_guard_condition_fini+0x2e>
 80139ac:	791d      	ldrb	r5, [r3, #4]
 80139ae:	b965      	cbnz	r5, 80139ca <rcl_guard_condition_fini+0x32>
 80139b0:	4618      	mov	r0, r3
 80139b2:	47b0      	blx	r6
 80139b4:	2300      	movs	r3, #0
 80139b6:	4628      	mov	r0, r5
 80139b8:	6063      	str	r3, [r4, #4]
 80139ba:	b002      	add	sp, #8
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	461d      	mov	r5, r3
 80139c0:	4628      	mov	r0, r5
 80139c2:	b002      	add	sp, #8
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
 80139c6:	4605      	mov	r5, r0
 80139c8:	e7f2      	b.n	80139b0 <rcl_guard_condition_fini+0x18>
 80139ca:	9101      	str	r1, [sp, #4]
 80139cc:	f002 fcd8 	bl	8016380 <rmw_destroy_guard_condition>
 80139d0:	1e05      	subs	r5, r0, #0
 80139d2:	6863      	ldr	r3, [r4, #4]
 80139d4:	9901      	ldr	r1, [sp, #4]
 80139d6:	bf18      	it	ne
 80139d8:	2501      	movne	r5, #1
 80139da:	e7e9      	b.n	80139b0 <rcl_guard_condition_fini+0x18>
 80139dc:	250b      	movs	r5, #11
 80139de:	4628      	mov	r0, r5
 80139e0:	b002      	add	sp, #8
 80139e2:	bd70      	pop	{r4, r5, r6, pc}

080139e4 <rcl_guard_condition_get_default_options>:
 80139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139e6:	b087      	sub	sp, #28
 80139e8:	4606      	mov	r6, r0
 80139ea:	4668      	mov	r0, sp
 80139ec:	f7f9 ff10 	bl	800d810 <rcutils_get_default_allocator>
 80139f0:	4b09      	ldr	r3, [pc, #36]	@ (8013a18 <rcl_guard_condition_get_default_options+0x34>)
 80139f2:	46ee      	mov	lr, sp
 80139f4:	469c      	mov	ip, r3
 80139f6:	461d      	mov	r5, r3
 80139f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a02:	4634      	mov	r4, r6
 8013a04:	f8de 7000 	ldr.w	r7, [lr]
 8013a08:	f8cc 7000 	str.w	r7, [ip]
 8013a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a0e:	4630      	mov	r0, r6
 8013a10:	6027      	str	r7, [r4, #0]
 8013a12:	b007      	add	sp, #28
 8013a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a16:	bf00      	nop
 8013a18:	2000e248 	.word	0x2000e248

08013a1c <rcl_trigger_guard_condition>:
 8013a1c:	b148      	cbz	r0, 8013a32 <rcl_trigger_guard_condition+0x16>
 8013a1e:	b508      	push	{r3, lr}
 8013a20:	6843      	ldr	r3, [r0, #4]
 8013a22:	b143      	cbz	r3, 8013a36 <rcl_trigger_guard_condition+0x1a>
 8013a24:	6818      	ldr	r0, [r3, #0]
 8013a26:	f003 f947 	bl	8016cb8 <rmw_trigger_guard_condition>
 8013a2a:	3800      	subs	r0, #0
 8013a2c:	bf18      	it	ne
 8013a2e:	2001      	movne	r0, #1
 8013a30:	bd08      	pop	{r3, pc}
 8013a32:	200b      	movs	r0, #11
 8013a34:	4770      	bx	lr
 8013a36:	200b      	movs	r0, #11
 8013a38:	bd08      	pop	{r3, pc}
 8013a3a:	bf00      	nop

08013a3c <rcl_guard_condition_get_rmw_handle>:
 8013a3c:	b110      	cbz	r0, 8013a44 <rcl_guard_condition_get_rmw_handle+0x8>
 8013a3e:	6840      	ldr	r0, [r0, #4]
 8013a40:	b100      	cbz	r0, 8013a44 <rcl_guard_condition_get_rmw_handle+0x8>
 8013a42:	6800      	ldr	r0, [r0, #0]
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop

08013a48 <rcl_init>:
 8013a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a4c:	1e05      	subs	r5, r0, #0
 8013a4e:	b09e      	sub	sp, #120	@ 0x78
 8013a50:	460e      	mov	r6, r1
 8013a52:	4690      	mov	r8, r2
 8013a54:	461f      	mov	r7, r3
 8013a56:	f340 809c 	ble.w	8013b92 <rcl_init+0x14a>
 8013a5a:	2900      	cmp	r1, #0
 8013a5c:	f000 809c 	beq.w	8013b98 <rcl_init+0x150>
 8013a60:	f1a1 0e04 	sub.w	lr, r1, #4
 8013a64:	f04f 0c00 	mov.w	ip, #0
 8013a68:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013a6c:	f10c 0c01 	add.w	ip, ip, #1
 8013a70:	2c00      	cmp	r4, #0
 8013a72:	f000 8091 	beq.w	8013b98 <rcl_init+0x150>
 8013a76:	4565      	cmp	r5, ip
 8013a78:	d1f6      	bne.n	8013a68 <rcl_init+0x20>
 8013a7a:	f1b8 0f00 	cmp.w	r8, #0
 8013a7e:	f000 808b 	beq.w	8013b98 <rcl_init+0x150>
 8013a82:	f8d8 4000 	ldr.w	r4, [r8]
 8013a86:	2c00      	cmp	r4, #0
 8013a88:	f000 8086 	beq.w	8013b98 <rcl_init+0x150>
 8013a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a8e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a96:	6823      	ldr	r3, [r4, #0]
 8013a98:	f8cc 3000 	str.w	r3, [ip]
 8013a9c:	a819      	add	r0, sp, #100	@ 0x64
 8013a9e:	f7f9 fec5 	bl	800d82c <rcutils_allocator_is_valid>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d078      	beq.n	8013b98 <rcl_init+0x150>
 8013aa6:	2f00      	cmp	r7, #0
 8013aa8:	d076      	beq.n	8013b98 <rcl_init+0x150>
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d178      	bne.n	8013ba2 <rcl_init+0x15a>
 8013ab0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013ab4:	2178      	movs	r1, #120	@ 0x78
 8013ab6:	2001      	movs	r0, #1
 8013ab8:	4798      	blx	r3
 8013aba:	4604      	mov	r4, r0
 8013abc:	6038      	str	r0, [r7, #0]
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	f000 80b6 	beq.w	8013c30 <rcl_init+0x1e8>
 8013ac4:	a802      	add	r0, sp, #8
 8013ac6:	f002 fabb 	bl	8016040 <rmw_get_zero_initialized_context>
 8013aca:	a902      	add	r1, sp, #8
 8013acc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013ad0:	2250      	movs	r2, #80	@ 0x50
 8013ad2:	ac19      	add	r4, sp, #100	@ 0x64
 8013ad4:	f005 fd49 	bl	801956a <memcpy>
 8013ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ada:	f8d7 e000 	ldr.w	lr, [r7]
 8013ade:	46f4      	mov	ip, lr
 8013ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ae4:	6823      	ldr	r3, [r4, #0]
 8013ae6:	f8cc 3000 	str.w	r3, [ip]
 8013aea:	f10e 0114 	add.w	r1, lr, #20
 8013aee:	4640      	mov	r0, r8
 8013af0:	f000 f95e 	bl	8013db0 <rcl_init_options_copy>
 8013af4:	4604      	mov	r4, r0
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d144      	bne.n	8013b84 <rcl_init+0x13c>
 8013afa:	f8d7 9000 	ldr.w	r9, [r7]
 8013afe:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013b02:	f8c9 0020 	str.w	r0, [r9, #32]
 8013b06:	f8c9 5018 	str.w	r5, [r9, #24]
 8013b0a:	f8c9 801c 	str.w	r8, [r9, #28]
 8013b0e:	2d00      	cmp	r5, #0
 8013b10:	d04e      	beq.n	8013bb0 <rcl_init+0x168>
 8013b12:	2e00      	cmp	r6, #0
 8013b14:	d04c      	beq.n	8013bb0 <rcl_init+0x168>
 8013b16:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013b1a:	2104      	movs	r1, #4
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	4798      	blx	r3
 8013b20:	f8c9 0020 	str.w	r0, [r9, #32]
 8013b24:	f8d7 9000 	ldr.w	r9, [r7]
 8013b28:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013b2c:	46ca      	mov	sl, r9
 8013b2e:	b343      	cbz	r3, 8013b82 <rcl_init+0x13a>
 8013b30:	2d01      	cmp	r5, #1
 8013b32:	f178 0300 	sbcs.w	r3, r8, #0
 8013b36:	db3b      	blt.n	8013bb0 <rcl_init+0x168>
 8013b38:	2400      	movs	r4, #0
 8013b3a:	3e04      	subs	r6, #4
 8013b3c:	46a1      	mov	r9, r4
 8013b3e:	e00b      	b.n	8013b58 <rcl_init+0x110>
 8013b40:	6831      	ldr	r1, [r6, #0]
 8013b42:	f005 fd12 	bl	801956a <memcpy>
 8013b46:	3401      	adds	r4, #1
 8013b48:	f149 0900 	adc.w	r9, r9, #0
 8013b4c:	45c8      	cmp	r8, r9
 8013b4e:	bf08      	it	eq
 8013b50:	42a5      	cmpeq	r5, r4
 8013b52:	d02b      	beq.n	8013bac <rcl_init+0x164>
 8013b54:	f8d7 a000 	ldr.w	sl, [r7]
 8013b58:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013b5c:	f7ec fb62 	bl	8000224 <strlen>
 8013b60:	1c42      	adds	r2, r0, #1
 8013b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b64:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8013b66:	f8da a020 	ldr.w	sl, [sl, #32]
 8013b6a:	9201      	str	r2, [sp, #4]
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	4798      	blx	r3
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013b76:	6a1b      	ldr	r3, [r3, #32]
 8013b78:	9a01      	ldr	r2, [sp, #4]
 8013b7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d1de      	bne.n	8013b40 <rcl_init+0xf8>
 8013b82:	240a      	movs	r4, #10
 8013b84:	4638      	mov	r0, r7
 8013b86:	f7ff fddd 	bl	8013744 <__cleanup_context>
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	b01e      	add	sp, #120	@ 0x78
 8013b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b92:	2900      	cmp	r1, #0
 8013b94:	f43f af71 	beq.w	8013a7a <rcl_init+0x32>
 8013b98:	240b      	movs	r4, #11
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	b01e      	add	sp, #120	@ 0x78
 8013b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ba2:	2464      	movs	r4, #100	@ 0x64
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	b01e      	add	sp, #120	@ 0x78
 8013ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bac:	f8d7 9000 	ldr.w	r9, [r7]
 8013bb0:	4926      	ldr	r1, [pc, #152]	@ (8013c4c <rcl_init+0x204>)
 8013bb2:	680b      	ldr	r3, [r1, #0]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	d036      	beq.n	8013c26 <rcl_init+0x1de>
 8013bb8:	600b      	str	r3, [r1, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	2400      	movs	r4, #0
 8013bbe:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013bc2:	607b      	str	r3, [r7, #4]
 8013bc4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013bcc:	d034      	beq.n	8013c38 <rcl_init+0x1f0>
 8013bce:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013bd2:	b93b      	cbnz	r3, 8013be4 <rcl_init+0x19c>
 8013bd4:	3030      	adds	r0, #48	@ 0x30
 8013bd6:	f000 f957 	bl	8013e88 <rcl_get_localhost_only>
 8013bda:	4604      	mov	r4, r0
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1d1      	bne.n	8013b84 <rcl_init+0x13c>
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	6958      	ldr	r0, [r3, #20]
 8013be4:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013be6:	aa18      	add	r2, sp, #96	@ 0x60
 8013be8:	a917      	add	r1, sp, #92	@ 0x5c
 8013bea:	f000 fd61 	bl	80146b0 <rcl_validate_enclave_name>
 8013bee:	4604      	mov	r4, r0
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d1c7      	bne.n	8013b84 <rcl_init+0x13c>
 8013bf4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013bf6:	b9eb      	cbnz	r3, 8013c34 <rcl_init+0x1ec>
 8013bf8:	6839      	ldr	r1, [r7, #0]
 8013bfa:	694b      	ldr	r3, [r1, #20]
 8013bfc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013bfe:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013c02:	f000 fab7 	bl	8014174 <rcl_get_security_options_from_environment>
 8013c06:	4604      	mov	r4, r0
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	d1bb      	bne.n	8013b84 <rcl_init+0x13c>
 8013c0c:	6839      	ldr	r1, [r7, #0]
 8013c0e:	6948      	ldr	r0, [r1, #20]
 8013c10:	3128      	adds	r1, #40	@ 0x28
 8013c12:	3018      	adds	r0, #24
 8013c14:	f002 fcc0 	bl	8016598 <rmw_init>
 8013c18:	4604      	mov	r4, r0
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	d0bd      	beq.n	8013b9a <rcl_init+0x152>
 8013c1e:	f7ff fd6d 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8013c22:	4604      	mov	r4, r0
 8013c24:	e7ae      	b.n	8013b84 <rcl_init+0x13c>
 8013c26:	2201      	movs	r2, #1
 8013c28:	461c      	mov	r4, r3
 8013c2a:	600a      	str	r2, [r1, #0]
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	e7c6      	b.n	8013bbe <rcl_init+0x176>
 8013c30:	240a      	movs	r4, #10
 8013c32:	e7b2      	b.n	8013b9a <rcl_init+0x152>
 8013c34:	2401      	movs	r4, #1
 8013c36:	e7a5      	b.n	8013b84 <rcl_init+0x13c>
 8013c38:	3024      	adds	r0, #36	@ 0x24
 8013c3a:	f004 fb33 	bl	80182a4 <rcl_get_default_domain_id>
 8013c3e:	4604      	mov	r4, r0
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d19f      	bne.n	8013b84 <rcl_init+0x13c>
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	6958      	ldr	r0, [r3, #20]
 8013c48:	e7c1      	b.n	8013bce <rcl_init+0x186>
 8013c4a:	bf00      	nop
 8013c4c:	2000e25c 	.word	0x2000e25c

08013c50 <rcl_shutdown>:
 8013c50:	b1a8      	cbz	r0, 8013c7e <rcl_shutdown+0x2e>
 8013c52:	6803      	ldr	r3, [r0, #0]
 8013c54:	b510      	push	{r4, lr}
 8013c56:	4604      	mov	r4, r0
 8013c58:	b173      	cbz	r3, 8013c78 <rcl_shutdown+0x28>
 8013c5a:	f7ff fd6d 	bl	8013738 <rcl_context_is_valid>
 8013c5e:	b140      	cbz	r0, 8013c72 <rcl_shutdown+0x22>
 8013c60:	6820      	ldr	r0, [r4, #0]
 8013c62:	3028      	adds	r0, #40	@ 0x28
 8013c64:	f002 fdce 	bl	8016804 <rmw_shutdown>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	b958      	cbnz	r0, 8013c84 <rcl_shutdown+0x34>
 8013c6c:	6060      	str	r0, [r4, #4]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	bd10      	pop	{r4, pc}
 8013c72:	236a      	movs	r3, #106	@ 0x6a
 8013c74:	4618      	mov	r0, r3
 8013c76:	bd10      	pop	{r4, pc}
 8013c78:	230b      	movs	r3, #11
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	bd10      	pop	{r4, pc}
 8013c7e:	230b      	movs	r3, #11
 8013c80:	4618      	mov	r0, r3
 8013c82:	4770      	bx	lr
 8013c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c88:	f7ff bd38 	b.w	80136fc <rcl_convert_rmw_ret_to_rcl_ret>

08013c8c <rcl_get_zero_initialized_init_options>:
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	4770      	bx	lr

08013c90 <rcl_init_options_init>:
 8013c90:	b084      	sub	sp, #16
 8013c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c94:	b097      	sub	sp, #92	@ 0x5c
 8013c96:	ae1d      	add	r6, sp, #116	@ 0x74
 8013c98:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d058      	beq.n	8013d52 <rcl_init_options_init+0xc2>
 8013ca0:	6803      	ldr	r3, [r0, #0]
 8013ca2:	4605      	mov	r5, r0
 8013ca4:	b133      	cbz	r3, 8013cb4 <rcl_init_options_init+0x24>
 8013ca6:	2464      	movs	r4, #100	@ 0x64
 8013ca8:	4620      	mov	r0, r4
 8013caa:	b017      	add	sp, #92	@ 0x5c
 8013cac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013cb0:	b004      	add	sp, #16
 8013cb2:	4770      	bx	lr
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f7f9 fdb9 	bl	800d82c <rcutils_allocator_is_valid>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d049      	beq.n	8013d52 <rcl_init_options_init+0xc2>
 8013cbe:	46b4      	mov	ip, r6
 8013cc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cc4:	ac11      	add	r4, sp, #68	@ 0x44
 8013cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cc8:	f8dc 3000 	ldr.w	r3, [ip]
 8013ccc:	6023      	str	r3, [r4, #0]
 8013cce:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013cd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013cd2:	2050      	movs	r0, #80	@ 0x50
 8013cd4:	4798      	blx	r3
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	6028      	str	r0, [r5, #0]
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d03b      	beq.n	8013d56 <rcl_init_options_init+0xc6>
 8013cde:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013ce2:	4686      	mov	lr, r0
 8013ce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ce8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013cec:	f8dc 3000 	ldr.w	r3, [ip]
 8013cf0:	f8ce 3000 	str.w	r3, [lr]
 8013cf4:	a802      	add	r0, sp, #8
 8013cf6:	f002 f9b3 	bl	8016060 <rmw_get_zero_initialized_init_options>
 8013cfa:	f10d 0e08 	add.w	lr, sp, #8
 8013cfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d02:	f104 0c18 	add.w	ip, r4, #24
 8013d06:	682f      	ldr	r7, [r5, #0]
 8013d08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d20:	ac20      	add	r4, sp, #128	@ 0x80
 8013d22:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013d2e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013d32:	f107 0018 	add.w	r0, r7, #24
 8013d36:	f002 fb37 	bl	80163a8 <rmw_init_options_init>
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d0b3      	beq.n	8013ca8 <rcl_init_options_init+0x18>
 8013d40:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8013d42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013d44:	6828      	ldr	r0, [r5, #0]
 8013d46:	4798      	blx	r3
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f7ff fcd7 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	e7aa      	b.n	8013ca8 <rcl_init_options_init+0x18>
 8013d52:	240b      	movs	r4, #11
 8013d54:	e7a8      	b.n	8013ca8 <rcl_init_options_init+0x18>
 8013d56:	240a      	movs	r4, #10
 8013d58:	e7a6      	b.n	8013ca8 <rcl_init_options_init+0x18>
 8013d5a:	bf00      	nop

08013d5c <rcl_init_options_fini>:
 8013d5c:	b530      	push	{r4, r5, lr}
 8013d5e:	b087      	sub	sp, #28
 8013d60:	b1f0      	cbz	r0, 8013da0 <rcl_init_options_fini+0x44>
 8013d62:	6803      	ldr	r3, [r0, #0]
 8013d64:	4604      	mov	r4, r0
 8013d66:	b1db      	cbz	r3, 8013da0 <rcl_init_options_fini+0x44>
 8013d68:	469c      	mov	ip, r3
 8013d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d6e:	f10d 0e04 	add.w	lr, sp, #4
 8013d72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d76:	f8dc 3000 	ldr.w	r3, [ip]
 8013d7a:	f8ce 3000 	str.w	r3, [lr]
 8013d7e:	a801      	add	r0, sp, #4
 8013d80:	f7f9 fd54 	bl	800d82c <rcutils_allocator_is_valid>
 8013d84:	b160      	cbz	r0, 8013da0 <rcl_init_options_fini+0x44>
 8013d86:	6820      	ldr	r0, [r4, #0]
 8013d88:	3018      	adds	r0, #24
 8013d8a:	f002 fbbd 	bl	8016508 <rmw_init_options_fini>
 8013d8e:	4605      	mov	r5, r0
 8013d90:	b950      	cbnz	r0, 8013da8 <rcl_init_options_fini+0x4c>
 8013d92:	6820      	ldr	r0, [r4, #0]
 8013d94:	9b02      	ldr	r3, [sp, #8]
 8013d96:	9905      	ldr	r1, [sp, #20]
 8013d98:	4798      	blx	r3
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	b007      	add	sp, #28
 8013d9e:	bd30      	pop	{r4, r5, pc}
 8013da0:	250b      	movs	r5, #11
 8013da2:	4628      	mov	r0, r5
 8013da4:	b007      	add	sp, #28
 8013da6:	bd30      	pop	{r4, r5, pc}
 8013da8:	f7ff fca8 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8013dac:	4605      	mov	r5, r0
 8013dae:	e7f8      	b.n	8013da2 <rcl_init_options_fini+0x46>

08013db0 <rcl_init_options_copy>:
 8013db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db4:	b094      	sub	sp, #80	@ 0x50
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d058      	beq.n	8013e6c <rcl_init_options_copy+0xbc>
 8013dba:	4604      	mov	r4, r0
 8013dbc:	6800      	ldr	r0, [r0, #0]
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d054      	beq.n	8013e6c <rcl_init_options_copy+0xbc>
 8013dc2:	460e      	mov	r6, r1
 8013dc4:	f7f9 fd32 	bl	800d82c <rcutils_allocator_is_valid>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d04f      	beq.n	8013e6c <rcl_init_options_copy+0xbc>
 8013dcc:	2e00      	cmp	r6, #0
 8013dce:	d04d      	beq.n	8013e6c <rcl_init_options_copy+0xbc>
 8013dd0:	6833      	ldr	r3, [r6, #0]
 8013dd2:	b123      	cbz	r3, 8013dde <rcl_init_options_copy+0x2e>
 8013dd4:	2464      	movs	r4, #100	@ 0x64
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	b014      	add	sp, #80	@ 0x50
 8013dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dde:	6827      	ldr	r7, [r4, #0]
 8013de0:	46bc      	mov	ip, r7
 8013de2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013de6:	ad0f      	add	r5, sp, #60	@ 0x3c
 8013de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013dea:	f8dc 3000 	ldr.w	r3, [ip]
 8013dee:	f8d7 8000 	ldr.w	r8, [r7]
 8013df2:	602b      	str	r3, [r5, #0]
 8013df4:	4619      	mov	r1, r3
 8013df6:	2050      	movs	r0, #80	@ 0x50
 8013df8:	47c0      	blx	r8
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	6030      	str	r0, [r6, #0]
 8013dfe:	b3d0      	cbz	r0, 8013e76 <rcl_init_options_copy+0xc6>
 8013e00:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8013e04:	4686      	mov	lr, r0
 8013e06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8013e12:	f8ce 3000 	str.w	r3, [lr]
 8013e16:	4668      	mov	r0, sp
 8013e18:	f002 f922 	bl	8016060 <rmw_get_zero_initialized_init_options>
 8013e1c:	46ee      	mov	lr, sp
 8013e1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e22:	f105 0c18 	add.w	ip, r5, #24
 8013e26:	6824      	ldr	r4, [r4, #0]
 8013e28:	6835      	ldr	r5, [r6, #0]
 8013e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e3e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e42:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e46:	f104 0018 	add.w	r0, r4, #24
 8013e4a:	f105 0118 	add.w	r1, r5, #24
 8013e4e:	f002 fb13 	bl	8016478 <rmw_init_options_copy>
 8013e52:	4604      	mov	r4, r0
 8013e54:	2800      	cmp	r0, #0
 8013e56:	d0be      	beq.n	8013dd6 <rcl_init_options_copy+0x26>
 8013e58:	f7f9 fdb2 	bl	800d9c0 <rcutils_get_error_string>
 8013e5c:	f7f9 fdc8 	bl	800d9f0 <rcutils_reset_error>
 8013e60:	4630      	mov	r0, r6
 8013e62:	f7ff ff7b 	bl	8013d5c <rcl_init_options_fini>
 8013e66:	b140      	cbz	r0, 8013e7a <rcl_init_options_copy+0xca>
 8013e68:	4604      	mov	r4, r0
 8013e6a:	e7b4      	b.n	8013dd6 <rcl_init_options_copy+0x26>
 8013e6c:	240b      	movs	r4, #11
 8013e6e:	4620      	mov	r0, r4
 8013e70:	b014      	add	sp, #80	@ 0x50
 8013e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e76:	240a      	movs	r4, #10
 8013e78:	e7ad      	b.n	8013dd6 <rcl_init_options_copy+0x26>
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	b014      	add	sp, #80	@ 0x50
 8013e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e82:	f7ff bc3b 	b.w	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8013e86:	bf00      	nop

08013e88 <rcl_get_localhost_only>:
 8013e88:	b510      	push	{r4, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	9301      	str	r3, [sp, #4]
 8013e90:	b1b8      	cbz	r0, 8013ec2 <rcl_get_localhost_only+0x3a>
 8013e92:	4604      	mov	r4, r0
 8013e94:	a901      	add	r1, sp, #4
 8013e96:	480c      	ldr	r0, [pc, #48]	@ (8013ec8 <rcl_get_localhost_only+0x40>)
 8013e98:	f7f9 fd7a 	bl	800d990 <rcutils_get_env>
 8013e9c:	b110      	cbz	r0, 8013ea4 <rcl_get_localhost_only+0x1c>
 8013e9e:	2001      	movs	r0, #1
 8013ea0:	b002      	add	sp, #8
 8013ea2:	bd10      	pop	{r4, pc}
 8013ea4:	9b01      	ldr	r3, [sp, #4]
 8013ea6:	b113      	cbz	r3, 8013eae <rcl_get_localhost_only+0x26>
 8013ea8:	781a      	ldrb	r2, [r3, #0]
 8013eaa:	2a31      	cmp	r2, #49	@ 0x31
 8013eac:	d004      	beq.n	8013eb8 <rcl_get_localhost_only+0x30>
 8013eae:	2302      	movs	r3, #2
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	7023      	strb	r3, [r4, #0]
 8013eb4:	b002      	add	sp, #8
 8013eb6:	bd10      	pop	{r4, pc}
 8013eb8:	785b      	ldrb	r3, [r3, #1]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d1f7      	bne.n	8013eae <rcl_get_localhost_only+0x26>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	e7f6      	b.n	8013eb0 <rcl_get_localhost_only+0x28>
 8013ec2:	200b      	movs	r0, #11
 8013ec4:	b002      	add	sp, #8
 8013ec6:	bd10      	pop	{r4, pc}
 8013ec8:	0801aff0 	.word	0x0801aff0

08013ecc <rcl_node_resolve_name>:
 8013ecc:	b082      	sub	sp, #8
 8013ece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed2:	b091      	sub	sp, #68	@ 0x44
 8013ed4:	ac1a      	add	r4, sp, #104	@ 0x68
 8013ed6:	e884 000c 	stmia.w	r4, {r2, r3}
 8013eda:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d03b      	beq.n	8013f5a <rcl_node_resolve_name+0x8e>
 8013ee2:	460c      	mov	r4, r1
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	f7f7 ff4f 	bl	800bd88 <rcl_node_get_options>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	d037      	beq.n	8013f5e <rcl_node_resolve_name+0x92>
 8013eee:	4628      	mov	r0, r5
 8013ef0:	f7f7 ff3a 	bl	800bd68 <rcl_node_get_name>
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f7f7 ff3e 	bl	800bd78 <rcl_node_get_namespace>
 8013efc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013f00:	4681      	mov	r9, r0
 8013f02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f06:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013f08:	46ac      	mov	ip, r5
 8013f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f0e:	f8de 3000 	ldr.w	r3, [lr]
 8013f12:	f8cc 3000 	str.w	r3, [ip]
 8013f16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013f18:	b1fb      	cbz	r3, 8013f5a <rcl_node_resolve_name+0x8e>
 8013f1a:	468a      	mov	sl, r1
 8013f1c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013f20:	f001 ff62 	bl	8015de8 <rcutils_get_zero_initialized_string_map>
 8013f24:	ab10      	add	r3, sp, #64	@ 0x40
 8013f26:	9008      	str	r0, [sp, #32]
 8013f28:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013f2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f30:	2100      	movs	r1, #0
 8013f32:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013f36:	a808      	add	r0, sp, #32
 8013f38:	f001 ffce 	bl	8015ed8 <rcutils_string_map_init>
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	b180      	cbz	r0, 8013f62 <rcl_node_resolve_name+0x96>
 8013f40:	f7f9 fd3e 	bl	800d9c0 <rcutils_get_error_string>
 8013f44:	f7f9 fd54 	bl	800d9f0 <rcutils_reset_error>
 8013f48:	2f0a      	cmp	r7, #10
 8013f4a:	bf18      	it	ne
 8013f4c:	2701      	movne	r7, #1
 8013f4e:	4638      	mov	r0, r7
 8013f50:	b011      	add	sp, #68	@ 0x44
 8013f52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f56:	b002      	add	sp, #8
 8013f58:	4770      	bx	lr
 8013f5a:	270b      	movs	r7, #11
 8013f5c:	e7f7      	b.n	8013f4e <rcl_node_resolve_name+0x82>
 8013f5e:	2701      	movs	r7, #1
 8013f60:	e7f5      	b.n	8013f4e <rcl_node_resolve_name+0x82>
 8013f62:	9009      	str	r0, [sp, #36]	@ 0x24
 8013f64:	9007      	str	r0, [sp, #28]
 8013f66:	a808      	add	r0, sp, #32
 8013f68:	f004 fb2e 	bl	80185c8 <rcl_get_default_topic_name_substitutions>
 8013f6c:	4607      	mov	r7, r0
 8013f6e:	b1a8      	cbz	r0, 8013f9c <rcl_node_resolve_name+0xd0>
 8013f70:	280a      	cmp	r0, #10
 8013f72:	9c07      	ldr	r4, [sp, #28]
 8013f74:	d000      	beq.n	8013f78 <rcl_node_resolve_name+0xac>
 8013f76:	2701      	movs	r7, #1
 8013f78:	a808      	add	r0, sp, #32
 8013f7a:	f001 ffed 	bl	8015f58 <rcutils_string_map_fini>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d13d      	bne.n	8013ffe <rcl_node_resolve_name+0x132>
 8013f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f84:	4659      	mov	r1, fp
 8013f86:	47d0      	blx	sl
 8013f88:	4659      	mov	r1, fp
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	47d0      	blx	sl
 8013f8e:	f1b8 0f00 	cmp.w	r8, #0
 8013f92:	d0dc      	beq.n	8013f4e <rcl_node_resolve_name+0x82>
 8013f94:	2f67      	cmp	r7, #103	@ 0x67
 8013f96:	bf08      	it	eq
 8013f98:	2768      	moveq	r7, #104	@ 0x68
 8013f9a:	e7d8      	b.n	8013f4e <rcl_node_resolve_name+0x82>
 8013f9c:	ab09      	add	r3, sp, #36	@ 0x24
 8013f9e:	9305      	str	r3, [sp, #20]
 8013fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fa2:	46ec      	mov	ip, sp
 8013fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fa8:	682b      	ldr	r3, [r5, #0]
 8013faa:	f8cc 3000 	str.w	r3, [ip]
 8013fae:	464a      	mov	r2, r9
 8013fb0:	4631      	mov	r1, r6
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	ab08      	add	r3, sp, #32
 8013fb6:	f004 f9a9 	bl	801830c <rcl_expand_topic_name>
 8013fba:	4607      	mov	r7, r0
 8013fbc:	b9b8      	cbnz	r0, 8013fee <rcl_node_resolve_name+0x122>
 8013fbe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	a90a      	add	r1, sp, #40	@ 0x28
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f002 f8e2 	bl	8016190 <rmw_validate_full_topic_name>
 8013fcc:	b988      	cbnz	r0, 8013ff2 <rcl_node_resolve_name+0x126>
 8013fce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013fd0:	b9d5      	cbnz	r5, 8014008 <rcl_node_resolve_name+0x13c>
 8013fd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013fd4:	a808      	add	r0, sp, #32
 8013fd6:	601c      	str	r4, [r3, #0]
 8013fd8:	f001 ffbe 	bl	8015f58 <rcutils_string_map_fini>
 8013fdc:	4607      	mov	r7, r0
 8013fde:	b1a8      	cbz	r0, 801400c <rcl_node_resolve_name+0x140>
 8013fe0:	f7f9 fcee 	bl	800d9c0 <rcutils_get_error_string>
 8013fe4:	462c      	mov	r4, r5
 8013fe6:	f7f9 fd03 	bl	800d9f0 <rcutils_reset_error>
 8013fea:	2701      	movs	r7, #1
 8013fec:	e7c9      	b.n	8013f82 <rcl_node_resolve_name+0xb6>
 8013fee:	9c07      	ldr	r4, [sp, #28]
 8013ff0:	e7c2      	b.n	8013f78 <rcl_node_resolve_name+0xac>
 8013ff2:	f7f9 fce5 	bl	800d9c0 <rcutils_get_error_string>
 8013ff6:	2701      	movs	r7, #1
 8013ff8:	f7f9 fcfa 	bl	800d9f0 <rcutils_reset_error>
 8013ffc:	e7bc      	b.n	8013f78 <rcl_node_resolve_name+0xac>
 8013ffe:	f7f9 fcdf 	bl	800d9c0 <rcutils_get_error_string>
 8014002:	f7f9 fcf5 	bl	800d9f0 <rcutils_reset_error>
 8014006:	e7bc      	b.n	8013f82 <rcl_node_resolve_name+0xb6>
 8014008:	2767      	movs	r7, #103	@ 0x67
 801400a:	e7b5      	b.n	8013f78 <rcl_node_resolve_name+0xac>
 801400c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801400e:	4659      	mov	r1, fp
 8014010:	47d0      	blx	sl
 8014012:	4659      	mov	r1, fp
 8014014:	4638      	mov	r0, r7
 8014016:	47d0      	blx	sl
 8014018:	e799      	b.n	8013f4e <rcl_node_resolve_name+0x82>
 801401a:	bf00      	nop

0801401c <exact_match_lookup>:
 801401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801401e:	f102 0708 	add.w	r7, r2, #8
 8014022:	460b      	mov	r3, r1
 8014024:	4614      	mov	r4, r2
 8014026:	4606      	mov	r6, r0
 8014028:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801402c:	b085      	sub	sp, #20
 801402e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014032:	4618      	mov	r0, r3
 8014034:	4919      	ldr	r1, [pc, #100]	@ (801409c <exact_match_lookup+0x80>)
 8014036:	e894 000c 	ldmia.w	r4, {r2, r3}
 801403a:	f001 fe9f 	bl	8015d7c <rcutils_join_path>
 801403e:	7833      	ldrb	r3, [r6, #0]
 8014040:	2b2f      	cmp	r3, #47	@ 0x2f
 8014042:	4605      	mov	r5, r0
 8014044:	d023      	beq.n	801408e <exact_match_lookup+0x72>
 8014046:	f104 030c 	add.w	r3, r4, #12
 801404a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801404e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014052:	1c70      	adds	r0, r6, #1
 8014054:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014058:	f001 fe96 	bl	8015d88 <rcutils_to_native_path>
 801405c:	4606      	mov	r6, r0
 801405e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014062:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014066:	4631      	mov	r1, r6
 8014068:	e894 000c 	ldmia.w	r4, {r2, r3}
 801406c:	4628      	mov	r0, r5
 801406e:	f001 fe85 	bl	8015d7c <rcutils_join_path>
 8014072:	6862      	ldr	r2, [r4, #4]
 8014074:	6921      	ldr	r1, [r4, #16]
 8014076:	4603      	mov	r3, r0
 8014078:	4630      	mov	r0, r6
 801407a:	461e      	mov	r6, r3
 801407c:	4790      	blx	r2
 801407e:	4628      	mov	r0, r5
 8014080:	6863      	ldr	r3, [r4, #4]
 8014082:	6921      	ldr	r1, [r4, #16]
 8014084:	4798      	blx	r3
 8014086:	4635      	mov	r5, r6
 8014088:	4628      	mov	r0, r5
 801408a:	b005      	add	sp, #20
 801408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801408e:	7873      	ldrb	r3, [r6, #1]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d1d8      	bne.n	8014046 <exact_match_lookup+0x2a>
 8014094:	4628      	mov	r0, r5
 8014096:	b005      	add	sp, #20
 8014098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801409a:	bf00      	nop
 801409c:	0801b040 	.word	0x0801b040

080140a0 <rcl_get_secure_root>:
 80140a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140a4:	b085      	sub	sp, #20
 80140a6:	b168      	cbz	r0, 80140c4 <rcl_get_secure_root+0x24>
 80140a8:	4607      	mov	r7, r0
 80140aa:	4608      	mov	r0, r1
 80140ac:	460c      	mov	r4, r1
 80140ae:	f7f9 fbbd 	bl	800d82c <rcutils_allocator_is_valid>
 80140b2:	b138      	cbz	r0, 80140c4 <rcl_get_secure_root+0x24>
 80140b4:	2300      	movs	r3, #0
 80140b6:	482d      	ldr	r0, [pc, #180]	@ (801416c <rcl_get_secure_root+0xcc>)
 80140b8:	9303      	str	r3, [sp, #12]
 80140ba:	a903      	add	r1, sp, #12
 80140bc:	f7f9 fc68 	bl	800d990 <rcutils_get_env>
 80140c0:	4605      	mov	r5, r0
 80140c2:	b120      	cbz	r0, 80140ce <rcl_get_secure_root+0x2e>
 80140c4:	2500      	movs	r5, #0
 80140c6:	4628      	mov	r0, r5
 80140c8:	b005      	add	sp, #20
 80140ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140ce:	9b03      	ldr	r3, [sp, #12]
 80140d0:	781a      	ldrb	r2, [r3, #0]
 80140d2:	2a00      	cmp	r2, #0
 80140d4:	d0f6      	beq.n	80140c4 <rcl_get_secure_root+0x24>
 80140d6:	f104 090c 	add.w	r9, r4, #12
 80140da:	e899 0003 	ldmia.w	r9, {r0, r1}
 80140de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80140e2:	4618      	mov	r0, r3
 80140e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80140e8:	f7f9 fdb8 	bl	800dc5c <rcutils_strdup>
 80140ec:	4680      	mov	r8, r0
 80140ee:	2800      	cmp	r0, #0
 80140f0:	d0e8      	beq.n	80140c4 <rcl_get_secure_root+0x24>
 80140f2:	481f      	ldr	r0, [pc, #124]	@ (8014170 <rcl_get_secure_root+0xd0>)
 80140f4:	9503      	str	r5, [sp, #12]
 80140f6:	a903      	add	r1, sp, #12
 80140f8:	f7f9 fc4a 	bl	800d990 <rcutils_get_env>
 80140fc:	b160      	cbz	r0, 8014118 <rcl_get_secure_root+0x78>
 80140fe:	2600      	movs	r6, #0
 8014100:	6863      	ldr	r3, [r4, #4]
 8014102:	6921      	ldr	r1, [r4, #16]
 8014104:	4630      	mov	r0, r6
 8014106:	4798      	blx	r3
 8014108:	4640      	mov	r0, r8
 801410a:	6863      	ldr	r3, [r4, #4]
 801410c:	6921      	ldr	r1, [r4, #16]
 801410e:	4798      	blx	r3
 8014110:	4628      	mov	r0, r5
 8014112:	b005      	add	sp, #20
 8014114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014118:	9b03      	ldr	r3, [sp, #12]
 801411a:	781e      	ldrb	r6, [r3, #0]
 801411c:	b1f6      	cbz	r6, 801415c <rcl_get_secure_root+0xbc>
 801411e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014122:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014126:	4618      	mov	r0, r3
 8014128:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801412c:	f7f9 fd96 	bl	800dc5c <rcutils_strdup>
 8014130:	4606      	mov	r6, r0
 8014132:	2800      	cmp	r0, #0
 8014134:	d0e3      	beq.n	80140fe <rcl_get_secure_root+0x5e>
 8014136:	4622      	mov	r2, r4
 8014138:	4641      	mov	r1, r8
 801413a:	f7ff ff6f 	bl	801401c <exact_match_lookup>
 801413e:	4605      	mov	r5, r0
 8014140:	2d00      	cmp	r5, #0
 8014142:	d0dd      	beq.n	8014100 <rcl_get_secure_root+0x60>
 8014144:	4628      	mov	r0, r5
 8014146:	f001 fe17 	bl	8015d78 <rcutils_is_directory>
 801414a:	4603      	mov	r3, r0
 801414c:	2800      	cmp	r0, #0
 801414e:	d1d7      	bne.n	8014100 <rcl_get_secure_root+0x60>
 8014150:	4628      	mov	r0, r5
 8014152:	6921      	ldr	r1, [r4, #16]
 8014154:	461d      	mov	r5, r3
 8014156:	6863      	ldr	r3, [r4, #4]
 8014158:	4798      	blx	r3
 801415a:	e7d1      	b.n	8014100 <rcl_get_secure_root+0x60>
 801415c:	4622      	mov	r2, r4
 801415e:	4638      	mov	r0, r7
 8014160:	4641      	mov	r1, r8
 8014162:	f7ff ff5b 	bl	801401c <exact_match_lookup>
 8014166:	4605      	mov	r5, r0
 8014168:	e7ea      	b.n	8014140 <rcl_get_secure_root+0xa0>
 801416a:	bf00      	nop
 801416c:	0801b04c 	.word	0x0801b04c
 8014170:	0801b064 	.word	0x0801b064

08014174 <rcl_get_security_options_from_environment>:
 8014174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014178:	b082      	sub	sp, #8
 801417a:	2300      	movs	r3, #0
 801417c:	4606      	mov	r6, r0
 801417e:	460f      	mov	r7, r1
 8014180:	4820      	ldr	r0, [pc, #128]	@ (8014204 <rcl_get_security_options_from_environment+0x90>)
 8014182:	9301      	str	r3, [sp, #4]
 8014184:	a901      	add	r1, sp, #4
 8014186:	4690      	mov	r8, r2
 8014188:	f7f9 fc02 	bl	800d990 <rcutils_get_env>
 801418c:	b120      	cbz	r0, 8014198 <rcl_get_security_options_from_environment+0x24>
 801418e:	2501      	movs	r5, #1
 8014190:	4628      	mov	r0, r5
 8014192:	b002      	add	sp, #8
 8014194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014198:	491b      	ldr	r1, [pc, #108]	@ (8014208 <rcl_get_security_options_from_environment+0x94>)
 801419a:	4604      	mov	r4, r0
 801419c:	9801      	ldr	r0, [sp, #4]
 801419e:	f7ec f837 	bl	8000210 <strcmp>
 80141a2:	4605      	mov	r5, r0
 80141a4:	b9e8      	cbnz	r0, 80141e2 <rcl_get_security_options_from_environment+0x6e>
 80141a6:	9001      	str	r0, [sp, #4]
 80141a8:	f1b8 0f00 	cmp.w	r8, #0
 80141ac:	d020      	beq.n	80141f0 <rcl_get_security_options_from_environment+0x7c>
 80141ae:	4817      	ldr	r0, [pc, #92]	@ (801420c <rcl_get_security_options_from_environment+0x98>)
 80141b0:	a901      	add	r1, sp, #4
 80141b2:	f7f9 fbed 	bl	800d990 <rcutils_get_env>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	d1e9      	bne.n	801418e <rcl_get_security_options_from_environment+0x1a>
 80141ba:	4915      	ldr	r1, [pc, #84]	@ (8014210 <rcl_get_security_options_from_environment+0x9c>)
 80141bc:	9801      	ldr	r0, [sp, #4]
 80141be:	f7ec f827 	bl	8000210 <strcmp>
 80141c2:	fab0 f080 	clz	r0, r0
 80141c6:	0940      	lsrs	r0, r0, #5
 80141c8:	f888 0000 	strb.w	r0, [r8]
 80141cc:	4639      	mov	r1, r7
 80141ce:	4630      	mov	r0, r6
 80141d0:	f7ff ff66 	bl	80140a0 <rcl_get_secure_root>
 80141d4:	b170      	cbz	r0, 80141f4 <rcl_get_security_options_from_environment+0x80>
 80141d6:	f8c8 0004 	str.w	r0, [r8, #4]
 80141da:	4628      	mov	r0, r5
 80141dc:	b002      	add	sp, #8
 80141de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141e2:	4625      	mov	r5, r4
 80141e4:	4628      	mov	r0, r5
 80141e6:	f888 4000 	strb.w	r4, [r8]
 80141ea:	b002      	add	sp, #8
 80141ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f0:	250b      	movs	r5, #11
 80141f2:	e7cd      	b.n	8014190 <rcl_get_security_options_from_environment+0x1c>
 80141f4:	f898 5000 	ldrb.w	r5, [r8]
 80141f8:	f1a5 0501 	sub.w	r5, r5, #1
 80141fc:	fab5 f585 	clz	r5, r5
 8014200:	096d      	lsrs	r5, r5, #5
 8014202:	e7c5      	b.n	8014190 <rcl_get_security_options_from_environment+0x1c>
 8014204:	0801b004 	.word	0x0801b004
 8014208:	0801b018 	.word	0x0801b018
 801420c:	0801b020 	.word	0x0801b020
 8014210:	0801b038 	.word	0x0801b038

08014214 <rcl_service_get_rmw_handle>:
 8014214:	b118      	cbz	r0, 801421e <rcl_service_get_rmw_handle+0xa>
 8014216:	6800      	ldr	r0, [r0, #0]
 8014218:	b108      	cbz	r0, 801421e <rcl_service_get_rmw_handle+0xa>
 801421a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801421e:	4770      	bx	lr

08014220 <rcl_take_request>:
 8014220:	b570      	push	{r4, r5, r6, lr}
 8014222:	468e      	mov	lr, r1
 8014224:	460c      	mov	r4, r1
 8014226:	4616      	mov	r6, r2
 8014228:	4605      	mov	r5, r0
 801422a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801422e:	b08c      	sub	sp, #48	@ 0x30
 8014230:	f10d 0c18 	add.w	ip, sp, #24
 8014234:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014238:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801423c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014240:	b30d      	cbz	r5, 8014286 <rcl_take_request+0x66>
 8014242:	682b      	ldr	r3, [r5, #0]
 8014244:	b1fb      	cbz	r3, 8014286 <rcl_take_request+0x66>
 8014246:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801424a:	b1e0      	cbz	r0, 8014286 <rcl_take_request+0x66>
 801424c:	b336      	cbz	r6, 801429c <rcl_take_request+0x7c>
 801424e:	2300      	movs	r3, #0
 8014250:	f88d 3007 	strb.w	r3, [sp, #7]
 8014254:	4632      	mov	r2, r6
 8014256:	f10d 0307 	add.w	r3, sp, #7
 801425a:	a902      	add	r1, sp, #8
 801425c:	f002 fc28 	bl	8016ab0 <rmw_take_request>
 8014260:	4605      	mov	r5, r0
 8014262:	b198      	cbz	r0, 801428c <rcl_take_request+0x6c>
 8014264:	280a      	cmp	r0, #10
 8014266:	bf18      	it	ne
 8014268:	2501      	movne	r5, #1
 801426a:	f10d 0e18 	add.w	lr, sp, #24
 801426e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014272:	46a4      	mov	ip, r4
 8014274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014278:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801427c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014280:	4628      	mov	r0, r5
 8014282:	b00c      	add	sp, #48	@ 0x30
 8014284:	bd70      	pop	{r4, r5, r6, pc}
 8014286:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801428a:	e7ee      	b.n	801426a <rcl_take_request+0x4a>
 801428c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014290:	f240 2359 	movw	r3, #601	@ 0x259
 8014294:	2a00      	cmp	r2, #0
 8014296:	bf08      	it	eq
 8014298:	461d      	moveq	r5, r3
 801429a:	e7e6      	b.n	801426a <rcl_take_request+0x4a>
 801429c:	250b      	movs	r5, #11
 801429e:	e7e4      	b.n	801426a <rcl_take_request+0x4a>

080142a0 <rcl_send_response>:
 80142a0:	b170      	cbz	r0, 80142c0 <rcl_send_response+0x20>
 80142a2:	6800      	ldr	r0, [r0, #0]
 80142a4:	b160      	cbz	r0, 80142c0 <rcl_send_response+0x20>
 80142a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80142aa:	b148      	cbz	r0, 80142c0 <rcl_send_response+0x20>
 80142ac:	b159      	cbz	r1, 80142c6 <rcl_send_response+0x26>
 80142ae:	b510      	push	{r4, lr}
 80142b0:	b15a      	cbz	r2, 80142ca <rcl_send_response+0x2a>
 80142b2:	f002 fc5b 	bl	8016b6c <rmw_send_response>
 80142b6:	b110      	cbz	r0, 80142be <rcl_send_response+0x1e>
 80142b8:	2802      	cmp	r0, #2
 80142ba:	bf18      	it	ne
 80142bc:	2001      	movne	r0, #1
 80142be:	bd10      	pop	{r4, pc}
 80142c0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80142c4:	4770      	bx	lr
 80142c6:	200b      	movs	r0, #11
 80142c8:	4770      	bx	lr
 80142ca:	200b      	movs	r0, #11
 80142cc:	bd10      	pop	{r4, pc}
 80142ce:	bf00      	nop

080142d0 <rcl_service_is_valid>:
 80142d0:	b130      	cbz	r0, 80142e0 <rcl_service_is_valid+0x10>
 80142d2:	6800      	ldr	r0, [r0, #0]
 80142d4:	b120      	cbz	r0, 80142e0 <rcl_service_is_valid+0x10>
 80142d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80142da:	3800      	subs	r0, #0
 80142dc:	bf18      	it	ne
 80142de:	2001      	movne	r0, #1
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop

080142e4 <rcl_get_system_time>:
 80142e4:	4608      	mov	r0, r1
 80142e6:	f7f9 bcf7 	b.w	800dcd8 <rcutils_system_time_now>
 80142ea:	bf00      	nop

080142ec <rcl_get_steady_time>:
 80142ec:	4608      	mov	r0, r1
 80142ee:	f7f9 bd1b 	b.w	800dd28 <rcutils_steady_time_now>
 80142f2:	bf00      	nop

080142f4 <rcl_get_ros_time>:
 80142f4:	7a03      	ldrb	r3, [r0, #8]
 80142f6:	b510      	push	{r4, lr}
 80142f8:	460c      	mov	r4, r1
 80142fa:	b133      	cbz	r3, 801430a <rcl_get_ros_time+0x16>
 80142fc:	2105      	movs	r1, #5
 80142fe:	f7f9 faa3 	bl	800d848 <__atomic_load_8>
 8014302:	e9c4 0100 	strd	r0, r1, [r4]
 8014306:	2000      	movs	r0, #0
 8014308:	bd10      	pop	{r4, pc}
 801430a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801430e:	4608      	mov	r0, r1
 8014310:	f7f9 bce2 	b.w	800dcd8 <rcutils_system_time_now>

08014314 <rcl_clock_init>:
 8014314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014316:	4605      	mov	r5, r0
 8014318:	4610      	mov	r0, r2
 801431a:	4614      	mov	r4, r2
 801431c:	460e      	mov	r6, r1
 801431e:	f7f9 fa85 	bl	800d82c <rcutils_allocator_is_valid>
 8014322:	b128      	cbz	r0, 8014330 <rcl_clock_init+0x1c>
 8014324:	2d03      	cmp	r5, #3
 8014326:	d803      	bhi.n	8014330 <rcl_clock_init+0x1c>
 8014328:	e8df f005 	tbb	[pc, r5]
 801432c:	06532e1d 	.word	0x06532e1d
 8014330:	f04f 0c0b 	mov.w	ip, #11
 8014334:	4660      	mov	r0, ip
 8014336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014338:	2e00      	cmp	r6, #0
 801433a:	d0f9      	beq.n	8014330 <rcl_clock_init+0x1c>
 801433c:	2c00      	cmp	r4, #0
 801433e:	d0f7      	beq.n	8014330 <rcl_clock_init+0x1c>
 8014340:	2300      	movs	r3, #0
 8014342:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014346:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80143fc <rcl_clock_init+0xe8>
 801434a:	6133      	str	r3, [r6, #16]
 801434c:	f106 0514 	add.w	r5, r6, #20
 8014350:	469c      	mov	ip, r3
 8014352:	2703      	movs	r7, #3
 8014354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014358:	6823      	ldr	r3, [r4, #0]
 801435a:	602b      	str	r3, [r5, #0]
 801435c:	7037      	strb	r7, [r6, #0]
 801435e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014362:	4660      	mov	r0, ip
 8014364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014366:	2e00      	cmp	r6, #0
 8014368:	d0e2      	beq.n	8014330 <rcl_clock_init+0x1c>
 801436a:	2300      	movs	r3, #0
 801436c:	7033      	strb	r3, [r6, #0]
 801436e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014372:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014376:	469c      	mov	ip, r3
 8014378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801437a:	f106 0514 	add.w	r5, r6, #20
 801437e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014380:	6823      	ldr	r3, [r4, #0]
 8014382:	602b      	str	r3, [r5, #0]
 8014384:	4660      	mov	r0, ip
 8014386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014388:	2e00      	cmp	r6, #0
 801438a:	d0d1      	beq.n	8014330 <rcl_clock_init+0x1c>
 801438c:	2c00      	cmp	r4, #0
 801438e:	d0cf      	beq.n	8014330 <rcl_clock_init+0x1c>
 8014390:	2700      	movs	r7, #0
 8014392:	7037      	strb	r7, [r6, #0]
 8014394:	46a4      	mov	ip, r4
 8014396:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801439a:	f106 0514 	add.w	r5, r6, #20
 801439e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80143a2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80143a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143a8:	f8dc 3000 	ldr.w	r3, [ip]
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	6921      	ldr	r1, [r4, #16]
 80143b0:	6823      	ldr	r3, [r4, #0]
 80143b2:	2010      	movs	r0, #16
 80143b4:	4798      	blx	r3
 80143b6:	6130      	str	r0, [r6, #16]
 80143b8:	b1d0      	cbz	r0, 80143f0 <rcl_clock_init+0xdc>
 80143ba:	2200      	movs	r2, #0
 80143bc:	2300      	movs	r3, #0
 80143be:	e9c0 2300 	strd	r2, r3, [r0]
 80143c2:	2301      	movs	r3, #1
 80143c4:	7207      	strb	r7, [r0, #8]
 80143c6:	4a0c      	ldr	r2, [pc, #48]	@ (80143f8 <rcl_clock_init+0xe4>)
 80143c8:	7033      	strb	r3, [r6, #0]
 80143ca:	46bc      	mov	ip, r7
 80143cc:	60f2      	str	r2, [r6, #12]
 80143ce:	4660      	mov	r0, ip
 80143d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143d2:	2e00      	cmp	r6, #0
 80143d4:	d0ac      	beq.n	8014330 <rcl_clock_init+0x1c>
 80143d6:	2c00      	cmp	r4, #0
 80143d8:	d0aa      	beq.n	8014330 <rcl_clock_init+0x1c>
 80143da:	2300      	movs	r3, #0
 80143dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80143e0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014400 <rcl_clock_init+0xec>
 80143e4:	6133      	str	r3, [r6, #16]
 80143e6:	f106 0514 	add.w	r5, r6, #20
 80143ea:	469c      	mov	ip, r3
 80143ec:	2702      	movs	r7, #2
 80143ee:	e7b1      	b.n	8014354 <rcl_clock_init+0x40>
 80143f0:	f04f 0c0a 	mov.w	ip, #10
 80143f4:	e79e      	b.n	8014334 <rcl_clock_init+0x20>
 80143f6:	bf00      	nop
 80143f8:	080142f5 	.word	0x080142f5
 80143fc:	080142ed 	.word	0x080142ed
 8014400:	080142e5 	.word	0x080142e5

08014404 <rcl_clock_fini>:
 8014404:	2800      	cmp	r0, #0
 8014406:	d02c      	beq.n	8014462 <rcl_clock_fini+0x5e>
 8014408:	b538      	push	{r3, r4, r5, lr}
 801440a:	4604      	mov	r4, r0
 801440c:	3014      	adds	r0, #20
 801440e:	f7f9 fa0d 	bl	800d82c <rcutils_allocator_is_valid>
 8014412:	b140      	cbz	r0, 8014426 <rcl_clock_fini+0x22>
 8014414:	7823      	ldrb	r3, [r4, #0]
 8014416:	2b02      	cmp	r3, #2
 8014418:	d007      	beq.n	801442a <rcl_clock_fini+0x26>
 801441a:	2b03      	cmp	r3, #3
 801441c:	d005      	beq.n	801442a <rcl_clock_fini+0x26>
 801441e:	2b01      	cmp	r3, #1
 8014420:	d00f      	beq.n	8014442 <rcl_clock_fini+0x3e>
 8014422:	200b      	movs	r0, #11
 8014424:	bd38      	pop	{r3, r4, r5, pc}
 8014426:	2001      	movs	r0, #1
 8014428:	bd38      	pop	{r3, r4, r5, pc}
 801442a:	68a0      	ldr	r0, [r4, #8]
 801442c:	2800      	cmp	r0, #0
 801442e:	d0f9      	beq.n	8014424 <rcl_clock_fini+0x20>
 8014430:	2500      	movs	r5, #0
 8014432:	6860      	ldr	r0, [r4, #4]
 8014434:	69a3      	ldr	r3, [r4, #24]
 8014436:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014438:	60a5      	str	r5, [r4, #8]
 801443a:	4798      	blx	r3
 801443c:	6065      	str	r5, [r4, #4]
 801443e:	4628      	mov	r0, r5
 8014440:	bd38      	pop	{r3, r4, r5, pc}
 8014442:	68a3      	ldr	r3, [r4, #8]
 8014444:	b133      	cbz	r3, 8014454 <rcl_clock_fini+0x50>
 8014446:	2500      	movs	r5, #0
 8014448:	69a3      	ldr	r3, [r4, #24]
 801444a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801444c:	6860      	ldr	r0, [r4, #4]
 801444e:	60a5      	str	r5, [r4, #8]
 8014450:	4798      	blx	r3
 8014452:	6065      	str	r5, [r4, #4]
 8014454:	6920      	ldr	r0, [r4, #16]
 8014456:	69a3      	ldr	r3, [r4, #24]
 8014458:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801445a:	4798      	blx	r3
 801445c:	2000      	movs	r0, #0
 801445e:	6120      	str	r0, [r4, #16]
 8014460:	bd38      	pop	{r3, r4, r5, pc}
 8014462:	200b      	movs	r0, #11
 8014464:	4770      	bx	lr
 8014466:	bf00      	nop

08014468 <rcl_clock_get_now>:
 8014468:	b140      	cbz	r0, 801447c <rcl_clock_get_now+0x14>
 801446a:	b139      	cbz	r1, 801447c <rcl_clock_get_now+0x14>
 801446c:	7803      	ldrb	r3, [r0, #0]
 801446e:	b11b      	cbz	r3, 8014478 <rcl_clock_get_now+0x10>
 8014470:	68c3      	ldr	r3, [r0, #12]
 8014472:	b10b      	cbz	r3, 8014478 <rcl_clock_get_now+0x10>
 8014474:	6900      	ldr	r0, [r0, #16]
 8014476:	4718      	bx	r3
 8014478:	2001      	movs	r0, #1
 801447a:	4770      	bx	lr
 801447c:	200b      	movs	r0, #11
 801447e:	4770      	bx	lr

08014480 <rcl_clock_add_jump_callback>:
 8014480:	b082      	sub	sp, #8
 8014482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014486:	a906      	add	r1, sp, #24
 8014488:	e881 000c 	stmia.w	r1, {r2, r3}
 801448c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014490:	b320      	cbz	r0, 80144dc <rcl_clock_add_jump_callback+0x5c>
 8014492:	4604      	mov	r4, r0
 8014494:	3014      	adds	r0, #20
 8014496:	f7f9 f9c9 	bl	800d82c <rcutils_allocator_is_valid>
 801449a:	b1f8      	cbz	r0, 80144dc <rcl_clock_add_jump_callback+0x5c>
 801449c:	b1f6      	cbz	r6, 80144dc <rcl_clock_add_jump_callback+0x5c>
 801449e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	db1b      	blt.n	80144dc <rcl_clock_add_jump_callback+0x5c>
 80144a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80144a8:	2a01      	cmp	r2, #1
 80144aa:	f173 0300 	sbcs.w	r3, r3, #0
 80144ae:	da15      	bge.n	80144dc <rcl_clock_add_jump_callback+0x5c>
 80144b0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80144b4:	2f00      	cmp	r7, #0
 80144b6:	d042      	beq.n	801453e <rcl_clock_add_jump_callback+0xbe>
 80144b8:	2300      	movs	r3, #0
 80144ba:	4602      	mov	r2, r0
 80144bc:	e003      	b.n	80144c6 <rcl_clock_add_jump_callback+0x46>
 80144be:	42bb      	cmp	r3, r7
 80144c0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80144c4:	d011      	beq.n	80144ea <rcl_clock_add_jump_callback+0x6a>
 80144c6:	6811      	ldr	r1, [r2, #0]
 80144c8:	42b1      	cmp	r1, r6
 80144ca:	f103 0301 	add.w	r3, r3, #1
 80144ce:	d1f6      	bne.n	80144be <rcl_clock_add_jump_callback+0x3e>
 80144d0:	6a11      	ldr	r1, [r2, #32]
 80144d2:	42a9      	cmp	r1, r5
 80144d4:	d1f3      	bne.n	80144be <rcl_clock_add_jump_callback+0x3e>
 80144d6:	f04f 0e01 	mov.w	lr, #1
 80144da:	e001      	b.n	80144e0 <rcl_clock_add_jump_callback+0x60>
 80144dc:	f04f 0e0b 	mov.w	lr, #11
 80144e0:	4670      	mov	r0, lr
 80144e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144e6:	b002      	add	sp, #8
 80144e8:	4770      	bx	lr
 80144ea:	3301      	adds	r3, #1
 80144ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80144f0:	00d9      	lsls	r1, r3, #3
 80144f2:	69e3      	ldr	r3, [r4, #28]
 80144f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80144f6:	4798      	blx	r3
 80144f8:	b1f0      	cbz	r0, 8014538 <rcl_clock_add_jump_callback+0xb8>
 80144fa:	68a3      	ldr	r3, [r4, #8]
 80144fc:	6060      	str	r0, [r4, #4]
 80144fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014502:	f10d 0c18 	add.w	ip, sp, #24
 8014506:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801450a:	f103 0801 	add.w	r8, r3, #1
 801450e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014516:	f106 0708 	add.w	r7, r6, #8
 801451a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801451c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014520:	f04f 0e00 	mov.w	lr, #0
 8014524:	e887 0003 	stmia.w	r7, {r0, r1}
 8014528:	6235      	str	r5, [r6, #32]
 801452a:	4670      	mov	r0, lr
 801452c:	f8c4 8008 	str.w	r8, [r4, #8]
 8014530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014534:	b002      	add	sp, #8
 8014536:	4770      	bx	lr
 8014538:	f04f 0e0a 	mov.w	lr, #10
 801453c:	e7d0      	b.n	80144e0 <rcl_clock_add_jump_callback+0x60>
 801453e:	2128      	movs	r1, #40	@ 0x28
 8014540:	e7d7      	b.n	80144f2 <rcl_clock_add_jump_callback+0x72>
 8014542:	bf00      	nop

08014544 <rcl_clock_remove_jump_callback>:
 8014544:	2800      	cmp	r0, #0
 8014546:	d057      	beq.n	80145f8 <rcl_clock_remove_jump_callback+0xb4>
 8014548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801454c:	4605      	mov	r5, r0
 801454e:	3014      	adds	r0, #20
 8014550:	4688      	mov	r8, r1
 8014552:	4692      	mov	sl, r2
 8014554:	f7f9 f96a 	bl	800d82c <rcutils_allocator_is_valid>
 8014558:	2800      	cmp	r0, #0
 801455a:	d03b      	beq.n	80145d4 <rcl_clock_remove_jump_callback+0x90>
 801455c:	f1b8 0f00 	cmp.w	r8, #0
 8014560:	d038      	beq.n	80145d4 <rcl_clock_remove_jump_callback+0x90>
 8014562:	68ae      	ldr	r6, [r5, #8]
 8014564:	b166      	cbz	r6, 8014580 <rcl_clock_remove_jump_callback+0x3c>
 8014566:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801456a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801456e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014572:	464c      	mov	r4, r9
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	4543      	cmp	r3, r8
 8014578:	d005      	beq.n	8014586 <rcl_clock_remove_jump_callback+0x42>
 801457a:	3428      	adds	r4, #40	@ 0x28
 801457c:	42a7      	cmp	r7, r4
 801457e:	d1f9      	bne.n	8014574 <rcl_clock_remove_jump_callback+0x30>
 8014580:	2001      	movs	r0, #1
 8014582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014586:	6a23      	ldr	r3, [r4, #32]
 8014588:	3428      	adds	r4, #40	@ 0x28
 801458a:	42bc      	cmp	r4, r7
 801458c:	d02d      	beq.n	80145ea <rcl_clock_remove_jump_callback+0xa6>
 801458e:	4553      	cmp	r3, sl
 8014590:	d1f0      	bne.n	8014574 <rcl_clock_remove_jump_callback+0x30>
 8014592:	46a6      	mov	lr, r4
 8014594:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014598:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801459c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80145a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80145ac:	3428      	adds	r4, #40	@ 0x28
 80145ae:	42a7      	cmp	r7, r4
 80145b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80145b4:	d1ed      	bne.n	8014592 <rcl_clock_remove_jump_callback+0x4e>
 80145b6:	3e01      	subs	r6, #1
 80145b8:	60ae      	str	r6, [r5, #8]
 80145ba:	b176      	cbz	r6, 80145da <rcl_clock_remove_jump_callback+0x96>
 80145bc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80145c0:	69eb      	ldr	r3, [r5, #28]
 80145c2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80145c4:	00f1      	lsls	r1, r6, #3
 80145c6:	4648      	mov	r0, r9
 80145c8:	4798      	blx	r3
 80145ca:	b1b8      	cbz	r0, 80145fc <rcl_clock_remove_jump_callback+0xb8>
 80145cc:	6068      	str	r0, [r5, #4]
 80145ce:	2000      	movs	r0, #0
 80145d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145d4:	200b      	movs	r0, #11
 80145d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145da:	4648      	mov	r0, r9
 80145dc:	69ab      	ldr	r3, [r5, #24]
 80145de:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80145e0:	4798      	blx	r3
 80145e2:	606e      	str	r6, [r5, #4]
 80145e4:	4630      	mov	r0, r6
 80145e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ea:	4553      	cmp	r3, sl
 80145ec:	d1c8      	bne.n	8014580 <rcl_clock_remove_jump_callback+0x3c>
 80145ee:	3e01      	subs	r6, #1
 80145f0:	60ae      	str	r6, [r5, #8]
 80145f2:	2e00      	cmp	r6, #0
 80145f4:	d1e2      	bne.n	80145bc <rcl_clock_remove_jump_callback+0x78>
 80145f6:	e7f0      	b.n	80145da <rcl_clock_remove_jump_callback+0x96>
 80145f8:	200b      	movs	r0, #11
 80145fa:	4770      	bx	lr
 80145fc:	200a      	movs	r0, #10
 80145fe:	e7ea      	b.n	80145d6 <rcl_clock_remove_jump_callback+0x92>

08014600 <rcl_validate_enclave_name_with_size>:
 8014600:	b378      	cbz	r0, 8014662 <rcl_validate_enclave_name_with_size+0x62>
 8014602:	b570      	push	{r4, r5, r6, lr}
 8014604:	4615      	mov	r5, r2
 8014606:	b0c2      	sub	sp, #264	@ 0x108
 8014608:	b302      	cbz	r2, 801464c <rcl_validate_enclave_name_with_size+0x4c>
 801460a:	461e      	mov	r6, r3
 801460c:	466a      	mov	r2, sp
 801460e:	ab01      	add	r3, sp, #4
 8014610:	460c      	mov	r4, r1
 8014612:	f7f9 fbdd 	bl	800ddd0 <rmw_validate_namespace_with_size>
 8014616:	4684      	mov	ip, r0
 8014618:	b9e8      	cbnz	r0, 8014656 <rcl_validate_enclave_name_with_size+0x56>
 801461a:	9b00      	ldr	r3, [sp, #0]
 801461c:	b923      	cbnz	r3, 8014628 <rcl_validate_enclave_name_with_size+0x28>
 801461e:	2300      	movs	r3, #0
 8014620:	602b      	str	r3, [r5, #0]
 8014622:	4660      	mov	r0, ip
 8014624:	b042      	add	sp, #264	@ 0x108
 8014626:	bd70      	pop	{r4, r5, r6, pc}
 8014628:	2b07      	cmp	r3, #7
 801462a:	d007      	beq.n	801463c <rcl_validate_enclave_name_with_size+0x3c>
 801462c:	1e5a      	subs	r2, r3, #1
 801462e:	2a05      	cmp	r2, #5
 8014630:	d833      	bhi.n	801469a <rcl_validate_enclave_name_with_size+0x9a>
 8014632:	e8df f002 	tbb	[pc, r2]
 8014636:	2c2f      	.short	0x2c2f
 8014638:	1a232629 	.word	0x1a232629
 801463c:	2cff      	cmp	r4, #255	@ 0xff
 801463e:	d9ee      	bls.n	801461e <rcl_validate_enclave_name_with_size+0x1e>
 8014640:	602b      	str	r3, [r5, #0]
 8014642:	2e00      	cmp	r6, #0
 8014644:	d0ed      	beq.n	8014622 <rcl_validate_enclave_name_with_size+0x22>
 8014646:	23fe      	movs	r3, #254	@ 0xfe
 8014648:	6033      	str	r3, [r6, #0]
 801464a:	e7ea      	b.n	8014622 <rcl_validate_enclave_name_with_size+0x22>
 801464c:	f04f 0c0b 	mov.w	ip, #11
 8014650:	4660      	mov	r0, ip
 8014652:	b042      	add	sp, #264	@ 0x108
 8014654:	bd70      	pop	{r4, r5, r6, pc}
 8014656:	f7ff f851 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 801465a:	4684      	mov	ip, r0
 801465c:	4660      	mov	r0, ip
 801465e:	b042      	add	sp, #264	@ 0x108
 8014660:	bd70      	pop	{r4, r5, r6, pc}
 8014662:	f04f 0c0b 	mov.w	ip, #11
 8014666:	4660      	mov	r0, ip
 8014668:	4770      	bx	lr
 801466a:	2306      	movs	r3, #6
 801466c:	602b      	str	r3, [r5, #0]
 801466e:	2e00      	cmp	r6, #0
 8014670:	d0d7      	beq.n	8014622 <rcl_validate_enclave_name_with_size+0x22>
 8014672:	9b01      	ldr	r3, [sp, #4]
 8014674:	6033      	str	r3, [r6, #0]
 8014676:	4660      	mov	r0, ip
 8014678:	b042      	add	sp, #264	@ 0x108
 801467a:	bd70      	pop	{r4, r5, r6, pc}
 801467c:	2305      	movs	r3, #5
 801467e:	602b      	str	r3, [r5, #0]
 8014680:	e7f5      	b.n	801466e <rcl_validate_enclave_name_with_size+0x6e>
 8014682:	2304      	movs	r3, #4
 8014684:	602b      	str	r3, [r5, #0]
 8014686:	e7f2      	b.n	801466e <rcl_validate_enclave_name_with_size+0x6e>
 8014688:	2303      	movs	r3, #3
 801468a:	602b      	str	r3, [r5, #0]
 801468c:	e7ef      	b.n	801466e <rcl_validate_enclave_name_with_size+0x6e>
 801468e:	2302      	movs	r3, #2
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	e7ec      	b.n	801466e <rcl_validate_enclave_name_with_size+0x6e>
 8014694:	2301      	movs	r3, #1
 8014696:	602b      	str	r3, [r5, #0]
 8014698:	e7e9      	b.n	801466e <rcl_validate_enclave_name_with_size+0x6e>
 801469a:	4a04      	ldr	r2, [pc, #16]	@ (80146ac <rcl_validate_enclave_name_with_size+0xac>)
 801469c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80146a0:	a802      	add	r0, sp, #8
 80146a2:	f7f9 faaf 	bl	800dc04 <rcutils_snprintf>
 80146a6:	f04f 0c01 	mov.w	ip, #1
 80146aa:	e7ba      	b.n	8014622 <rcl_validate_enclave_name_with_size+0x22>
 80146ac:	0801b084 	.word	0x0801b084

080146b0 <rcl_validate_enclave_name>:
 80146b0:	b168      	cbz	r0, 80146ce <rcl_validate_enclave_name+0x1e>
 80146b2:	b570      	push	{r4, r5, r6, lr}
 80146b4:	460d      	mov	r5, r1
 80146b6:	4616      	mov	r6, r2
 80146b8:	4604      	mov	r4, r0
 80146ba:	f7eb fdb3 	bl	8000224 <strlen>
 80146be:	4633      	mov	r3, r6
 80146c0:	4601      	mov	r1, r0
 80146c2:	462a      	mov	r2, r5
 80146c4:	4620      	mov	r0, r4
 80146c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146ca:	f7ff bf99 	b.w	8014600 <rcl_validate_enclave_name_with_size>
 80146ce:	200b      	movs	r0, #11
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop

080146d4 <rcl_get_zero_initialized_wait_set>:
 80146d4:	b510      	push	{r4, lr}
 80146d6:	4c08      	ldr	r4, [pc, #32]	@ (80146f8 <rcl_get_zero_initialized_wait_set+0x24>)
 80146d8:	4686      	mov	lr, r0
 80146da:	4684      	mov	ip, r0
 80146dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146ee:	6823      	ldr	r3, [r4, #0]
 80146f0:	f8cc 3000 	str.w	r3, [ip]
 80146f4:	4670      	mov	r0, lr
 80146f6:	bd10      	pop	{r4, pc}
 80146f8:	0801b0e4 	.word	0x0801b0e4

080146fc <rcl_wait_set_is_valid>:
 80146fc:	b118      	cbz	r0, 8014706 <rcl_wait_set_is_valid+0xa>
 80146fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014700:	3800      	subs	r0, #0
 8014702:	bf18      	it	ne
 8014704:	2001      	movne	r0, #1
 8014706:	4770      	bx	lr

08014708 <rcl_wait_set_fini>:
 8014708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470c:	b082      	sub	sp, #8
 801470e:	2800      	cmp	r0, #0
 8014710:	f000 8095 	beq.w	801483e <rcl_wait_set_fini+0x136>
 8014714:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014716:	4604      	mov	r4, r0
 8014718:	2e00      	cmp	r6, #0
 801471a:	f000 808c 	beq.w	8014836 <rcl_wait_set_fini+0x12e>
 801471e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014720:	f002 fc5c 	bl	8016fdc <rmw_destroy_wait_set>
 8014724:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014726:	1e06      	subs	r6, r0, #0
 8014728:	bf18      	it	ne
 801472a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801472e:	2d00      	cmp	r5, #0
 8014730:	f000 8081 	beq.w	8014836 <rcl_wait_set_fini+0x12e>
 8014734:	6820      	ldr	r0, [r4, #0]
 8014736:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801473a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801473c:	2700      	movs	r7, #0
 801473e:	6067      	str	r7, [r4, #4]
 8014740:	602f      	str	r7, [r5, #0]
 8014742:	b120      	cbz	r0, 801474e <rcl_wait_set_fini+0x46>
 8014744:	9101      	str	r1, [sp, #4]
 8014746:	47c0      	blx	r8
 8014748:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801474a:	9901      	ldr	r1, [sp, #4]
 801474c:	6027      	str	r7, [r4, #0]
 801474e:	68a8      	ldr	r0, [r5, #8]
 8014750:	b120      	cbz	r0, 801475c <rcl_wait_set_fini+0x54>
 8014752:	47c0      	blx	r8
 8014754:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014756:	2300      	movs	r3, #0
 8014758:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801475c:	68a0      	ldr	r0, [r4, #8]
 801475e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014760:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014762:	f04f 0800 	mov.w	r8, #0
 8014766:	f8c4 800c 	str.w	r8, [r4, #12]
 801476a:	f8c5 800c 	str.w	r8, [r5, #12]
 801476e:	b128      	cbz	r0, 801477c <rcl_wait_set_fini+0x74>
 8014770:	47b8      	blx	r7
 8014772:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014774:	f8c4 8008 	str.w	r8, [r4, #8]
 8014778:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801477a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801477c:	6968      	ldr	r0, [r5, #20]
 801477e:	f04f 0800 	mov.w	r8, #0
 8014782:	f8c5 8010 	str.w	r8, [r5, #16]
 8014786:	b128      	cbz	r0, 8014794 <rcl_wait_set_fini+0x8c>
 8014788:	47b8      	blx	r7
 801478a:	f8c5 8014 	str.w	r8, [r5, #20]
 801478e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014790:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014792:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014794:	6920      	ldr	r0, [r4, #16]
 8014796:	f04f 0800 	mov.w	r8, #0
 801479a:	f8c4 8014 	str.w	r8, [r4, #20]
 801479e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80147a2:	b128      	cbz	r0, 80147b0 <rcl_wait_set_fini+0xa8>
 80147a4:	47b8      	blx	r7
 80147a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80147ac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147b0:	69a0      	ldr	r0, [r4, #24]
 80147b2:	f04f 0800 	mov.w	r8, #0
 80147b6:	f8c4 801c 	str.w	r8, [r4, #28]
 80147ba:	f8c5 8018 	str.w	r8, [r5, #24]
 80147be:	b128      	cbz	r0, 80147cc <rcl_wait_set_fini+0xc4>
 80147c0:	9101      	str	r1, [sp, #4]
 80147c2:	47b8      	blx	r7
 80147c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147c6:	9901      	ldr	r1, [sp, #4]
 80147c8:	f8c4 8018 	str.w	r8, [r4, #24]
 80147cc:	6a28      	ldr	r0, [r5, #32]
 80147ce:	b120      	cbz	r0, 80147da <rcl_wait_set_fini+0xd2>
 80147d0:	47b8      	blx	r7
 80147d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147d4:	2300      	movs	r3, #0
 80147d6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80147da:	6a20      	ldr	r0, [r4, #32]
 80147dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80147e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147e2:	2700      	movs	r7, #0
 80147e4:	6267      	str	r7, [r4, #36]	@ 0x24
 80147e6:	626f      	str	r7, [r5, #36]	@ 0x24
 80147e8:	b120      	cbz	r0, 80147f4 <rcl_wait_set_fini+0xec>
 80147ea:	9101      	str	r1, [sp, #4]
 80147ec:	47c0      	blx	r8
 80147ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147f0:	9901      	ldr	r1, [sp, #4]
 80147f2:	6227      	str	r7, [r4, #32]
 80147f4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80147f6:	b120      	cbz	r0, 8014802 <rcl_wait_set_fini+0xfa>
 80147f8:	47c0      	blx	r8
 80147fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147fc:	2300      	movs	r3, #0
 80147fe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014802:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014804:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014808:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801480a:	2700      	movs	r7, #0
 801480c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801480e:	632f      	str	r7, [r5, #48]	@ 0x30
 8014810:	b120      	cbz	r0, 801481c <rcl_wait_set_fini+0x114>
 8014812:	9101      	str	r1, [sp, #4]
 8014814:	47c0      	blx	r8
 8014816:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014818:	9901      	ldr	r1, [sp, #4]
 801481a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801481c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801481e:	b120      	cbz	r0, 801482a <rcl_wait_set_fini+0x122>
 8014820:	47c0      	blx	r8
 8014822:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014824:	2300      	movs	r3, #0
 8014826:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801482a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801482c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801482e:	4628      	mov	r0, r5
 8014830:	4798      	blx	r3
 8014832:	2300      	movs	r3, #0
 8014834:	6323      	str	r3, [r4, #48]	@ 0x30
 8014836:	4630      	mov	r0, r6
 8014838:	b002      	add	sp, #8
 801483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483e:	260b      	movs	r6, #11
 8014840:	4630      	mov	r0, r6
 8014842:	b002      	add	sp, #8
 8014844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014848 <rcl_wait_set_add_subscription>:
 8014848:	b318      	cbz	r0, 8014892 <rcl_wait_set_add_subscription+0x4a>
 801484a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	b30b      	cbz	r3, 8014896 <rcl_wait_set_add_subscription+0x4e>
 8014852:	b319      	cbz	r1, 801489c <rcl_wait_set_add_subscription+0x54>
 8014854:	681d      	ldr	r5, [r3, #0]
 8014856:	6840      	ldr	r0, [r0, #4]
 8014858:	4285      	cmp	r5, r0
 801485a:	d217      	bcs.n	801488c <rcl_wait_set_add_subscription+0x44>
 801485c:	6820      	ldr	r0, [r4, #0]
 801485e:	1c6e      	adds	r6, r5, #1
 8014860:	601e      	str	r6, [r3, #0]
 8014862:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014866:	b102      	cbz	r2, 801486a <rcl_wait_set_add_subscription+0x22>
 8014868:	6015      	str	r5, [r2, #0]
 801486a:	4608      	mov	r0, r1
 801486c:	f7f7 fd8a 	bl	800c384 <rcl_subscription_get_rmw_handle>
 8014870:	b150      	cbz	r0, 8014888 <rcl_wait_set_add_subscription+0x40>
 8014872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014874:	6842      	ldr	r2, [r0, #4]
 8014876:	689b      	ldr	r3, [r3, #8]
 8014878:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801487c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801487e:	6853      	ldr	r3, [r2, #4]
 8014880:	3301      	adds	r3, #1
 8014882:	2000      	movs	r0, #0
 8014884:	6053      	str	r3, [r2, #4]
 8014886:	bd70      	pop	{r4, r5, r6, pc}
 8014888:	2001      	movs	r0, #1
 801488a:	bd70      	pop	{r4, r5, r6, pc}
 801488c:	f240 3086 	movw	r0, #902	@ 0x386
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	200b      	movs	r0, #11
 8014894:	4770      	bx	lr
 8014896:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	200b      	movs	r0, #11
 801489e:	bd70      	pop	{r4, r5, r6, pc}

080148a0 <rcl_wait_set_clear>:
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d073      	beq.n	801498c <rcl_wait_set_clear+0xec>
 80148a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148a6:	b510      	push	{r4, lr}
 80148a8:	4604      	mov	r4, r0
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d070      	beq.n	8014990 <rcl_wait_set_clear+0xf0>
 80148ae:	6800      	ldr	r0, [r0, #0]
 80148b0:	b138      	cbz	r0, 80148c2 <rcl_wait_set_clear+0x22>
 80148b2:	6862      	ldr	r2, [r4, #4]
 80148b4:	2100      	movs	r1, #0
 80148b6:	0092      	lsls	r2, r2, #2
 80148b8:	f004 fd8e 	bl	80193d8 <memset>
 80148bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148be:	2200      	movs	r2, #0
 80148c0:	601a      	str	r2, [r3, #0]
 80148c2:	68a0      	ldr	r0, [r4, #8]
 80148c4:	b138      	cbz	r0, 80148d6 <rcl_wait_set_clear+0x36>
 80148c6:	68e2      	ldr	r2, [r4, #12]
 80148c8:	2100      	movs	r1, #0
 80148ca:	0092      	lsls	r2, r2, #2
 80148cc:	f004 fd84 	bl	80193d8 <memset>
 80148d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148d2:	2200      	movs	r2, #0
 80148d4:	60da      	str	r2, [r3, #12]
 80148d6:	69a0      	ldr	r0, [r4, #24]
 80148d8:	b138      	cbz	r0, 80148ea <rcl_wait_set_clear+0x4a>
 80148da:	69e2      	ldr	r2, [r4, #28]
 80148dc:	2100      	movs	r1, #0
 80148de:	0092      	lsls	r2, r2, #2
 80148e0:	f004 fd7a 	bl	80193d8 <memset>
 80148e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148e6:	2200      	movs	r2, #0
 80148e8:	619a      	str	r2, [r3, #24]
 80148ea:	6a20      	ldr	r0, [r4, #32]
 80148ec:	b138      	cbz	r0, 80148fe <rcl_wait_set_clear+0x5e>
 80148ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80148f0:	2100      	movs	r1, #0
 80148f2:	0092      	lsls	r2, r2, #2
 80148f4:	f004 fd70 	bl	80193d8 <memset>
 80148f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148fa:	2200      	movs	r2, #0
 80148fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80148fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014900:	b138      	cbz	r0, 8014912 <rcl_wait_set_clear+0x72>
 8014902:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014904:	2100      	movs	r1, #0
 8014906:	0092      	lsls	r2, r2, #2
 8014908:	f004 fd66 	bl	80193d8 <memset>
 801490c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801490e:	2200      	movs	r2, #0
 8014910:	631a      	str	r2, [r3, #48]	@ 0x30
 8014912:	6920      	ldr	r0, [r4, #16]
 8014914:	b138      	cbz	r0, 8014926 <rcl_wait_set_clear+0x86>
 8014916:	6962      	ldr	r2, [r4, #20]
 8014918:	2100      	movs	r1, #0
 801491a:	0092      	lsls	r2, r2, #2
 801491c:	f004 fd5c 	bl	80193d8 <memset>
 8014920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014922:	2200      	movs	r2, #0
 8014924:	641a      	str	r2, [r3, #64]	@ 0x40
 8014926:	6898      	ldr	r0, [r3, #8]
 8014928:	b138      	cbz	r0, 801493a <rcl_wait_set_clear+0x9a>
 801492a:	685a      	ldr	r2, [r3, #4]
 801492c:	2100      	movs	r1, #0
 801492e:	0092      	lsls	r2, r2, #2
 8014930:	f004 fd52 	bl	80193d8 <memset>
 8014934:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014936:	2200      	movs	r2, #0
 8014938:	605a      	str	r2, [r3, #4]
 801493a:	6958      	ldr	r0, [r3, #20]
 801493c:	b138      	cbz	r0, 801494e <rcl_wait_set_clear+0xae>
 801493e:	691a      	ldr	r2, [r3, #16]
 8014940:	2100      	movs	r1, #0
 8014942:	0092      	lsls	r2, r2, #2
 8014944:	f004 fd48 	bl	80193d8 <memset>
 8014948:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801494a:	2200      	movs	r2, #0
 801494c:	611a      	str	r2, [r3, #16]
 801494e:	6a18      	ldr	r0, [r3, #32]
 8014950:	b138      	cbz	r0, 8014962 <rcl_wait_set_clear+0xc2>
 8014952:	69da      	ldr	r2, [r3, #28]
 8014954:	2100      	movs	r1, #0
 8014956:	0092      	lsls	r2, r2, #2
 8014958:	f004 fd3e 	bl	80193d8 <memset>
 801495c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801495e:	2200      	movs	r2, #0
 8014960:	61da      	str	r2, [r3, #28]
 8014962:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014964:	b138      	cbz	r0, 8014976 <rcl_wait_set_clear+0xd6>
 8014966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014968:	2100      	movs	r1, #0
 801496a:	0092      	lsls	r2, r2, #2
 801496c:	f004 fd34 	bl	80193d8 <memset>
 8014970:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014972:	2200      	movs	r2, #0
 8014974:	629a      	str	r2, [r3, #40]	@ 0x28
 8014976:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014978:	b138      	cbz	r0, 801498a <rcl_wait_set_clear+0xea>
 801497a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801497c:	2100      	movs	r1, #0
 801497e:	0092      	lsls	r2, r2, #2
 8014980:	f004 fd2a 	bl	80193d8 <memset>
 8014984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014986:	2000      	movs	r0, #0
 8014988:	6358      	str	r0, [r3, #52]	@ 0x34
 801498a:	bd10      	pop	{r4, pc}
 801498c:	200b      	movs	r0, #11
 801498e:	4770      	bx	lr
 8014990:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014994:	bd10      	pop	{r4, pc}
 8014996:	bf00      	nop

08014998 <rcl_wait_set_resize>:
 8014998:	2800      	cmp	r0, #0
 801499a:	f000 8185 	beq.w	8014ca8 <rcl_wait_set_resize+0x310>
 801499e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149a2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80149a4:	b083      	sub	sp, #12
 80149a6:	4605      	mov	r5, r0
 80149a8:	2c00      	cmp	r4, #0
 80149aa:	f000 817f 	beq.w	8014cac <rcl_wait_set_resize+0x314>
 80149ae:	f04f 0900 	mov.w	r9, #0
 80149b2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80149b6:	461f      	mov	r7, r3
 80149b8:	4688      	mov	r8, r1
 80149ba:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80149be:	4616      	mov	r6, r2
 80149c0:	f8c0 9004 	str.w	r9, [r0, #4]
 80149c4:	f8c4 9000 	str.w	r9, [r4]
 80149c8:	2900      	cmp	r1, #0
 80149ca:	f000 80bd 	beq.w	8014b48 <rcl_wait_set_resize+0x1b0>
 80149ce:	008c      	lsls	r4, r1, #2
 80149d0:	6800      	ldr	r0, [r0, #0]
 80149d2:	9301      	str	r3, [sp, #4]
 80149d4:	4652      	mov	r2, sl
 80149d6:	4621      	mov	r1, r4
 80149d8:	4798      	blx	r3
 80149da:	9b01      	ldr	r3, [sp, #4]
 80149dc:	6028      	str	r0, [r5, #0]
 80149de:	2800      	cmp	r0, #0
 80149e0:	f000 80cb 	beq.w	8014b7a <rcl_wait_set_resize+0x1e2>
 80149e4:	4622      	mov	r2, r4
 80149e6:	4649      	mov	r1, r9
 80149e8:	9301      	str	r3, [sp, #4]
 80149ea:	f004 fcf5 	bl	80193d8 <memset>
 80149ee:	f8c5 8004 	str.w	r8, [r5, #4]
 80149f2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80149f6:	9b01      	ldr	r3, [sp, #4]
 80149f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80149fc:	f8c8 9004 	str.w	r9, [r8, #4]
 8014a00:	4652      	mov	r2, sl
 8014a02:	4621      	mov	r1, r4
 8014a04:	4798      	blx	r3
 8014a06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a08:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a0c:	689b      	ldr	r3, [r3, #8]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	f000 80ac 	beq.w	8014b6c <rcl_wait_set_resize+0x1d4>
 8014a14:	4622      	mov	r2, r4
 8014a16:	4649      	mov	r1, r9
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f004 fcdd 	bl	80193d8 <memset>
 8014a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a24:	f04f 0800 	mov.w	r8, #0
 8014a28:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014a2c:	f8c5 800c 	str.w	r8, [r5, #12]
 8014a30:	f8c4 800c 	str.w	r8, [r4, #12]
 8014a34:	2e00      	cmp	r6, #0
 8014a36:	f040 80a4 	bne.w	8014b82 <rcl_wait_set_resize+0x1ea>
 8014a3a:	68a8      	ldr	r0, [r5, #8]
 8014a3c:	b128      	cbz	r0, 8014a4a <rcl_wait_set_resize+0xb2>
 8014a3e:	4649      	mov	r1, r9
 8014a40:	4790      	blx	r2
 8014a42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a44:	60ae      	str	r6, [r5, #8]
 8014a46:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a4a:	f04f 0800 	mov.w	r8, #0
 8014a4e:	19f6      	adds	r6, r6, r7
 8014a50:	f8c4 8010 	str.w	r8, [r4, #16]
 8014a54:	f040 80ac 	bne.w	8014bb0 <rcl_wait_set_resize+0x218>
 8014a58:	6960      	ldr	r0, [r4, #20]
 8014a5a:	b130      	cbz	r0, 8014a6a <rcl_wait_set_resize+0xd2>
 8014a5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014a5e:	4649      	mov	r1, r9
 8014a60:	4798      	blx	r3
 8014a62:	6166      	str	r6, [r4, #20]
 8014a64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a6a:	2600      	movs	r6, #0
 8014a6c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014a70:	616e      	str	r6, [r5, #20]
 8014a72:	6426      	str	r6, [r4, #64]	@ 0x40
 8014a74:	2f00      	cmp	r7, #0
 8014a76:	f040 80ad 	bne.w	8014bd4 <rcl_wait_set_resize+0x23c>
 8014a7a:	6928      	ldr	r0, [r5, #16]
 8014a7c:	b138      	cbz	r0, 8014a8e <rcl_wait_set_resize+0xf6>
 8014a7e:	4649      	mov	r1, r9
 8014a80:	47d0      	blx	sl
 8014a82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a84:	612f      	str	r7, [r5, #16]
 8014a86:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014a8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a90:	2600      	movs	r6, #0
 8014a92:	61ee      	str	r6, [r5, #28]
 8014a94:	61a6      	str	r6, [r4, #24]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	f040 80af 	bne.w	8014bfa <rcl_wait_set_resize+0x262>
 8014a9c:	69a8      	ldr	r0, [r5, #24]
 8014a9e:	b120      	cbz	r0, 8014aaa <rcl_wait_set_resize+0x112>
 8014aa0:	4649      	mov	r1, r9
 8014aa2:	47d0      	blx	sl
 8014aa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014aa6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014aa8:	61ab      	str	r3, [r5, #24]
 8014aaa:	6a20      	ldr	r0, [r4, #32]
 8014aac:	b128      	cbz	r0, 8014aba <rcl_wait_set_resize+0x122>
 8014aae:	4649      	mov	r1, r9
 8014ab0:	47d0      	blx	sl
 8014ab2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014aba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014abc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014abe:	2600      	movs	r6, #0
 8014ac0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014ac4:	626e      	str	r6, [r5, #36]	@ 0x24
 8014ac6:	6266      	str	r6, [r4, #36]	@ 0x24
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 80b6 	beq.w	8014c3a <rcl_wait_set_resize+0x2a2>
 8014ace:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014ad2:	6a28      	ldr	r0, [r5, #32]
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	4651      	mov	r1, sl
 8014ad8:	47c8      	blx	r9
 8014ada:	6228      	str	r0, [r5, #32]
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d04c      	beq.n	8014b7a <rcl_wait_set_resize+0x1e2>
 8014ae0:	4652      	mov	r2, sl
 8014ae2:	4631      	mov	r1, r6
 8014ae4:	f004 fc78 	bl	80193d8 <memset>
 8014ae8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014aec:	626b      	str	r3, [r5, #36]	@ 0x24
 8014aee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014af0:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014af2:	463a      	mov	r2, r7
 8014af4:	4651      	mov	r1, sl
 8014af6:	47c8      	blx	r9
 8014af8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014afa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014afc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014afe:	2c00      	cmp	r4, #0
 8014b00:	f000 80f0 	beq.w	8014ce4 <rcl_wait_set_resize+0x34c>
 8014b04:	4620      	mov	r0, r4
 8014b06:	4652      	mov	r2, sl
 8014b08:	4631      	mov	r1, r6
 8014b0a:	f004 fc65 	bl	80193d8 <memset>
 8014b0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b12:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b14:	2600      	movs	r6, #0
 8014b16:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b1a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014b1c:	6326      	str	r6, [r4, #48]	@ 0x30
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	f040 809d 	bne.w	8014c5e <rcl_wait_set_resize+0x2c6>
 8014b24:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014b26:	b120      	cbz	r0, 8014b32 <rcl_wait_set_resize+0x19a>
 8014b28:	4639      	mov	r1, r7
 8014b2a:	47c0      	blx	r8
 8014b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b30:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014b32:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b34:	b310      	cbz	r0, 8014b7c <rcl_wait_set_resize+0x1e4>
 8014b36:	4639      	mov	r1, r7
 8014b38:	47c0      	blx	r8
 8014b3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014b42:	b003      	add	sp, #12
 8014b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b48:	6800      	ldr	r0, [r0, #0]
 8014b4a:	b120      	cbz	r0, 8014b56 <rcl_wait_set_resize+0x1be>
 8014b4c:	4651      	mov	r1, sl
 8014b4e:	47d8      	blx	fp
 8014b50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b52:	f8c5 8000 	str.w	r8, [r5]
 8014b56:	68a0      	ldr	r0, [r4, #8]
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	f43f af61 	beq.w	8014a20 <rcl_wait_set_resize+0x88>
 8014b5e:	4651      	mov	r1, sl
 8014b60:	47d8      	blx	fp
 8014b62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b64:	2300      	movs	r3, #0
 8014b66:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014b6a:	e759      	b.n	8014a20 <rcl_wait_set_resize+0x88>
 8014b6c:	6828      	ldr	r0, [r5, #0]
 8014b6e:	9301      	str	r3, [sp, #4]
 8014b70:	4651      	mov	r1, sl
 8014b72:	47d8      	blx	fp
 8014b74:	9b01      	ldr	r3, [sp, #4]
 8014b76:	e9c5 3300 	strd	r3, r3, [r5]
 8014b7a:	200a      	movs	r0, #10
 8014b7c:	b003      	add	sp, #12
 8014b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b82:	00b4      	lsls	r4, r6, #2
 8014b84:	68a8      	ldr	r0, [r5, #8]
 8014b86:	464a      	mov	r2, r9
 8014b88:	4621      	mov	r1, r4
 8014b8a:	4798      	blx	r3
 8014b8c:	60a8      	str	r0, [r5, #8]
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d0f3      	beq.n	8014b7a <rcl_wait_set_resize+0x1e2>
 8014b92:	4622      	mov	r2, r4
 8014b94:	4641      	mov	r1, r8
 8014b96:	f004 fc1f 	bl	80193d8 <memset>
 8014b9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b9c:	60ee      	str	r6, [r5, #12]
 8014b9e:	f04f 0800 	mov.w	r8, #0
 8014ba2:	19f6      	adds	r6, r6, r7
 8014ba4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014ba8:	f8c4 8010 	str.w	r8, [r4, #16]
 8014bac:	f43f af54 	beq.w	8014a58 <rcl_wait_set_resize+0xc0>
 8014bb0:	00b6      	lsls	r6, r6, #2
 8014bb2:	464a      	mov	r2, r9
 8014bb4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014bb6:	6960      	ldr	r0, [r4, #20]
 8014bb8:	4631      	mov	r1, r6
 8014bba:	4798      	blx	r3
 8014bbc:	4681      	mov	r9, r0
 8014bbe:	6160      	str	r0, [r4, #20]
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d076      	beq.n	8014cb2 <rcl_wait_set_resize+0x31a>
 8014bc4:	4632      	mov	r2, r6
 8014bc6:	4641      	mov	r1, r8
 8014bc8:	f004 fc06 	bl	80193d8 <memset>
 8014bcc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014bd2:	e74a      	b.n	8014a6a <rcl_wait_set_resize+0xd2>
 8014bd4:	00bc      	lsls	r4, r7, #2
 8014bd6:	6928      	ldr	r0, [r5, #16]
 8014bd8:	464a      	mov	r2, r9
 8014bda:	4621      	mov	r1, r4
 8014bdc:	47c0      	blx	r8
 8014bde:	6128      	str	r0, [r5, #16]
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d0ca      	beq.n	8014b7a <rcl_wait_set_resize+0x1e2>
 8014be4:	4622      	mov	r2, r4
 8014be6:	4631      	mov	r1, r6
 8014be8:	f004 fbf6 	bl	80193d8 <memset>
 8014bec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bee:	616f      	str	r7, [r5, #20]
 8014bf0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014bf4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014bf8:	e749      	b.n	8014a8e <rcl_wait_set_resize+0xf6>
 8014bfa:	009c      	lsls	r4, r3, #2
 8014bfc:	69a8      	ldr	r0, [r5, #24]
 8014bfe:	464a      	mov	r2, r9
 8014c00:	4621      	mov	r1, r4
 8014c02:	47c0      	blx	r8
 8014c04:	61a8      	str	r0, [r5, #24]
 8014c06:	2800      	cmp	r0, #0
 8014c08:	d0b7      	beq.n	8014b7a <rcl_wait_set_resize+0x1e2>
 8014c0a:	4622      	mov	r2, r4
 8014c0c:	4631      	mov	r1, r6
 8014c0e:	f004 fbe3 	bl	80193d8 <memset>
 8014c12:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014c14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c16:	61eb      	str	r3, [r5, #28]
 8014c18:	6a38      	ldr	r0, [r7, #32]
 8014c1a:	61fe      	str	r6, [r7, #28]
 8014c1c:	464a      	mov	r2, r9
 8014c1e:	4621      	mov	r1, r4
 8014c20:	47c0      	blx	r8
 8014c22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c24:	6238      	str	r0, [r7, #32]
 8014c26:	6a1f      	ldr	r7, [r3, #32]
 8014c28:	2f00      	cmp	r7, #0
 8014c2a:	d054      	beq.n	8014cd6 <rcl_wait_set_resize+0x33e>
 8014c2c:	4622      	mov	r2, r4
 8014c2e:	4631      	mov	r1, r6
 8014c30:	4638      	mov	r0, r7
 8014c32:	f004 fbd1 	bl	80193d8 <memset>
 8014c36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c38:	e73f      	b.n	8014aba <rcl_wait_set_resize+0x122>
 8014c3a:	6a28      	ldr	r0, [r5, #32]
 8014c3c:	b120      	cbz	r0, 8014c48 <rcl_wait_set_resize+0x2b0>
 8014c3e:	4639      	mov	r1, r7
 8014c40:	47c0      	blx	r8
 8014c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c46:	622b      	str	r3, [r5, #32]
 8014c48:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	f43f af60 	beq.w	8014b10 <rcl_wait_set_resize+0x178>
 8014c50:	4639      	mov	r1, r7
 8014c52:	47c0      	blx	r8
 8014c54:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c56:	2300      	movs	r3, #0
 8014c58:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014c5c:	e758      	b.n	8014b10 <rcl_wait_set_resize+0x178>
 8014c5e:	009c      	lsls	r4, r3, #2
 8014c60:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014c62:	463a      	mov	r2, r7
 8014c64:	4621      	mov	r1, r4
 8014c66:	47c8      	blx	r9
 8014c68:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014c6a:	2800      	cmp	r0, #0
 8014c6c:	d085      	beq.n	8014b7a <rcl_wait_set_resize+0x1e2>
 8014c6e:	4622      	mov	r2, r4
 8014c70:	4631      	mov	r1, r6
 8014c72:	f004 fbb1 	bl	80193d8 <memset>
 8014c76:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014c7e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014c82:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014c86:	463a      	mov	r2, r7
 8014c88:	4621      	mov	r1, r4
 8014c8a:	47c8      	blx	r9
 8014c8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c8e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c94:	b36b      	cbz	r3, 8014cf2 <rcl_wait_set_resize+0x35a>
 8014c96:	4622      	mov	r2, r4
 8014c98:	4631      	mov	r1, r6
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f004 fb9c 	bl	80193d8 <memset>
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	b003      	add	sp, #12
 8014ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca8:	200b      	movs	r0, #11
 8014caa:	4770      	bx	lr
 8014cac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014cb0:	e764      	b.n	8014b7c <rcl_wait_set_resize+0x1e4>
 8014cb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cb4:	68a8      	ldr	r0, [r5, #8]
 8014cb6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cba:	4798      	blx	r3
 8014cbc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cbe:	6928      	ldr	r0, [r5, #16]
 8014cc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014cc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014cc4:	f8c5 900c 	str.w	r9, [r5, #12]
 8014cc8:	f8c5 9008 	str.w	r9, [r5, #8]
 8014ccc:	4790      	blx	r2
 8014cce:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014cd2:	200a      	movs	r0, #10
 8014cd4:	e752      	b.n	8014b7c <rcl_wait_set_resize+0x1e4>
 8014cd6:	69a8      	ldr	r0, [r5, #24]
 8014cd8:	4649      	mov	r1, r9
 8014cda:	47d0      	blx	sl
 8014cdc:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014ce0:	200a      	movs	r0, #10
 8014ce2:	e74b      	b.n	8014b7c <rcl_wait_set_resize+0x1e4>
 8014ce4:	6a28      	ldr	r0, [r5, #32]
 8014ce6:	4639      	mov	r1, r7
 8014ce8:	47c0      	blx	r8
 8014cea:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014cee:	200a      	movs	r0, #10
 8014cf0:	e744      	b.n	8014b7c <rcl_wait_set_resize+0x1e4>
 8014cf2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014cf4:	9301      	str	r3, [sp, #4]
 8014cf6:	4639      	mov	r1, r7
 8014cf8:	47c0      	blx	r8
 8014cfa:	9b01      	ldr	r3, [sp, #4]
 8014cfc:	200a      	movs	r0, #10
 8014cfe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014d02:	e73b      	b.n	8014b7c <rcl_wait_set_resize+0x1e4>

08014d04 <rcl_wait_set_init>:
 8014d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d08:	b084      	sub	sp, #16
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	a810      	add	r0, sp, #64	@ 0x40
 8014d0e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014d12:	460f      	mov	r7, r1
 8014d14:	4690      	mov	r8, r2
 8014d16:	4699      	mov	r9, r3
 8014d18:	f7f8 fd88 	bl	800d82c <rcutils_allocator_is_valid>
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d06b      	beq.n	8014df8 <rcl_wait_set_init+0xf4>
 8014d20:	2c00      	cmp	r4, #0
 8014d22:	d069      	beq.n	8014df8 <rcl_wait_set_init+0xf4>
 8014d24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d26:	b125      	cbz	r5, 8014d32 <rcl_wait_set_init+0x2e>
 8014d28:	2564      	movs	r5, #100	@ 0x64
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	b004      	add	sp, #16
 8014d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d32:	f1ba 0f00 	cmp.w	sl, #0
 8014d36:	d05f      	beq.n	8014df8 <rcl_wait_set_init+0xf4>
 8014d38:	4650      	mov	r0, sl
 8014d3a:	f7fe fcfd 	bl	8013738 <rcl_context_is_valid>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d067      	beq.n	8014e12 <rcl_wait_set_init+0x10e>
 8014d42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d44:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014d46:	205c      	movs	r0, #92	@ 0x5c
 8014d48:	4798      	blx	r3
 8014d4a:	6320      	str	r0, [r4, #48]	@ 0x30
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	d062      	beq.n	8014e16 <rcl_wait_set_init+0x112>
 8014d50:	4629      	mov	r1, r5
 8014d52:	225c      	movs	r2, #92	@ 0x5c
 8014d54:	f004 fb40 	bl	80193d8 <memset>
 8014d58:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014d5c:	eb03 0e02 	add.w	lr, r3, r2
 8014d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d62:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014d64:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014d68:	449e      	add	lr, r3
 8014d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d6e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014d72:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014d76:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014d7a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014d7e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014d82:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014d86:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014d8a:	f8da a000 	ldr.w	sl, [sl]
 8014d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d90:	44c6      	add	lr, r8
 8014d92:	f8dc 3000 	ldr.w	r3, [ip]
 8014d96:	602b      	str	r3, [r5, #0]
 8014d98:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014d9c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014da0:	f002 f912 	bl	8016fc8 <rmw_create_wait_set>
 8014da4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014da6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014da8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014daa:	b350      	cbz	r0, 8014e02 <rcl_wait_set_init+0xfe>
 8014dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dae:	9302      	str	r3, [sp, #8]
 8014db0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014db2:	9301      	str	r3, [sp, #4]
 8014db4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	4642      	mov	r2, r8
 8014dba:	464b      	mov	r3, r9
 8014dbc:	4639      	mov	r1, r7
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	f7ff fdea 	bl	8014998 <rcl_wait_set_resize>
 8014dc4:	4605      	mov	r5, r0
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d0af      	beq.n	8014d2a <rcl_wait_set_init+0x26>
 8014dca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014dcc:	bb2b      	cbnz	r3, 8014e1a <rcl_wait_set_init+0x116>
 8014dce:	2600      	movs	r6, #0
 8014dd0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014dd4:	9600      	str	r6, [sp, #0]
 8014dd6:	4633      	mov	r3, r6
 8014dd8:	4632      	mov	r2, r6
 8014dda:	4631      	mov	r1, r6
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f7ff fddb 	bl	8014998 <rcl_wait_set_resize>
 8014de2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014de4:	2800      	cmp	r0, #0
 8014de6:	d0a0      	beq.n	8014d2a <rcl_wait_set_init+0x26>
 8014de8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014dea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014dec:	4798      	blx	r3
 8014dee:	4628      	mov	r0, r5
 8014df0:	6326      	str	r6, [r4, #48]	@ 0x30
 8014df2:	b004      	add	sp, #16
 8014df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014df8:	250b      	movs	r5, #11
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	b004      	add	sp, #16
 8014dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e02:	2501      	movs	r5, #1
 8014e04:	f002 f8ea 	bl	8016fdc <rmw_destroy_wait_set>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	bf18      	it	ne
 8014e0c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014e10:	e7dd      	b.n	8014dce <rcl_wait_set_init+0xca>
 8014e12:	2565      	movs	r5, #101	@ 0x65
 8014e14:	e789      	b.n	8014d2a <rcl_wait_set_init+0x26>
 8014e16:	250a      	movs	r5, #10
 8014e18:	e787      	b.n	8014d2a <rcl_wait_set_init+0x26>
 8014e1a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e1c:	e7f2      	b.n	8014e04 <rcl_wait_set_init+0x100>
 8014e1e:	bf00      	nop

08014e20 <rcl_wait_set_add_guard_condition>:
 8014e20:	b318      	cbz	r0, 8014e6a <rcl_wait_set_add_guard_condition+0x4a>
 8014e22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	4604      	mov	r4, r0
 8014e28:	b30b      	cbz	r3, 8014e6e <rcl_wait_set_add_guard_condition+0x4e>
 8014e2a:	b319      	cbz	r1, 8014e74 <rcl_wait_set_add_guard_condition+0x54>
 8014e2c:	68dd      	ldr	r5, [r3, #12]
 8014e2e:	68c0      	ldr	r0, [r0, #12]
 8014e30:	4285      	cmp	r5, r0
 8014e32:	d217      	bcs.n	8014e64 <rcl_wait_set_add_guard_condition+0x44>
 8014e34:	68a0      	ldr	r0, [r4, #8]
 8014e36:	1c6e      	adds	r6, r5, #1
 8014e38:	60de      	str	r6, [r3, #12]
 8014e3a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e3e:	b102      	cbz	r2, 8014e42 <rcl_wait_set_add_guard_condition+0x22>
 8014e40:	6015      	str	r5, [r2, #0]
 8014e42:	4608      	mov	r0, r1
 8014e44:	f7fe fdfa 	bl	8013a3c <rcl_guard_condition_get_rmw_handle>
 8014e48:	b150      	cbz	r0, 8014e60 <rcl_wait_set_add_guard_condition+0x40>
 8014e4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e4c:	6842      	ldr	r2, [r0, #4]
 8014e4e:	695b      	ldr	r3, [r3, #20]
 8014e50:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e54:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014e56:	6913      	ldr	r3, [r2, #16]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	6113      	str	r3, [r2, #16]
 8014e5e:	bd70      	pop	{r4, r5, r6, pc}
 8014e60:	2001      	movs	r0, #1
 8014e62:	bd70      	pop	{r4, r5, r6, pc}
 8014e64:	f240 3086 	movw	r0, #902	@ 0x386
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	200b      	movs	r0, #11
 8014e6c:	4770      	bx	lr
 8014e6e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e72:	bd70      	pop	{r4, r5, r6, pc}
 8014e74:	200b      	movs	r0, #11
 8014e76:	bd70      	pop	{r4, r5, r6, pc}

08014e78 <rcl_wait_set_add_timer>:
 8014e78:	b328      	cbz	r0, 8014ec6 <rcl_wait_set_add_timer+0x4e>
 8014e7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e7c:	b570      	push	{r4, r5, r6, lr}
 8014e7e:	4604      	mov	r4, r0
 8014e80:	b31b      	cbz	r3, 8014eca <rcl_wait_set_add_timer+0x52>
 8014e82:	b329      	cbz	r1, 8014ed0 <rcl_wait_set_add_timer+0x58>
 8014e84:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014e86:	6965      	ldr	r5, [r4, #20]
 8014e88:	42a8      	cmp	r0, r5
 8014e8a:	d219      	bcs.n	8014ec0 <rcl_wait_set_add_timer+0x48>
 8014e8c:	6925      	ldr	r5, [r4, #16]
 8014e8e:	1c46      	adds	r6, r0, #1
 8014e90:	641e      	str	r6, [r3, #64]	@ 0x40
 8014e92:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014e96:	b102      	cbz	r2, 8014e9a <rcl_wait_set_add_timer+0x22>
 8014e98:	6010      	str	r0, [r2, #0]
 8014e9a:	4608      	mov	r0, r1
 8014e9c:	f7f7 fcf4 	bl	800c888 <rcl_timer_get_guard_condition>
 8014ea0:	b168      	cbz	r0, 8014ebe <rcl_wait_set_add_timer+0x46>
 8014ea2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014ea4:	68e3      	ldr	r3, [r4, #12]
 8014ea6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	441d      	add	r5, r3
 8014eac:	f7fe fdc6 	bl	8013a3c <rcl_guard_condition_get_rmw_handle>
 8014eb0:	b180      	cbz	r0, 8014ed4 <rcl_wait_set_add_timer+0x5c>
 8014eb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014eb4:	6842      	ldr	r2, [r0, #4]
 8014eb6:	695b      	ldr	r3, [r3, #20]
 8014eb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	bd70      	pop	{r4, r5, r6, pc}
 8014ec0:	f240 3086 	movw	r0, #902	@ 0x386
 8014ec4:	bd70      	pop	{r4, r5, r6, pc}
 8014ec6:	200b      	movs	r0, #11
 8014ec8:	4770      	bx	lr
 8014eca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ece:	bd70      	pop	{r4, r5, r6, pc}
 8014ed0:	200b      	movs	r0, #11
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	2001      	movs	r0, #1
 8014ed6:	bd70      	pop	{r4, r5, r6, pc}

08014ed8 <rcl_wait_set_add_client>:
 8014ed8:	b318      	cbz	r0, 8014f22 <rcl_wait_set_add_client+0x4a>
 8014eda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014edc:	b570      	push	{r4, r5, r6, lr}
 8014ede:	4604      	mov	r4, r0
 8014ee0:	b30b      	cbz	r3, 8014f26 <rcl_wait_set_add_client+0x4e>
 8014ee2:	b319      	cbz	r1, 8014f2c <rcl_wait_set_add_client+0x54>
 8014ee4:	699d      	ldr	r5, [r3, #24]
 8014ee6:	69c0      	ldr	r0, [r0, #28]
 8014ee8:	4285      	cmp	r5, r0
 8014eea:	d217      	bcs.n	8014f1c <rcl_wait_set_add_client+0x44>
 8014eec:	69a0      	ldr	r0, [r4, #24]
 8014eee:	1c6e      	adds	r6, r5, #1
 8014ef0:	619e      	str	r6, [r3, #24]
 8014ef2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014ef6:	b102      	cbz	r2, 8014efa <rcl_wait_set_add_client+0x22>
 8014ef8:	6015      	str	r5, [r2, #0]
 8014efa:	4608      	mov	r0, r1
 8014efc:	f7fe fb70 	bl	80135e0 <rcl_client_get_rmw_handle>
 8014f00:	b150      	cbz	r0, 8014f18 <rcl_wait_set_add_client+0x40>
 8014f02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f04:	6842      	ldr	r2, [r0, #4]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f0e:	69d3      	ldr	r3, [r2, #28]
 8014f10:	3301      	adds	r3, #1
 8014f12:	2000      	movs	r0, #0
 8014f14:	61d3      	str	r3, [r2, #28]
 8014f16:	bd70      	pop	{r4, r5, r6, pc}
 8014f18:	2001      	movs	r0, #1
 8014f1a:	bd70      	pop	{r4, r5, r6, pc}
 8014f1c:	f240 3086 	movw	r0, #902	@ 0x386
 8014f20:	bd70      	pop	{r4, r5, r6, pc}
 8014f22:	200b      	movs	r0, #11
 8014f24:	4770      	bx	lr
 8014f26:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	200b      	movs	r0, #11
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <rcl_wait_set_add_service>:
 8014f30:	b318      	cbz	r0, 8014f7a <rcl_wait_set_add_service+0x4a>
 8014f32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f34:	b570      	push	{r4, r5, r6, lr}
 8014f36:	4604      	mov	r4, r0
 8014f38:	b30b      	cbz	r3, 8014f7e <rcl_wait_set_add_service+0x4e>
 8014f3a:	b319      	cbz	r1, 8014f84 <rcl_wait_set_add_service+0x54>
 8014f3c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014f3e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014f40:	4285      	cmp	r5, r0
 8014f42:	d217      	bcs.n	8014f74 <rcl_wait_set_add_service+0x44>
 8014f44:	6a20      	ldr	r0, [r4, #32]
 8014f46:	1c6e      	adds	r6, r5, #1
 8014f48:	625e      	str	r6, [r3, #36]	@ 0x24
 8014f4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f4e:	b102      	cbz	r2, 8014f52 <rcl_wait_set_add_service+0x22>
 8014f50:	6015      	str	r5, [r2, #0]
 8014f52:	4608      	mov	r0, r1
 8014f54:	f7ff f95e 	bl	8014214 <rcl_service_get_rmw_handle>
 8014f58:	b150      	cbz	r0, 8014f70 <rcl_wait_set_add_service+0x40>
 8014f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f5c:	6842      	ldr	r2, [r0, #4]
 8014f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f66:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014f68:	3301      	adds	r3, #1
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	6293      	str	r3, [r2, #40]	@ 0x28
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}
 8014f70:	2001      	movs	r0, #1
 8014f72:	bd70      	pop	{r4, r5, r6, pc}
 8014f74:	f240 3086 	movw	r0, #902	@ 0x386
 8014f78:	bd70      	pop	{r4, r5, r6, pc}
 8014f7a:	200b      	movs	r0, #11
 8014f7c:	4770      	bx	lr
 8014f7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f82:	bd70      	pop	{r4, r5, r6, pc}
 8014f84:	200b      	movs	r0, #11
 8014f86:	bd70      	pop	{r4, r5, r6, pc}

08014f88 <rcl_wait>:
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	ed2d 8b02 	vpush	{d8}
 8014f90:	b08d      	sub	sp, #52	@ 0x34
 8014f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014f96:	2800      	cmp	r0, #0
 8014f98:	f000 8143 	beq.w	8015222 <rcl_wait+0x29a>
 8014f9c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014f9e:	4605      	mov	r5, r0
 8014fa0:	2e00      	cmp	r6, #0
 8014fa2:	f000 8112 	beq.w	80151ca <rcl_wait+0x242>
 8014fa6:	6843      	ldr	r3, [r0, #4]
 8014fa8:	b983      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014faa:	68eb      	ldr	r3, [r5, #12]
 8014fac:	b973      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014fae:	696b      	ldr	r3, [r5, #20]
 8014fb0:	b963      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014fb2:	69eb      	ldr	r3, [r5, #28]
 8014fb4:	b953      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014fb6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014fb8:	b943      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014fba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014fbc:	b933      	cbnz	r3, 8014fcc <rcl_wait+0x44>
 8014fbe:	f240 3085 	movw	r0, #901	@ 0x385
 8014fc2:	b00d      	add	sp, #52	@ 0x34
 8014fc4:	ecbd 8b02 	vpop	{d8}
 8014fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fcc:	9b04      	ldr	r3, [sp, #16]
 8014fce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014fd0:	2b01      	cmp	r3, #1
 8014fd2:	9b05      	ldr	r3, [sp, #20]
 8014fd4:	f173 0300 	sbcs.w	r3, r3, #0
 8014fd8:	f2c0 80f0 	blt.w	80151bc <rcl_wait+0x234>
 8014fdc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014fe0:	4643      	mov	r3, r8
 8014fe2:	2a00      	cmp	r2, #0
 8014fe4:	f000 8133 	beq.w	801524e <rcl_wait+0x2c6>
 8014fe8:	2400      	movs	r4, #0
 8014fea:	4613      	mov	r3, r2
 8014fec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015260 <rcl_wait+0x2d8>
 8014ff0:	46a2      	mov	sl, r4
 8014ff2:	46a3      	mov	fp, r4
 8014ff4:	f240 3921 	movw	r9, #801	@ 0x321
 8014ff8:	4632      	mov	r2, r6
 8014ffa:	e014      	b.n	8015026 <rcl_wait+0x9e>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d1e0      	bne.n	8014fc2 <rcl_wait+0x3a>
 8015000:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015004:	4542      	cmp	r2, r8
 8015006:	eb73 0107 	sbcs.w	r1, r3, r7
 801500a:	da03      	bge.n	8015014 <rcl_wait+0x8c>
 801500c:	4690      	mov	r8, r2
 801500e:	461f      	mov	r7, r3
 8015010:	f04f 0b01 	mov.w	fp, #1
 8015014:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015016:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015018:	3401      	adds	r4, #1
 801501a:	f14a 0a00 	adc.w	sl, sl, #0
 801501e:	429c      	cmp	r4, r3
 8015020:	f17a 0100 	sbcs.w	r1, sl, #0
 8015024:	d228      	bcs.n	8015078 <rcl_wait+0xf0>
 8015026:	6928      	ldr	r0, [r5, #16]
 8015028:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801502c:	a908      	add	r1, sp, #32
 801502e:	00a6      	lsls	r6, r4, #2
 8015030:	2800      	cmp	r0, #0
 8015032:	d0f1      	beq.n	8015018 <rcl_wait+0x90>
 8015034:	68eb      	ldr	r3, [r5, #12]
 8015036:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801503a:	4423      	add	r3, r4
 801503c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015040:	f1be 0f00 	cmp.w	lr, #0
 8015044:	d006      	beq.n	8015054 <rcl_wait+0xcc>
 8015046:	6913      	ldr	r3, [r2, #16]
 8015048:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801504c:	3301      	adds	r3, #1
 801504e:	6113      	str	r3, [r2, #16]
 8015050:	692b      	ldr	r3, [r5, #16]
 8015052:	5998      	ldr	r0, [r3, r6]
 8015054:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015058:	f7f7 fbe4 	bl	800c824 <rcl_timer_get_time_until_next_call>
 801505c:	4548      	cmp	r0, r9
 801505e:	d1cd      	bne.n	8014ffc <rcl_wait+0x74>
 8015060:	692b      	ldr	r3, [r5, #16]
 8015062:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015064:	2100      	movs	r1, #0
 8015066:	5199      	str	r1, [r3, r6]
 8015068:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801506a:	3401      	adds	r4, #1
 801506c:	f14a 0a00 	adc.w	sl, sl, #0
 8015070:	429c      	cmp	r4, r3
 8015072:	f17a 0100 	sbcs.w	r1, sl, #0
 8015076:	d3d6      	bcc.n	8015026 <rcl_wait+0x9e>
 8015078:	4616      	mov	r6, r2
 801507a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801507e:	4313      	orrs	r3, r2
 8015080:	46d9      	mov	r9, fp
 8015082:	f040 80a9 	bne.w	80151d8 <rcl_wait+0x250>
 8015086:	2300      	movs	r3, #0
 8015088:	2200      	movs	r2, #0
 801508a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801508e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015092:	ab08      	add	r3, sp, #32
 8015094:	9302      	str	r3, [sp, #8]
 8015096:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015098:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801509c:	e9cd 3200 	strd	r3, r2, [sp]
 80150a0:	f106 0110 	add.w	r1, r6, #16
 80150a4:	f106 031c 	add.w	r3, r6, #28
 80150a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80150ac:	1d30      	adds	r0, r6, #4
 80150ae:	f001 fe13 	bl	8016cd8 <rmw_wait>
 80150b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150b6:	4680      	mov	r8, r0
 80150b8:	b1ca      	cbz	r2, 80150ee <rcl_wait+0x166>
 80150ba:	2400      	movs	r4, #0
 80150bc:	4627      	mov	r7, r4
 80150be:	692a      	ldr	r2, [r5, #16]
 80150c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80150c4:	f10d 011f 	add.w	r1, sp, #31
 80150c8:	00a6      	lsls	r6, r4, #2
 80150ca:	b160      	cbz	r0, 80150e6 <rcl_wait+0x15e>
 80150cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80150d0:	f7f7 fb6e 	bl	800c7b0 <rcl_timer_is_ready>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	f47f af74 	bne.w	8014fc2 <rcl_wait+0x3a>
 80150da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80150de:	b90b      	cbnz	r3, 80150e4 <rcl_wait+0x15c>
 80150e0:	692a      	ldr	r2, [r5, #16]
 80150e2:	5193      	str	r3, [r2, r6]
 80150e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80150e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150e8:	3401      	adds	r4, #1
 80150ea:	42a2      	cmp	r2, r4
 80150ec:	d8e7      	bhi.n	80150be <rcl_wait+0x136>
 80150ee:	f038 0002 	bics.w	r0, r8, #2
 80150f2:	f040 8090 	bne.w	8015216 <rcl_wait+0x28e>
 80150f6:	686e      	ldr	r6, [r5, #4]
 80150f8:	4602      	mov	r2, r0
 80150fa:	b91e      	cbnz	r6, 8015104 <rcl_wait+0x17c>
 80150fc:	e00d      	b.n	801511a <rcl_wait+0x192>
 80150fe:	3201      	adds	r2, #1
 8015100:	42b2      	cmp	r2, r6
 8015102:	d00a      	beq.n	801511a <rcl_wait+0x192>
 8015104:	6899      	ldr	r1, [r3, #8]
 8015106:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801510a:	2900      	cmp	r1, #0
 801510c:	d1f7      	bne.n	80150fe <rcl_wait+0x176>
 801510e:	682c      	ldr	r4, [r5, #0]
 8015110:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015114:	3201      	adds	r2, #1
 8015116:	42b2      	cmp	r2, r6
 8015118:	d1f4      	bne.n	8015104 <rcl_wait+0x17c>
 801511a:	68ee      	ldr	r6, [r5, #12]
 801511c:	2200      	movs	r2, #0
 801511e:	b91e      	cbnz	r6, 8015128 <rcl_wait+0x1a0>
 8015120:	e00d      	b.n	801513e <rcl_wait+0x1b6>
 8015122:	3201      	adds	r2, #1
 8015124:	42b2      	cmp	r2, r6
 8015126:	d00a      	beq.n	801513e <rcl_wait+0x1b6>
 8015128:	6959      	ldr	r1, [r3, #20]
 801512a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801512e:	2900      	cmp	r1, #0
 8015130:	d1f7      	bne.n	8015122 <rcl_wait+0x19a>
 8015132:	68ac      	ldr	r4, [r5, #8]
 8015134:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015138:	3201      	adds	r2, #1
 801513a:	42b2      	cmp	r2, r6
 801513c:	d1f4      	bne.n	8015128 <rcl_wait+0x1a0>
 801513e:	69ee      	ldr	r6, [r5, #28]
 8015140:	2200      	movs	r2, #0
 8015142:	b91e      	cbnz	r6, 801514c <rcl_wait+0x1c4>
 8015144:	e00d      	b.n	8015162 <rcl_wait+0x1da>
 8015146:	3201      	adds	r2, #1
 8015148:	42b2      	cmp	r2, r6
 801514a:	d00a      	beq.n	8015162 <rcl_wait+0x1da>
 801514c:	6a19      	ldr	r1, [r3, #32]
 801514e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015152:	2900      	cmp	r1, #0
 8015154:	d1f7      	bne.n	8015146 <rcl_wait+0x1be>
 8015156:	69ac      	ldr	r4, [r5, #24]
 8015158:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801515c:	3201      	adds	r2, #1
 801515e:	42b2      	cmp	r2, r6
 8015160:	d1f4      	bne.n	801514c <rcl_wait+0x1c4>
 8015162:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015164:	2200      	movs	r2, #0
 8015166:	b91e      	cbnz	r6, 8015170 <rcl_wait+0x1e8>
 8015168:	e00d      	b.n	8015186 <rcl_wait+0x1fe>
 801516a:	3201      	adds	r2, #1
 801516c:	4296      	cmp	r6, r2
 801516e:	d00a      	beq.n	8015186 <rcl_wait+0x1fe>
 8015170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015172:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015176:	2900      	cmp	r1, #0
 8015178:	d1f7      	bne.n	801516a <rcl_wait+0x1e2>
 801517a:	6a2c      	ldr	r4, [r5, #32]
 801517c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015180:	3201      	adds	r2, #1
 8015182:	4296      	cmp	r6, r2
 8015184:	d1f4      	bne.n	8015170 <rcl_wait+0x1e8>
 8015186:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015188:	2200      	movs	r2, #0
 801518a:	b91e      	cbnz	r6, 8015194 <rcl_wait+0x20c>
 801518c:	e00d      	b.n	80151aa <rcl_wait+0x222>
 801518e:	3201      	adds	r2, #1
 8015190:	42b2      	cmp	r2, r6
 8015192:	d00a      	beq.n	80151aa <rcl_wait+0x222>
 8015194:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801519a:	2900      	cmp	r1, #0
 801519c:	d1f7      	bne.n	801518e <rcl_wait+0x206>
 801519e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80151a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151a4:	3201      	adds	r2, #1
 80151a6:	42b2      	cmp	r2, r6
 80151a8:	d1f4      	bne.n	8015194 <rcl_wait+0x20c>
 80151aa:	f1b8 0f02 	cmp.w	r8, #2
 80151ae:	f47f af08 	bne.w	8014fc2 <rcl_wait+0x3a>
 80151b2:	464b      	mov	r3, r9
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	bf08      	it	eq
 80151b8:	2002      	moveq	r0, #2
 80151ba:	e702      	b.n	8014fc2 <rcl_wait+0x3a>
 80151bc:	2a00      	cmp	r2, #0
 80151be:	d03a      	beq.n	8015236 <rcl_wait+0x2ae>
 80151c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80151c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80151c8:	e70e      	b.n	8014fe8 <rcl_wait+0x60>
 80151ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151ce:	b00d      	add	sp, #52	@ 0x34
 80151d0:	ecbd 8b02 	vpop	{d8}
 80151d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d8:	9b04      	ldr	r3, [sp, #16]
 80151da:	2b01      	cmp	r3, #1
 80151dc:	9b05      	ldr	r3, [sp, #20]
 80151de:	f173 0300 	sbcs.w	r3, r3, #0
 80151e2:	db24      	blt.n	801522e <rcl_wait+0x2a6>
 80151e4:	2f00      	cmp	r7, #0
 80151e6:	bfbc      	itt	lt
 80151e8:	f04f 0800 	movlt.w	r8, #0
 80151ec:	4647      	movlt	r7, r8
 80151ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8015268 <rcl_wait+0x2e0>)
 80151f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f4:	4640      	mov	r0, r8
 80151f6:	4639      	mov	r1, r7
 80151f8:	f7eb fd18 	bl	8000c2c <__aeabi_ldivmod>
 80151fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8015268 <rcl_wait+0x2e0>)
 80151fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015202:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015206:	4640      	mov	r0, r8
 8015208:	4639      	mov	r1, r7
 801520a:	f7eb fd0f 	bl	8000c2c <__aeabi_ldivmod>
 801520e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015212:	ab08      	add	r3, sp, #32
 8015214:	e73e      	b.n	8015094 <rcl_wait+0x10c>
 8015216:	2001      	movs	r0, #1
 8015218:	b00d      	add	sp, #52	@ 0x34
 801521a:	ecbd 8b02 	vpop	{d8}
 801521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015222:	200b      	movs	r0, #11
 8015224:	b00d      	add	sp, #52	@ 0x34
 8015226:	ecbd 8b02 	vpop	{d8}
 801522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522e:	465b      	mov	r3, fp
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1d7      	bne.n	80151e4 <rcl_wait+0x25c>
 8015234:	e72e      	b.n	8015094 <rcl_wait+0x10c>
 8015236:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801523a:	430b      	orrs	r3, r1
 801523c:	bf08      	it	eq
 801523e:	4691      	moveq	r9, r2
 8015240:	f43f af21 	beq.w	8015086 <rcl_wait+0xfe>
 8015244:	9b04      	ldr	r3, [sp, #16]
 8015246:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801524a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801524e:	2b01      	cmp	r3, #1
 8015250:	9b05      	ldr	r3, [sp, #20]
 8015252:	f173 0300 	sbcs.w	r3, r3, #0
 8015256:	f04f 0300 	mov.w	r3, #0
 801525a:	4699      	mov	r9, r3
 801525c:	dac2      	bge.n	80151e4 <rcl_wait+0x25c>
 801525e:	e719      	b.n	8015094 <rcl_wait+0x10c>
 8015260:	ffffffff 	.word	0xffffffff
 8015264:	7fffffff 	.word	0x7fffffff
 8015268:	3b9aca00 	.word	0x3b9aca00
 801526c:	00000000 	.word	0x00000000

08015270 <rcl_action_take_goal_response>:
 8015270:	2800      	cmp	r0, #0
 8015272:	d039      	beq.n	80152e8 <rcl_action_take_goal_response+0x78>
 8015274:	b570      	push	{r4, r5, r6, lr}
 8015276:	4604      	mov	r4, r0
 8015278:	6800      	ldr	r0, [r0, #0]
 801527a:	b380      	cbz	r0, 80152de <rcl_action_take_goal_response+0x6e>
 801527c:	460d      	mov	r5, r1
 801527e:	4616      	mov	r6, r2
 8015280:	f7fe fa32 	bl	80136e8 <rcl_client_is_valid>
 8015284:	b330      	cbz	r0, 80152d4 <rcl_action_take_goal_response+0x64>
 8015286:	6820      	ldr	r0, [r4, #0]
 8015288:	3004      	adds	r0, #4
 801528a:	f7fe fa2d 	bl	80136e8 <rcl_client_is_valid>
 801528e:	b308      	cbz	r0, 80152d4 <rcl_action_take_goal_response+0x64>
 8015290:	6820      	ldr	r0, [r4, #0]
 8015292:	3008      	adds	r0, #8
 8015294:	f7fe fa28 	bl	80136e8 <rcl_client_is_valid>
 8015298:	b1e0      	cbz	r0, 80152d4 <rcl_action_take_goal_response+0x64>
 801529a:	6820      	ldr	r0, [r4, #0]
 801529c:	300c      	adds	r0, #12
 801529e:	f7f7 f877 	bl	800c390 <rcl_subscription_is_valid>
 80152a2:	b1b8      	cbz	r0, 80152d4 <rcl_action_take_goal_response+0x64>
 80152a4:	6820      	ldr	r0, [r4, #0]
 80152a6:	3010      	adds	r0, #16
 80152a8:	f7f7 f872 	bl	800c390 <rcl_subscription_is_valid>
 80152ac:	b190      	cbz	r0, 80152d4 <rcl_action_take_goal_response+0x64>
 80152ae:	b1cd      	cbz	r5, 80152e4 <rcl_action_take_goal_response+0x74>
 80152b0:	b1c6      	cbz	r6, 80152e4 <rcl_action_take_goal_response+0x74>
 80152b2:	6820      	ldr	r0, [r4, #0]
 80152b4:	4632      	mov	r2, r6
 80152b6:	4629      	mov	r1, r5
 80152b8:	f7fe f9ce 	bl	8013658 <rcl_take_response>
 80152bc:	b148      	cbz	r0, 80152d2 <rcl_action_take_goal_response+0x62>
 80152be:	280a      	cmp	r0, #10
 80152c0:	d007      	beq.n	80152d2 <rcl_action_take_goal_response+0x62>
 80152c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80152c6:	f640 0337 	movw	r3, #2103	@ 0x837
 80152ca:	4290      	cmp	r0, r2
 80152cc:	bf0c      	ite	eq
 80152ce:	4618      	moveq	r0, r3
 80152d0:	2001      	movne	r0, #1
 80152d2:	bd70      	pop	{r4, r5, r6, pc}
 80152d4:	f7f8 fb8c 	bl	800d9f0 <rcutils_reset_error>
 80152d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80152dc:	bd70      	pop	{r4, r5, r6, pc}
 80152de:	f640 0036 	movw	r0, #2102	@ 0x836
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	200b      	movs	r0, #11
 80152e6:	bd70      	pop	{r4, r5, r6, pc}
 80152e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop

080152f0 <rcl_action_send_result_request>:
 80152f0:	b390      	cbz	r0, 8015358 <rcl_action_send_result_request+0x68>
 80152f2:	b570      	push	{r4, r5, r6, lr}
 80152f4:	4604      	mov	r4, r0
 80152f6:	6800      	ldr	r0, [r0, #0]
 80152f8:	b348      	cbz	r0, 801534e <rcl_action_send_result_request+0x5e>
 80152fa:	460d      	mov	r5, r1
 80152fc:	4616      	mov	r6, r2
 80152fe:	f7fe f9f3 	bl	80136e8 <rcl_client_is_valid>
 8015302:	b1f8      	cbz	r0, 8015344 <rcl_action_send_result_request+0x54>
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	3004      	adds	r0, #4
 8015308:	f7fe f9ee 	bl	80136e8 <rcl_client_is_valid>
 801530c:	b1d0      	cbz	r0, 8015344 <rcl_action_send_result_request+0x54>
 801530e:	6820      	ldr	r0, [r4, #0]
 8015310:	3008      	adds	r0, #8
 8015312:	f7fe f9e9 	bl	80136e8 <rcl_client_is_valid>
 8015316:	b1a8      	cbz	r0, 8015344 <rcl_action_send_result_request+0x54>
 8015318:	6820      	ldr	r0, [r4, #0]
 801531a:	300c      	adds	r0, #12
 801531c:	f7f7 f838 	bl	800c390 <rcl_subscription_is_valid>
 8015320:	b180      	cbz	r0, 8015344 <rcl_action_send_result_request+0x54>
 8015322:	6820      	ldr	r0, [r4, #0]
 8015324:	3010      	adds	r0, #16
 8015326:	f7f7 f833 	bl	800c390 <rcl_subscription_is_valid>
 801532a:	b158      	cbz	r0, 8015344 <rcl_action_send_result_request+0x54>
 801532c:	b195      	cbz	r5, 8015354 <rcl_action_send_result_request+0x64>
 801532e:	b18e      	cbz	r6, 8015354 <rcl_action_send_result_request+0x64>
 8015330:	6820      	ldr	r0, [r4, #0]
 8015332:	4632      	mov	r2, r6
 8015334:	4629      	mov	r1, r5
 8015336:	3008      	adds	r0, #8
 8015338:	f7fe f958 	bl	80135ec <rcl_send_request>
 801533c:	3800      	subs	r0, #0
 801533e:	bf18      	it	ne
 8015340:	2001      	movne	r0, #1
 8015342:	bd70      	pop	{r4, r5, r6, pc}
 8015344:	f7f8 fb54 	bl	800d9f0 <rcutils_reset_error>
 8015348:	f640 0036 	movw	r0, #2102	@ 0x836
 801534c:	bd70      	pop	{r4, r5, r6, pc}
 801534e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015352:	bd70      	pop	{r4, r5, r6, pc}
 8015354:	200b      	movs	r0, #11
 8015356:	bd70      	pop	{r4, r5, r6, pc}
 8015358:	f640 0036 	movw	r0, #2102	@ 0x836
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop

08015360 <rcl_action_take_result_response>:
 8015360:	2800      	cmp	r0, #0
 8015362:	d03a      	beq.n	80153da <rcl_action_take_result_response+0x7a>
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	6800      	ldr	r0, [r0, #0]
 801536a:	b388      	cbz	r0, 80153d0 <rcl_action_take_result_response+0x70>
 801536c:	460d      	mov	r5, r1
 801536e:	4616      	mov	r6, r2
 8015370:	f7fe f9ba 	bl	80136e8 <rcl_client_is_valid>
 8015374:	b338      	cbz	r0, 80153c6 <rcl_action_take_result_response+0x66>
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	3004      	adds	r0, #4
 801537a:	f7fe f9b5 	bl	80136e8 <rcl_client_is_valid>
 801537e:	b310      	cbz	r0, 80153c6 <rcl_action_take_result_response+0x66>
 8015380:	6820      	ldr	r0, [r4, #0]
 8015382:	3008      	adds	r0, #8
 8015384:	f7fe f9b0 	bl	80136e8 <rcl_client_is_valid>
 8015388:	b1e8      	cbz	r0, 80153c6 <rcl_action_take_result_response+0x66>
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	300c      	adds	r0, #12
 801538e:	f7f6 ffff 	bl	800c390 <rcl_subscription_is_valid>
 8015392:	b1c0      	cbz	r0, 80153c6 <rcl_action_take_result_response+0x66>
 8015394:	6820      	ldr	r0, [r4, #0]
 8015396:	3010      	adds	r0, #16
 8015398:	f7f6 fffa 	bl	800c390 <rcl_subscription_is_valid>
 801539c:	b198      	cbz	r0, 80153c6 <rcl_action_take_result_response+0x66>
 801539e:	b1d5      	cbz	r5, 80153d6 <rcl_action_take_result_response+0x76>
 80153a0:	b1ce      	cbz	r6, 80153d6 <rcl_action_take_result_response+0x76>
 80153a2:	6820      	ldr	r0, [r4, #0]
 80153a4:	4632      	mov	r2, r6
 80153a6:	4629      	mov	r1, r5
 80153a8:	3008      	adds	r0, #8
 80153aa:	f7fe f955 	bl	8013658 <rcl_take_response>
 80153ae:	b148      	cbz	r0, 80153c4 <rcl_action_take_result_response+0x64>
 80153b0:	280a      	cmp	r0, #10
 80153b2:	d007      	beq.n	80153c4 <rcl_action_take_result_response+0x64>
 80153b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80153b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80153bc:	4290      	cmp	r0, r2
 80153be:	bf0c      	ite	eq
 80153c0:	4618      	moveq	r0, r3
 80153c2:	2001      	movne	r0, #1
 80153c4:	bd70      	pop	{r4, r5, r6, pc}
 80153c6:	f7f8 fb13 	bl	800d9f0 <rcutils_reset_error>
 80153ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80153ce:	bd70      	pop	{r4, r5, r6, pc}
 80153d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
 80153d6:	200b      	movs	r0, #11
 80153d8:	bd70      	pop	{r4, r5, r6, pc}
 80153da:	f640 0036 	movw	r0, #2102	@ 0x836
 80153de:	4770      	bx	lr

080153e0 <rcl_action_take_cancel_response>:
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d03a      	beq.n	801545a <rcl_action_take_cancel_response+0x7a>
 80153e4:	b570      	push	{r4, r5, r6, lr}
 80153e6:	4604      	mov	r4, r0
 80153e8:	6800      	ldr	r0, [r0, #0]
 80153ea:	b388      	cbz	r0, 8015450 <rcl_action_take_cancel_response+0x70>
 80153ec:	460d      	mov	r5, r1
 80153ee:	4616      	mov	r6, r2
 80153f0:	f7fe f97a 	bl	80136e8 <rcl_client_is_valid>
 80153f4:	b338      	cbz	r0, 8015446 <rcl_action_take_cancel_response+0x66>
 80153f6:	6820      	ldr	r0, [r4, #0]
 80153f8:	3004      	adds	r0, #4
 80153fa:	f7fe f975 	bl	80136e8 <rcl_client_is_valid>
 80153fe:	b310      	cbz	r0, 8015446 <rcl_action_take_cancel_response+0x66>
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	3008      	adds	r0, #8
 8015404:	f7fe f970 	bl	80136e8 <rcl_client_is_valid>
 8015408:	b1e8      	cbz	r0, 8015446 <rcl_action_take_cancel_response+0x66>
 801540a:	6820      	ldr	r0, [r4, #0]
 801540c:	300c      	adds	r0, #12
 801540e:	f7f6 ffbf 	bl	800c390 <rcl_subscription_is_valid>
 8015412:	b1c0      	cbz	r0, 8015446 <rcl_action_take_cancel_response+0x66>
 8015414:	6820      	ldr	r0, [r4, #0]
 8015416:	3010      	adds	r0, #16
 8015418:	f7f6 ffba 	bl	800c390 <rcl_subscription_is_valid>
 801541c:	b198      	cbz	r0, 8015446 <rcl_action_take_cancel_response+0x66>
 801541e:	b1d5      	cbz	r5, 8015456 <rcl_action_take_cancel_response+0x76>
 8015420:	b1ce      	cbz	r6, 8015456 <rcl_action_take_cancel_response+0x76>
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	4632      	mov	r2, r6
 8015426:	4629      	mov	r1, r5
 8015428:	3004      	adds	r0, #4
 801542a:	f7fe f915 	bl	8013658 <rcl_take_response>
 801542e:	b148      	cbz	r0, 8015444 <rcl_action_take_cancel_response+0x64>
 8015430:	280a      	cmp	r0, #10
 8015432:	d007      	beq.n	8015444 <rcl_action_take_cancel_response+0x64>
 8015434:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015438:	f640 0337 	movw	r3, #2103	@ 0x837
 801543c:	4290      	cmp	r0, r2
 801543e:	bf0c      	ite	eq
 8015440:	4618      	moveq	r0, r3
 8015442:	2001      	movne	r0, #1
 8015444:	bd70      	pop	{r4, r5, r6, pc}
 8015446:	f7f8 fad3 	bl	800d9f0 <rcutils_reset_error>
 801544a:	f640 0036 	movw	r0, #2102	@ 0x836
 801544e:	bd70      	pop	{r4, r5, r6, pc}
 8015450:	f640 0036 	movw	r0, #2102	@ 0x836
 8015454:	bd70      	pop	{r4, r5, r6, pc}
 8015456:	200b      	movs	r0, #11
 8015458:	bd70      	pop	{r4, r5, r6, pc}
 801545a:	f640 0036 	movw	r0, #2102	@ 0x836
 801545e:	4770      	bx	lr

08015460 <rcl_action_take_feedback>:
 8015460:	2800      	cmp	r0, #0
 8015462:	d038      	beq.n	80154d6 <rcl_action_take_feedback+0x76>
 8015464:	b530      	push	{r4, r5, lr}
 8015466:	4604      	mov	r4, r0
 8015468:	6800      	ldr	r0, [r0, #0]
 801546a:	b091      	sub	sp, #68	@ 0x44
 801546c:	b378      	cbz	r0, 80154ce <rcl_action_take_feedback+0x6e>
 801546e:	460d      	mov	r5, r1
 8015470:	f7fe f93a 	bl	80136e8 <rcl_client_is_valid>
 8015474:	b328      	cbz	r0, 80154c2 <rcl_action_take_feedback+0x62>
 8015476:	6820      	ldr	r0, [r4, #0]
 8015478:	3004      	adds	r0, #4
 801547a:	f7fe f935 	bl	80136e8 <rcl_client_is_valid>
 801547e:	b300      	cbz	r0, 80154c2 <rcl_action_take_feedback+0x62>
 8015480:	6820      	ldr	r0, [r4, #0]
 8015482:	3008      	adds	r0, #8
 8015484:	f7fe f930 	bl	80136e8 <rcl_client_is_valid>
 8015488:	b1d8      	cbz	r0, 80154c2 <rcl_action_take_feedback+0x62>
 801548a:	6820      	ldr	r0, [r4, #0]
 801548c:	300c      	adds	r0, #12
 801548e:	f7f6 ff7f 	bl	800c390 <rcl_subscription_is_valid>
 8015492:	b1b0      	cbz	r0, 80154c2 <rcl_action_take_feedback+0x62>
 8015494:	6820      	ldr	r0, [r4, #0]
 8015496:	3010      	adds	r0, #16
 8015498:	f7f6 ff7a 	bl	800c390 <rcl_subscription_is_valid>
 801549c:	b188      	cbz	r0, 80154c2 <rcl_action_take_feedback+0x62>
 801549e:	b1ed      	cbz	r5, 80154dc <rcl_action_take_feedback+0x7c>
 80154a0:	6820      	ldr	r0, [r4, #0]
 80154a2:	2300      	movs	r3, #0
 80154a4:	466a      	mov	r2, sp
 80154a6:	4629      	mov	r1, r5
 80154a8:	300c      	adds	r0, #12
 80154aa:	f7f6 ff13 	bl	800c2d4 <rcl_take>
 80154ae:	b160      	cbz	r0, 80154ca <rcl_action_take_feedback+0x6a>
 80154b0:	f240 1391 	movw	r3, #401	@ 0x191
 80154b4:	4298      	cmp	r0, r3
 80154b6:	d014      	beq.n	80154e2 <rcl_action_take_feedback+0x82>
 80154b8:	280a      	cmp	r0, #10
 80154ba:	bf18      	it	ne
 80154bc:	2001      	movne	r0, #1
 80154be:	b011      	add	sp, #68	@ 0x44
 80154c0:	bd30      	pop	{r4, r5, pc}
 80154c2:	f7f8 fa95 	bl	800d9f0 <rcutils_reset_error>
 80154c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80154ca:	b011      	add	sp, #68	@ 0x44
 80154cc:	bd30      	pop	{r4, r5, pc}
 80154ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80154d2:	b011      	add	sp, #68	@ 0x44
 80154d4:	bd30      	pop	{r4, r5, pc}
 80154d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80154da:	4770      	bx	lr
 80154dc:	200b      	movs	r0, #11
 80154de:	b011      	add	sp, #68	@ 0x44
 80154e0:	bd30      	pop	{r4, r5, pc}
 80154e2:	f640 0037 	movw	r0, #2103	@ 0x837
 80154e6:	e7f0      	b.n	80154ca <rcl_action_take_feedback+0x6a>

080154e8 <rcl_action_wait_set_add_action_client>:
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d048      	beq.n	801557e <rcl_action_wait_set_add_action_client+0x96>
 80154ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ee:	460c      	mov	r4, r1
 80154f0:	2900      	cmp	r1, #0
 80154f2:	d03c      	beq.n	801556e <rcl_action_wait_set_add_action_client+0x86>
 80154f4:	4605      	mov	r5, r0
 80154f6:	6808      	ldr	r0, [r1, #0]
 80154f8:	2800      	cmp	r0, #0
 80154fa:	d038      	beq.n	801556e <rcl_action_wait_set_add_action_client+0x86>
 80154fc:	4617      	mov	r7, r2
 80154fe:	461e      	mov	r6, r3
 8015500:	f7fe f8f2 	bl	80136e8 <rcl_client_is_valid>
 8015504:	b3b0      	cbz	r0, 8015574 <rcl_action_wait_set_add_action_client+0x8c>
 8015506:	6820      	ldr	r0, [r4, #0]
 8015508:	3004      	adds	r0, #4
 801550a:	f7fe f8ed 	bl	80136e8 <rcl_client_is_valid>
 801550e:	b388      	cbz	r0, 8015574 <rcl_action_wait_set_add_action_client+0x8c>
 8015510:	6820      	ldr	r0, [r4, #0]
 8015512:	3008      	adds	r0, #8
 8015514:	f7fe f8e8 	bl	80136e8 <rcl_client_is_valid>
 8015518:	b360      	cbz	r0, 8015574 <rcl_action_wait_set_add_action_client+0x8c>
 801551a:	6820      	ldr	r0, [r4, #0]
 801551c:	300c      	adds	r0, #12
 801551e:	f7f6 ff37 	bl	800c390 <rcl_subscription_is_valid>
 8015522:	b338      	cbz	r0, 8015574 <rcl_action_wait_set_add_action_client+0x8c>
 8015524:	6820      	ldr	r0, [r4, #0]
 8015526:	3010      	adds	r0, #16
 8015528:	f7f6 ff32 	bl	800c390 <rcl_subscription_is_valid>
 801552c:	b310      	cbz	r0, 8015574 <rcl_action_wait_set_add_action_client+0x8c>
 801552e:	6821      	ldr	r1, [r4, #0]
 8015530:	4628      	mov	r0, r5
 8015532:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015536:	f7ff fccf 	bl	8014ed8 <rcl_wait_set_add_client>
 801553a:	b9b8      	cbnz	r0, 801556c <rcl_action_wait_set_add_action_client+0x84>
 801553c:	6821      	ldr	r1, [r4, #0]
 801553e:	4628      	mov	r0, r5
 8015540:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015544:	3104      	adds	r1, #4
 8015546:	f7ff fcc7 	bl	8014ed8 <rcl_wait_set_add_client>
 801554a:	b978      	cbnz	r0, 801556c <rcl_action_wait_set_add_action_client+0x84>
 801554c:	6821      	ldr	r1, [r4, #0]
 801554e:	4628      	mov	r0, r5
 8015550:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015554:	3108      	adds	r1, #8
 8015556:	f7ff fcbf 	bl	8014ed8 <rcl_wait_set_add_client>
 801555a:	b938      	cbnz	r0, 801556c <rcl_action_wait_set_add_action_client+0x84>
 801555c:	6821      	ldr	r1, [r4, #0]
 801555e:	4628      	mov	r0, r5
 8015560:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015564:	310c      	adds	r1, #12
 8015566:	f7ff f96f 	bl	8014848 <rcl_wait_set_add_subscription>
 801556a:	b158      	cbz	r0, 8015584 <rcl_action_wait_set_add_action_client+0x9c>
 801556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015574:	f7f8 fa3c 	bl	800d9f0 <rcutils_reset_error>
 8015578:	f640 0036 	movw	r0, #2102	@ 0x836
 801557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801557e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015582:	4770      	bx	lr
 8015584:	6821      	ldr	r1, [r4, #0]
 8015586:	4628      	mov	r0, r5
 8015588:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801558c:	3110      	adds	r1, #16
 801558e:	f7ff f95b 	bl	8014848 <rcl_wait_set_add_subscription>
 8015592:	2800      	cmp	r0, #0
 8015594:	d1ea      	bne.n	801556c <rcl_action_wait_set_add_action_client+0x84>
 8015596:	b11f      	cbz	r7, 80155a0 <rcl_action_wait_set_add_action_client+0xb8>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801559e:	603b      	str	r3, [r7, #0]
 80155a0:	2e00      	cmp	r6, #0
 80155a2:	d0e3      	beq.n	801556c <rcl_action_wait_set_add_action_client+0x84>
 80155a4:	6823      	ldr	r3, [r4, #0]
 80155a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80155aa:	6033      	str	r3, [r6, #0]
 80155ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ae:	bf00      	nop

080155b0 <rcl_action_client_wait_set_get_entities_ready>:
 80155b0:	2800      	cmp	r0, #0
 80155b2:	f000 808d 	beq.w	80156d0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80155b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ba:	460c      	mov	r4, r1
 80155bc:	2900      	cmp	r1, #0
 80155be:	d077      	beq.n	80156b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80155c0:	4605      	mov	r5, r0
 80155c2:	6808      	ldr	r0, [r1, #0]
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d073      	beq.n	80156b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80155c8:	4616      	mov	r6, r2
 80155ca:	461f      	mov	r7, r3
 80155cc:	f7fe f88c 	bl	80136e8 <rcl_client_is_valid>
 80155d0:	2800      	cmp	r0, #0
 80155d2:	d071      	beq.n	80156b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155d4:	6820      	ldr	r0, [r4, #0]
 80155d6:	3004      	adds	r0, #4
 80155d8:	f7fe f886 	bl	80136e8 <rcl_client_is_valid>
 80155dc:	2800      	cmp	r0, #0
 80155de:	d06b      	beq.n	80156b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155e0:	6820      	ldr	r0, [r4, #0]
 80155e2:	3008      	adds	r0, #8
 80155e4:	f7fe f880 	bl	80136e8 <rcl_client_is_valid>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d065      	beq.n	80156b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155ec:	6820      	ldr	r0, [r4, #0]
 80155ee:	300c      	adds	r0, #12
 80155f0:	f7f6 fece 	bl	800c390 <rcl_subscription_is_valid>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d05f      	beq.n	80156b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80155f8:	6820      	ldr	r0, [r4, #0]
 80155fa:	3010      	adds	r0, #16
 80155fc:	f7f6 fec8 	bl	800c390 <rcl_subscription_is_valid>
 8015600:	2800      	cmp	r0, #0
 8015602:	d059      	beq.n	80156b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015604:	2e00      	cmp	r6, #0
 8015606:	d060      	beq.n	80156ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015608:	2f00      	cmp	r7, #0
 801560a:	d05e      	beq.n	80156ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801560c:	9b06      	ldr	r3, [sp, #24]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d05b      	beq.n	80156ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015612:	9b07      	ldr	r3, [sp, #28]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d058      	beq.n	80156ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015618:	9b08      	ldr	r3, [sp, #32]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d055      	beq.n	80156ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801561e:	6823      	ldr	r3, [r4, #0]
 8015620:	686a      	ldr	r2, [r5, #4]
 8015622:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015626:	428a      	cmp	r2, r1
 8015628:	d94c      	bls.n	80156c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801562a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801562e:	4282      	cmp	r2, r0
 8015630:	d948      	bls.n	80156c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015632:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015636:	69ea      	ldr	r2, [r5, #28]
 8015638:	42a2      	cmp	r2, r4
 801563a:	d943      	bls.n	80156c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801563c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015640:	4562      	cmp	r2, ip
 8015642:	d93f      	bls.n	80156c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015644:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015648:	4572      	cmp	r2, lr
 801564a:	d93b      	bls.n	80156c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801564c:	69aa      	ldr	r2, [r5, #24]
 801564e:	682d      	ldr	r5, [r5, #0]
 8015650:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015654:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015658:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801565c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015660:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015664:	f103 0c0c 	add.w	ip, r3, #12
 8015668:	eba5 050c 	sub.w	r5, r5, ip
 801566c:	fab5 f585 	clz	r5, r5
 8015670:	096d      	lsrs	r5, r5, #5
 8015672:	7035      	strb	r5, [r6, #0]
 8015674:	f103 0510 	add.w	r5, r3, #16
 8015678:	1b64      	subs	r4, r4, r5
 801567a:	fab4 f484 	clz	r4, r4
 801567e:	0964      	lsrs	r4, r4, #5
 8015680:	703c      	strb	r4, [r7, #0]
 8015682:	eba3 0008 	sub.w	r0, r3, r8
 8015686:	1d1c      	adds	r4, r3, #4
 8015688:	3308      	adds	r3, #8
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	fab0 f080 	clz	r0, r0
 8015690:	9a06      	ldr	r2, [sp, #24]
 8015692:	0940      	lsrs	r0, r0, #5
 8015694:	1b09      	subs	r1, r1, r4
 8015696:	7010      	strb	r0, [r2, #0]
 8015698:	fab1 f181 	clz	r1, r1
 801569c:	9a07      	ldr	r2, [sp, #28]
 801569e:	0949      	lsrs	r1, r1, #5
 80156a0:	7011      	strb	r1, [r2, #0]
 80156a2:	fab3 f383 	clz	r3, r3
 80156a6:	9a08      	ldr	r2, [sp, #32]
 80156a8:	095b      	lsrs	r3, r3, #5
 80156aa:	2000      	movs	r0, #0
 80156ac:	7013      	strb	r3, [r2, #0]
 80156ae:	e001      	b.n	80156b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80156b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80156b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b8:	f7f8 f99a 	bl	800d9f0 <rcutils_reset_error>
 80156bc:	f640 0036 	movw	r0, #2102	@ 0x836
 80156c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156c4:	2001      	movs	r0, #1
 80156c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ca:	200b      	movs	r0, #11
 80156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop

080156d8 <rcl_action_take_goal_request>:
 80156d8:	2800      	cmp	r0, #0
 80156da:	d039      	beq.n	8015750 <rcl_action_take_goal_request+0x78>
 80156dc:	b570      	push	{r4, r5, r6, lr}
 80156de:	4604      	mov	r4, r0
 80156e0:	6800      	ldr	r0, [r0, #0]
 80156e2:	b380      	cbz	r0, 8015746 <rcl_action_take_goal_request+0x6e>
 80156e4:	460d      	mov	r5, r1
 80156e6:	4616      	mov	r6, r2
 80156e8:	f7fe fdf2 	bl	80142d0 <rcl_service_is_valid>
 80156ec:	b330      	cbz	r0, 801573c <rcl_action_take_goal_request+0x64>
 80156ee:	6820      	ldr	r0, [r4, #0]
 80156f0:	3004      	adds	r0, #4
 80156f2:	f7fe fded 	bl	80142d0 <rcl_service_is_valid>
 80156f6:	b308      	cbz	r0, 801573c <rcl_action_take_goal_request+0x64>
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	3008      	adds	r0, #8
 80156fc:	f7fe fde8 	bl	80142d0 <rcl_service_is_valid>
 8015700:	b1e0      	cbz	r0, 801573c <rcl_action_take_goal_request+0x64>
 8015702:	6820      	ldr	r0, [r4, #0]
 8015704:	300c      	adds	r0, #12
 8015706:	f7f6 fc93 	bl	800c030 <rcl_publisher_is_valid>
 801570a:	b1b8      	cbz	r0, 801573c <rcl_action_take_goal_request+0x64>
 801570c:	6820      	ldr	r0, [r4, #0]
 801570e:	3010      	adds	r0, #16
 8015710:	f7f6 fc8e 	bl	800c030 <rcl_publisher_is_valid>
 8015714:	b190      	cbz	r0, 801573c <rcl_action_take_goal_request+0x64>
 8015716:	b1cd      	cbz	r5, 801574c <rcl_action_take_goal_request+0x74>
 8015718:	b1c6      	cbz	r6, 801574c <rcl_action_take_goal_request+0x74>
 801571a:	6820      	ldr	r0, [r4, #0]
 801571c:	4632      	mov	r2, r6
 801571e:	4629      	mov	r1, r5
 8015720:	f7fe fd7e 	bl	8014220 <rcl_take_request>
 8015724:	b148      	cbz	r0, 801573a <rcl_action_take_goal_request+0x62>
 8015726:	280a      	cmp	r0, #10
 8015728:	d007      	beq.n	801573a <rcl_action_take_goal_request+0x62>
 801572a:	f240 2259 	movw	r2, #601	@ 0x259
 801572e:	f640 0399 	movw	r3, #2201	@ 0x899
 8015732:	4290      	cmp	r0, r2
 8015734:	bf0c      	ite	eq
 8015736:	4618      	moveq	r0, r3
 8015738:	2001      	movne	r0, #1
 801573a:	bd70      	pop	{r4, r5, r6, pc}
 801573c:	f7f8 f958 	bl	800d9f0 <rcutils_reset_error>
 8015740:	f640 0098 	movw	r0, #2200	@ 0x898
 8015744:	bd70      	pop	{r4, r5, r6, pc}
 8015746:	f640 0098 	movw	r0, #2200	@ 0x898
 801574a:	bd70      	pop	{r4, r5, r6, pc}
 801574c:	200b      	movs	r0, #11
 801574e:	bd70      	pop	{r4, r5, r6, pc}
 8015750:	f640 0098 	movw	r0, #2200	@ 0x898
 8015754:	4770      	bx	lr
 8015756:	bf00      	nop

08015758 <rcl_action_send_goal_response>:
 8015758:	b390      	cbz	r0, 80157c0 <rcl_action_send_goal_response+0x68>
 801575a:	b570      	push	{r4, r5, r6, lr}
 801575c:	4604      	mov	r4, r0
 801575e:	6800      	ldr	r0, [r0, #0]
 8015760:	b348      	cbz	r0, 80157b6 <rcl_action_send_goal_response+0x5e>
 8015762:	460d      	mov	r5, r1
 8015764:	4616      	mov	r6, r2
 8015766:	f7fe fdb3 	bl	80142d0 <rcl_service_is_valid>
 801576a:	b1f8      	cbz	r0, 80157ac <rcl_action_send_goal_response+0x54>
 801576c:	6820      	ldr	r0, [r4, #0]
 801576e:	3004      	adds	r0, #4
 8015770:	f7fe fdae 	bl	80142d0 <rcl_service_is_valid>
 8015774:	b1d0      	cbz	r0, 80157ac <rcl_action_send_goal_response+0x54>
 8015776:	6820      	ldr	r0, [r4, #0]
 8015778:	3008      	adds	r0, #8
 801577a:	f7fe fda9 	bl	80142d0 <rcl_service_is_valid>
 801577e:	b1a8      	cbz	r0, 80157ac <rcl_action_send_goal_response+0x54>
 8015780:	6820      	ldr	r0, [r4, #0]
 8015782:	300c      	adds	r0, #12
 8015784:	f7f6 fc54 	bl	800c030 <rcl_publisher_is_valid>
 8015788:	b180      	cbz	r0, 80157ac <rcl_action_send_goal_response+0x54>
 801578a:	6820      	ldr	r0, [r4, #0]
 801578c:	3010      	adds	r0, #16
 801578e:	f7f6 fc4f 	bl	800c030 <rcl_publisher_is_valid>
 8015792:	b158      	cbz	r0, 80157ac <rcl_action_send_goal_response+0x54>
 8015794:	b195      	cbz	r5, 80157bc <rcl_action_send_goal_response+0x64>
 8015796:	b18e      	cbz	r6, 80157bc <rcl_action_send_goal_response+0x64>
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	4632      	mov	r2, r6
 801579c:	4629      	mov	r1, r5
 801579e:	f7fe fd7f 	bl	80142a0 <rcl_send_response>
 80157a2:	b110      	cbz	r0, 80157aa <rcl_action_send_goal_response+0x52>
 80157a4:	2802      	cmp	r0, #2
 80157a6:	bf18      	it	ne
 80157a8:	2001      	movne	r0, #1
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	f7f8 f920 	bl	800d9f0 <rcutils_reset_error>
 80157b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80157b4:	bd70      	pop	{r4, r5, r6, pc}
 80157b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80157ba:	bd70      	pop	{r4, r5, r6, pc}
 80157bc:	200b      	movs	r0, #11
 80157be:	bd70      	pop	{r4, r5, r6, pc}
 80157c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop

080157c8 <rcl_action_take_result_request>:
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d03a      	beq.n	8015842 <rcl_action_take_result_request+0x7a>
 80157cc:	b570      	push	{r4, r5, r6, lr}
 80157ce:	4604      	mov	r4, r0
 80157d0:	6800      	ldr	r0, [r0, #0]
 80157d2:	b388      	cbz	r0, 8015838 <rcl_action_take_result_request+0x70>
 80157d4:	460d      	mov	r5, r1
 80157d6:	4616      	mov	r6, r2
 80157d8:	f7fe fd7a 	bl	80142d0 <rcl_service_is_valid>
 80157dc:	b338      	cbz	r0, 801582e <rcl_action_take_result_request+0x66>
 80157de:	6820      	ldr	r0, [r4, #0]
 80157e0:	3004      	adds	r0, #4
 80157e2:	f7fe fd75 	bl	80142d0 <rcl_service_is_valid>
 80157e6:	b310      	cbz	r0, 801582e <rcl_action_take_result_request+0x66>
 80157e8:	6820      	ldr	r0, [r4, #0]
 80157ea:	3008      	adds	r0, #8
 80157ec:	f7fe fd70 	bl	80142d0 <rcl_service_is_valid>
 80157f0:	b1e8      	cbz	r0, 801582e <rcl_action_take_result_request+0x66>
 80157f2:	6820      	ldr	r0, [r4, #0]
 80157f4:	300c      	adds	r0, #12
 80157f6:	f7f6 fc1b 	bl	800c030 <rcl_publisher_is_valid>
 80157fa:	b1c0      	cbz	r0, 801582e <rcl_action_take_result_request+0x66>
 80157fc:	6820      	ldr	r0, [r4, #0]
 80157fe:	3010      	adds	r0, #16
 8015800:	f7f6 fc16 	bl	800c030 <rcl_publisher_is_valid>
 8015804:	b198      	cbz	r0, 801582e <rcl_action_take_result_request+0x66>
 8015806:	b1d5      	cbz	r5, 801583e <rcl_action_take_result_request+0x76>
 8015808:	b1ce      	cbz	r6, 801583e <rcl_action_take_result_request+0x76>
 801580a:	6820      	ldr	r0, [r4, #0]
 801580c:	4632      	mov	r2, r6
 801580e:	4629      	mov	r1, r5
 8015810:	3008      	adds	r0, #8
 8015812:	f7fe fd05 	bl	8014220 <rcl_take_request>
 8015816:	b148      	cbz	r0, 801582c <rcl_action_take_result_request+0x64>
 8015818:	280a      	cmp	r0, #10
 801581a:	d007      	beq.n	801582c <rcl_action_take_result_request+0x64>
 801581c:	f240 2259 	movw	r2, #601	@ 0x259
 8015820:	f640 0399 	movw	r3, #2201	@ 0x899
 8015824:	4290      	cmp	r0, r2
 8015826:	bf0c      	ite	eq
 8015828:	4618      	moveq	r0, r3
 801582a:	2001      	movne	r0, #1
 801582c:	bd70      	pop	{r4, r5, r6, pc}
 801582e:	f7f8 f8df 	bl	800d9f0 <rcutils_reset_error>
 8015832:	f640 0098 	movw	r0, #2200	@ 0x898
 8015836:	bd70      	pop	{r4, r5, r6, pc}
 8015838:	f640 0098 	movw	r0, #2200	@ 0x898
 801583c:	bd70      	pop	{r4, r5, r6, pc}
 801583e:	200b      	movs	r0, #11
 8015840:	bd70      	pop	{r4, r5, r6, pc}
 8015842:	f640 0098 	movw	r0, #2200	@ 0x898
 8015846:	4770      	bx	lr

08015848 <rcl_action_take_cancel_request>:
 8015848:	2800      	cmp	r0, #0
 801584a:	d03a      	beq.n	80158c2 <rcl_action_take_cancel_request+0x7a>
 801584c:	b570      	push	{r4, r5, r6, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	6800      	ldr	r0, [r0, #0]
 8015852:	b388      	cbz	r0, 80158b8 <rcl_action_take_cancel_request+0x70>
 8015854:	460d      	mov	r5, r1
 8015856:	4616      	mov	r6, r2
 8015858:	f7fe fd3a 	bl	80142d0 <rcl_service_is_valid>
 801585c:	b338      	cbz	r0, 80158ae <rcl_action_take_cancel_request+0x66>
 801585e:	6820      	ldr	r0, [r4, #0]
 8015860:	3004      	adds	r0, #4
 8015862:	f7fe fd35 	bl	80142d0 <rcl_service_is_valid>
 8015866:	b310      	cbz	r0, 80158ae <rcl_action_take_cancel_request+0x66>
 8015868:	6820      	ldr	r0, [r4, #0]
 801586a:	3008      	adds	r0, #8
 801586c:	f7fe fd30 	bl	80142d0 <rcl_service_is_valid>
 8015870:	b1e8      	cbz	r0, 80158ae <rcl_action_take_cancel_request+0x66>
 8015872:	6820      	ldr	r0, [r4, #0]
 8015874:	300c      	adds	r0, #12
 8015876:	f7f6 fbdb 	bl	800c030 <rcl_publisher_is_valid>
 801587a:	b1c0      	cbz	r0, 80158ae <rcl_action_take_cancel_request+0x66>
 801587c:	6820      	ldr	r0, [r4, #0]
 801587e:	3010      	adds	r0, #16
 8015880:	f7f6 fbd6 	bl	800c030 <rcl_publisher_is_valid>
 8015884:	b198      	cbz	r0, 80158ae <rcl_action_take_cancel_request+0x66>
 8015886:	b1d5      	cbz	r5, 80158be <rcl_action_take_cancel_request+0x76>
 8015888:	b1ce      	cbz	r6, 80158be <rcl_action_take_cancel_request+0x76>
 801588a:	6820      	ldr	r0, [r4, #0]
 801588c:	4632      	mov	r2, r6
 801588e:	4629      	mov	r1, r5
 8015890:	3004      	adds	r0, #4
 8015892:	f7fe fcc5 	bl	8014220 <rcl_take_request>
 8015896:	b148      	cbz	r0, 80158ac <rcl_action_take_cancel_request+0x64>
 8015898:	280a      	cmp	r0, #10
 801589a:	d007      	beq.n	80158ac <rcl_action_take_cancel_request+0x64>
 801589c:	f240 2259 	movw	r2, #601	@ 0x259
 80158a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80158a4:	4290      	cmp	r0, r2
 80158a6:	bf0c      	ite	eq
 80158a8:	4618      	moveq	r0, r3
 80158aa:	2001      	movne	r0, #1
 80158ac:	bd70      	pop	{r4, r5, r6, pc}
 80158ae:	f7f8 f89f 	bl	800d9f0 <rcutils_reset_error>
 80158b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80158b6:	bd70      	pop	{r4, r5, r6, pc}
 80158b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80158bc:	bd70      	pop	{r4, r5, r6, pc}
 80158be:	200b      	movs	r0, #11
 80158c0:	bd70      	pop	{r4, r5, r6, pc}
 80158c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80158c6:	4770      	bx	lr

080158c8 <rcl_action_send_cancel_response>:
 80158c8:	b398      	cbz	r0, 8015932 <rcl_action_send_cancel_response+0x6a>
 80158ca:	b570      	push	{r4, r5, r6, lr}
 80158cc:	4604      	mov	r4, r0
 80158ce:	6800      	ldr	r0, [r0, #0]
 80158d0:	b350      	cbz	r0, 8015928 <rcl_action_send_cancel_response+0x60>
 80158d2:	460d      	mov	r5, r1
 80158d4:	4616      	mov	r6, r2
 80158d6:	f7fe fcfb 	bl	80142d0 <rcl_service_is_valid>
 80158da:	b300      	cbz	r0, 801591e <rcl_action_send_cancel_response+0x56>
 80158dc:	6820      	ldr	r0, [r4, #0]
 80158de:	3004      	adds	r0, #4
 80158e0:	f7fe fcf6 	bl	80142d0 <rcl_service_is_valid>
 80158e4:	b1d8      	cbz	r0, 801591e <rcl_action_send_cancel_response+0x56>
 80158e6:	6820      	ldr	r0, [r4, #0]
 80158e8:	3008      	adds	r0, #8
 80158ea:	f7fe fcf1 	bl	80142d0 <rcl_service_is_valid>
 80158ee:	b1b0      	cbz	r0, 801591e <rcl_action_send_cancel_response+0x56>
 80158f0:	6820      	ldr	r0, [r4, #0]
 80158f2:	300c      	adds	r0, #12
 80158f4:	f7f6 fb9c 	bl	800c030 <rcl_publisher_is_valid>
 80158f8:	b188      	cbz	r0, 801591e <rcl_action_send_cancel_response+0x56>
 80158fa:	6820      	ldr	r0, [r4, #0]
 80158fc:	3010      	adds	r0, #16
 80158fe:	f7f6 fb97 	bl	800c030 <rcl_publisher_is_valid>
 8015902:	b160      	cbz	r0, 801591e <rcl_action_send_cancel_response+0x56>
 8015904:	b19d      	cbz	r5, 801592e <rcl_action_send_cancel_response+0x66>
 8015906:	b196      	cbz	r6, 801592e <rcl_action_send_cancel_response+0x66>
 8015908:	6820      	ldr	r0, [r4, #0]
 801590a:	4632      	mov	r2, r6
 801590c:	4629      	mov	r1, r5
 801590e:	3004      	adds	r0, #4
 8015910:	f7fe fcc6 	bl	80142a0 <rcl_send_response>
 8015914:	b110      	cbz	r0, 801591c <rcl_action_send_cancel_response+0x54>
 8015916:	2802      	cmp	r0, #2
 8015918:	bf18      	it	ne
 801591a:	2001      	movne	r0, #1
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	f7f8 f867 	bl	800d9f0 <rcutils_reset_error>
 8015922:	f640 0098 	movw	r0, #2200	@ 0x898
 8015926:	bd70      	pop	{r4, r5, r6, pc}
 8015928:	f640 0098 	movw	r0, #2200	@ 0x898
 801592c:	bd70      	pop	{r4, r5, r6, pc}
 801592e:	200b      	movs	r0, #11
 8015930:	bd70      	pop	{r4, r5, r6, pc}
 8015932:	f640 0098 	movw	r0, #2200	@ 0x898
 8015936:	4770      	bx	lr

08015938 <rcl_action_wait_set_add_action_server>:
 8015938:	2800      	cmp	r0, #0
 801593a:	d04d      	beq.n	80159d8 <rcl_action_wait_set_add_action_server+0xa0>
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	460c      	mov	r4, r1
 8015940:	b159      	cbz	r1, 801595a <rcl_action_wait_set_add_action_server+0x22>
 8015942:	4605      	mov	r5, r0
 8015944:	6808      	ldr	r0, [r1, #0]
 8015946:	b140      	cbz	r0, 801595a <rcl_action_wait_set_add_action_server+0x22>
 8015948:	4616      	mov	r6, r2
 801594a:	f7fe fcc1 	bl	80142d0 <rcl_service_is_valid>
 801594e:	b120      	cbz	r0, 801595a <rcl_action_wait_set_add_action_server+0x22>
 8015950:	6820      	ldr	r0, [r4, #0]
 8015952:	3004      	adds	r0, #4
 8015954:	f7fe fcbc 	bl	80142d0 <rcl_service_is_valid>
 8015958:	b910      	cbnz	r0, 8015960 <rcl_action_wait_set_add_action_server+0x28>
 801595a:	f640 0098 	movw	r0, #2200	@ 0x898
 801595e:	bd70      	pop	{r4, r5, r6, pc}
 8015960:	6820      	ldr	r0, [r4, #0]
 8015962:	3008      	adds	r0, #8
 8015964:	f7fe fcb4 	bl	80142d0 <rcl_service_is_valid>
 8015968:	2800      	cmp	r0, #0
 801596a:	d0f6      	beq.n	801595a <rcl_action_wait_set_add_action_server+0x22>
 801596c:	6820      	ldr	r0, [r4, #0]
 801596e:	300c      	adds	r0, #12
 8015970:	f7f6 fb76 	bl	800c060 <rcl_publisher_is_valid_except_context>
 8015974:	2800      	cmp	r0, #0
 8015976:	d0f0      	beq.n	801595a <rcl_action_wait_set_add_action_server+0x22>
 8015978:	6820      	ldr	r0, [r4, #0]
 801597a:	3010      	adds	r0, #16
 801597c:	f7f6 fb70 	bl	800c060 <rcl_publisher_is_valid_except_context>
 8015980:	2800      	cmp	r0, #0
 8015982:	d0ea      	beq.n	801595a <rcl_action_wait_set_add_action_server+0x22>
 8015984:	6821      	ldr	r1, [r4, #0]
 8015986:	4628      	mov	r0, r5
 8015988:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801598c:	f7ff fad0 	bl	8014f30 <rcl_wait_set_add_service>
 8015990:	2800      	cmp	r0, #0
 8015992:	d1e4      	bne.n	801595e <rcl_action_wait_set_add_action_server+0x26>
 8015994:	6821      	ldr	r1, [r4, #0]
 8015996:	4628      	mov	r0, r5
 8015998:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801599c:	3104      	adds	r1, #4
 801599e:	f7ff fac7 	bl	8014f30 <rcl_wait_set_add_service>
 80159a2:	2800      	cmp	r0, #0
 80159a4:	d1db      	bne.n	801595e <rcl_action_wait_set_add_action_server+0x26>
 80159a6:	6821      	ldr	r1, [r4, #0]
 80159a8:	4628      	mov	r0, r5
 80159aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80159ae:	3108      	adds	r1, #8
 80159b0:	f7ff fabe 	bl	8014f30 <rcl_wait_set_add_service>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d1d2      	bne.n	801595e <rcl_action_wait_set_add_action_server+0x26>
 80159b8:	6821      	ldr	r1, [r4, #0]
 80159ba:	4628      	mov	r0, r5
 80159bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80159c0:	3114      	adds	r1, #20
 80159c2:	f7ff fa59 	bl	8014e78 <rcl_wait_set_add_timer>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d1c9      	bne.n	801595e <rcl_action_wait_set_add_action_server+0x26>
 80159ca:	2e00      	cmp	r6, #0
 80159cc:	d0c7      	beq.n	801595e <rcl_action_wait_set_add_action_server+0x26>
 80159ce:	6823      	ldr	r3, [r4, #0]
 80159d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80159d4:	6033      	str	r3, [r6, #0]
 80159d6:	bd70      	pop	{r4, r5, r6, pc}
 80159d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159dc:	4770      	bx	lr
 80159de:	bf00      	nop

080159e0 <rcl_action_server_wait_set_get_entities_ready>:
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d05a      	beq.n	8015a9a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80159e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e6:	460c      	mov	r4, r1
 80159e8:	b161      	cbz	r1, 8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80159ea:	4605      	mov	r5, r0
 80159ec:	6808      	ldr	r0, [r1, #0]
 80159ee:	b148      	cbz	r0, 8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80159f0:	4616      	mov	r6, r2
 80159f2:	461f      	mov	r7, r3
 80159f4:	f7fe fc6c 	bl	80142d0 <rcl_service_is_valid>
 80159f8:	b120      	cbz	r0, 8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80159fa:	6820      	ldr	r0, [r4, #0]
 80159fc:	3004      	adds	r0, #4
 80159fe:	f7fe fc67 	bl	80142d0 <rcl_service_is_valid>
 8015a02:	b910      	cbnz	r0, 8015a0a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015a04:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a0a:	6820      	ldr	r0, [r4, #0]
 8015a0c:	3008      	adds	r0, #8
 8015a0e:	f7fe fc5f 	bl	80142d0 <rcl_service_is_valid>
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0f6      	beq.n	8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a16:	6820      	ldr	r0, [r4, #0]
 8015a18:	300c      	adds	r0, #12
 8015a1a:	f7f6 fb21 	bl	800c060 <rcl_publisher_is_valid_except_context>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d0f0      	beq.n	8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a22:	6820      	ldr	r0, [r4, #0]
 8015a24:	3010      	adds	r0, #16
 8015a26:	f7f6 fb1b 	bl	800c060 <rcl_publisher_is_valid_except_context>
 8015a2a:	2800      	cmp	r0, #0
 8015a2c:	d0ea      	beq.n	8015a04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a2e:	b3be      	cbz	r6, 8015aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a30:	b3b7      	cbz	r7, 8015aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a32:	9b06      	ldr	r3, [sp, #24]
 8015a34:	b3a3      	cbz	r3, 8015aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a36:	9b07      	ldr	r3, [sp, #28]
 8015a38:	b393      	cbz	r3, 8015aa0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a3a:	6821      	ldr	r1, [r4, #0]
 8015a3c:	692a      	ldr	r2, [r5, #16]
 8015a3e:	6a2c      	ldr	r4, [r5, #32]
 8015a40:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015a44:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015a48:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015a4c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015a50:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015a54:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015a58:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015a5c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015a60:	1a64      	subs	r4, r4, r1
 8015a62:	fab4 f484 	clz	r4, r4
 8015a66:	0964      	lsrs	r4, r4, #5
 8015a68:	7034      	strb	r4, [r6, #0]
 8015a6a:	1d0c      	adds	r4, r1, #4
 8015a6c:	1b1b      	subs	r3, r3, r4
 8015a6e:	fab3 f383 	clz	r3, r3
 8015a72:	095b      	lsrs	r3, r3, #5
 8015a74:	f101 0408 	add.w	r4, r1, #8
 8015a78:	703b      	strb	r3, [r7, #0]
 8015a7a:	f101 0314 	add.w	r3, r1, #20
 8015a7e:	1b01      	subs	r1, r0, r4
 8015a80:	1ad3      	subs	r3, r2, r3
 8015a82:	fab1 f181 	clz	r1, r1
 8015a86:	9a06      	ldr	r2, [sp, #24]
 8015a88:	0949      	lsrs	r1, r1, #5
 8015a8a:	7011      	strb	r1, [r2, #0]
 8015a8c:	fab3 f383 	clz	r3, r3
 8015a90:	9a07      	ldr	r2, [sp, #28]
 8015a92:	095b      	lsrs	r3, r3, #5
 8015a94:	2000      	movs	r0, #0
 8015a96:	7013      	strb	r3, [r2, #0]
 8015a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a9e:	4770      	bx	lr
 8015aa0:	200b      	movs	r0, #11
 8015aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015aa4 <_execute_event_handler>:
 8015aa4:	2002      	movs	r0, #2
 8015aa6:	4770      	bx	lr

08015aa8 <_cancel_goal_event_handler>:
 8015aa8:	2003      	movs	r0, #3
 8015aaa:	4770      	bx	lr

08015aac <_succeed_event_handler>:
 8015aac:	2004      	movs	r0, #4
 8015aae:	4770      	bx	lr

08015ab0 <_abort_event_handler>:
 8015ab0:	2006      	movs	r0, #6
 8015ab2:	4770      	bx	lr

08015ab4 <_canceled_event_handler>:
 8015ab4:	2005      	movs	r0, #5
 8015ab6:	4770      	bx	lr

08015ab8 <rcl_action_transition_goal_state>:
 8015ab8:	b2c2      	uxtb	r2, r0
 8015aba:	2a06      	cmp	r2, #6
 8015abc:	d80c      	bhi.n	8015ad8 <rcl_action_transition_goal_state+0x20>
 8015abe:	2904      	cmp	r1, #4
 8015ac0:	d80a      	bhi.n	8015ad8 <rcl_action_transition_goal_state+0x20>
 8015ac2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015ac6:	b410      	push	{r4}
 8015ac8:	1853      	adds	r3, r2, r1
 8015aca:	4c06      	ldr	r4, [pc, #24]	@ (8015ae4 <rcl_action_transition_goal_state+0x2c>)
 8015acc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015ad0:	b123      	cbz	r3, 8015adc <rcl_action_transition_goal_state+0x24>
 8015ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ad6:	4718      	bx	r3
 8015ad8:	2000      	movs	r0, #0
 8015ada:	4770      	bx	lr
 8015adc:	2000      	movs	r0, #0
 8015ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ae2:	4770      	bx	lr
 8015ae4:	0801b118 	.word	0x0801b118

08015ae8 <rcl_action_get_zero_initialized_cancel_response>:
 8015ae8:	b510      	push	{r4, lr}
 8015aea:	4c07      	ldr	r4, [pc, #28]	@ (8015b08 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015aec:	4686      	mov	lr, r0
 8015aee:	4684      	mov	ip, r0
 8015af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	f8cc 3000 	str.w	r3, [ip]
 8015b02:	4670      	mov	r0, lr
 8015b04:	bd10      	pop	{r4, pc}
 8015b06:	bf00      	nop
 8015b08:	0801b1a4 	.word	0x0801b1a4

08015b0c <rclc_action_send_result_request>:
 8015b0c:	b1d0      	cbz	r0, 8015b44 <rclc_action_send_result_request+0x38>
 8015b0e:	b500      	push	{lr}
 8015b10:	4684      	mov	ip, r0
 8015b12:	b087      	sub	sp, #28
 8015b14:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015b18:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015b1c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015b20:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015b24:	f10d 0e08 	add.w	lr, sp, #8
 8015b28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b30:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015b34:	a902      	add	r1, sp, #8
 8015b36:	3010      	adds	r0, #16
 8015b38:	f7ff fbda 	bl	80152f0 <rcl_action_send_result_request>
 8015b3c:	b920      	cbnz	r0, 8015b48 <rclc_action_send_result_request+0x3c>
 8015b3e:	b007      	add	sp, #28
 8015b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b44:	200b      	movs	r0, #11
 8015b46:	4770      	bx	lr
 8015b48:	9001      	str	r0, [sp, #4]
 8015b4a:	f7f7 ff51 	bl	800d9f0 <rcutils_reset_error>
 8015b4e:	9801      	ldr	r0, [sp, #4]
 8015b50:	b007      	add	sp, #28
 8015b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b56:	bf00      	nop

08015b58 <rclc_action_take_goal_handle>:
 8015b58:	b160      	cbz	r0, 8015b74 <rclc_action_take_goal_handle+0x1c>
 8015b5a:	6883      	ldr	r3, [r0, #8]
 8015b5c:	b143      	cbz	r3, 8015b70 <rclc_action_take_goal_handle+0x18>
 8015b5e:	6819      	ldr	r1, [r3, #0]
 8015b60:	6081      	str	r1, [r0, #8]
 8015b62:	2200      	movs	r2, #0
 8015b64:	721a      	strb	r2, [r3, #8]
 8015b66:	68c1      	ldr	r1, [r0, #12]
 8015b68:	6019      	str	r1, [r3, #0]
 8015b6a:	621a      	str	r2, [r3, #32]
 8015b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015b6e:	60c3      	str	r3, [r0, #12]
 8015b70:	4618      	mov	r0, r3
 8015b72:	4770      	bx	lr
 8015b74:	4603      	mov	r3, r0
 8015b76:	e7fb      	b.n	8015b70 <rclc_action_take_goal_handle+0x18>

08015b78 <rclc_action_remove_used_goal_handle>:
 8015b78:	b180      	cbz	r0, 8015b9c <rclc_action_remove_used_goal_handle+0x24>
 8015b7a:	b179      	cbz	r1, 8015b9c <rclc_action_remove_used_goal_handle+0x24>
 8015b7c:	68c3      	ldr	r3, [r0, #12]
 8015b7e:	4299      	cmp	r1, r3
 8015b80:	d00d      	beq.n	8015b9e <rclc_action_remove_used_goal_handle+0x26>
 8015b82:	b12b      	cbz	r3, 8015b90 <rclc_action_remove_used_goal_handle+0x18>
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	4291      	cmp	r1, r2
 8015b88:	d003      	beq.n	8015b92 <rclc_action_remove_used_goal_handle+0x1a>
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1f9      	bne.n	8015b84 <rclc_action_remove_used_goal_handle+0xc>
 8015b90:	4770      	bx	lr
 8015b92:	680a      	ldr	r2, [r1, #0]
 8015b94:	601a      	str	r2, [r3, #0]
 8015b96:	6883      	ldr	r3, [r0, #8]
 8015b98:	600b      	str	r3, [r1, #0]
 8015b9a:	6081      	str	r1, [r0, #8]
 8015b9c:	4770      	bx	lr
 8015b9e:	680b      	ldr	r3, [r1, #0]
 8015ba0:	60c3      	str	r3, [r0, #12]
 8015ba2:	e7f8      	b.n	8015b96 <rclc_action_remove_used_goal_handle+0x1e>

08015ba4 <rclc_action_find_goal_handle_by_uuid>:
 8015ba4:	b538      	push	{r3, r4, r5, lr}
 8015ba6:	b180      	cbz	r0, 8015bca <rclc_action_find_goal_handle_by_uuid+0x26>
 8015ba8:	460d      	mov	r5, r1
 8015baa:	b181      	cbz	r1, 8015bce <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015bac:	68c4      	ldr	r4, [r0, #12]
 8015bae:	b914      	cbnz	r4, 8015bb6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015bb0:	e009      	b.n	8015bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bb2:	6824      	ldr	r4, [r4, #0]
 8015bb4:	b13c      	cbz	r4, 8015bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bb6:	f104 0009 	add.w	r0, r4, #9
 8015bba:	2210      	movs	r2, #16
 8015bbc:	4629      	mov	r1, r5
 8015bbe:	f003 fbe1 	bl	8019384 <memcmp>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	d1f5      	bne.n	8015bb2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	bd38      	pop	{r3, r4, r5, pc}
 8015bca:	4604      	mov	r4, r0
 8015bcc:	e7fb      	b.n	8015bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bce:	460c      	mov	r4, r1
 8015bd0:	e7f9      	b.n	8015bc6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bd2:	bf00      	nop

08015bd4 <rclc_action_find_first_handle_by_status>:
 8015bd4:	b140      	cbz	r0, 8015be8 <rclc_action_find_first_handle_by_status+0x14>
 8015bd6:	68c0      	ldr	r0, [r0, #12]
 8015bd8:	b910      	cbnz	r0, 8015be0 <rclc_action_find_first_handle_by_status+0xc>
 8015bda:	e005      	b.n	8015be8 <rclc_action_find_first_handle_by_status+0x14>
 8015bdc:	6800      	ldr	r0, [r0, #0]
 8015bde:	b118      	cbz	r0, 8015be8 <rclc_action_find_first_handle_by_status+0x14>
 8015be0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015be4:	428b      	cmp	r3, r1
 8015be6:	d1f9      	bne.n	8015bdc <rclc_action_find_first_handle_by_status+0x8>
 8015be8:	4770      	bx	lr
 8015bea:	bf00      	nop

08015bec <rclc_action_find_first_terminated_handle>:
 8015bec:	b140      	cbz	r0, 8015c00 <rclc_action_find_first_terminated_handle+0x14>
 8015bee:	68c0      	ldr	r0, [r0, #12]
 8015bf0:	b910      	cbnz	r0, 8015bf8 <rclc_action_find_first_terminated_handle+0xc>
 8015bf2:	e005      	b.n	8015c00 <rclc_action_find_first_terminated_handle+0x14>
 8015bf4:	6800      	ldr	r0, [r0, #0]
 8015bf6:	b118      	cbz	r0, 8015c00 <rclc_action_find_first_terminated_handle+0x14>
 8015bf8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	ddf9      	ble.n	8015bf4 <rclc_action_find_first_terminated_handle+0x8>
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop

08015c04 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015c04:	b170      	cbz	r0, 8015c24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c06:	68c0      	ldr	r0, [r0, #12]
 8015c08:	b160      	cbz	r0, 8015c24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c0a:	b410      	push	{r4}
 8015c0c:	e001      	b.n	8015c12 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015c0e:	6800      	ldr	r0, [r0, #0]
 8015c10:	b128      	cbz	r0, 8015c1e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015c12:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015c16:	4299      	cmp	r1, r3
 8015c18:	bf08      	it	eq
 8015c1a:	4294      	cmpeq	r4, r2
 8015c1c:	d1f7      	bne.n	8015c0e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c22:	4770      	bx	lr
 8015c24:	4770      	bx	lr
 8015c26:	bf00      	nop

08015c28 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015c28:	b170      	cbz	r0, 8015c48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c2a:	68c0      	ldr	r0, [r0, #12]
 8015c2c:	b160      	cbz	r0, 8015c48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c2e:	b410      	push	{r4}
 8015c30:	e001      	b.n	8015c36 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015c32:	6800      	ldr	r0, [r0, #0]
 8015c34:	b128      	cbz	r0, 8015c42 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015c36:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015c3a:	4299      	cmp	r1, r3
 8015c3c:	bf08      	it	eq
 8015c3e:	4294      	cmpeq	r4, r2
 8015c40:	d1f7      	bne.n	8015c32 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c46:	4770      	bx	lr
 8015c48:	4770      	bx	lr
 8015c4a:	bf00      	nop

08015c4c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015c4c:	b170      	cbz	r0, 8015c6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c4e:	68c0      	ldr	r0, [r0, #12]
 8015c50:	b160      	cbz	r0, 8015c6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c52:	b410      	push	{r4}
 8015c54:	e001      	b.n	8015c5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015c56:	6800      	ldr	r0, [r0, #0]
 8015c58:	b128      	cbz	r0, 8015c66 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015c5a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015c5e:	4299      	cmp	r1, r3
 8015c60:	bf08      	it	eq
 8015c62:	4294      	cmpeq	r4, r2
 8015c64:	d1f7      	bne.n	8015c56 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c6a:	4770      	bx	lr
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop

08015c70 <rclc_action_find_first_handle_with_goal_response>:
 8015c70:	b140      	cbz	r0, 8015c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c72:	68c0      	ldr	r0, [r0, #12]
 8015c74:	b910      	cbnz	r0, 8015c7c <rclc_action_find_first_handle_with_goal_response+0xc>
 8015c76:	e005      	b.n	8015c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c78:	6800      	ldr	r0, [r0, #0]
 8015c7a:	b118      	cbz	r0, 8015c84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015c7c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d0f9      	beq.n	8015c78 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop

08015c88 <rclc_action_find_first_handle_with_result_response>:
 8015c88:	b140      	cbz	r0, 8015c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8015c8a:	68c0      	ldr	r0, [r0, #12]
 8015c8c:	b910      	cbnz	r0, 8015c94 <rclc_action_find_first_handle_with_result_response+0xc>
 8015c8e:	e005      	b.n	8015c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8015c90:	6800      	ldr	r0, [r0, #0]
 8015c92:	b118      	cbz	r0, 8015c9c <rclc_action_find_first_handle_with_result_response+0x14>
 8015c94:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d0f9      	beq.n	8015c90 <rclc_action_find_first_handle_with_result_response+0x8>
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop

08015ca0 <rclc_action_server_response_goal_request>:
 8015ca0:	b198      	cbz	r0, 8015cca <rclc_action_server_response_goal_request+0x2a>
 8015ca2:	b510      	push	{r4, lr}
 8015ca4:	6844      	ldr	r4, [r0, #4]
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	2200      	movs	r2, #0
 8015caa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015cae:	460b      	mov	r3, r1
 8015cb0:	9205      	str	r2, [sp, #20]
 8015cb2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015cb6:	aa03      	add	r2, sp, #12
 8015cb8:	f104 0010 	add.w	r0, r4, #16
 8015cbc:	f88d 300c 	strb.w	r3, [sp, #12]
 8015cc0:	f7ff fd4a 	bl	8015758 <rcl_action_send_goal_response>
 8015cc4:	b918      	cbnz	r0, 8015cce <rclc_action_server_response_goal_request+0x2e>
 8015cc6:	b006      	add	sp, #24
 8015cc8:	bd10      	pop	{r4, pc}
 8015cca:	200b      	movs	r0, #11
 8015ccc:	4770      	bx	lr
 8015cce:	9001      	str	r0, [sp, #4]
 8015cd0:	f7f7 fe8e 	bl	800d9f0 <rcutils_reset_error>
 8015cd4:	9801      	ldr	r0, [sp, #4]
 8015cd6:	b006      	add	sp, #24
 8015cd8:	bd10      	pop	{r4, pc}
 8015cda:	bf00      	nop
 8015cdc:	0000      	movs	r0, r0
	...

08015ce0 <rclc_action_server_goal_cancel_accept>:
 8015ce0:	b310      	cbz	r0, 8015d28 <rclc_action_server_goal_cancel_accept+0x48>
 8015ce2:	b510      	push	{r4, lr}
 8015ce4:	b090      	sub	sp, #64	@ 0x40
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	a806      	add	r0, sp, #24
 8015cea:	f7ff fefd 	bl	8015ae8 <rcl_action_get_zero_initialized_cancel_response>
 8015cee:	2300      	movs	r3, #0
 8015cf0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015cf4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015cf8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015cfc:	f88d 3018 	strb.w	r3, [sp, #24]
 8015d00:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015d04:	f8cd d01c 	str.w	sp, [sp, #28]
 8015d08:	46ec      	mov	ip, sp
 8015d0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d0e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015d30 <rclc_action_server_goal_cancel_accept+0x50>
 8015d12:	6860      	ldr	r0, [r4, #4]
 8015d14:	aa06      	add	r2, sp, #24
 8015d16:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015d1a:	3010      	adds	r0, #16
 8015d1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d20:	f7ff fdd2 	bl	80158c8 <rcl_action_send_cancel_response>
 8015d24:	b010      	add	sp, #64	@ 0x40
 8015d26:	bd10      	pop	{r4, pc}
 8015d28:	200b      	movs	r0, #11
 8015d2a:	4770      	bx	lr
 8015d2c:	f3af 8000 	nop.w
 8015d30:	00000001 	.word	0x00000001
 8015d34:	00000001 	.word	0x00000001

08015d38 <rclc_action_server_goal_cancel_reject>:
 8015d38:	b082      	sub	sp, #8
 8015d3a:	b530      	push	{r4, r5, lr}
 8015d3c:	b08b      	sub	sp, #44	@ 0x2c
 8015d3e:	ac0e      	add	r4, sp, #56	@ 0x38
 8015d40:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d44:	b188      	cbz	r0, 8015d6a <rclc_action_server_goal_cancel_reject+0x32>
 8015d46:	4604      	mov	r4, r0
 8015d48:	a801      	add	r0, sp, #4
 8015d4a:	460d      	mov	r5, r1
 8015d4c:	f7ff fecc 	bl	8015ae8 <rcl_action_get_zero_initialized_cancel_response>
 8015d50:	aa01      	add	r2, sp, #4
 8015d52:	a90e      	add	r1, sp, #56	@ 0x38
 8015d54:	f104 0010 	add.w	r0, r4, #16
 8015d58:	f88d 5004 	strb.w	r5, [sp, #4]
 8015d5c:	f7ff fdb4 	bl	80158c8 <rcl_action_send_cancel_response>
 8015d60:	b00b      	add	sp, #44	@ 0x2c
 8015d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d66:	b002      	add	sp, #8
 8015d68:	4770      	bx	lr
 8015d6a:	200b      	movs	r0, #11
 8015d6c:	b00b      	add	sp, #44	@ 0x2c
 8015d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d72:	b002      	add	sp, #8
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop

08015d78 <rcutils_is_directory>:
 8015d78:	2000      	movs	r0, #0
 8015d7a:	4770      	bx	lr

08015d7c <rcutils_join_path>:
 8015d7c:	b082      	sub	sp, #8
 8015d7e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015d82:	2000      	movs	r0, #0
 8015d84:	b002      	add	sp, #8
 8015d86:	4770      	bx	lr

08015d88 <rcutils_to_native_path>:
 8015d88:	b084      	sub	sp, #16
 8015d8a:	a801      	add	r0, sp, #4
 8015d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015d90:	b004      	add	sp, #16
 8015d92:	2000      	movs	r0, #0
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop

08015d98 <rcutils_string_array_fini>:
 8015d98:	b320      	cbz	r0, 8015de4 <rcutils_string_array_fini+0x4c>
 8015d9a:	b570      	push	{r4, r5, r6, lr}
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	6840      	ldr	r0, [r0, #4]
 8015da0:	b1d8      	cbz	r0, 8015dda <rcutils_string_array_fini+0x42>
 8015da2:	f104 0008 	add.w	r0, r4, #8
 8015da6:	f7f7 fd41 	bl	800d82c <rcutils_allocator_is_valid>
 8015daa:	b1b8      	cbz	r0, 8015ddc <rcutils_string_array_fini+0x44>
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	b1bb      	cbz	r3, 8015de0 <rcutils_string_array_fini+0x48>
 8015db0:	2500      	movs	r5, #0
 8015db2:	6860      	ldr	r0, [r4, #4]
 8015db4:	462e      	mov	r6, r5
 8015db6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015dba:	68e3      	ldr	r3, [r4, #12]
 8015dbc:	69a1      	ldr	r1, [r4, #24]
 8015dbe:	4798      	blx	r3
 8015dc0:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015dc4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015dc8:	3501      	adds	r5, #1
 8015dca:	429d      	cmp	r5, r3
 8015dcc:	d3f3      	bcc.n	8015db6 <rcutils_string_array_fini+0x1e>
 8015dce:	68e3      	ldr	r3, [r4, #12]
 8015dd0:	69a1      	ldr	r1, [r4, #24]
 8015dd2:	4798      	blx	r3
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	e9c4 0000 	strd	r0, r0, [r4]
 8015dda:	bd70      	pop	{r4, r5, r6, pc}
 8015ddc:	200b      	movs	r0, #11
 8015dde:	bd70      	pop	{r4, r5, r6, pc}
 8015de0:	6860      	ldr	r0, [r4, #4]
 8015de2:	e7f4      	b.n	8015dce <rcutils_string_array_fini+0x36>
 8015de4:	200b      	movs	r0, #11
 8015de6:	4770      	bx	lr

08015de8 <rcutils_get_zero_initialized_string_map>:
 8015de8:	4b01      	ldr	r3, [pc, #4]	@ (8015df0 <rcutils_get_zero_initialized_string_map+0x8>)
 8015dea:	2000      	movs	r0, #0
 8015dec:	6018      	str	r0, [r3, #0]
 8015dee:	4770      	bx	lr
 8015df0:	2000e260 	.word	0x2000e260

08015df4 <rcutils_string_map_reserve>:
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d05f      	beq.n	8015eb8 <rcutils_string_map_reserve+0xc4>
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	460c      	mov	r4, r1
 8015dfe:	6801      	ldr	r1, [r0, #0]
 8015e00:	b082      	sub	sp, #8
 8015e02:	4605      	mov	r5, r0
 8015e04:	b129      	cbz	r1, 8015e12 <rcutils_string_map_reserve+0x1e>
 8015e06:	68cb      	ldr	r3, [r1, #12]
 8015e08:	42a3      	cmp	r3, r4
 8015e0a:	d906      	bls.n	8015e1a <rcutils_string_map_reserve+0x26>
 8015e0c:	461c      	mov	r4, r3
 8015e0e:	2900      	cmp	r1, #0
 8015e10:	d1f9      	bne.n	8015e06 <rcutils_string_map_reserve+0x12>
 8015e12:	201f      	movs	r0, #31
 8015e14:	b002      	add	sp, #8
 8015e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e1a:	688b      	ldr	r3, [r1, #8]
 8015e1c:	42a3      	cmp	r3, r4
 8015e1e:	d047      	beq.n	8015eb0 <rcutils_string_map_reserve+0xbc>
 8015e20:	6a0e      	ldr	r6, [r1, #32]
 8015e22:	2c00      	cmp	r4, #0
 8015e24:	d034      	beq.n	8015e90 <rcutils_string_map_reserve+0x9c>
 8015e26:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015e2a:	d243      	bcs.n	8015eb4 <rcutils_string_map_reserve+0xc0>
 8015e2c:	00a7      	lsls	r7, r4, #2
 8015e2e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015e32:	6808      	ldr	r0, [r1, #0]
 8015e34:	4632      	mov	r2, r6
 8015e36:	4639      	mov	r1, r7
 8015e38:	47c0      	blx	r8
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d03a      	beq.n	8015eb4 <rcutils_string_map_reserve+0xc0>
 8015e3e:	682b      	ldr	r3, [r5, #0]
 8015e40:	4632      	mov	r2, r6
 8015e42:	6018      	str	r0, [r3, #0]
 8015e44:	4639      	mov	r1, r7
 8015e46:	6858      	ldr	r0, [r3, #4]
 8015e48:	47c0      	blx	r8
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	d032      	beq.n	8015eb4 <rcutils_string_map_reserve+0xc0>
 8015e4e:	682d      	ldr	r5, [r5, #0]
 8015e50:	68ab      	ldr	r3, [r5, #8]
 8015e52:	6068      	str	r0, [r5, #4]
 8015e54:	42a3      	cmp	r3, r4
 8015e56:	d226      	bcs.n	8015ea6 <rcutils_string_map_reserve+0xb2>
 8015e58:	682a      	ldr	r2, [r5, #0]
 8015e5a:	eb00 0c07 	add.w	ip, r0, r7
 8015e5e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015e62:	45e6      	cmp	lr, ip
 8015e64:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015e68:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015e6c:	d203      	bcs.n	8015e76 <rcutils_string_map_reserve+0x82>
 8015e6e:	eb02 0c07 	add.w	ip, r2, r7
 8015e72:	4566      	cmp	r6, ip
 8015e74:	d322      	bcc.n	8015ebc <rcutils_string_map_reserve+0xc8>
 8015e76:	1ae3      	subs	r3, r4, r3
 8015e78:	009a      	lsls	r2, r3, #2
 8015e7a:	4670      	mov	r0, lr
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	9201      	str	r2, [sp, #4]
 8015e80:	f003 faaa 	bl	80193d8 <memset>
 8015e84:	9a01      	ldr	r2, [sp, #4]
 8015e86:	2100      	movs	r1, #0
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f003 faa5 	bl	80193d8 <memset>
 8015e8e:	e00a      	b.n	8015ea6 <rcutils_string_map_reserve+0xb2>
 8015e90:	694f      	ldr	r7, [r1, #20]
 8015e92:	6808      	ldr	r0, [r1, #0]
 8015e94:	4631      	mov	r1, r6
 8015e96:	47b8      	blx	r7
 8015e98:	682b      	ldr	r3, [r5, #0]
 8015e9a:	4631      	mov	r1, r6
 8015e9c:	6858      	ldr	r0, [r3, #4]
 8015e9e:	601c      	str	r4, [r3, #0]
 8015ea0:	47b8      	blx	r7
 8015ea2:	682d      	ldr	r5, [r5, #0]
 8015ea4:	606c      	str	r4, [r5, #4]
 8015ea6:	2000      	movs	r0, #0
 8015ea8:	60ac      	str	r4, [r5, #8]
 8015eaa:	b002      	add	sp, #8
 8015eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eb0:	2000      	movs	r0, #0
 8015eb2:	e7af      	b.n	8015e14 <rcutils_string_map_reserve+0x20>
 8015eb4:	200a      	movs	r0, #10
 8015eb6:	e7ad      	b.n	8015e14 <rcutils_string_map_reserve+0x20>
 8015eb8:	200b      	movs	r0, #11
 8015eba:	4770      	bx	lr
 8015ebc:	1f0b      	subs	r3, r1, #4
 8015ebe:	4418      	add	r0, r3
 8015ec0:	4413      	add	r3, r2
 8015ec2:	3a04      	subs	r2, #4
 8015ec4:	4417      	add	r7, r2
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	f843 2f04 	str.w	r2, [r3, #4]!
 8015ecc:	42bb      	cmp	r3, r7
 8015ece:	f840 2f04 	str.w	r2, [r0, #4]!
 8015ed2:	d1f9      	bne.n	8015ec8 <rcutils_string_map_reserve+0xd4>
 8015ed4:	e7e7      	b.n	8015ea6 <rcutils_string_map_reserve+0xb2>
 8015ed6:	bf00      	nop

08015ed8 <rcutils_string_map_init>:
 8015ed8:	b082      	sub	sp, #8
 8015eda:	b570      	push	{r4, r5, r6, lr}
 8015edc:	ac04      	add	r4, sp, #16
 8015ede:	e884 000c 	stmia.w	r4, {r2, r3}
 8015ee2:	b380      	cbz	r0, 8015f46 <rcutils_string_map_init+0x6e>
 8015ee4:	6806      	ldr	r6, [r0, #0]
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	b12e      	cbz	r6, 8015ef6 <rcutils_string_map_init+0x1e>
 8015eea:	251e      	movs	r5, #30
 8015eec:	4628      	mov	r0, r5
 8015eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ef2:	b002      	add	sp, #8
 8015ef4:	4770      	bx	lr
 8015ef6:	a804      	add	r0, sp, #16
 8015ef8:	460d      	mov	r5, r1
 8015efa:	f7f7 fc97 	bl	800d82c <rcutils_allocator_is_valid>
 8015efe:	b310      	cbz	r0, 8015f46 <rcutils_string_map_init+0x6e>
 8015f00:	9b04      	ldr	r3, [sp, #16]
 8015f02:	9908      	ldr	r1, [sp, #32]
 8015f04:	2024      	movs	r0, #36	@ 0x24
 8015f06:	4798      	blx	r3
 8015f08:	6020      	str	r0, [r4, #0]
 8015f0a:	b310      	cbz	r0, 8015f52 <rcutils_string_map_init+0x7a>
 8015f0c:	f10d 0e10 	add.w	lr, sp, #16
 8015f10:	e9c0 6600 	strd	r6, r6, [r0]
 8015f14:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015f18:	f100 0c10 	add.w	ip, r0, #16
 8015f1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f24:	f8de 3000 	ldr.w	r3, [lr]
 8015f28:	f8cc 3000 	str.w	r3, [ip]
 8015f2c:	4629      	mov	r1, r5
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f7ff ff60 	bl	8015df4 <rcutils_string_map_reserve>
 8015f34:	4605      	mov	r5, r0
 8015f36:	2800      	cmp	r0, #0
 8015f38:	d0d8      	beq.n	8015eec <rcutils_string_map_init+0x14>
 8015f3a:	9b05      	ldr	r3, [sp, #20]
 8015f3c:	9908      	ldr	r1, [sp, #32]
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	4798      	blx	r3
 8015f42:	6026      	str	r6, [r4, #0]
 8015f44:	e7d2      	b.n	8015eec <rcutils_string_map_init+0x14>
 8015f46:	250b      	movs	r5, #11
 8015f48:	4628      	mov	r0, r5
 8015f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f4e:	b002      	add	sp, #8
 8015f50:	4770      	bx	lr
 8015f52:	250a      	movs	r5, #10
 8015f54:	e7ca      	b.n	8015eec <rcutils_string_map_init+0x14>
 8015f56:	bf00      	nop

08015f58 <rcutils_string_map_fini>:
 8015f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f5c:	b082      	sub	sp, #8
 8015f5e:	2800      	cmp	r0, #0
 8015f60:	d03a      	beq.n	8015fd8 <rcutils_string_map_fini+0x80>
 8015f62:	6804      	ldr	r4, [r0, #0]
 8015f64:	4606      	mov	r6, r0
 8015f66:	2c00      	cmp	r4, #0
 8015f68:	d032      	beq.n	8015fd0 <rcutils_string_map_fini+0x78>
 8015f6a:	68a3      	ldr	r3, [r4, #8]
 8015f6c:	b32b      	cbz	r3, 8015fba <rcutils_string_map_fini+0x62>
 8015f6e:	2500      	movs	r5, #0
 8015f70:	6822      	ldr	r2, [r4, #0]
 8015f72:	462f      	mov	r7, r5
 8015f74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015f78:	b1e0      	cbz	r0, 8015fb4 <rcutils_string_map_fini+0x5c>
 8015f7a:	6a21      	ldr	r1, [r4, #32]
 8015f7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015f80:	9101      	str	r1, [sp, #4]
 8015f82:	47c0      	blx	r8
 8015f84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015f88:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015f8c:	9901      	ldr	r1, [sp, #4]
 8015f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f92:	47c0      	blx	r8
 8015f94:	68e3      	ldr	r3, [r4, #12]
 8015f96:	6862      	ldr	r2, [r4, #4]
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015f9e:	60e3      	str	r3, [r4, #12]
 8015fa0:	6834      	ldr	r4, [r6, #0]
 8015fa2:	68a3      	ldr	r3, [r4, #8]
 8015fa4:	3501      	adds	r5, #1
 8015fa6:	429d      	cmp	r5, r3
 8015fa8:	d207      	bcs.n	8015fba <rcutils_string_map_fini+0x62>
 8015faa:	6822      	ldr	r2, [r4, #0]
 8015fac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	d1e2      	bne.n	8015f7a <rcutils_string_map_fini+0x22>
 8015fb4:	3501      	adds	r5, #1
 8015fb6:	429d      	cmp	r5, r3
 8015fb8:	d3dc      	bcc.n	8015f74 <rcutils_string_map_fini+0x1c>
 8015fba:	2100      	movs	r1, #0
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f7ff ff19 	bl	8015df4 <rcutils_string_map_reserve>
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	b920      	cbnz	r0, 8015fd0 <rcutils_string_map_fini+0x78>
 8015fc6:	6830      	ldr	r0, [r6, #0]
 8015fc8:	6943      	ldr	r3, [r0, #20]
 8015fca:	6a01      	ldr	r1, [r0, #32]
 8015fcc:	4798      	blx	r3
 8015fce:	6034      	str	r4, [r6, #0]
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	b002      	add	sp, #8
 8015fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fd8:	240b      	movs	r4, #11
 8015fda:	4620      	mov	r0, r4
 8015fdc:	b002      	add	sp, #8
 8015fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fe2:	bf00      	nop

08015fe4 <rcutils_string_map_getn>:
 8015fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	b300      	cbz	r0, 801602c <rcutils_string_map_getn+0x48>
 8015fea:	6807      	ldr	r7, [r0, #0]
 8015fec:	b1ff      	cbz	r7, 801602e <rcutils_string_map_getn+0x4a>
 8015fee:	4688      	mov	r8, r1
 8015ff0:	b1e1      	cbz	r1, 801602c <rcutils_string_map_getn+0x48>
 8015ff2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015ff6:	683e      	ldr	r6, [r7, #0]
 8015ff8:	f1ba 0f00 	cmp.w	sl, #0
 8015ffc:	d016      	beq.n	801602c <rcutils_string_map_getn+0x48>
 8015ffe:	4691      	mov	r9, r2
 8016000:	3e04      	subs	r6, #4
 8016002:	2400      	movs	r4, #0
 8016004:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801600c:	4628      	mov	r0, r5
 801600e:	3401      	adds	r4, #1
 8016010:	b155      	cbz	r5, 8016028 <rcutils_string_map_getn+0x44>
 8016012:	f7ea f907 	bl	8000224 <strlen>
 8016016:	4548      	cmp	r0, r9
 8016018:	4602      	mov	r2, r0
 801601a:	4629      	mov	r1, r5
 801601c:	bf38      	it	cc
 801601e:	464a      	movcc	r2, r9
 8016020:	4640      	mov	r0, r8
 8016022:	f003 f9ee 	bl	8019402 <strncmp>
 8016026:	b128      	cbz	r0, 8016034 <rcutils_string_map_getn+0x50>
 8016028:	45a2      	cmp	sl, r4
 801602a:	d1eb      	bne.n	8016004 <rcutils_string_map_getn+0x20>
 801602c:	2700      	movs	r7, #0
 801602e:	4638      	mov	r0, r7
 8016030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f853 700b 	ldr.w	r7, [r3, fp]
 801603a:	4638      	mov	r0, r7
 801603c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016040 <rmw_get_zero_initialized_context>:
 8016040:	b510      	push	{r4, lr}
 8016042:	4604      	mov	r4, r0
 8016044:	3010      	adds	r0, #16
 8016046:	f000 f80b 	bl	8016060 <rmw_get_zero_initialized_init_options>
 801604a:	2300      	movs	r3, #0
 801604c:	2000      	movs	r0, #0
 801604e:	2100      	movs	r1, #0
 8016050:	e9c4 0100 	strd	r0, r1, [r4]
 8016054:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016058:	60a3      	str	r3, [r4, #8]
 801605a:	4620      	mov	r0, r4
 801605c:	bd10      	pop	{r4, pc}
 801605e:	bf00      	nop

08016060 <rmw_get_zero_initialized_init_options>:
 8016060:	b510      	push	{r4, lr}
 8016062:	2238      	movs	r2, #56	@ 0x38
 8016064:	4604      	mov	r4, r0
 8016066:	2100      	movs	r1, #0
 8016068:	f003 f9b6 	bl	80193d8 <memset>
 801606c:	f104 0010 	add.w	r0, r4, #16
 8016070:	f000 f806 	bl	8016080 <rmw_get_default_security_options>
 8016074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016078:	60e3      	str	r3, [r4, #12]
 801607a:	4620      	mov	r0, r4
 801607c:	bd10      	pop	{r4, pc}
 801607e:	bf00      	nop

08016080 <rmw_get_default_security_options>:
 8016080:	2200      	movs	r2, #0
 8016082:	7002      	strb	r2, [r0, #0]
 8016084:	6042      	str	r2, [r0, #4]
 8016086:	4770      	bx	lr

08016088 <rmw_time_equal>:
 8016088:	b4f0      	push	{r4, r5, r6, r7}
 801608a:	b084      	sub	sp, #16
 801608c:	ac04      	add	r4, sp, #16
 801608e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016092:	4603      	mov	r3, r0
 8016094:	4924      	ldr	r1, [pc, #144]	@ (8016128 <rmw_time_equal+0xa0>)
 8016096:	9e03      	ldr	r6, [sp, #12]
 8016098:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801609c:	2202      	movs	r2, #2
 801609e:	4299      	cmp	r1, r3
 80160a0:	41aa      	sbcs	r2, r5
 80160a2:	d330      	bcc.n	8016106 <rmw_time_equal+0x7e>
 80160a4:	4c21      	ldr	r4, [pc, #132]	@ (801612c <rmw_time_equal+0xa4>)
 80160a6:	fba3 3204 	umull	r3, r2, r3, r4
 80160aa:	fb04 2205 	mla	r2, r4, r5, r2
 80160ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80160b2:	43dd      	mvns	r5, r3
 80160b4:	1a8c      	subs	r4, r1, r2
 80160b6:	4285      	cmp	r5, r0
 80160b8:	41b4      	sbcs	r4, r6
 80160ba:	d332      	bcc.n	8016122 <rmw_time_equal+0x9a>
 80160bc:	eb10 0c03 	adds.w	ip, r0, r3
 80160c0:	eb42 0106 	adc.w	r1, r2, r6
 80160c4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80160c8:	4817      	ldr	r0, [pc, #92]	@ (8016128 <rmw_time_equal+0xa0>)
 80160ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80160cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80160ce:	2202      	movs	r2, #2
 80160d0:	4298      	cmp	r0, r3
 80160d2:	41b2      	sbcs	r2, r6
 80160d4:	d31c      	bcc.n	8016110 <rmw_time_equal+0x88>
 80160d6:	4c15      	ldr	r4, [pc, #84]	@ (801612c <rmw_time_equal+0xa4>)
 80160d8:	fba3 3204 	umull	r3, r2, r3, r4
 80160dc:	fb04 2206 	mla	r2, r4, r6, r2
 80160e0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80160e4:	43de      	mvns	r6, r3
 80160e6:	1a84      	subs	r4, r0, r2
 80160e8:	42ae      	cmp	r6, r5
 80160ea:	41bc      	sbcs	r4, r7
 80160ec:	d315      	bcc.n	801611a <rmw_time_equal+0x92>
 80160ee:	195b      	adds	r3, r3, r5
 80160f0:	eb42 0207 	adc.w	r2, r2, r7
 80160f4:	428a      	cmp	r2, r1
 80160f6:	bf08      	it	eq
 80160f8:	4563      	cmpeq	r3, ip
 80160fa:	bf0c      	ite	eq
 80160fc:	2001      	moveq	r0, #1
 80160fe:	2000      	movne	r0, #0
 8016100:	b004      	add	sp, #16
 8016102:	bcf0      	pop	{r4, r5, r6, r7}
 8016104:	4770      	bx	lr
 8016106:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801610a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801610e:	e7d9      	b.n	80160c4 <rmw_time_equal+0x3c>
 8016110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016114:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016118:	e7ec      	b.n	80160f4 <rmw_time_equal+0x6c>
 801611a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801611e:	4602      	mov	r2, r0
 8016120:	e7e8      	b.n	80160f4 <rmw_time_equal+0x6c>
 8016122:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016126:	e7cd      	b.n	80160c4 <rmw_time_equal+0x3c>
 8016128:	25c17d04 	.word	0x25c17d04
 801612c:	3b9aca00 	.word	0x3b9aca00

08016130 <rmw_time_total_nsec>:
 8016130:	b470      	push	{r4, r5, r6}
 8016132:	b085      	sub	sp, #20
 8016134:	ac04      	add	r4, sp, #16
 8016136:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801613a:	4603      	mov	r3, r0
 801613c:	4912      	ldr	r1, [pc, #72]	@ (8016188 <rmw_time_total_nsec+0x58>)
 801613e:	9e03      	ldr	r6, [sp, #12]
 8016140:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016144:	2202      	movs	r2, #2
 8016146:	4299      	cmp	r1, r3
 8016148:	41aa      	sbcs	r2, r5
 801614a:	d311      	bcc.n	8016170 <rmw_time_total_nsec+0x40>
 801614c:	4c0f      	ldr	r4, [pc, #60]	@ (801618c <rmw_time_total_nsec+0x5c>)
 801614e:	fba3 3204 	umull	r3, r2, r3, r4
 8016152:	fb04 2205 	mla	r2, r4, r5, r2
 8016156:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801615a:	43dd      	mvns	r5, r3
 801615c:	1a8c      	subs	r4, r1, r2
 801615e:	4285      	cmp	r5, r0
 8016160:	41b4      	sbcs	r4, r6
 8016162:	d30c      	bcc.n	801617e <rmw_time_total_nsec+0x4e>
 8016164:	1818      	adds	r0, r3, r0
 8016166:	eb42 0106 	adc.w	r1, r2, r6
 801616a:	b005      	add	sp, #20
 801616c:	bc70      	pop	{r4, r5, r6}
 801616e:	4770      	bx	lr
 8016170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016174:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016178:	b005      	add	sp, #20
 801617a:	bc70      	pop	{r4, r5, r6}
 801617c:	4770      	bx	lr
 801617e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016182:	b005      	add	sp, #20
 8016184:	bc70      	pop	{r4, r5, r6}
 8016186:	4770      	bx	lr
 8016188:	25c17d04 	.word	0x25c17d04
 801618c:	3b9aca00 	.word	0x3b9aca00

08016190 <rmw_validate_full_topic_name>:
 8016190:	2800      	cmp	r0, #0
 8016192:	d057      	beq.n	8016244 <rmw_validate_full_topic_name+0xb4>
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	460d      	mov	r5, r1
 801619a:	2900      	cmp	r1, #0
 801619c:	d054      	beq.n	8016248 <rmw_validate_full_topic_name+0xb8>
 801619e:	4616      	mov	r6, r2
 80161a0:	4604      	mov	r4, r0
 80161a2:	f7ea f83f 	bl	8000224 <strlen>
 80161a6:	b148      	cbz	r0, 80161bc <rmw_validate_full_topic_name+0x2c>
 80161a8:	7823      	ldrb	r3, [r4, #0]
 80161aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80161ac:	d00d      	beq.n	80161ca <rmw_validate_full_topic_name+0x3a>
 80161ae:	2302      	movs	r3, #2
 80161b0:	602b      	str	r3, [r5, #0]
 80161b2:	b13e      	cbz	r6, 80161c4 <rmw_validate_full_topic_name+0x34>
 80161b4:	2000      	movs	r0, #0
 80161b6:	6030      	str	r0, [r6, #0]
 80161b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161bc:	2301      	movs	r3, #1
 80161be:	602b      	str	r3, [r5, #0]
 80161c0:	2e00      	cmp	r6, #0
 80161c2:	d1f7      	bne.n	80161b4 <rmw_validate_full_topic_name+0x24>
 80161c4:	2000      	movs	r0, #0
 80161c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ca:	1e43      	subs	r3, r0, #1
 80161cc:	5ce2      	ldrb	r2, [r4, r3]
 80161ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80161d0:	d03c      	beq.n	801624c <rmw_validate_full_topic_name+0xbc>
 80161d2:	1e63      	subs	r3, r4, #1
 80161d4:	eb03 0800 	add.w	r8, r3, r0
 80161d8:	f1c4 0e01 	rsb	lr, r4, #1
 80161dc:	eb0e 0703 	add.w	r7, lr, r3
 80161e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80161e4:	f021 0220 	bic.w	r2, r1, #32
 80161e8:	3a41      	subs	r2, #65	@ 0x41
 80161ea:	2a19      	cmp	r2, #25
 80161ec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80161f0:	d90b      	bls.n	801620a <rmw_validate_full_topic_name+0x7a>
 80161f2:	295f      	cmp	r1, #95	@ 0x5f
 80161f4:	d009      	beq.n	801620a <rmw_validate_full_topic_name+0x7a>
 80161f6:	f1bc 0f0a 	cmp.w	ip, #10
 80161fa:	d906      	bls.n	801620a <rmw_validate_full_topic_name+0x7a>
 80161fc:	2304      	movs	r3, #4
 80161fe:	602b      	str	r3, [r5, #0]
 8016200:	2e00      	cmp	r6, #0
 8016202:	d0df      	beq.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016204:	6037      	str	r7, [r6, #0]
 8016206:	2000      	movs	r0, #0
 8016208:	e7d6      	b.n	80161b8 <rmw_validate_full_topic_name+0x28>
 801620a:	4543      	cmp	r3, r8
 801620c:	d1e6      	bne.n	80161dc <rmw_validate_full_topic_name+0x4c>
 801620e:	4f1a      	ldr	r7, [pc, #104]	@ (8016278 <rmw_validate_full_topic_name+0xe8>)
 8016210:	2301      	movs	r3, #1
 8016212:	e004      	b.n	801621e <rmw_validate_full_topic_name+0x8e>
 8016214:	4298      	cmp	r0, r3
 8016216:	f104 0401 	add.w	r4, r4, #1
 801621a:	d91c      	bls.n	8016256 <rmw_validate_full_topic_name+0xc6>
 801621c:	4613      	mov	r3, r2
 801621e:	4298      	cmp	r0, r3
 8016220:	f103 0201 	add.w	r2, r3, #1
 8016224:	d0f6      	beq.n	8016214 <rmw_validate_full_topic_name+0x84>
 8016226:	7821      	ldrb	r1, [r4, #0]
 8016228:	292f      	cmp	r1, #47	@ 0x2f
 801622a:	d1f3      	bne.n	8016214 <rmw_validate_full_topic_name+0x84>
 801622c:	7861      	ldrb	r1, [r4, #1]
 801622e:	292f      	cmp	r1, #47	@ 0x2f
 8016230:	d01c      	beq.n	801626c <rmw_validate_full_topic_name+0xdc>
 8016232:	5dc9      	ldrb	r1, [r1, r7]
 8016234:	0749      	lsls	r1, r1, #29
 8016236:	d5ed      	bpl.n	8016214 <rmw_validate_full_topic_name+0x84>
 8016238:	2206      	movs	r2, #6
 801623a:	602a      	str	r2, [r5, #0]
 801623c:	2e00      	cmp	r6, #0
 801623e:	d0c1      	beq.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016240:	6033      	str	r3, [r6, #0]
 8016242:	e7bf      	b.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016244:	200b      	movs	r0, #11
 8016246:	4770      	bx	lr
 8016248:	200b      	movs	r0, #11
 801624a:	e7b5      	b.n	80161b8 <rmw_validate_full_topic_name+0x28>
 801624c:	2203      	movs	r2, #3
 801624e:	602a      	str	r2, [r5, #0]
 8016250:	2e00      	cmp	r6, #0
 8016252:	d1f5      	bne.n	8016240 <rmw_validate_full_topic_name+0xb0>
 8016254:	e7b6      	b.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016256:	28f7      	cmp	r0, #247	@ 0xf7
 8016258:	d802      	bhi.n	8016260 <rmw_validate_full_topic_name+0xd0>
 801625a:	2000      	movs	r0, #0
 801625c:	6028      	str	r0, [r5, #0]
 801625e:	e7ab      	b.n	80161b8 <rmw_validate_full_topic_name+0x28>
 8016260:	2307      	movs	r3, #7
 8016262:	602b      	str	r3, [r5, #0]
 8016264:	2e00      	cmp	r6, #0
 8016266:	d0ad      	beq.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016268:	23f6      	movs	r3, #246	@ 0xf6
 801626a:	e7e9      	b.n	8016240 <rmw_validate_full_topic_name+0xb0>
 801626c:	2205      	movs	r2, #5
 801626e:	602a      	str	r2, [r5, #0]
 8016270:	2e00      	cmp	r6, #0
 8016272:	d1e5      	bne.n	8016240 <rmw_validate_full_topic_name+0xb0>
 8016274:	e7a6      	b.n	80161c4 <rmw_validate_full_topic_name+0x34>
 8016276:	bf00      	nop
 8016278:	0801b37c 	.word	0x0801b37c

0801627c <get_memory>:
 801627c:	4603      	mov	r3, r0
 801627e:	6840      	ldr	r0, [r0, #4]
 8016280:	b158      	cbz	r0, 801629a <get_memory+0x1e>
 8016282:	6842      	ldr	r2, [r0, #4]
 8016284:	605a      	str	r2, [r3, #4]
 8016286:	b10a      	cbz	r2, 801628c <get_memory+0x10>
 8016288:	2100      	movs	r1, #0
 801628a:	6011      	str	r1, [r2, #0]
 801628c:	681a      	ldr	r2, [r3, #0]
 801628e:	6042      	str	r2, [r0, #4]
 8016290:	b102      	cbz	r2, 8016294 <get_memory+0x18>
 8016292:	6010      	str	r0, [r2, #0]
 8016294:	2200      	movs	r2, #0
 8016296:	6002      	str	r2, [r0, #0]
 8016298:	6018      	str	r0, [r3, #0]
 801629a:	4770      	bx	lr

0801629c <put_memory>:
 801629c:	680b      	ldr	r3, [r1, #0]
 801629e:	b10b      	cbz	r3, 80162a4 <put_memory+0x8>
 80162a0:	684a      	ldr	r2, [r1, #4]
 80162a2:	605a      	str	r2, [r3, #4]
 80162a4:	684a      	ldr	r2, [r1, #4]
 80162a6:	b102      	cbz	r2, 80162aa <put_memory+0xe>
 80162a8:	6013      	str	r3, [r2, #0]
 80162aa:	6803      	ldr	r3, [r0, #0]
 80162ac:	428b      	cmp	r3, r1
 80162ae:	6843      	ldr	r3, [r0, #4]
 80162b0:	bf08      	it	eq
 80162b2:	6002      	streq	r2, [r0, #0]
 80162b4:	604b      	str	r3, [r1, #4]
 80162b6:	b103      	cbz	r3, 80162ba <put_memory+0x1e>
 80162b8:	6019      	str	r1, [r3, #0]
 80162ba:	2300      	movs	r3, #0
 80162bc:	600b      	str	r3, [r1, #0]
 80162be:	6041      	str	r1, [r0, #4]
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop

080162c4 <rmw_destroy_client>:
 80162c4:	b570      	push	{r4, r5, r6, lr}
 80162c6:	b128      	cbz	r0, 80162d4 <rmw_destroy_client+0x10>
 80162c8:	4604      	mov	r4, r0
 80162ca:	6800      	ldr	r0, [r0, #0]
 80162cc:	460d      	mov	r5, r1
 80162ce:	f7f8 fec9 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 80162d2:	b910      	cbnz	r0, 80162da <rmw_destroy_client+0x16>
 80162d4:	2401      	movs	r4, #1
 80162d6:	4620      	mov	r0, r4
 80162d8:	bd70      	pop	{r4, r5, r6, pc}
 80162da:	6863      	ldr	r3, [r4, #4]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d0f9      	beq.n	80162d4 <rmw_destroy_client+0x10>
 80162e0:	2d00      	cmp	r5, #0
 80162e2:	d0f7      	beq.n	80162d4 <rmw_destroy_client+0x10>
 80162e4:	6828      	ldr	r0, [r5, #0]
 80162e6:	f7f8 febd 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d0f2      	beq.n	80162d4 <rmw_destroy_client+0x10>
 80162ee:	686e      	ldr	r6, [r5, #4]
 80162f0:	2e00      	cmp	r6, #0
 80162f2:	d0ef      	beq.n	80162d4 <rmw_destroy_client+0x10>
 80162f4:	6864      	ldr	r4, [r4, #4]
 80162f6:	6932      	ldr	r2, [r6, #16]
 80162f8:	6920      	ldr	r0, [r4, #16]
 80162fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80162fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016302:	6819      	ldr	r1, [r3, #0]
 8016304:	f7f9 ff52 	bl	80101ac <uxr_buffer_cancel_data>
 8016308:	4602      	mov	r2, r0
 801630a:	6920      	ldr	r0, [r4, #16]
 801630c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016310:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016314:	f7f8 fe26 	bl	800ef64 <run_xrce_session>
 8016318:	6920      	ldr	r0, [r4, #16]
 801631a:	6932      	ldr	r2, [r6, #16]
 801631c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016320:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016324:	6819      	ldr	r1, [r3, #0]
 8016326:	f7f9 fb0f 	bl	800f948 <uxr_buffer_delete_entity>
 801632a:	4602      	mov	r2, r0
 801632c:	6920      	ldr	r0, [r4, #16]
 801632e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016332:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016336:	f7f8 fe15 	bl	800ef64 <run_xrce_session>
 801633a:	2800      	cmp	r0, #0
 801633c:	4628      	mov	r0, r5
 801633e:	bf14      	ite	ne
 8016340:	2400      	movne	r4, #0
 8016342:	2402      	moveq	r4, #2
 8016344:	f7f8 fcf6 	bl	800ed34 <rmw_uxrce_fini_client_memory>
 8016348:	e7c5      	b.n	80162d6 <rmw_destroy_client+0x12>
 801634a:	bf00      	nop

0801634c <rmw_get_implementation_identifier>:
 801634c:	4b01      	ldr	r3, [pc, #4]	@ (8016354 <rmw_get_implementation_identifier+0x8>)
 801634e:	6818      	ldr	r0, [r3, #0]
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop
 8016354:	0801b1e0 	.word	0x0801b1e0

08016358 <rmw_create_guard_condition>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	4605      	mov	r5, r0
 801635c:	4807      	ldr	r0, [pc, #28]	@ (801637c <rmw_create_guard_condition+0x24>)
 801635e:	f7ff ff8d 	bl	801627c <get_memory>
 8016362:	b148      	cbz	r0, 8016378 <rmw_create_guard_condition+0x20>
 8016364:	6884      	ldr	r4, [r0, #8]
 8016366:	2300      	movs	r3, #0
 8016368:	7423      	strb	r3, [r4, #16]
 801636a:	61e5      	str	r5, [r4, #28]
 801636c:	f7ff ffee 	bl	801634c <rmw_get_implementation_identifier>
 8016370:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016374:	f104 0014 	add.w	r0, r4, #20
 8016378:	bd38      	pop	{r3, r4, r5, pc}
 801637a:	bf00      	nop
 801637c:	2000e1a4 	.word	0x2000e1a4

08016380 <rmw_destroy_guard_condition>:
 8016380:	b508      	push	{r3, lr}
 8016382:	4b08      	ldr	r3, [pc, #32]	@ (80163a4 <rmw_destroy_guard_condition+0x24>)
 8016384:	6819      	ldr	r1, [r3, #0]
 8016386:	b911      	cbnz	r1, 801638e <rmw_destroy_guard_condition+0xe>
 8016388:	e00a      	b.n	80163a0 <rmw_destroy_guard_condition+0x20>
 801638a:	6849      	ldr	r1, [r1, #4]
 801638c:	b141      	cbz	r1, 80163a0 <rmw_destroy_guard_condition+0x20>
 801638e:	688b      	ldr	r3, [r1, #8]
 8016390:	3314      	adds	r3, #20
 8016392:	4298      	cmp	r0, r3
 8016394:	d1f9      	bne.n	801638a <rmw_destroy_guard_condition+0xa>
 8016396:	4803      	ldr	r0, [pc, #12]	@ (80163a4 <rmw_destroy_guard_condition+0x24>)
 8016398:	f7ff ff80 	bl	801629c <put_memory>
 801639c:	2000      	movs	r0, #0
 801639e:	bd08      	pop	{r3, pc}
 80163a0:	2001      	movs	r0, #1
 80163a2:	bd08      	pop	{r3, pc}
 80163a4:	2000e1a4 	.word	0x2000e1a4

080163a8 <rmw_init_options_init>:
 80163a8:	b084      	sub	sp, #16
 80163aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ac:	b083      	sub	sp, #12
 80163ae:	ad09      	add	r5, sp, #36	@ 0x24
 80163b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80163b4:	b130      	cbz	r0, 80163c4 <rmw_init_options_init+0x1c>
 80163b6:	4604      	mov	r4, r0
 80163b8:	4628      	mov	r0, r5
 80163ba:	f7f7 fa37 	bl	800d82c <rcutils_allocator_is_valid>
 80163be:	b108      	cbz	r0, 80163c4 <rmw_init_options_init+0x1c>
 80163c0:	68a6      	ldr	r6, [r4, #8]
 80163c2:	b12e      	cbz	r6, 80163d0 <rmw_init_options_init+0x28>
 80163c4:	200b      	movs	r0, #11
 80163c6:	b003      	add	sp, #12
 80163c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80163cc:	b004      	add	sp, #16
 80163ce:	4770      	bx	lr
 80163d0:	2200      	movs	r2, #0
 80163d2:	2300      	movs	r3, #0
 80163d4:	e9c4 2300 	strd	r2, r3, [r4]
 80163d8:	4b22      	ldr	r3, [pc, #136]	@ (8016464 <rmw_init_options_init+0xbc>)
 80163da:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8016474 <rmw_init_options_init+0xcc>
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	60a3      	str	r3, [r4, #8]
 80163e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163e4:	f104 0c20 	add.w	ip, r4, #32
 80163e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163ec:	466f      	mov	r7, sp
 80163ee:	682b      	ldr	r3, [r5, #0]
 80163f0:	f8cc 3000 	str.w	r3, [ip]
 80163f4:	4638      	mov	r0, r7
 80163f6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80163fa:	60e6      	str	r6, [r4, #12]
 80163fc:	f7ff fe40 	bl	8016080 <rmw_get_default_security_options>
 8016400:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016404:	f104 0310 	add.w	r3, r4, #16
 8016408:	e883 0003 	stmia.w	r3, {r0, r1}
 801640c:	2203      	movs	r2, #3
 801640e:	4816      	ldr	r0, [pc, #88]	@ (8016468 <rmw_init_options_init+0xc0>)
 8016410:	4916      	ldr	r1, [pc, #88]	@ (801646c <rmw_init_options_init+0xc4>)
 8016412:	7626      	strb	r6, [r4, #24]
 8016414:	f7f8 fbce 	bl	800ebb4 <rmw_uxrce_init_init_options_impl_memory>
 8016418:	4813      	ldr	r0, [pc, #76]	@ (8016468 <rmw_init_options_init+0xc0>)
 801641a:	f7ff ff2f 	bl	801627c <get_memory>
 801641e:	b1f0      	cbz	r0, 801645e <rmw_init_options_init+0xb6>
 8016420:	4a13      	ldr	r2, [pc, #76]	@ (8016470 <rmw_init_options_init+0xc8>)
 8016422:	6883      	ldr	r3, [r0, #8]
 8016424:	6851      	ldr	r1, [r2, #4]
 8016426:	7810      	ldrb	r0, [r2, #0]
 8016428:	6363      	str	r3, [r4, #52]	@ 0x34
 801642a:	7418      	strb	r0, [r3, #16]
 801642c:	6159      	str	r1, [r3, #20]
 801642e:	68d1      	ldr	r1, [r2, #12]
 8016430:	61d9      	str	r1, [r3, #28]
 8016432:	6911      	ldr	r1, [r2, #16]
 8016434:	6219      	str	r1, [r3, #32]
 8016436:	6951      	ldr	r1, [r2, #20]
 8016438:	6892      	ldr	r2, [r2, #8]
 801643a:	619a      	str	r2, [r3, #24]
 801643c:	6259      	str	r1, [r3, #36]	@ 0x24
 801643e:	f7fb fe93 	bl	8012168 <uxr_nanos>
 8016442:	f002 fbb5 	bl	8018bb0 <srand>
 8016446:	f002 fbe1 	bl	8018c0c <rand>
 801644a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801644c:	6298      	str	r0, [r3, #40]	@ 0x28
 801644e:	2800      	cmp	r0, #0
 8016450:	d0f9      	beq.n	8016446 <rmw_init_options_init+0x9e>
 8016452:	2000      	movs	r0, #0
 8016454:	b003      	add	sp, #12
 8016456:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801645a:	b004      	add	sp, #16
 801645c:	4770      	bx	lr
 801645e:	2001      	movs	r0, #1
 8016460:	e7b1      	b.n	80163c6 <rmw_init_options_init+0x1e>
 8016462:	bf00      	nop
 8016464:	0801b1e0 	.word	0x0801b1e0
 8016468:	2000e1b4 	.word	0x2000e1b4
 801646c:	20009a50 	.word	0x20009a50
 8016470:	2000989c 	.word	0x2000989c
 8016474:	0801a618 	.word	0x0801a618

08016478 <rmw_init_options_copy>:
 8016478:	b570      	push	{r4, r5, r6, lr}
 801647a:	b158      	cbz	r0, 8016494 <rmw_init_options_copy+0x1c>
 801647c:	460d      	mov	r5, r1
 801647e:	b149      	cbz	r1, 8016494 <rmw_init_options_copy+0x1c>
 8016480:	4604      	mov	r4, r0
 8016482:	6880      	ldr	r0, [r0, #8]
 8016484:	b120      	cbz	r0, 8016490 <rmw_init_options_copy+0x18>
 8016486:	4b1e      	ldr	r3, [pc, #120]	@ (8016500 <rmw_init_options_copy+0x88>)
 8016488:	6819      	ldr	r1, [r3, #0]
 801648a:	f7e9 fec1 	bl	8000210 <strcmp>
 801648e:	bb90      	cbnz	r0, 80164f6 <rmw_init_options_copy+0x7e>
 8016490:	68ab      	ldr	r3, [r5, #8]
 8016492:	b113      	cbz	r3, 801649a <rmw_init_options_copy+0x22>
 8016494:	250b      	movs	r5, #11
 8016496:	4628      	mov	r0, r5
 8016498:	bd70      	pop	{r4, r5, r6, pc}
 801649a:	4623      	mov	r3, r4
 801649c:	462a      	mov	r2, r5
 801649e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80164a2:	f8d3 c000 	ldr.w	ip, [r3]
 80164a6:	6858      	ldr	r0, [r3, #4]
 80164a8:	6899      	ldr	r1, [r3, #8]
 80164aa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80164ae:	f8c2 e00c 	str.w	lr, [r2, #12]
 80164b2:	3310      	adds	r3, #16
 80164b4:	42b3      	cmp	r3, r6
 80164b6:	f8c2 c000 	str.w	ip, [r2]
 80164ba:	6050      	str	r0, [r2, #4]
 80164bc:	6091      	str	r1, [r2, #8]
 80164be:	f102 0210 	add.w	r2, r2, #16
 80164c2:	d1ee      	bne.n	80164a2 <rmw_init_options_copy+0x2a>
 80164c4:	6819      	ldr	r1, [r3, #0]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	480e      	ldr	r0, [pc, #56]	@ (8016504 <rmw_init_options_copy+0x8c>)
 80164ca:	6053      	str	r3, [r2, #4]
 80164cc:	6011      	str	r1, [r2, #0]
 80164ce:	f7ff fed5 	bl	801627c <get_memory>
 80164d2:	b198      	cbz	r0, 80164fc <rmw_init_options_copy+0x84>
 80164d4:	6883      	ldr	r3, [r0, #8]
 80164d6:	636b      	str	r3, [r5, #52]	@ 0x34
 80164d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80164da:	f102 0c10 	add.w	ip, r2, #16
 80164de:	f103 0410 	add.w	r4, r3, #16
 80164e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164e8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80164ec:	2500      	movs	r5, #0
 80164ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80164f2:	4628      	mov	r0, r5
 80164f4:	bd70      	pop	{r4, r5, r6, pc}
 80164f6:	250c      	movs	r5, #12
 80164f8:	4628      	mov	r0, r5
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	2501      	movs	r5, #1
 80164fe:	e7ca      	b.n	8016496 <rmw_init_options_copy+0x1e>
 8016500:	0801b1e0 	.word	0x0801b1e0
 8016504:	2000e1b4 	.word	0x2000e1b4

08016508 <rmw_init_options_fini>:
 8016508:	2800      	cmp	r0, #0
 801650a:	d03d      	beq.n	8016588 <rmw_init_options_fini+0x80>
 801650c:	b510      	push	{r4, lr}
 801650e:	4604      	mov	r4, r0
 8016510:	b08e      	sub	sp, #56	@ 0x38
 8016512:	3020      	adds	r0, #32
 8016514:	f7f7 f98a 	bl	800d82c <rcutils_allocator_is_valid>
 8016518:	b360      	cbz	r0, 8016574 <rmw_init_options_fini+0x6c>
 801651a:	68a0      	ldr	r0, [r4, #8]
 801651c:	b120      	cbz	r0, 8016528 <rmw_init_options_fini+0x20>
 801651e:	4b1c      	ldr	r3, [pc, #112]	@ (8016590 <rmw_init_options_fini+0x88>)
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	f7e9 fe75 	bl	8000210 <strcmp>
 8016526:	bb68      	cbnz	r0, 8016584 <rmw_init_options_fini+0x7c>
 8016528:	4b1a      	ldr	r3, [pc, #104]	@ (8016594 <rmw_init_options_fini+0x8c>)
 801652a:	6819      	ldr	r1, [r3, #0]
 801652c:	b331      	cbz	r1, 801657c <rmw_init_options_fini+0x74>
 801652e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016530:	e001      	b.n	8016536 <rmw_init_options_fini+0x2e>
 8016532:	6849      	ldr	r1, [r1, #4]
 8016534:	b311      	cbz	r1, 801657c <rmw_init_options_fini+0x74>
 8016536:	688b      	ldr	r3, [r1, #8]
 8016538:	429a      	cmp	r2, r3
 801653a:	d1fa      	bne.n	8016532 <rmw_init_options_fini+0x2a>
 801653c:	4815      	ldr	r0, [pc, #84]	@ (8016594 <rmw_init_options_fini+0x8c>)
 801653e:	f7ff fead 	bl	801629c <put_memory>
 8016542:	4668      	mov	r0, sp
 8016544:	f7ff fd8c 	bl	8016060 <rmw_get_zero_initialized_init_options>
 8016548:	46ee      	mov	lr, sp
 801654a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801654e:	46a4      	mov	ip, r4
 8016550:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016554:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801655c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016564:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016568:	e88c 0003 	stmia.w	ip, {r0, r1}
 801656c:	2300      	movs	r3, #0
 801656e:	4618      	mov	r0, r3
 8016570:	b00e      	add	sp, #56	@ 0x38
 8016572:	bd10      	pop	{r4, pc}
 8016574:	230b      	movs	r3, #11
 8016576:	4618      	mov	r0, r3
 8016578:	b00e      	add	sp, #56	@ 0x38
 801657a:	bd10      	pop	{r4, pc}
 801657c:	2301      	movs	r3, #1
 801657e:	4618      	mov	r0, r3
 8016580:	b00e      	add	sp, #56	@ 0x38
 8016582:	bd10      	pop	{r4, pc}
 8016584:	230c      	movs	r3, #12
 8016586:	e7f2      	b.n	801656e <rmw_init_options_fini+0x66>
 8016588:	230b      	movs	r3, #11
 801658a:	4618      	mov	r0, r3
 801658c:	4770      	bx	lr
 801658e:	bf00      	nop
 8016590:	0801b1e0 	.word	0x0801b1e0
 8016594:	2000e1b4 	.word	0x2000e1b4

08016598 <rmw_init>:
 8016598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801659c:	b083      	sub	sp, #12
 801659e:	2800      	cmp	r0, #0
 80165a0:	f000 80d3 	beq.w	801674a <rmw_init+0x1b2>
 80165a4:	460e      	mov	r6, r1
 80165a6:	2900      	cmp	r1, #0
 80165a8:	f000 80cf 	beq.w	801674a <rmw_init+0x1b2>
 80165ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80165ae:	4605      	mov	r5, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	f000 80ca 	beq.w	801674a <rmw_init+0x1b2>
 80165b6:	4b78      	ldr	r3, [pc, #480]	@ (8016798 <rmw_init+0x200>)
 80165b8:	6880      	ldr	r0, [r0, #8]
 80165ba:	681f      	ldr	r7, [r3, #0]
 80165bc:	b128      	cbz	r0, 80165ca <rmw_init+0x32>
 80165be:	4639      	mov	r1, r7
 80165c0:	f7e9 fe26 	bl	8000210 <strcmp>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	f040 80ca 	bne.w	801675e <rmw_init+0x1c6>
 80165ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80165ce:	4c73      	ldr	r4, [pc, #460]	@ (801679c <rmw_init+0x204>)
 80165d0:	4973      	ldr	r1, [pc, #460]	@ (80167a0 <rmw_init+0x208>)
 80165d2:	4874      	ldr	r0, [pc, #464]	@ (80167a4 <rmw_init+0x20c>)
 80165d4:	60b7      	str	r7, [r6, #8]
 80165d6:	e9c6 2300 	strd	r2, r3, [r6]
 80165da:	68eb      	ldr	r3, [r5, #12]
 80165dc:	64b3      	str	r3, [r6, #72]	@ 0x48
 80165de:	2201      	movs	r2, #1
 80165e0:	f7f8 fa88 	bl	800eaf4 <rmw_uxrce_init_session_memory>
 80165e4:	4620      	mov	r0, r4
 80165e6:	4970      	ldr	r1, [pc, #448]	@ (80167a8 <rmw_init+0x210>)
 80165e8:	2204      	movs	r2, #4
 80165ea:	f7f8 fac3 	bl	800eb74 <rmw_uxrce_init_static_input_buffer_memory>
 80165ee:	f04f 0800 	mov.w	r8, #0
 80165f2:	486c      	ldr	r0, [pc, #432]	@ (80167a4 <rmw_init+0x20c>)
 80165f4:	f884 800d 	strb.w	r8, [r4, #13]
 80165f8:	f7ff fe40 	bl	801627c <get_memory>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	f000 80a9 	beq.w	8016754 <rmw_init+0x1bc>
 8016602:	6884      	ldr	r4, [r0, #8]
 8016604:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8016606:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016608:	f890 c010 	ldrb.w	ip, [r0, #16]
 801660c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016610:	9101      	str	r1, [sp, #4]
 8016612:	6a00      	ldr	r0, [r0, #32]
 8016614:	9000      	str	r0, [sp, #0]
 8016616:	f104 0910 	add.w	r9, r4, #16
 801661a:	4661      	mov	r1, ip
 801661c:	4648      	mov	r0, r9
 801661e:	f7f9 fc11 	bl	800fe44 <uxr_set_custom_transport_callbacks>
 8016622:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8016626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801662a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801662e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016632:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8016636:	495d      	ldr	r1, [pc, #372]	@ (80167ac <rmw_init+0x214>)
 8016638:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801663c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016640:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8016644:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8016648:	4859      	ldr	r0, [pc, #356]	@ (80167b0 <rmw_init+0x218>)
 801664a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801664e:	2201      	movs	r2, #1
 8016650:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8016652:	f7f8 fa2f 	bl	800eab4 <rmw_uxrce_init_node_memory>
 8016656:	4957      	ldr	r1, [pc, #348]	@ (80167b4 <rmw_init+0x21c>)
 8016658:	4857      	ldr	r0, [pc, #348]	@ (80167b8 <rmw_init+0x220>)
 801665a:	2205      	movs	r2, #5
 801665c:	f7f8 fa0a 	bl	800ea74 <rmw_uxrce_init_subscription_memory>
 8016660:	4956      	ldr	r1, [pc, #344]	@ (80167bc <rmw_init+0x224>)
 8016662:	4857      	ldr	r0, [pc, #348]	@ (80167c0 <rmw_init+0x228>)
 8016664:	220a      	movs	r2, #10
 8016666:	f7f8 f9e5 	bl	800ea34 <rmw_uxrce_init_publisher_memory>
 801666a:	4956      	ldr	r1, [pc, #344]	@ (80167c4 <rmw_init+0x22c>)
 801666c:	4856      	ldr	r0, [pc, #344]	@ (80167c8 <rmw_init+0x230>)
 801666e:	2201      	movs	r2, #1
 8016670:	f7f8 f9a0 	bl	800e9b4 <rmw_uxrce_init_service_memory>
 8016674:	4955      	ldr	r1, [pc, #340]	@ (80167cc <rmw_init+0x234>)
 8016676:	4856      	ldr	r0, [pc, #344]	@ (80167d0 <rmw_init+0x238>)
 8016678:	2201      	movs	r2, #1
 801667a:	f7f8 f9bb 	bl	800e9f4 <rmw_uxrce_init_client_memory>
 801667e:	4955      	ldr	r1, [pc, #340]	@ (80167d4 <rmw_init+0x23c>)
 8016680:	4855      	ldr	r0, [pc, #340]	@ (80167d8 <rmw_init+0x240>)
 8016682:	220f      	movs	r2, #15
 8016684:	f7f8 fa56 	bl	800eb34 <rmw_uxrce_init_topic_memory>
 8016688:	4954      	ldr	r1, [pc, #336]	@ (80167dc <rmw_init+0x244>)
 801668a:	4855      	ldr	r0, [pc, #340]	@ (80167e0 <rmw_init+0x248>)
 801668c:	2203      	movs	r2, #3
 801668e:	f7f8 fa91 	bl	800ebb4 <rmw_uxrce_init_init_options_impl_memory>
 8016692:	4954      	ldr	r1, [pc, #336]	@ (80167e4 <rmw_init+0x24c>)
 8016694:	4854      	ldr	r0, [pc, #336]	@ (80167e8 <rmw_init+0x250>)
 8016696:	2204      	movs	r2, #4
 8016698:	f7f8 faac 	bl	800ebf4 <rmw_uxrce_init_wait_set_memory>
 801669c:	4953      	ldr	r1, [pc, #332]	@ (80167ec <rmw_init+0x254>)
 801669e:	4854      	ldr	r0, [pc, #336]	@ (80167f0 <rmw_init+0x258>)
 80166a0:	2204      	movs	r2, #4
 80166a2:	f7f8 fac7 	bl	800ec34 <rmw_uxrce_init_guard_condition_memory>
 80166a6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80166a8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80166aa:	4642      	mov	r2, r8
 80166ac:	f7f8 f95c 	bl	800e968 <rmw_uxrce_transport_init>
 80166b0:	4607      	mov	r7, r0
 80166b2:	2800      	cmp	r0, #0
 80166b4:	d158      	bne.n	8016768 <rmw_init+0x1d0>
 80166b6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80166b8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80166bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166be:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80166c2:	4628      	mov	r0, r5
 80166c4:	f7f9 fef8 	bl	80104b8 <uxr_init_session>
 80166c8:	494a      	ldr	r1, [pc, #296]	@ (80167f4 <rmw_init+0x25c>)
 80166ca:	4622      	mov	r2, r4
 80166cc:	4628      	mov	r0, r5
 80166ce:	f7f9 ff17 	bl	8010500 <uxr_set_topic_callback>
 80166d2:	4949      	ldr	r1, [pc, #292]	@ (80167f8 <rmw_init+0x260>)
 80166d4:	463a      	mov	r2, r7
 80166d6:	4628      	mov	r0, r5
 80166d8:	f7f9 ff0e 	bl	80104f8 <uxr_set_status_callback>
 80166dc:	4947      	ldr	r1, [pc, #284]	@ (80167fc <rmw_init+0x264>)
 80166de:	463a      	mov	r2, r7
 80166e0:	4628      	mov	r0, r5
 80166e2:	f7f9 ff11 	bl	8010508 <uxr_set_request_callback>
 80166e6:	4946      	ldr	r1, [pc, #280]	@ (8016800 <rmw_init+0x268>)
 80166e8:	463a      	mov	r2, r7
 80166ea:	4628      	mov	r0, r5
 80166ec:	f7f9 ff10 	bl	8010510 <uxr_set_reply_callback>
 80166f0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80166f4:	2304      	movs	r3, #4
 80166f6:	0092      	lsls	r2, r2, #2
 80166f8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80166fc:	4628      	mov	r0, r5
 80166fe:	f7f9 ff45 	bl	801058c <uxr_create_input_reliable_stream>
 8016702:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016706:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801670a:	0092      	lsls	r2, r2, #2
 801670c:	2304      	movs	r3, #4
 801670e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016712:	4628      	mov	r0, r5
 8016714:	f7f9 ff12 	bl	801053c <uxr_create_output_reliable_stream>
 8016718:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801671c:	4628      	mov	r0, r5
 801671e:	f7f9 ff2f 	bl	8010580 <uxr_create_input_best_effort_stream>
 8016722:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8016726:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801672a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801672e:	3114      	adds	r1, #20
 8016730:	4628      	mov	r0, r5
 8016732:	f7f9 fef1 	bl	8010518 <uxr_create_output_best_effort_stream>
 8016736:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801673a:	4628      	mov	r0, r5
 801673c:	f7fa fca6 	bl	801108c <uxr_create_session>
 8016740:	b1f8      	cbz	r0, 8016782 <rmw_init+0x1ea>
 8016742:	4638      	mov	r0, r7
 8016744:	b003      	add	sp, #12
 8016746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801674a:	270b      	movs	r7, #11
 801674c:	4638      	mov	r0, r7
 801674e:	b003      	add	sp, #12
 8016750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016754:	2701      	movs	r7, #1
 8016756:	4638      	mov	r0, r7
 8016758:	b003      	add	sp, #12
 801675a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801675e:	270c      	movs	r7, #12
 8016760:	4638      	mov	r0, r7
 8016762:	b003      	add	sp, #12
 8016764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016768:	4648      	mov	r0, r9
 801676a:	f7f9 fbad 	bl	800fec8 <uxr_close_custom_transport>
 801676e:	480d      	ldr	r0, [pc, #52]	@ (80167a4 <rmw_init+0x20c>)
 8016770:	4621      	mov	r1, r4
 8016772:	f7ff fd93 	bl	801629c <put_memory>
 8016776:	4638      	mov	r0, r7
 8016778:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801677c:	b003      	add	sp, #12
 801677e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016782:	4648      	mov	r0, r9
 8016784:	f7f9 fba0 	bl	800fec8 <uxr_close_custom_transport>
 8016788:	4806      	ldr	r0, [pc, #24]	@ (80167a4 <rmw_init+0x20c>)
 801678a:	4621      	mov	r1, r4
 801678c:	f7ff fd86 	bl	801629c <put_memory>
 8016790:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8016792:	2701      	movs	r7, #1
 8016794:	e7d5      	b.n	8016742 <rmw_init+0x1aa>
 8016796:	bf00      	nop
 8016798:	0801b1e0 	.word	0x0801b1e0
 801679c:	2000e204 	.word	0x2000e204
 80167a0:	2000a4b0 	.word	0x2000a4b0
 80167a4:	2000e1f4 	.word	0x2000e1f4
 80167a8:	2000ba58 	.word	0x2000ba58
 80167ac:	20009ad4 	.word	0x20009ad4
 80167b0:	2000e1c4 	.word	0x2000e1c4
 80167b4:	2000db58 	.word	0x2000db58
 80167b8:	2000e214 	.word	0x2000e214
 80167bc:	20009b78 	.word	0x20009b78
 80167c0:	2000e1d4 	.word	0x2000e1d4
 80167c4:	2000a3e8 	.word	0x2000a3e8
 80167c8:	2000e1e4 	.word	0x2000e1e4
 80167cc:	20009908 	.word	0x20009908
 80167d0:	200098f4 	.word	0x200098f4
 80167d4:	2000df90 	.word	0x2000df90
 80167d8:	2000e224 	.word	0x2000e224
 80167dc:	20009a50 	.word	0x20009a50
 80167e0:	2000e1b4 	.word	0x2000e1b4
 80167e4:	2000e134 	.word	0x2000e134
 80167e8:	2000e234 	.word	0x2000e234
 80167ec:	200099d0 	.word	0x200099d0
 80167f0:	2000e1a4 	.word	0x2000e1a4
 80167f4:	08018781 	.word	0x08018781
 80167f8:	08018779 	.word	0x08018779
 80167fc:	08018819 	.word	0x08018819
 8016800:	080188b5 	.word	0x080188b5

08016804 <rmw_shutdown>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	b094      	sub	sp, #80	@ 0x50
 8016808:	2800      	cmp	r0, #0
 801680a:	d050      	beq.n	80168ae <rmw_shutdown+0xaa>
 801680c:	4605      	mov	r5, r0
 801680e:	6880      	ldr	r0, [r0, #8]
 8016810:	b128      	cbz	r0, 801681e <rmw_shutdown+0x1a>
 8016812:	4b2b      	ldr	r3, [pc, #172]	@ (80168c0 <rmw_shutdown+0xbc>)
 8016814:	6819      	ldr	r1, [r3, #0]
 8016816:	f7e9 fcfb 	bl	8000210 <strcmp>
 801681a:	2800      	cmp	r0, #0
 801681c:	d143      	bne.n	80168a6 <rmw_shutdown+0xa2>
 801681e:	4b29      	ldr	r3, [pc, #164]	@ (80168c4 <rmw_shutdown+0xc0>)
 8016820:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016822:	681c      	ldr	r4, [r3, #0]
 8016824:	2c00      	cmp	r4, #0
 8016826:	d046      	beq.n	80168b6 <rmw_shutdown+0xb2>
 8016828:	2600      	movs	r6, #0
 801682a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801682e:	6902      	ldr	r2, [r0, #16]
 8016830:	428a      	cmp	r2, r1
 8016832:	d024      	beq.n	801687e <rmw_shutdown+0x7a>
 8016834:	2c00      	cmp	r4, #0
 8016836:	d1f8      	bne.n	801682a <rmw_shutdown+0x26>
 8016838:	b189      	cbz	r1, 801685e <rmw_shutdown+0x5a>
 801683a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801683e:	789b      	ldrb	r3, [r3, #2]
 8016840:	2b01      	cmp	r3, #1
 8016842:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8016846:	bf14      	ite	ne
 8016848:	210a      	movne	r1, #10
 801684a:	2100      	moveq	r1, #0
 801684c:	f7fa fbf6 	bl	801103c <uxr_delete_session_retries>
 8016850:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016852:	f7f8 fa0f 	bl	800ec74 <rmw_uxrce_fini_session_memory>
 8016856:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016858:	3010      	adds	r0, #16
 801685a:	f7f9 fb35 	bl	800fec8 <uxr_close_custom_transport>
 801685e:	2300      	movs	r3, #0
 8016860:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016862:	b1b6      	cbz	r6, 8016892 <rmw_shutdown+0x8e>
 8016864:	4d18      	ldr	r5, [pc, #96]	@ (80168c8 <rmw_shutdown+0xc4>)
 8016866:	682c      	ldr	r4, [r5, #0]
 8016868:	b134      	cbz	r4, 8016878 <rmw_shutdown+0x74>
 801686a:	4621      	mov	r1, r4
 801686c:	6864      	ldr	r4, [r4, #4]
 801686e:	4628      	mov	r0, r5
 8016870:	f7ff fd14 	bl	801629c <put_memory>
 8016874:	2c00      	cmp	r4, #0
 8016876:	d1f8      	bne.n	801686a <rmw_shutdown+0x66>
 8016878:	4630      	mov	r0, r6
 801687a:	b014      	add	sp, #80	@ 0x50
 801687c:	bd70      	pop	{r4, r5, r6, pc}
 801687e:	3018      	adds	r0, #24
 8016880:	f7f7 fc62 	bl	800e148 <rmw_destroy_node>
 8016884:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016886:	4606      	mov	r6, r0
 8016888:	2c00      	cmp	r4, #0
 801688a:	d1ce      	bne.n	801682a <rmw_shutdown+0x26>
 801688c:	2900      	cmp	r1, #0
 801688e:	d1d4      	bne.n	801683a <rmw_shutdown+0x36>
 8016890:	e7e5      	b.n	801685e <rmw_shutdown+0x5a>
 8016892:	4668      	mov	r0, sp
 8016894:	f7ff fbd4 	bl	8016040 <rmw_get_zero_initialized_context>
 8016898:	2250      	movs	r2, #80	@ 0x50
 801689a:	4669      	mov	r1, sp
 801689c:	4628      	mov	r0, r5
 801689e:	f002 fe64 	bl	801956a <memcpy>
 80168a2:	2600      	movs	r6, #0
 80168a4:	e7de      	b.n	8016864 <rmw_shutdown+0x60>
 80168a6:	260c      	movs	r6, #12
 80168a8:	4630      	mov	r0, r6
 80168aa:	b014      	add	sp, #80	@ 0x50
 80168ac:	bd70      	pop	{r4, r5, r6, pc}
 80168ae:	260b      	movs	r6, #11
 80168b0:	4630      	mov	r0, r6
 80168b2:	b014      	add	sp, #80	@ 0x50
 80168b4:	bd70      	pop	{r4, r5, r6, pc}
 80168b6:	2900      	cmp	r1, #0
 80168b8:	d0eb      	beq.n	8016892 <rmw_shutdown+0x8e>
 80168ba:	4626      	mov	r6, r4
 80168bc:	e7bd      	b.n	801683a <rmw_shutdown+0x36>
 80168be:	bf00      	nop
 80168c0:	0801b1e0 	.word	0x0801b1e0
 80168c4:	2000e1c4 	.word	0x2000e1c4
 80168c8:	2000e204 	.word	0x2000e204

080168cc <rmw_context_fini>:
 80168cc:	4b17      	ldr	r3, [pc, #92]	@ (801692c <rmw_context_fini+0x60>)
 80168ce:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80168d0:	b570      	push	{r4, r5, r6, lr}
 80168d2:	681c      	ldr	r4, [r3, #0]
 80168d4:	4605      	mov	r5, r0
 80168d6:	b334      	cbz	r4, 8016926 <rmw_context_fini+0x5a>
 80168d8:	2600      	movs	r6, #0
 80168da:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80168de:	6902      	ldr	r2, [r0, #16]
 80168e0:	428a      	cmp	r2, r1
 80168e2:	d018      	beq.n	8016916 <rmw_context_fini+0x4a>
 80168e4:	2c00      	cmp	r4, #0
 80168e6:	d1f8      	bne.n	80168da <rmw_context_fini+0xe>
 80168e8:	b189      	cbz	r1, 801690e <rmw_context_fini+0x42>
 80168ea:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80168ee:	789b      	ldrb	r3, [r3, #2]
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80168f6:	bf14      	ite	ne
 80168f8:	210a      	movne	r1, #10
 80168fa:	2100      	moveq	r1, #0
 80168fc:	f7fa fb9e 	bl	801103c <uxr_delete_session_retries>
 8016900:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016902:	f7f8 f9b7 	bl	800ec74 <rmw_uxrce_fini_session_memory>
 8016906:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016908:	3010      	adds	r0, #16
 801690a:	f7f9 fadd 	bl	800fec8 <uxr_close_custom_transport>
 801690e:	2300      	movs	r3, #0
 8016910:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016912:	4630      	mov	r0, r6
 8016914:	bd70      	pop	{r4, r5, r6, pc}
 8016916:	3018      	adds	r0, #24
 8016918:	f7f7 fc16 	bl	800e148 <rmw_destroy_node>
 801691c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801691e:	4606      	mov	r6, r0
 8016920:	2c00      	cmp	r4, #0
 8016922:	d1da      	bne.n	80168da <rmw_context_fini+0xe>
 8016924:	e7e0      	b.n	80168e8 <rmw_context_fini+0x1c>
 8016926:	4626      	mov	r6, r4
 8016928:	e7de      	b.n	80168e8 <rmw_context_fini+0x1c>
 801692a:	bf00      	nop
 801692c:	2000e1c4 	.word	0x2000e1c4

08016930 <create_topic>:
 8016930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016934:	4605      	mov	r5, r0
 8016936:	b084      	sub	sp, #16
 8016938:	4822      	ldr	r0, [pc, #136]	@ (80169c4 <create_topic+0x94>)
 801693a:	460f      	mov	r7, r1
 801693c:	4616      	mov	r6, r2
 801693e:	f7ff fc9d 	bl	801627c <get_memory>
 8016942:	4604      	mov	r4, r0
 8016944:	2800      	cmp	r0, #0
 8016946:	d039      	beq.n	80169bc <create_topic+0x8c>
 8016948:	692b      	ldr	r3, [r5, #16]
 801694a:	6884      	ldr	r4, [r0, #8]
 801694c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80169cc <create_topic+0x9c>
 8016950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016954:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016958:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801695c:	1c42      	adds	r2, r0, #1
 801695e:	2102      	movs	r1, #2
 8016960:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016964:	f7f9 fab4 	bl	800fed0 <uxr_object_id>
 8016968:	223c      	movs	r2, #60	@ 0x3c
 801696a:	6120      	str	r0, [r4, #16]
 801696c:	4641      	mov	r1, r8
 801696e:	4638      	mov	r0, r7
 8016970:	f7f8 fb5e 	bl	800f030 <generate_topic_name>
 8016974:	b1f0      	cbz	r0, 80169b4 <create_topic+0x84>
 8016976:	4f14      	ldr	r7, [pc, #80]	@ (80169c8 <create_topic+0x98>)
 8016978:	4630      	mov	r0, r6
 801697a:	2264      	movs	r2, #100	@ 0x64
 801697c:	4639      	mov	r1, r7
 801697e:	f7f8 fb27 	bl	800efd0 <generate_type_name>
 8016982:	b1b8      	cbz	r0, 80169b4 <create_topic+0x84>
 8016984:	6928      	ldr	r0, [r5, #16]
 8016986:	2306      	movs	r3, #6
 8016988:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801698c:	f8cd 8000 	str.w	r8, [sp]
 8016990:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016994:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016998:	6811      	ldr	r1, [r2, #0]
 801699a:	696b      	ldr	r3, [r5, #20]
 801699c:	6922      	ldr	r2, [r4, #16]
 801699e:	f7f9 f851 	bl	800fa44 <uxr_buffer_create_topic_bin>
 80169a2:	4602      	mov	r2, r0
 80169a4:	6928      	ldr	r0, [r5, #16]
 80169a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80169aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80169ae:	f7f8 fad9 	bl	800ef64 <run_xrce_session>
 80169b2:	b918      	cbnz	r0, 80169bc <create_topic+0x8c>
 80169b4:	4620      	mov	r0, r4
 80169b6:	f7f8 f9d3 	bl	800ed60 <rmw_uxrce_fini_topic_memory>
 80169ba:	2400      	movs	r4, #0
 80169bc:	4620      	mov	r0, r4
 80169be:	b004      	add	sp, #16
 80169c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c4:	2000e224 	.word	0x2000e224
 80169c8:	2000e2a0 	.word	0x2000e2a0
 80169cc:	2000e264 	.word	0x2000e264

080169d0 <destroy_topic>:
 80169d0:	b538      	push	{r3, r4, r5, lr}
 80169d2:	6985      	ldr	r5, [r0, #24]
 80169d4:	b1d5      	cbz	r5, 8016a0c <destroy_topic+0x3c>
 80169d6:	4604      	mov	r4, r0
 80169d8:	6928      	ldr	r0, [r5, #16]
 80169da:	6922      	ldr	r2, [r4, #16]
 80169dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80169e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169e4:	6819      	ldr	r1, [r3, #0]
 80169e6:	f7f8 ffaf 	bl	800f948 <uxr_buffer_delete_entity>
 80169ea:	4602      	mov	r2, r0
 80169ec:	6928      	ldr	r0, [r5, #16]
 80169ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80169f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80169f6:	f7f8 fab5 	bl	800ef64 <run_xrce_session>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	4620      	mov	r0, r4
 80169fe:	bf14      	ite	ne
 8016a00:	2400      	movne	r4, #0
 8016a02:	2402      	moveq	r4, #2
 8016a04:	f7f8 f9ac 	bl	800ed60 <rmw_uxrce_fini_topic_memory>
 8016a08:	4620      	mov	r0, r4
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}
 8016a0c:	2401      	movs	r4, #1
 8016a0e:	4620      	mov	r0, r4
 8016a10:	bd38      	pop	{r3, r4, r5, pc}
 8016a12:	bf00      	nop

08016a14 <rmw_send_request>:
 8016a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a18:	4604      	mov	r4, r0
 8016a1a:	6800      	ldr	r0, [r0, #0]
 8016a1c:	b08b      	sub	sp, #44	@ 0x2c
 8016a1e:	460e      	mov	r6, r1
 8016a20:	4615      	mov	r5, r2
 8016a22:	b128      	cbz	r0, 8016a30 <rmw_send_request+0x1c>
 8016a24:	4b21      	ldr	r3, [pc, #132]	@ (8016aac <rmw_send_request+0x98>)
 8016a26:	6819      	ldr	r1, [r3, #0]
 8016a28:	f7e9 fbf2 	bl	8000210 <strcmp>
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	d139      	bne.n	8016aa4 <rmw_send_request+0x90>
 8016a30:	6864      	ldr	r4, [r4, #4]
 8016a32:	6963      	ldr	r3, [r4, #20]
 8016a34:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016a38:	689b      	ldr	r3, [r3, #8]
 8016a3a:	4798      	blx	r3
 8016a3c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016a40:	4630      	mov	r0, r6
 8016a42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016a46:	4798      	blx	r3
 8016a48:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016a4c:	9000      	str	r0, [sp, #0]
 8016a4e:	6922      	ldr	r2, [r4, #16]
 8016a50:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016a52:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016a56:	ab02      	add	r3, sp, #8
 8016a58:	f7fb fc26 	bl	80122a8 <uxr_prepare_output_stream>
 8016a5c:	2700      	movs	r7, #0
 8016a5e:	6028      	str	r0, [r5, #0]
 8016a60:	606f      	str	r7, [r5, #4]
 8016a62:	b198      	cbz	r0, 8016a8c <rmw_send_request+0x78>
 8016a64:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016a68:	a902      	add	r1, sp, #8
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	4798      	blx	r3
 8016a6e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016a72:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016a76:	2b01      	cmp	r3, #1
 8016a78:	d00c      	beq.n	8016a94 <rmw_send_request+0x80>
 8016a7a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016a7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a80:	f7fa f96a 	bl	8010d58 <uxr_run_session_until_confirm_delivery>
 8016a84:	4638      	mov	r0, r7
 8016a86:	b00b      	add	sp, #44	@ 0x2c
 8016a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a8c:	2001      	movs	r0, #1
 8016a8e:	b00b      	add	sp, #44	@ 0x2c
 8016a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016a98:	f7f9 fd9e 	bl	80105d8 <uxr_flash_output_streams>
 8016a9c:	4638      	mov	r0, r7
 8016a9e:	b00b      	add	sp, #44	@ 0x2c
 8016aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aa4:	200c      	movs	r0, #12
 8016aa6:	b00b      	add	sp, #44	@ 0x2c
 8016aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aac:	0801b1e0 	.word	0x0801b1e0

08016ab0 <rmw_take_request>:
 8016ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ab4:	4605      	mov	r5, r0
 8016ab6:	6800      	ldr	r0, [r0, #0]
 8016ab8:	b089      	sub	sp, #36	@ 0x24
 8016aba:	460c      	mov	r4, r1
 8016abc:	4690      	mov	r8, r2
 8016abe:	461e      	mov	r6, r3
 8016ac0:	b128      	cbz	r0, 8016ace <rmw_take_request+0x1e>
 8016ac2:	4b28      	ldr	r3, [pc, #160]	@ (8016b64 <rmw_take_request+0xb4>)
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	f7e9 fba3 	bl	8000210 <strcmp>
 8016aca:	2800      	cmp	r0, #0
 8016acc:	d146      	bne.n	8016b5c <rmw_take_request+0xac>
 8016ace:	b10e      	cbz	r6, 8016ad4 <rmw_take_request+0x24>
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	7033      	strb	r3, [r6, #0]
 8016ad4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016ad8:	f7f8 f9c6 	bl	800ee68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016adc:	4648      	mov	r0, r9
 8016ade:	f7f8 f99b 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ae2:	4607      	mov	r7, r0
 8016ae4:	b3b0      	cbz	r0, 8016b54 <rmw_take_request+0xa4>
 8016ae6:	6885      	ldr	r5, [r0, #8]
 8016ae8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016aec:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016af0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016af4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016af8:	7423      	strb	r3, [r4, #16]
 8016afa:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016afe:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016b02:	74e2      	strb	r2, [r4, #19]
 8016b04:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016b08:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016b0c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016b10:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016b14:	61e1      	str	r1, [r4, #28]
 8016b16:	6162      	str	r2, [r4, #20]
 8016b18:	61a3      	str	r3, [r4, #24]
 8016b1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016b1e:	689b      	ldr	r3, [r3, #8]
 8016b20:	4798      	blx	r3
 8016b22:	6844      	ldr	r4, [r0, #4]
 8016b24:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016b28:	f105 0110 	add.w	r1, r5, #16
 8016b2c:	4668      	mov	r0, sp
 8016b2e:	f7f4 ff1f 	bl	800b970 <ucdr_init_buffer>
 8016b32:	68e3      	ldr	r3, [r4, #12]
 8016b34:	4641      	mov	r1, r8
 8016b36:	4668      	mov	r0, sp
 8016b38:	4798      	blx	r3
 8016b3a:	4639      	mov	r1, r7
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	480a      	ldr	r0, [pc, #40]	@ (8016b68 <rmw_take_request+0xb8>)
 8016b40:	f7ff fbac 	bl	801629c <put_memory>
 8016b44:	b106      	cbz	r6, 8016b48 <rmw_take_request+0x98>
 8016b46:	7034      	strb	r4, [r6, #0]
 8016b48:	f084 0001 	eor.w	r0, r4, #1
 8016b4c:	b2c0      	uxtb	r0, r0
 8016b4e:	b009      	add	sp, #36	@ 0x24
 8016b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b54:	2001      	movs	r0, #1
 8016b56:	b009      	add	sp, #36	@ 0x24
 8016b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b5c:	200c      	movs	r0, #12
 8016b5e:	b009      	add	sp, #36	@ 0x24
 8016b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b64:	0801b1e0 	.word	0x0801b1e0
 8016b68:	2000e204 	.word	0x2000e204

08016b6c <rmw_send_response>:
 8016b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6e:	4605      	mov	r5, r0
 8016b70:	6800      	ldr	r0, [r0, #0]
 8016b72:	b091      	sub	sp, #68	@ 0x44
 8016b74:	460c      	mov	r4, r1
 8016b76:	4616      	mov	r6, r2
 8016b78:	b128      	cbz	r0, 8016b86 <rmw_send_response+0x1a>
 8016b7a:	4b29      	ldr	r3, [pc, #164]	@ (8016c20 <rmw_send_response+0xb4>)
 8016b7c:	6819      	ldr	r1, [r3, #0]
 8016b7e:	f7e9 fb47 	bl	8000210 <strcmp>
 8016b82:	2800      	cmp	r0, #0
 8016b84:	d141      	bne.n	8016c0a <rmw_send_response+0x9e>
 8016b86:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016b8a:	9306      	str	r3, [sp, #24]
 8016b8c:	4623      	mov	r3, r4
 8016b8e:	9207      	str	r2, [sp, #28]
 8016b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b94:	686d      	ldr	r5, [r5, #4]
 8016b96:	789b      	ldrb	r3, [r3, #2]
 8016b98:	68a1      	ldr	r1, [r4, #8]
 8016b9a:	f88d 2017 	strb.w	r2, [sp, #23]
 8016b9e:	f88d 3016 	strb.w	r3, [sp, #22]
 8016ba2:	68e2      	ldr	r2, [r4, #12]
 8016ba4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016ba8:	6860      	ldr	r0, [r4, #4]
 8016baa:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016bae:	ab02      	add	r3, sp, #8
 8016bb0:	c307      	stmia	r3!, {r0, r1, r2}
 8016bb2:	696b      	ldr	r3, [r5, #20]
 8016bb4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	4798      	blx	r3
 8016bba:	6844      	ldr	r4, [r0, #4]
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	6923      	ldr	r3, [r4, #16]
 8016bc0:	4798      	blx	r3
 8016bc2:	f100 0318 	add.w	r3, r0, #24
 8016bc6:	6938      	ldr	r0, [r7, #16]
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	692a      	ldr	r2, [r5, #16]
 8016bcc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016bce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bd2:	ab08      	add	r3, sp, #32
 8016bd4:	f7fb fb68 	bl	80122a8 <uxr_prepare_output_stream>
 8016bd8:	b910      	cbnz	r0, 8016be0 <rmw_send_response+0x74>
 8016bda:	2001      	movs	r0, #1
 8016bdc:	b011      	add	sp, #68	@ 0x44
 8016bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016be0:	a902      	add	r1, sp, #8
 8016be2:	a808      	add	r0, sp, #32
 8016be4:	f7fc fcac 	bl	8013540 <uxr_serialize_SampleIdentity>
 8016be8:	68a3      	ldr	r3, [r4, #8]
 8016bea:	a908      	add	r1, sp, #32
 8016bec:	4630      	mov	r0, r6
 8016bee:	4798      	blx	r3
 8016bf0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016bf4:	6938      	ldr	r0, [r7, #16]
 8016bf6:	2b01      	cmp	r3, #1
 8016bf8:	d00a      	beq.n	8016c10 <rmw_send_response+0xa4>
 8016bfa:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016bfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c00:	f7fa f8aa 	bl	8010d58 <uxr_run_session_until_confirm_delivery>
 8016c04:	2000      	movs	r0, #0
 8016c06:	b011      	add	sp, #68	@ 0x44
 8016c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c0a:	200c      	movs	r0, #12
 8016c0c:	b011      	add	sp, #68	@ 0x44
 8016c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c14:	f7f9 fce0 	bl	80105d8 <uxr_flash_output_streams>
 8016c18:	2000      	movs	r0, #0
 8016c1a:	b011      	add	sp, #68	@ 0x44
 8016c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c1e:	bf00      	nop
 8016c20:	0801b1e0 	.word	0x0801b1e0

08016c24 <rmw_take_response>:
 8016c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c28:	4604      	mov	r4, r0
 8016c2a:	6800      	ldr	r0, [r0, #0]
 8016c2c:	b088      	sub	sp, #32
 8016c2e:	4688      	mov	r8, r1
 8016c30:	4617      	mov	r7, r2
 8016c32:	461d      	mov	r5, r3
 8016c34:	b120      	cbz	r0, 8016c40 <rmw_take_response+0x1c>
 8016c36:	4b1e      	ldr	r3, [pc, #120]	@ (8016cb0 <rmw_take_response+0x8c>)
 8016c38:	6819      	ldr	r1, [r3, #0]
 8016c3a:	f7e9 fae9 	bl	8000210 <strcmp>
 8016c3e:	bb78      	cbnz	r0, 8016ca0 <rmw_take_response+0x7c>
 8016c40:	b10d      	cbz	r5, 8016c46 <rmw_take_response+0x22>
 8016c42:	2300      	movs	r3, #0
 8016c44:	702b      	strb	r3, [r5, #0]
 8016c46:	6864      	ldr	r4, [r4, #4]
 8016c48:	f7f8 f90e 	bl	800ee68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c4c:	4620      	mov	r0, r4
 8016c4e:	f7f8 f8e3 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c52:	4606      	mov	r6, r0
 8016c54:	b340      	cbz	r0, 8016ca8 <rmw_take_response+0x84>
 8016c56:	6963      	ldr	r3, [r4, #20]
 8016c58:	6884      	ldr	r4, [r0, #8]
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016c60:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016c64:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016c68:	4798      	blx	r3
 8016c6a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016c6e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016c72:	f104 0110 	add.w	r1, r4, #16
 8016c76:	4668      	mov	r0, sp
 8016c78:	f7f4 fe7a 	bl	800b970 <ucdr_init_buffer>
 8016c7c:	4639      	mov	r1, r7
 8016c7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c82:	4668      	mov	r0, sp
 8016c84:	4798      	blx	r3
 8016c86:	4631      	mov	r1, r6
 8016c88:	4604      	mov	r4, r0
 8016c8a:	480a      	ldr	r0, [pc, #40]	@ (8016cb4 <rmw_take_response+0x90>)
 8016c8c:	f7ff fb06 	bl	801629c <put_memory>
 8016c90:	b105      	cbz	r5, 8016c94 <rmw_take_response+0x70>
 8016c92:	702c      	strb	r4, [r5, #0]
 8016c94:	f084 0001 	eor.w	r0, r4, #1
 8016c98:	b2c0      	uxtb	r0, r0
 8016c9a:	b008      	add	sp, #32
 8016c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca0:	200c      	movs	r0, #12
 8016ca2:	b008      	add	sp, #32
 8016ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca8:	2001      	movs	r0, #1
 8016caa:	b008      	add	sp, #32
 8016cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cb0:	0801b1e0 	.word	0x0801b1e0
 8016cb4:	2000e204 	.word	0x2000e204

08016cb8 <rmw_trigger_guard_condition>:
 8016cb8:	b160      	cbz	r0, 8016cd4 <rmw_trigger_guard_condition+0x1c>
 8016cba:	b510      	push	{r4, lr}
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	6800      	ldr	r0, [r0, #0]
 8016cc0:	f7f8 f9d0 	bl	800f064 <is_uxrce_rmw_identifier_valid>
 8016cc4:	b908      	cbnz	r0, 8016cca <rmw_trigger_guard_condition+0x12>
 8016cc6:	2001      	movs	r0, #1
 8016cc8:	bd10      	pop	{r4, pc}
 8016cca:	6863      	ldr	r3, [r4, #4]
 8016ccc:	2201      	movs	r2, #1
 8016cce:	741a      	strb	r2, [r3, #16]
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	bd10      	pop	{r4, pc}
 8016cd4:	2001      	movs	r0, #1
 8016cd6:	4770      	bx	lr

08016cd8 <rmw_wait>:
 8016cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cdc:	b089      	sub	sp, #36	@ 0x24
 8016cde:	4605      	mov	r5, r0
 8016ce0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016ce2:	460e      	mov	r6, r1
 8016ce4:	4698      	mov	r8, r3
 8016ce6:	4691      	mov	r9, r2
 8016ce8:	2a00      	cmp	r2, #0
 8016cea:	f000 810a 	beq.w	8016f02 <rmw_wait+0x22a>
 8016cee:	b16c      	cbz	r4, 8016d0c <rmw_wait+0x34>
 8016cf0:	4bae      	ldr	r3, [pc, #696]	@ (8016fac <rmw_wait+0x2d4>)
 8016cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016cf4:	af04      	add	r7, sp, #16
 8016cf6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016cfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016cfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016d02:	f7ff f9c1 	bl	8016088 <rmw_time_equal>
 8016d06:	2800      	cmp	r0, #0
 8016d08:	f000 8127 	beq.w	8016f5a <rmw_wait+0x282>
 8016d0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016d10:	f7f8 f8aa 	bl	800ee68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d14:	4ba6      	ldr	r3, [pc, #664]	@ (8016fb0 <rmw_wait+0x2d8>)
 8016d16:	681c      	ldr	r4, [r3, #0]
 8016d18:	b14c      	cbz	r4, 8016d2e <rmw_wait+0x56>
 8016d1a:	4623      	mov	r3, r4
 8016d1c:	2100      	movs	r1, #0
 8016d1e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016d22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016d26:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d1f7      	bne.n	8016d1e <rmw_wait+0x46>
 8016d2e:	f1b9 0f00 	cmp.w	r9, #0
 8016d32:	d011      	beq.n	8016d58 <rmw_wait+0x80>
 8016d34:	f8d9 1000 	ldr.w	r1, [r9]
 8016d38:	b171      	cbz	r1, 8016d58 <rmw_wait+0x80>
 8016d3a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016d3e:	2300      	movs	r3, #0
 8016d40:	2001      	movs	r0, #1
 8016d42:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016d46:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016d48:	6912      	ldr	r2, [r2, #16]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016d50:	4299      	cmp	r1, r3
 8016d52:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016d56:	d1f4      	bne.n	8016d42 <rmw_wait+0x6a>
 8016d58:	f1b8 0f00 	cmp.w	r8, #0
 8016d5c:	d011      	beq.n	8016d82 <rmw_wait+0xaa>
 8016d5e:	f8d8 1000 	ldr.w	r1, [r8]
 8016d62:	b171      	cbz	r1, 8016d82 <rmw_wait+0xaa>
 8016d64:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016d68:	2300      	movs	r3, #0
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016d70:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016d72:	6912      	ldr	r2, [r2, #16]
 8016d74:	3301      	adds	r3, #1
 8016d76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016d7a:	4299      	cmp	r1, r3
 8016d7c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016d80:	d1f4      	bne.n	8016d6c <rmw_wait+0x94>
 8016d82:	b185      	cbz	r5, 8016da6 <rmw_wait+0xce>
 8016d84:	6829      	ldr	r1, [r5, #0]
 8016d86:	b171      	cbz	r1, 8016da6 <rmw_wait+0xce>
 8016d88:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	2001      	movs	r0, #1
 8016d90:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016d94:	6a12      	ldr	r2, [r2, #32]
 8016d96:	6912      	ldr	r2, [r2, #16]
 8016d98:	3301      	adds	r3, #1
 8016d9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016d9e:	4299      	cmp	r1, r3
 8016da0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016da4:	d1f4      	bne.n	8016d90 <rmw_wait+0xb8>
 8016da6:	b34c      	cbz	r4, 8016dfc <rmw_wait+0x124>
 8016da8:	4622      	mov	r2, r4
 8016daa:	2300      	movs	r3, #0
 8016dac:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016db0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016db4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016db8:	440b      	add	r3, r1
 8016dba:	b2db      	uxtb	r3, r3
 8016dbc:	2a00      	cmp	r2, #0
 8016dbe:	d1f5      	bne.n	8016dac <rmw_wait+0xd4>
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f000 8084 	beq.w	8016ece <rmw_wait+0x1f6>
 8016dc6:	1c7a      	adds	r2, r7, #1
 8016dc8:	d00d      	beq.n	8016de6 <rmw_wait+0x10e>
 8016dca:	ee07 7a90 	vmov	s15, r7
 8016dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016dd2:	ee07 3a90 	vmov	s15, r3
 8016dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016dde:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016de2:	ee17 7a90 	vmov	r7, s15
 8016de6:	68a0      	ldr	r0, [r4, #8]
 8016de8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016dec:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f040 8090 	bne.w	8016f16 <rmw_wait+0x23e>
 8016df6:	6864      	ldr	r4, [r4, #4]
 8016df8:	2c00      	cmp	r4, #0
 8016dfa:	d1f4      	bne.n	8016de6 <rmw_wait+0x10e>
 8016dfc:	f1b9 0f00 	cmp.w	r9, #0
 8016e00:	f000 80bc 	beq.w	8016f7c <rmw_wait+0x2a4>
 8016e04:	f8d9 7000 	ldr.w	r7, [r9]
 8016e08:	2f00      	cmp	r7, #0
 8016e0a:	f000 808e 	beq.w	8016f2a <rmw_wait+0x252>
 8016e0e:	2400      	movs	r4, #0
 8016e10:	4627      	mov	r7, r4
 8016e12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016e16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e1a:	f7f7 fffd 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d05f      	beq.n	8016ee2 <rmw_wait+0x20a>
 8016e22:	f8d9 3000 	ldr.w	r3, [r9]
 8016e26:	3401      	adds	r4, #1
 8016e28:	42a3      	cmp	r3, r4
 8016e2a:	f04f 0701 	mov.w	r7, #1
 8016e2e:	d8f0      	bhi.n	8016e12 <rmw_wait+0x13a>
 8016e30:	f1b8 0f00 	cmp.w	r8, #0
 8016e34:	d012      	beq.n	8016e5c <rmw_wait+0x184>
 8016e36:	f8d8 3000 	ldr.w	r3, [r8]
 8016e3a:	b17b      	cbz	r3, 8016e5c <rmw_wait+0x184>
 8016e3c:	2400      	movs	r4, #0
 8016e3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016e42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e46:	f7f7 ffe7 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	d051      	beq.n	8016ef2 <rmw_wait+0x21a>
 8016e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8016e52:	3401      	adds	r4, #1
 8016e54:	42a3      	cmp	r3, r4
 8016e56:	f04f 0701 	mov.w	r7, #1
 8016e5a:	d8f0      	bhi.n	8016e3e <rmw_wait+0x166>
 8016e5c:	b1dd      	cbz	r5, 8016e96 <rmw_wait+0x1be>
 8016e5e:	682b      	ldr	r3, [r5, #0]
 8016e60:	b1cb      	cbz	r3, 8016e96 <rmw_wait+0x1be>
 8016e62:	2400      	movs	r4, #0
 8016e64:	686b      	ldr	r3, [r5, #4]
 8016e66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e6a:	f7f7 ffd5 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e6e:	b158      	cbz	r0, 8016e88 <rmw_wait+0x1b0>
 8016e70:	682b      	ldr	r3, [r5, #0]
 8016e72:	3401      	adds	r4, #1
 8016e74:	42a3      	cmp	r3, r4
 8016e76:	d969      	bls.n	8016f4c <rmw_wait+0x274>
 8016e78:	686b      	ldr	r3, [r5, #4]
 8016e7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e7e:	2701      	movs	r7, #1
 8016e80:	f7f7 ffca 	bl	800ee18 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e84:	2800      	cmp	r0, #0
 8016e86:	d1f3      	bne.n	8016e70 <rmw_wait+0x198>
 8016e88:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016e8c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016e90:	3401      	adds	r4, #1
 8016e92:	42a3      	cmp	r3, r4
 8016e94:	d8e6      	bhi.n	8016e64 <rmw_wait+0x18c>
 8016e96:	b1a6      	cbz	r6, 8016ec2 <rmw_wait+0x1ea>
 8016e98:	6834      	ldr	r4, [r6, #0]
 8016e9a:	b194      	cbz	r4, 8016ec2 <rmw_wait+0x1ea>
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	461d      	mov	r5, r3
 8016ea0:	e004      	b.n	8016eac <rmw_wait+0x1d4>
 8016ea2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	42a3      	cmp	r3, r4
 8016eaa:	d00a      	beq.n	8016ec2 <rmw_wait+0x1ea>
 8016eac:	6870      	ldr	r0, [r6, #4]
 8016eae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016eb2:	7c0a      	ldrb	r2, [r1, #16]
 8016eb4:	2a00      	cmp	r2, #0
 8016eb6:	d0f4      	beq.n	8016ea2 <rmw_wait+0x1ca>
 8016eb8:	3301      	adds	r3, #1
 8016eba:	42a3      	cmp	r3, r4
 8016ebc:	740d      	strb	r5, [r1, #16]
 8016ebe:	4617      	mov	r7, r2
 8016ec0:	d1f4      	bne.n	8016eac <rmw_wait+0x1d4>
 8016ec2:	2f00      	cmp	r7, #0
 8016ec4:	d03e      	beq.n	8016f44 <rmw_wait+0x26c>
 8016ec6:	2000      	movs	r0, #0
 8016ec8:	b009      	add	sp, #36	@ 0x24
 8016eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ece:	68a0      	ldr	r0, [r4, #8]
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ed6:	f7f9 ff05 	bl	8010ce4 <uxr_run_session_timeout>
 8016eda:	6864      	ldr	r4, [r4, #4]
 8016edc:	2c00      	cmp	r4, #0
 8016ede:	d1f6      	bne.n	8016ece <rmw_wait+0x1f6>
 8016ee0:	e78c      	b.n	8016dfc <rmw_wait+0x124>
 8016ee2:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016ee6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016eea:	3401      	adds	r4, #1
 8016eec:	42a3      	cmp	r3, r4
 8016eee:	d890      	bhi.n	8016e12 <rmw_wait+0x13a>
 8016ef0:	e79e      	b.n	8016e30 <rmw_wait+0x158>
 8016ef2:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016ef6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016efa:	3401      	adds	r4, #1
 8016efc:	429c      	cmp	r4, r3
 8016efe:	d39e      	bcc.n	8016e3e <rmw_wait+0x166>
 8016f00:	e7ac      	b.n	8016e5c <rmw_wait+0x184>
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f47f aef3 	bne.w	8016cee <rmw_wait+0x16>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	f47f aef0 	bne.w	8016cee <rmw_wait+0x16>
 8016f0e:	2900      	cmp	r1, #0
 8016f10:	f47f aeed 	bne.w	8016cee <rmw_wait+0x16>
 8016f14:	e7d7      	b.n	8016ec6 <rmw_wait+0x1ee>
 8016f16:	4639      	mov	r1, r7
 8016f18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f1c:	f7f9 fefc 	bl	8010d18 <uxr_run_session_until_data>
 8016f20:	6864      	ldr	r4, [r4, #4]
 8016f22:	2c00      	cmp	r4, #0
 8016f24:	f47f af5f 	bne.w	8016de6 <rmw_wait+0x10e>
 8016f28:	e768      	b.n	8016dfc <rmw_wait+0x124>
 8016f2a:	f1b8 0f00 	cmp.w	r8, #0
 8016f2e:	d032      	beq.n	8016f96 <rmw_wait+0x2be>
 8016f30:	f8d8 3000 	ldr.w	r3, [r8]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d181      	bne.n	8016e3c <rmw_wait+0x164>
 8016f38:	461f      	mov	r7, r3
 8016f3a:	2d00      	cmp	r5, #0
 8016f3c:	d18f      	bne.n	8016e5e <rmw_wait+0x186>
 8016f3e:	462f      	mov	r7, r5
 8016f40:	2e00      	cmp	r6, #0
 8016f42:	d1a9      	bne.n	8016e98 <rmw_wait+0x1c0>
 8016f44:	2002      	movs	r0, #2
 8016f46:	b009      	add	sp, #36	@ 0x24
 8016f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f4c:	2e00      	cmp	r6, #0
 8016f4e:	d0ba      	beq.n	8016ec6 <rmw_wait+0x1ee>
 8016f50:	6834      	ldr	r4, [r6, #0]
 8016f52:	2701      	movs	r7, #1
 8016f54:	2c00      	cmp	r4, #0
 8016f56:	d1a1      	bne.n	8016e9c <rmw_wait+0x1c4>
 8016f58:	e7b5      	b.n	8016ec6 <rmw_wait+0x1ee>
 8016f5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f5e:	f7ff f8e7 	bl	8016130 <rmw_time_total_nsec>
 8016f62:	2300      	movs	r3, #0
 8016f64:	4a13      	ldr	r2, [pc, #76]	@ (8016fb4 <rmw_wait+0x2dc>)
 8016f66:	f7e9 feb1 	bl	8000ccc <__aeabi_uldivmod>
 8016f6a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016f6e:	f171 0300 	sbcs.w	r3, r1, #0
 8016f72:	4607      	mov	r7, r0
 8016f74:	bfa8      	it	ge
 8016f76:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016f7a:	e6c9      	b.n	8016d10 <rmw_wait+0x38>
 8016f7c:	f1b8 0f00 	cmp.w	r8, #0
 8016f80:	d009      	beq.n	8016f96 <rmw_wait+0x2be>
 8016f82:	f8d8 3000 	ldr.w	r3, [r8]
 8016f86:	464f      	mov	r7, r9
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	f47f af57 	bne.w	8016e3c <rmw_wait+0x164>
 8016f8e:	2d00      	cmp	r5, #0
 8016f90:	f47f af65 	bne.w	8016e5e <rmw_wait+0x186>
 8016f94:	e7d3      	b.n	8016f3e <rmw_wait+0x266>
 8016f96:	b17d      	cbz	r5, 8016fb8 <rmw_wait+0x2e0>
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	4647      	mov	r7, r8
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f47f af60 	bne.w	8016e62 <rmw_wait+0x18a>
 8016fa2:	2e00      	cmp	r6, #0
 8016fa4:	f47f af78 	bne.w	8016e98 <rmw_wait+0x1c0>
 8016fa8:	e7cc      	b.n	8016f44 <rmw_wait+0x26c>
 8016faa:	bf00      	nop
 8016fac:	0801a400 	.word	0x0801a400
 8016fb0:	2000e1f4 	.word	0x2000e1f4
 8016fb4:	000f4240 	.word	0x000f4240
 8016fb8:	2e00      	cmp	r6, #0
 8016fba:	d0c3      	beq.n	8016f44 <rmw_wait+0x26c>
 8016fbc:	6834      	ldr	r4, [r6, #0]
 8016fbe:	462f      	mov	r7, r5
 8016fc0:	2c00      	cmp	r4, #0
 8016fc2:	f47f af6b 	bne.w	8016e9c <rmw_wait+0x1c4>
 8016fc6:	e7bd      	b.n	8016f44 <rmw_wait+0x26c>

08016fc8 <rmw_create_wait_set>:
 8016fc8:	b508      	push	{r3, lr}
 8016fca:	4803      	ldr	r0, [pc, #12]	@ (8016fd8 <rmw_create_wait_set+0x10>)
 8016fcc:	f7ff f956 	bl	801627c <get_memory>
 8016fd0:	b108      	cbz	r0, 8016fd6 <rmw_create_wait_set+0xe>
 8016fd2:	6880      	ldr	r0, [r0, #8]
 8016fd4:	3010      	adds	r0, #16
 8016fd6:	bd08      	pop	{r3, pc}
 8016fd8:	2000e234 	.word	0x2000e234

08016fdc <rmw_destroy_wait_set>:
 8016fdc:	b508      	push	{r3, lr}
 8016fde:	4b08      	ldr	r3, [pc, #32]	@ (8017000 <rmw_destroy_wait_set+0x24>)
 8016fe0:	6819      	ldr	r1, [r3, #0]
 8016fe2:	b911      	cbnz	r1, 8016fea <rmw_destroy_wait_set+0xe>
 8016fe4:	e00a      	b.n	8016ffc <rmw_destroy_wait_set+0x20>
 8016fe6:	6849      	ldr	r1, [r1, #4]
 8016fe8:	b141      	cbz	r1, 8016ffc <rmw_destroy_wait_set+0x20>
 8016fea:	688b      	ldr	r3, [r1, #8]
 8016fec:	3310      	adds	r3, #16
 8016fee:	4298      	cmp	r0, r3
 8016ff0:	d1f9      	bne.n	8016fe6 <rmw_destroy_wait_set+0xa>
 8016ff2:	4803      	ldr	r0, [pc, #12]	@ (8017000 <rmw_destroy_wait_set+0x24>)
 8016ff4:	f7ff f952 	bl	801629c <put_memory>
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	bd08      	pop	{r3, pc}
 8016ffc:	2001      	movs	r0, #1
 8016ffe:	bd08      	pop	{r3, pc}
 8017000:	2000e234 	.word	0x2000e234

08017004 <rosidl_runtime_c__double__Sequence__init>:
 8017004:	b530      	push	{r4, r5, lr}
 8017006:	4604      	mov	r4, r0
 8017008:	b087      	sub	sp, #28
 801700a:	b130      	cbz	r0, 801701a <rosidl_runtime_c__double__Sequence__init+0x16>
 801700c:	460d      	mov	r5, r1
 801700e:	b931      	cbnz	r1, 801701e <rosidl_runtime_c__double__Sequence__init+0x1a>
 8017010:	4608      	mov	r0, r1
 8017012:	e9c4 0500 	strd	r0, r5, [r4]
 8017016:	60a5      	str	r5, [r4, #8]
 8017018:	2001      	movs	r0, #1
 801701a:	b007      	add	sp, #28
 801701c:	bd30      	pop	{r4, r5, pc}
 801701e:	a801      	add	r0, sp, #4
 8017020:	f7f6 fbf6 	bl	800d810 <rcutils_get_default_allocator>
 8017024:	9b01      	ldr	r3, [sp, #4]
 8017026:	9905      	ldr	r1, [sp, #20]
 8017028:	00e8      	lsls	r0, r5, #3
 801702a:	4798      	blx	r3
 801702c:	2800      	cmp	r0, #0
 801702e:	d1f0      	bne.n	8017012 <rosidl_runtime_c__double__Sequence__init+0xe>
 8017030:	e7f3      	b.n	801701a <rosidl_runtime_c__double__Sequence__init+0x16>
 8017032:	bf00      	nop

08017034 <rosidl_runtime_c__double__Sequence__fini>:
 8017034:	b188      	cbz	r0, 801705a <rosidl_runtime_c__double__Sequence__fini+0x26>
 8017036:	b510      	push	{r4, lr}
 8017038:	6803      	ldr	r3, [r0, #0]
 801703a:	b086      	sub	sp, #24
 801703c:	4604      	mov	r4, r0
 801703e:	b153      	cbz	r3, 8017056 <rosidl_runtime_c__double__Sequence__fini+0x22>
 8017040:	a801      	add	r0, sp, #4
 8017042:	f7f6 fbe5 	bl	800d810 <rcutils_get_default_allocator>
 8017046:	9b02      	ldr	r3, [sp, #8]
 8017048:	9905      	ldr	r1, [sp, #20]
 801704a:	6820      	ldr	r0, [r4, #0]
 801704c:	4798      	blx	r3
 801704e:	2300      	movs	r3, #0
 8017050:	e9c4 3300 	strd	r3, r3, [r4]
 8017054:	60a3      	str	r3, [r4, #8]
 8017056:	b006      	add	sp, #24
 8017058:	bd10      	pop	{r4, pc}
 801705a:	4770      	bx	lr

0801705c <rosidl_runtime_c__String__init>:
 801705c:	b510      	push	{r4, lr}
 801705e:	4604      	mov	r4, r0
 8017060:	b086      	sub	sp, #24
 8017062:	b170      	cbz	r0, 8017082 <rosidl_runtime_c__String__init+0x26>
 8017064:	a801      	add	r0, sp, #4
 8017066:	f7f6 fbd3 	bl	800d810 <rcutils_get_default_allocator>
 801706a:	9b01      	ldr	r3, [sp, #4]
 801706c:	9905      	ldr	r1, [sp, #20]
 801706e:	2001      	movs	r0, #1
 8017070:	4798      	blx	r3
 8017072:	6020      	str	r0, [r4, #0]
 8017074:	b128      	cbz	r0, 8017082 <rosidl_runtime_c__String__init+0x26>
 8017076:	2100      	movs	r1, #0
 8017078:	2201      	movs	r2, #1
 801707a:	7001      	strb	r1, [r0, #0]
 801707c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017080:	4610      	mov	r0, r2
 8017082:	b006      	add	sp, #24
 8017084:	bd10      	pop	{r4, pc}
 8017086:	bf00      	nop

08017088 <rosidl_runtime_c__String__fini>:
 8017088:	b320      	cbz	r0, 80170d4 <rosidl_runtime_c__String__fini+0x4c>
 801708a:	b510      	push	{r4, lr}
 801708c:	6803      	ldr	r3, [r0, #0]
 801708e:	b086      	sub	sp, #24
 8017090:	4604      	mov	r4, r0
 8017092:	b173      	cbz	r3, 80170b2 <rosidl_runtime_c__String__fini+0x2a>
 8017094:	6883      	ldr	r3, [r0, #8]
 8017096:	b1f3      	cbz	r3, 80170d6 <rosidl_runtime_c__String__fini+0x4e>
 8017098:	a801      	add	r0, sp, #4
 801709a:	f7f6 fbb9 	bl	800d810 <rcutils_get_default_allocator>
 801709e:	9b02      	ldr	r3, [sp, #8]
 80170a0:	9905      	ldr	r1, [sp, #20]
 80170a2:	6820      	ldr	r0, [r4, #0]
 80170a4:	4798      	blx	r3
 80170a6:	2300      	movs	r3, #0
 80170a8:	e9c4 3300 	strd	r3, r3, [r4]
 80170ac:	60a3      	str	r3, [r4, #8]
 80170ae:	b006      	add	sp, #24
 80170b0:	bd10      	pop	{r4, pc}
 80170b2:	6843      	ldr	r3, [r0, #4]
 80170b4:	b9db      	cbnz	r3, 80170ee <rosidl_runtime_c__String__fini+0x66>
 80170b6:	6883      	ldr	r3, [r0, #8]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d0f8      	beq.n	80170ae <rosidl_runtime_c__String__fini+0x26>
 80170bc:	4b12      	ldr	r3, [pc, #72]	@ (8017108 <rosidl_runtime_c__String__fini+0x80>)
 80170be:	4813      	ldr	r0, [pc, #76]	@ (801710c <rosidl_runtime_c__String__fini+0x84>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	2251      	movs	r2, #81	@ 0x51
 80170c4:	68db      	ldr	r3, [r3, #12]
 80170c6:	2101      	movs	r1, #1
 80170c8:	f001 ff9a 	bl	8019000 <fwrite>
 80170cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170d0:	f001 fc56 	bl	8018980 <exit>
 80170d4:	4770      	bx	lr
 80170d6:	4b0c      	ldr	r3, [pc, #48]	@ (8017108 <rosidl_runtime_c__String__fini+0x80>)
 80170d8:	480d      	ldr	r0, [pc, #52]	@ (8017110 <rosidl_runtime_c__String__fini+0x88>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	224c      	movs	r2, #76	@ 0x4c
 80170de:	68db      	ldr	r3, [r3, #12]
 80170e0:	2101      	movs	r1, #1
 80170e2:	f001 ff8d 	bl	8019000 <fwrite>
 80170e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170ea:	f001 fc49 	bl	8018980 <exit>
 80170ee:	4b06      	ldr	r3, [pc, #24]	@ (8017108 <rosidl_runtime_c__String__fini+0x80>)
 80170f0:	4808      	ldr	r0, [pc, #32]	@ (8017114 <rosidl_runtime_c__String__fini+0x8c>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	224e      	movs	r2, #78	@ 0x4e
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	2101      	movs	r1, #1
 80170fa:	f001 ff81 	bl	8019000 <fwrite>
 80170fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017102:	f001 fc3d 	bl	8018980 <exit>
 8017106:	bf00      	nop
 8017108:	200004b0 	.word	0x200004b0
 801710c:	0801b284 	.word	0x0801b284
 8017110:	0801b1e4 	.word	0x0801b1e4
 8017114:	0801b234 	.word	0x0801b234

08017118 <rosidl_runtime_c__String__Sequence__init>:
 8017118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801711c:	4680      	mov	r8, r0
 801711e:	b08b      	sub	sp, #44	@ 0x2c
 8017120:	b138      	cbz	r0, 8017132 <rosidl_runtime_c__String__Sequence__init+0x1a>
 8017122:	468a      	mov	sl, r1
 8017124:	b941      	cbnz	r1, 8017138 <rosidl_runtime_c__String__Sequence__init+0x20>
 8017126:	460e      	mov	r6, r1
 8017128:	e9c8 6a00 	strd	r6, sl, [r8]
 801712c:	f8c8 a008 	str.w	sl, [r8, #8]
 8017130:	2001      	movs	r0, #1
 8017132:	b00b      	add	sp, #44	@ 0x2c
 8017134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017138:	4668      	mov	r0, sp
 801713a:	f7f6 fb69 	bl	800d810 <rcutils_get_default_allocator>
 801713e:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 8017142:	210c      	movs	r1, #12
 8017144:	463a      	mov	r2, r7
 8017146:	4650      	mov	r0, sl
 8017148:	4798      	blx	r3
 801714a:	4606      	mov	r6, r0
 801714c:	b340      	cbz	r0, 80171a0 <rosidl_runtime_c__String__Sequence__init+0x88>
 801714e:	2400      	movs	r4, #0
 8017150:	4605      	mov	r5, r0
 8017152:	f04f 0901 	mov.w	r9, #1
 8017156:	46a3      	mov	fp, r4
 8017158:	e007      	b.n	801716a <rosidl_runtime_c__String__Sequence__init+0x52>
 801715a:	3401      	adds	r4, #1
 801715c:	350c      	adds	r5, #12
 801715e:	45a2      	cmp	sl, r4
 8017160:	f880 b000 	strb.w	fp, [r0]
 8017164:	e945 b902 	strd	fp, r9, [r5, #-8]
 8017168:	d0de      	beq.n	8017128 <rosidl_runtime_c__String__Sequence__init+0x10>
 801716a:	a805      	add	r0, sp, #20
 801716c:	f7f6 fb50 	bl	800d810 <rcutils_get_default_allocator>
 8017170:	9b05      	ldr	r3, [sp, #20]
 8017172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017174:	2001      	movs	r0, #1
 8017176:	4798      	blx	r3
 8017178:	6028      	str	r0, [r5, #0]
 801717a:	2800      	cmp	r0, #0
 801717c:	d1ed      	bne.n	801715a <rosidl_runtime_c__String__Sequence__init+0x42>
 801717e:	b15c      	cbz	r4, 8017198 <rosidl_runtime_c__String__Sequence__init+0x80>
 8017180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017184:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8017188:	3c0c      	subs	r4, #12
 801718a:	4620      	mov	r0, r4
 801718c:	f7ff ff7c 	bl	8017088 <rosidl_runtime_c__String__fini>
 8017190:	42a6      	cmp	r6, r4
 8017192:	f1a4 040c 	sub.w	r4, r4, #12
 8017196:	d1f8      	bne.n	801718a <rosidl_runtime_c__String__Sequence__init+0x72>
 8017198:	9b01      	ldr	r3, [sp, #4]
 801719a:	4639      	mov	r1, r7
 801719c:	4630      	mov	r0, r6
 801719e:	4798      	blx	r3
 80171a0:	2000      	movs	r0, #0
 80171a2:	b00b      	add	sp, #44	@ 0x2c
 80171a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171a8 <rosidl_runtime_c__String__Sequence__fini>:
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d044      	beq.n	8017236 <rosidl_runtime_c__String__Sequence__fini+0x8e>
 80171ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ae:	6803      	ldr	r3, [r0, #0]
 80171b0:	b087      	sub	sp, #28
 80171b2:	4606      	mov	r6, r0
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d03c      	beq.n	8017232 <rosidl_runtime_c__String__Sequence__fini+0x8a>
 80171b8:	6881      	ldr	r1, [r0, #8]
 80171ba:	2900      	cmp	r1, #0
 80171bc:	d02e      	beq.n	801721c <rosidl_runtime_c__String__Sequence__fini+0x74>
 80171be:	2400      	movs	r4, #0
 80171c0:	4627      	mov	r7, r4
 80171c2:	e011      	b.n	80171e8 <rosidl_runtime_c__String__Sequence__fini+0x40>
 80171c4:	68ab      	ldr	r3, [r5, #8]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d036      	beq.n	8017238 <rosidl_runtime_c__String__Sequence__fini+0x90>
 80171ca:	a801      	add	r0, sp, #4
 80171cc:	f7f6 fb20 	bl	800d810 <rcutils_get_default_allocator>
 80171d0:	9905      	ldr	r1, [sp, #20]
 80171d2:	9b02      	ldr	r3, [sp, #8]
 80171d4:	6828      	ldr	r0, [r5, #0]
 80171d6:	4798      	blx	r3
 80171d8:	68b1      	ldr	r1, [r6, #8]
 80171da:	60af      	str	r7, [r5, #8]
 80171dc:	e9c5 7700 	strd	r7, r7, [r5]
 80171e0:	3401      	adds	r4, #1
 80171e2:	428c      	cmp	r4, r1
 80171e4:	d21a      	bcs.n	801721c <rosidl_runtime_c__String__Sequence__fini+0x74>
 80171e6:	6833      	ldr	r3, [r6, #0]
 80171e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80171ec:	eb13 0582 	adds.w	r5, r3, r2, lsl #2
 80171f0:	d0f6      	beq.n	80171e0 <rosidl_runtime_c__String__Sequence__fini+0x38>
 80171f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d1e4      	bne.n	80171c4 <rosidl_runtime_c__String__Sequence__fini+0x1c>
 80171fa:	686b      	ldr	r3, [r5, #4]
 80171fc:	bb43      	cbnz	r3, 8017250 <rosidl_runtime_c__String__Sequence__fini+0xa8>
 80171fe:	68ab      	ldr	r3, [r5, #8]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d0ed      	beq.n	80171e0 <rosidl_runtime_c__String__Sequence__fini+0x38>
 8017204:	4b18      	ldr	r3, [pc, #96]	@ (8017268 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 8017206:	4819      	ldr	r0, [pc, #100]	@ (801726c <rosidl_runtime_c__String__Sequence__fini+0xc4>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	2251      	movs	r2, #81	@ 0x51
 801720c:	68db      	ldr	r3, [r3, #12]
 801720e:	2101      	movs	r1, #1
 8017210:	f001 fef6 	bl	8019000 <fwrite>
 8017214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017218:	f001 fbb2 	bl	8018980 <exit>
 801721c:	a801      	add	r0, sp, #4
 801721e:	f7f6 faf7 	bl	800d810 <rcutils_get_default_allocator>
 8017222:	9b02      	ldr	r3, [sp, #8]
 8017224:	9905      	ldr	r1, [sp, #20]
 8017226:	6830      	ldr	r0, [r6, #0]
 8017228:	4798      	blx	r3
 801722a:	2300      	movs	r3, #0
 801722c:	e9c6 3300 	strd	r3, r3, [r6]
 8017230:	60b3      	str	r3, [r6, #8]
 8017232:	b007      	add	sp, #28
 8017234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017236:	4770      	bx	lr
 8017238:	4b0b      	ldr	r3, [pc, #44]	@ (8017268 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 801723a:	480d      	ldr	r0, [pc, #52]	@ (8017270 <rosidl_runtime_c__String__Sequence__fini+0xc8>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	224c      	movs	r2, #76	@ 0x4c
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	2101      	movs	r1, #1
 8017244:	f001 fedc 	bl	8019000 <fwrite>
 8017248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801724c:	f001 fb98 	bl	8018980 <exit>
 8017250:	4b05      	ldr	r3, [pc, #20]	@ (8017268 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 8017252:	4808      	ldr	r0, [pc, #32]	@ (8017274 <rosidl_runtime_c__String__Sequence__fini+0xcc>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	224e      	movs	r2, #78	@ 0x4e
 8017258:	68db      	ldr	r3, [r3, #12]
 801725a:	2101      	movs	r1, #1
 801725c:	f001 fed0 	bl	8019000 <fwrite>
 8017260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017264:	f001 fb8c 	bl	8018980 <exit>
 8017268:	200004b0 	.word	0x200004b0
 801726c:	0801b284 	.word	0x0801b284
 8017270:	0801b1e4 	.word	0x0801b1e4
 8017274:	0801b234 	.word	0x0801b234

08017278 <sensor_msgs__msg__JointState__init>:
 8017278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801727c:	4605      	mov	r5, r0
 801727e:	2800      	cmp	r0, #0
 8017280:	d04a      	beq.n	8017318 <sensor_msgs__msg__JointState__init+0xa0>
 8017282:	f000 f883 	bl	801738c <std_msgs__msg__Header__init>
 8017286:	4604      	mov	r4, r0
 8017288:	b380      	cbz	r0, 80172ec <sensor_msgs__msg__JointState__init+0x74>
 801728a:	f105 0614 	add.w	r6, r5, #20
 801728e:	2100      	movs	r1, #0
 8017290:	4630      	mov	r0, r6
 8017292:	f7ff ff41 	bl	8017118 <rosidl_runtime_c__String__Sequence__init>
 8017296:	4604      	mov	r4, r0
 8017298:	2800      	cmp	r0, #0
 801729a:	d049      	beq.n	8017330 <sensor_msgs__msg__JointState__init+0xb8>
 801729c:	f105 0720 	add.w	r7, r5, #32
 80172a0:	2100      	movs	r1, #0
 80172a2:	4638      	mov	r0, r7
 80172a4:	f7ff feae 	bl	8017004 <rosidl_runtime_c__double__Sequence__init>
 80172a8:	4604      	mov	r4, r0
 80172aa:	b3c8      	cbz	r0, 8017320 <sensor_msgs__msg__JointState__init+0xa8>
 80172ac:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80172b0:	2100      	movs	r1, #0
 80172b2:	4640      	mov	r0, r8
 80172b4:	f7ff fea6 	bl	8017004 <rosidl_runtime_c__double__Sequence__init>
 80172b8:	4604      	mov	r4, r0
 80172ba:	b3f0      	cbz	r0, 801733a <sensor_msgs__msg__JointState__init+0xc2>
 80172bc:	f105 0938 	add.w	r9, r5, #56	@ 0x38
 80172c0:	2100      	movs	r1, #0
 80172c2:	4648      	mov	r0, r9
 80172c4:	f7ff fe9e 	bl	8017004 <rosidl_runtime_c__double__Sequence__init>
 80172c8:	4604      	mov	r4, r0
 80172ca:	bb10      	cbnz	r0, 8017312 <sensor_msgs__msg__JointState__init+0x9a>
 80172cc:	4628      	mov	r0, r5
 80172ce:	f000 f881 	bl	80173d4 <std_msgs__msg__Header__fini>
 80172d2:	4630      	mov	r0, r6
 80172d4:	f7ff ff68 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 80172d8:	4638      	mov	r0, r7
 80172da:	f7ff feab 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 80172de:	4640      	mov	r0, r8
 80172e0:	f7ff fea8 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 80172e4:	4648      	mov	r0, r9
 80172e6:	f7ff fea5 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 80172ea:	e012      	b.n	8017312 <sensor_msgs__msg__JointState__init+0x9a>
 80172ec:	4628      	mov	r0, r5
 80172ee:	f000 f871 	bl	80173d4 <std_msgs__msg__Header__fini>
 80172f2:	f105 0014 	add.w	r0, r5, #20
 80172f6:	f7ff ff57 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 80172fa:	f105 0020 	add.w	r0, r5, #32
 80172fe:	f7ff fe99 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 8017302:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8017306:	f7ff fe95 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 801730a:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 801730e:	f7ff fe91 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 8017312:	4620      	mov	r0, r4
 8017314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017318:	4604      	mov	r4, r0
 801731a:	4620      	mov	r0, r4
 801731c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017320:	4628      	mov	r0, r5
 8017322:	f000 f857 	bl	80173d4 <std_msgs__msg__Header__fini>
 8017326:	4630      	mov	r0, r6
 8017328:	f7ff ff3e 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 801732c:	4638      	mov	r0, r7
 801732e:	e7e6      	b.n	80172fe <sensor_msgs__msg__JointState__init+0x86>
 8017330:	4628      	mov	r0, r5
 8017332:	f000 f84f 	bl	80173d4 <std_msgs__msg__Header__fini>
 8017336:	4630      	mov	r0, r6
 8017338:	e7dd      	b.n	80172f6 <sensor_msgs__msg__JointState__init+0x7e>
 801733a:	4628      	mov	r0, r5
 801733c:	f000 f84a 	bl	80173d4 <std_msgs__msg__Header__fini>
 8017340:	4630      	mov	r0, r6
 8017342:	f7ff ff31 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 8017346:	4638      	mov	r0, r7
 8017348:	f7ff fe74 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 801734c:	4640      	mov	r0, r8
 801734e:	f7ff fe71 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 8017352:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8017356:	f7ff fe6d 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 801735a:	e7da      	b.n	8017312 <sensor_msgs__msg__JointState__init+0x9a>

0801735c <sensor_msgs__msg__JointState__fini>:
 801735c:	b1a8      	cbz	r0, 801738a <sensor_msgs__msg__JointState__fini+0x2e>
 801735e:	b510      	push	{r4, lr}
 8017360:	4604      	mov	r4, r0
 8017362:	f000 f837 	bl	80173d4 <std_msgs__msg__Header__fini>
 8017366:	f104 0014 	add.w	r0, r4, #20
 801736a:	f7ff ff1d 	bl	80171a8 <rosidl_runtime_c__String__Sequence__fini>
 801736e:	f104 0020 	add.w	r0, r4, #32
 8017372:	f7ff fe5f 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 8017376:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801737a:	f7ff fe5b 	bl	8017034 <rosidl_runtime_c__double__Sequence__fini>
 801737e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8017382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017386:	f7ff be55 	b.w	8017034 <rosidl_runtime_c__double__Sequence__fini>
 801738a:	4770      	bx	lr

0801738c <std_msgs__msg__Header__init>:
 801738c:	b570      	push	{r4, r5, r6, lr}
 801738e:	4605      	mov	r5, r0
 8017390:	b1a8      	cbz	r0, 80173be <std_msgs__msg__Header__init+0x32>
 8017392:	f000 f82b 	bl	80173ec <builtin_interfaces__msg__Time__init>
 8017396:	4604      	mov	r4, r0
 8017398:	b140      	cbz	r0, 80173ac <std_msgs__msg__Header__init+0x20>
 801739a:	f105 0608 	add.w	r6, r5, #8
 801739e:	4630      	mov	r0, r6
 80173a0:	f7ff fe5c 	bl	801705c <rosidl_runtime_c__String__init>
 80173a4:	4604      	mov	r4, r0
 80173a6:	b168      	cbz	r0, 80173c4 <std_msgs__msg__Header__init+0x38>
 80173a8:	4620      	mov	r0, r4
 80173aa:	bd70      	pop	{r4, r5, r6, pc}
 80173ac:	4628      	mov	r0, r5
 80173ae:	f000 f821 	bl	80173f4 <builtin_interfaces__msg__Time__fini>
 80173b2:	f105 0008 	add.w	r0, r5, #8
 80173b6:	f7ff fe67 	bl	8017088 <rosidl_runtime_c__String__fini>
 80173ba:	4620      	mov	r0, r4
 80173bc:	bd70      	pop	{r4, r5, r6, pc}
 80173be:	4604      	mov	r4, r0
 80173c0:	4620      	mov	r0, r4
 80173c2:	bd70      	pop	{r4, r5, r6, pc}
 80173c4:	4628      	mov	r0, r5
 80173c6:	f000 f815 	bl	80173f4 <builtin_interfaces__msg__Time__fini>
 80173ca:	4630      	mov	r0, r6
 80173cc:	f7ff fe5c 	bl	8017088 <rosidl_runtime_c__String__fini>
 80173d0:	e7ea      	b.n	80173a8 <std_msgs__msg__Header__init+0x1c>
 80173d2:	bf00      	nop

080173d4 <std_msgs__msg__Header__fini>:
 80173d4:	b148      	cbz	r0, 80173ea <std_msgs__msg__Header__fini+0x16>
 80173d6:	b510      	push	{r4, lr}
 80173d8:	4604      	mov	r4, r0
 80173da:	f000 f80b 	bl	80173f4 <builtin_interfaces__msg__Time__fini>
 80173de:	f104 0008 	add.w	r0, r4, #8
 80173e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173e6:	f7ff be4f 	b.w	8017088 <rosidl_runtime_c__String__fini>
 80173ea:	4770      	bx	lr

080173ec <builtin_interfaces__msg__Time__init>:
 80173ec:	3800      	subs	r0, #0
 80173ee:	bf18      	it	ne
 80173f0:	2001      	movne	r0, #1
 80173f2:	4770      	bx	lr

080173f4 <builtin_interfaces__msg__Time__fini>:
 80173f4:	4770      	bx	lr
 80173f6:	bf00      	nop

080173f8 <ucdr_serialize_endian_array_char>:
 80173f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173fc:	4619      	mov	r1, r3
 80173fe:	461f      	mov	r7, r3
 8017400:	4605      	mov	r5, r0
 8017402:	4690      	mov	r8, r2
 8017404:	f7f4 fa60 	bl	800b8c8 <ucdr_check_buffer_available_for>
 8017408:	b9e0      	cbnz	r0, 8017444 <ucdr_serialize_endian_array_char+0x4c>
 801740a:	463e      	mov	r6, r7
 801740c:	e009      	b.n	8017422 <ucdr_serialize_endian_array_char+0x2a>
 801740e:	68a8      	ldr	r0, [r5, #8]
 8017410:	f002 f8ab 	bl	801956a <memcpy>
 8017414:	68ab      	ldr	r3, [r5, #8]
 8017416:	6928      	ldr	r0, [r5, #16]
 8017418:	4423      	add	r3, r4
 801741a:	4420      	add	r0, r4
 801741c:	1b36      	subs	r6, r6, r4
 801741e:	60ab      	str	r3, [r5, #8]
 8017420:	6128      	str	r0, [r5, #16]
 8017422:	4631      	mov	r1, r6
 8017424:	2201      	movs	r2, #1
 8017426:	4628      	mov	r0, r5
 8017428:	f7f4 fad6 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 801742c:	1bb9      	subs	r1, r7, r6
 801742e:	4441      	add	r1, r8
 8017430:	4604      	mov	r4, r0
 8017432:	4602      	mov	r2, r0
 8017434:	2800      	cmp	r0, #0
 8017436:	d1ea      	bne.n	801740e <ucdr_serialize_endian_array_char+0x16>
 8017438:	2301      	movs	r3, #1
 801743a:	7da8      	ldrb	r0, [r5, #22]
 801743c:	756b      	strb	r3, [r5, #21]
 801743e:	4058      	eors	r0, r3
 8017440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017444:	463a      	mov	r2, r7
 8017446:	68a8      	ldr	r0, [r5, #8]
 8017448:	4641      	mov	r1, r8
 801744a:	f002 f88e 	bl	801956a <memcpy>
 801744e:	68aa      	ldr	r2, [r5, #8]
 8017450:	692b      	ldr	r3, [r5, #16]
 8017452:	443a      	add	r2, r7
 8017454:	443b      	add	r3, r7
 8017456:	60aa      	str	r2, [r5, #8]
 8017458:	612b      	str	r3, [r5, #16]
 801745a:	e7ed      	b.n	8017438 <ucdr_serialize_endian_array_char+0x40>

0801745c <ucdr_deserialize_endian_array_char>:
 801745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017460:	4619      	mov	r1, r3
 8017462:	461f      	mov	r7, r3
 8017464:	4605      	mov	r5, r0
 8017466:	4690      	mov	r8, r2
 8017468:	f7f4 fa2e 	bl	800b8c8 <ucdr_check_buffer_available_for>
 801746c:	b9e0      	cbnz	r0, 80174a8 <ucdr_deserialize_endian_array_char+0x4c>
 801746e:	463e      	mov	r6, r7
 8017470:	e009      	b.n	8017486 <ucdr_deserialize_endian_array_char+0x2a>
 8017472:	68a9      	ldr	r1, [r5, #8]
 8017474:	f002 f879 	bl	801956a <memcpy>
 8017478:	68ab      	ldr	r3, [r5, #8]
 801747a:	6928      	ldr	r0, [r5, #16]
 801747c:	4423      	add	r3, r4
 801747e:	4420      	add	r0, r4
 8017480:	1b36      	subs	r6, r6, r4
 8017482:	60ab      	str	r3, [r5, #8]
 8017484:	6128      	str	r0, [r5, #16]
 8017486:	2201      	movs	r2, #1
 8017488:	4631      	mov	r1, r6
 801748a:	4628      	mov	r0, r5
 801748c:	f7f4 faa4 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 8017490:	4604      	mov	r4, r0
 8017492:	1bb8      	subs	r0, r7, r6
 8017494:	4440      	add	r0, r8
 8017496:	4622      	mov	r2, r4
 8017498:	2c00      	cmp	r4, #0
 801749a:	d1ea      	bne.n	8017472 <ucdr_deserialize_endian_array_char+0x16>
 801749c:	2301      	movs	r3, #1
 801749e:	7da8      	ldrb	r0, [r5, #22]
 80174a0:	756b      	strb	r3, [r5, #21]
 80174a2:	4058      	eors	r0, r3
 80174a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174a8:	463a      	mov	r2, r7
 80174aa:	68a9      	ldr	r1, [r5, #8]
 80174ac:	4640      	mov	r0, r8
 80174ae:	f002 f85c 	bl	801956a <memcpy>
 80174b2:	68aa      	ldr	r2, [r5, #8]
 80174b4:	692b      	ldr	r3, [r5, #16]
 80174b6:	443a      	add	r2, r7
 80174b8:	443b      	add	r3, r7
 80174ba:	60aa      	str	r2, [r5, #8]
 80174bc:	612b      	str	r3, [r5, #16]
 80174be:	e7ed      	b.n	801749c <ucdr_deserialize_endian_array_char+0x40>

080174c0 <ucdr_serialize_array_uint8_t>:
 80174c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c4:	4688      	mov	r8, r1
 80174c6:	4611      	mov	r1, r2
 80174c8:	4617      	mov	r7, r2
 80174ca:	4605      	mov	r5, r0
 80174cc:	f7f4 f9fc 	bl	800b8c8 <ucdr_check_buffer_available_for>
 80174d0:	b9e0      	cbnz	r0, 801750c <ucdr_serialize_array_uint8_t+0x4c>
 80174d2:	463e      	mov	r6, r7
 80174d4:	e009      	b.n	80174ea <ucdr_serialize_array_uint8_t+0x2a>
 80174d6:	68a8      	ldr	r0, [r5, #8]
 80174d8:	f002 f847 	bl	801956a <memcpy>
 80174dc:	68aa      	ldr	r2, [r5, #8]
 80174de:	692b      	ldr	r3, [r5, #16]
 80174e0:	4422      	add	r2, r4
 80174e2:	4423      	add	r3, r4
 80174e4:	1b36      	subs	r6, r6, r4
 80174e6:	60aa      	str	r2, [r5, #8]
 80174e8:	612b      	str	r3, [r5, #16]
 80174ea:	4631      	mov	r1, r6
 80174ec:	2201      	movs	r2, #1
 80174ee:	4628      	mov	r0, r5
 80174f0:	f7f4 fa72 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 80174f4:	1bb9      	subs	r1, r7, r6
 80174f6:	4441      	add	r1, r8
 80174f8:	4604      	mov	r4, r0
 80174fa:	4602      	mov	r2, r0
 80174fc:	2800      	cmp	r0, #0
 80174fe:	d1ea      	bne.n	80174d6 <ucdr_serialize_array_uint8_t+0x16>
 8017500:	2301      	movs	r3, #1
 8017502:	7da8      	ldrb	r0, [r5, #22]
 8017504:	756b      	strb	r3, [r5, #21]
 8017506:	4058      	eors	r0, r3
 8017508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750c:	463a      	mov	r2, r7
 801750e:	68a8      	ldr	r0, [r5, #8]
 8017510:	4641      	mov	r1, r8
 8017512:	f002 f82a 	bl	801956a <memcpy>
 8017516:	68aa      	ldr	r2, [r5, #8]
 8017518:	692b      	ldr	r3, [r5, #16]
 801751a:	443a      	add	r2, r7
 801751c:	443b      	add	r3, r7
 801751e:	60aa      	str	r2, [r5, #8]
 8017520:	612b      	str	r3, [r5, #16]
 8017522:	e7ed      	b.n	8017500 <ucdr_serialize_array_uint8_t+0x40>

08017524 <ucdr_serialize_endian_array_uint8_t>:
 8017524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017528:	4619      	mov	r1, r3
 801752a:	461f      	mov	r7, r3
 801752c:	4605      	mov	r5, r0
 801752e:	4690      	mov	r8, r2
 8017530:	f7f4 f9ca 	bl	800b8c8 <ucdr_check_buffer_available_for>
 8017534:	b9e0      	cbnz	r0, 8017570 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017536:	463e      	mov	r6, r7
 8017538:	e009      	b.n	801754e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801753a:	68a8      	ldr	r0, [r5, #8]
 801753c:	f002 f815 	bl	801956a <memcpy>
 8017540:	68ab      	ldr	r3, [r5, #8]
 8017542:	6928      	ldr	r0, [r5, #16]
 8017544:	4423      	add	r3, r4
 8017546:	4420      	add	r0, r4
 8017548:	1b36      	subs	r6, r6, r4
 801754a:	60ab      	str	r3, [r5, #8]
 801754c:	6128      	str	r0, [r5, #16]
 801754e:	4631      	mov	r1, r6
 8017550:	2201      	movs	r2, #1
 8017552:	4628      	mov	r0, r5
 8017554:	f7f4 fa40 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 8017558:	1bb9      	subs	r1, r7, r6
 801755a:	4441      	add	r1, r8
 801755c:	4604      	mov	r4, r0
 801755e:	4602      	mov	r2, r0
 8017560:	2800      	cmp	r0, #0
 8017562:	d1ea      	bne.n	801753a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017564:	2301      	movs	r3, #1
 8017566:	7da8      	ldrb	r0, [r5, #22]
 8017568:	756b      	strb	r3, [r5, #21]
 801756a:	4058      	eors	r0, r3
 801756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017570:	463a      	mov	r2, r7
 8017572:	68a8      	ldr	r0, [r5, #8]
 8017574:	4641      	mov	r1, r8
 8017576:	f001 fff8 	bl	801956a <memcpy>
 801757a:	68aa      	ldr	r2, [r5, #8]
 801757c:	692b      	ldr	r3, [r5, #16]
 801757e:	443a      	add	r2, r7
 8017580:	443b      	add	r3, r7
 8017582:	60aa      	str	r2, [r5, #8]
 8017584:	612b      	str	r3, [r5, #16]
 8017586:	e7ed      	b.n	8017564 <ucdr_serialize_endian_array_uint8_t+0x40>

08017588 <ucdr_deserialize_array_uint8_t>:
 8017588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758c:	4688      	mov	r8, r1
 801758e:	4611      	mov	r1, r2
 8017590:	4617      	mov	r7, r2
 8017592:	4605      	mov	r5, r0
 8017594:	f7f4 f998 	bl	800b8c8 <ucdr_check_buffer_available_for>
 8017598:	b9e0      	cbnz	r0, 80175d4 <ucdr_deserialize_array_uint8_t+0x4c>
 801759a:	463e      	mov	r6, r7
 801759c:	e009      	b.n	80175b2 <ucdr_deserialize_array_uint8_t+0x2a>
 801759e:	68a9      	ldr	r1, [r5, #8]
 80175a0:	f001 ffe3 	bl	801956a <memcpy>
 80175a4:	68aa      	ldr	r2, [r5, #8]
 80175a6:	692b      	ldr	r3, [r5, #16]
 80175a8:	4422      	add	r2, r4
 80175aa:	4423      	add	r3, r4
 80175ac:	1b36      	subs	r6, r6, r4
 80175ae:	60aa      	str	r2, [r5, #8]
 80175b0:	612b      	str	r3, [r5, #16]
 80175b2:	2201      	movs	r2, #1
 80175b4:	4631      	mov	r1, r6
 80175b6:	4628      	mov	r0, r5
 80175b8:	f7f4 fa0e 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 80175bc:	4604      	mov	r4, r0
 80175be:	1bb8      	subs	r0, r7, r6
 80175c0:	4440      	add	r0, r8
 80175c2:	4622      	mov	r2, r4
 80175c4:	2c00      	cmp	r4, #0
 80175c6:	d1ea      	bne.n	801759e <ucdr_deserialize_array_uint8_t+0x16>
 80175c8:	2301      	movs	r3, #1
 80175ca:	7da8      	ldrb	r0, [r5, #22]
 80175cc:	756b      	strb	r3, [r5, #21]
 80175ce:	4058      	eors	r0, r3
 80175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d4:	463a      	mov	r2, r7
 80175d6:	68a9      	ldr	r1, [r5, #8]
 80175d8:	4640      	mov	r0, r8
 80175da:	f001 ffc6 	bl	801956a <memcpy>
 80175de:	68aa      	ldr	r2, [r5, #8]
 80175e0:	692b      	ldr	r3, [r5, #16]
 80175e2:	443a      	add	r2, r7
 80175e4:	443b      	add	r3, r7
 80175e6:	60aa      	str	r2, [r5, #8]
 80175e8:	612b      	str	r3, [r5, #16]
 80175ea:	e7ed      	b.n	80175c8 <ucdr_deserialize_array_uint8_t+0x40>

080175ec <ucdr_deserialize_endian_array_uint8_t>:
 80175ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f0:	4619      	mov	r1, r3
 80175f2:	461f      	mov	r7, r3
 80175f4:	4605      	mov	r5, r0
 80175f6:	4690      	mov	r8, r2
 80175f8:	f7f4 f966 	bl	800b8c8 <ucdr_check_buffer_available_for>
 80175fc:	b9e0      	cbnz	r0, 8017638 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80175fe:	463e      	mov	r6, r7
 8017600:	e009      	b.n	8017616 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017602:	68a9      	ldr	r1, [r5, #8]
 8017604:	f001 ffb1 	bl	801956a <memcpy>
 8017608:	68ab      	ldr	r3, [r5, #8]
 801760a:	6928      	ldr	r0, [r5, #16]
 801760c:	4423      	add	r3, r4
 801760e:	4420      	add	r0, r4
 8017610:	1b36      	subs	r6, r6, r4
 8017612:	60ab      	str	r3, [r5, #8]
 8017614:	6128      	str	r0, [r5, #16]
 8017616:	2201      	movs	r2, #1
 8017618:	4631      	mov	r1, r6
 801761a:	4628      	mov	r0, r5
 801761c:	f7f4 f9dc 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 8017620:	4604      	mov	r4, r0
 8017622:	1bb8      	subs	r0, r7, r6
 8017624:	4440      	add	r0, r8
 8017626:	4622      	mov	r2, r4
 8017628:	2c00      	cmp	r4, #0
 801762a:	d1ea      	bne.n	8017602 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801762c:	2301      	movs	r3, #1
 801762e:	7da8      	ldrb	r0, [r5, #22]
 8017630:	756b      	strb	r3, [r5, #21]
 8017632:	4058      	eors	r0, r3
 8017634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017638:	463a      	mov	r2, r7
 801763a:	68a9      	ldr	r1, [r5, #8]
 801763c:	4640      	mov	r0, r8
 801763e:	f001 ff94 	bl	801956a <memcpy>
 8017642:	68aa      	ldr	r2, [r5, #8]
 8017644:	692b      	ldr	r3, [r5, #16]
 8017646:	443a      	add	r2, r7
 8017648:	443b      	add	r3, r7
 801764a:	60aa      	str	r2, [r5, #8]
 801764c:	612b      	str	r3, [r5, #16]
 801764e:	e7ed      	b.n	801762c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017650 <ucdr_serialize_endian_array_double>:
 8017650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017654:	4688      	mov	r8, r1
 8017656:	2108      	movs	r1, #8
 8017658:	4604      	mov	r4, r0
 801765a:	4616      	mov	r6, r2
 801765c:	461f      	mov	r7, r3
 801765e:	f7f4 f993 	bl	800b988 <ucdr_buffer_alignment>
 8017662:	4601      	mov	r1, r0
 8017664:	4620      	mov	r0, r4
 8017666:	7d65      	ldrb	r5, [r4, #21]
 8017668:	f7f4 f9d2 	bl	800ba10 <ucdr_advance_buffer>
 801766c:	f1b8 0f01 	cmp.w	r8, #1
 8017670:	7565      	strb	r5, [r4, #21]
 8017672:	d00f      	beq.n	8017694 <ucdr_serialize_endian_array_double+0x44>
 8017674:	2500      	movs	r5, #0
 8017676:	b147      	cbz	r7, 801768a <ucdr_serialize_endian_array_double+0x3a>
 8017678:	ecb6 0b02 	vldmia	r6!, {d0}
 801767c:	4641      	mov	r1, r8
 801767e:	4620      	mov	r0, r4
 8017680:	3501      	adds	r5, #1
 8017682:	f7f3 febb 	bl	800b3fc <ucdr_serialize_endian_double>
 8017686:	42af      	cmp	r7, r5
 8017688:	d1f6      	bne.n	8017678 <ucdr_serialize_endian_array_double+0x28>
 801768a:	7da0      	ldrb	r0, [r4, #22]
 801768c:	f080 0001 	eor.w	r0, r0, #1
 8017690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017694:	00ff      	lsls	r7, r7, #3
 8017696:	4639      	mov	r1, r7
 8017698:	4620      	mov	r0, r4
 801769a:	f7f4 f915 	bl	800b8c8 <ucdr_check_buffer_available_for>
 801769e:	b9f8      	cbnz	r0, 80176e0 <ucdr_serialize_endian_array_double+0x90>
 80176a0:	46b8      	mov	r8, r7
 80176a2:	e00a      	b.n	80176ba <ucdr_serialize_endian_array_double+0x6a>
 80176a4:	68a0      	ldr	r0, [r4, #8]
 80176a6:	f001 ff60 	bl	801956a <memcpy>
 80176aa:	68a2      	ldr	r2, [r4, #8]
 80176ac:	6923      	ldr	r3, [r4, #16]
 80176ae:	442a      	add	r2, r5
 80176b0:	442b      	add	r3, r5
 80176b2:	eba8 0805 	sub.w	r8, r8, r5
 80176b6:	60a2      	str	r2, [r4, #8]
 80176b8:	6123      	str	r3, [r4, #16]
 80176ba:	4641      	mov	r1, r8
 80176bc:	2208      	movs	r2, #8
 80176be:	4620      	mov	r0, r4
 80176c0:	f7f4 f98a 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 80176c4:	eba7 0108 	sub.w	r1, r7, r8
 80176c8:	4431      	add	r1, r6
 80176ca:	4605      	mov	r5, r0
 80176cc:	4602      	mov	r2, r0
 80176ce:	2800      	cmp	r0, #0
 80176d0:	d1e8      	bne.n	80176a4 <ucdr_serialize_endian_array_double+0x54>
 80176d2:	7da0      	ldrb	r0, [r4, #22]
 80176d4:	2308      	movs	r3, #8
 80176d6:	7563      	strb	r3, [r4, #21]
 80176d8:	f080 0001 	eor.w	r0, r0, #1
 80176dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176e0:	463a      	mov	r2, r7
 80176e2:	68a0      	ldr	r0, [r4, #8]
 80176e4:	4631      	mov	r1, r6
 80176e6:	f001 ff40 	bl	801956a <memcpy>
 80176ea:	68a2      	ldr	r2, [r4, #8]
 80176ec:	6923      	ldr	r3, [r4, #16]
 80176ee:	443a      	add	r2, r7
 80176f0:	441f      	add	r7, r3
 80176f2:	60a2      	str	r2, [r4, #8]
 80176f4:	6127      	str	r7, [r4, #16]
 80176f6:	e7ec      	b.n	80176d2 <ucdr_serialize_endian_array_double+0x82>

080176f8 <ucdr_deserialize_endian_array_double>:
 80176f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176fc:	4688      	mov	r8, r1
 80176fe:	2108      	movs	r1, #8
 8017700:	4605      	mov	r5, r0
 8017702:	4614      	mov	r4, r2
 8017704:	461f      	mov	r7, r3
 8017706:	f7f4 f93f 	bl	800b988 <ucdr_buffer_alignment>
 801770a:	4601      	mov	r1, r0
 801770c:	4628      	mov	r0, r5
 801770e:	7d6e      	ldrb	r6, [r5, #21]
 8017710:	f7f4 f97e 	bl	800ba10 <ucdr_advance_buffer>
 8017714:	f1b8 0f01 	cmp.w	r8, #1
 8017718:	756e      	strb	r6, [r5, #21]
 801771a:	d010      	beq.n	801773e <ucdr_deserialize_endian_array_double+0x46>
 801771c:	2600      	movs	r6, #0
 801771e:	b14f      	cbz	r7, 8017734 <ucdr_deserialize_endian_array_double+0x3c>
 8017720:	4622      	mov	r2, r4
 8017722:	4641      	mov	r1, r8
 8017724:	4628      	mov	r0, r5
 8017726:	3601      	adds	r6, #1
 8017728:	f7f4 f800 	bl	800b72c <ucdr_deserialize_endian_double>
 801772c:	42b7      	cmp	r7, r6
 801772e:	f104 0408 	add.w	r4, r4, #8
 8017732:	d1f5      	bne.n	8017720 <ucdr_deserialize_endian_array_double+0x28>
 8017734:	7da8      	ldrb	r0, [r5, #22]
 8017736:	f080 0001 	eor.w	r0, r0, #1
 801773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801773e:	00ff      	lsls	r7, r7, #3
 8017740:	4639      	mov	r1, r7
 8017742:	4628      	mov	r0, r5
 8017744:	f7f4 f8c0 	bl	800b8c8 <ucdr_check_buffer_available_for>
 8017748:	b9f8      	cbnz	r0, 801778a <ucdr_deserialize_endian_array_double+0x92>
 801774a:	46b8      	mov	r8, r7
 801774c:	e00a      	b.n	8017764 <ucdr_deserialize_endian_array_double+0x6c>
 801774e:	68a9      	ldr	r1, [r5, #8]
 8017750:	f001 ff0b 	bl	801956a <memcpy>
 8017754:	68aa      	ldr	r2, [r5, #8]
 8017756:	692b      	ldr	r3, [r5, #16]
 8017758:	4432      	add	r2, r6
 801775a:	4433      	add	r3, r6
 801775c:	eba8 0806 	sub.w	r8, r8, r6
 8017760:	60aa      	str	r2, [r5, #8]
 8017762:	612b      	str	r3, [r5, #16]
 8017764:	2208      	movs	r2, #8
 8017766:	4641      	mov	r1, r8
 8017768:	4628      	mov	r0, r5
 801776a:	f7f4 f935 	bl	800b9d8 <ucdr_check_final_buffer_behavior_array>
 801776e:	4606      	mov	r6, r0
 8017770:	eba7 0008 	sub.w	r0, r7, r8
 8017774:	4420      	add	r0, r4
 8017776:	4632      	mov	r2, r6
 8017778:	2e00      	cmp	r6, #0
 801777a:	d1e8      	bne.n	801774e <ucdr_deserialize_endian_array_double+0x56>
 801777c:	7da8      	ldrb	r0, [r5, #22]
 801777e:	2308      	movs	r3, #8
 8017780:	756b      	strb	r3, [r5, #21]
 8017782:	f080 0001 	eor.w	r0, r0, #1
 8017786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801778a:	463a      	mov	r2, r7
 801778c:	68a9      	ldr	r1, [r5, #8]
 801778e:	4620      	mov	r0, r4
 8017790:	f001 feeb 	bl	801956a <memcpy>
 8017794:	68aa      	ldr	r2, [r5, #8]
 8017796:	692b      	ldr	r3, [r5, #16]
 8017798:	443a      	add	r2, r7
 801779a:	441f      	add	r7, r3
 801779c:	60aa      	str	r2, [r5, #8]
 801779e:	612f      	str	r7, [r5, #16]
 80177a0:	e7ec      	b.n	801777c <ucdr_deserialize_endian_array_double+0x84>
 80177a2:	bf00      	nop

080177a4 <ucdr_serialize_string>:
 80177a4:	b510      	push	{r4, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	4604      	mov	r4, r0
 80177aa:	4608      	mov	r0, r1
 80177ac:	9101      	str	r1, [sp, #4]
 80177ae:	f7e8 fd39 	bl	8000224 <strlen>
 80177b2:	9901      	ldr	r1, [sp, #4]
 80177b4:	1c42      	adds	r2, r0, #1
 80177b6:	4620      	mov	r0, r4
 80177b8:	b002      	add	sp, #8
 80177ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177be:	f7f8 b83f 	b.w	800f840 <ucdr_serialize_sequence_char>
 80177c2:	bf00      	nop

080177c4 <ucdr_deserialize_string>:
 80177c4:	b500      	push	{lr}
 80177c6:	b083      	sub	sp, #12
 80177c8:	ab01      	add	r3, sp, #4
 80177ca:	f7f8 f84b 	bl	800f864 <ucdr_deserialize_sequence_char>
 80177ce:	b003      	add	sp, #12
 80177d0:	f85d fb04 	ldr.w	pc, [sp], #4

080177d4 <uxr_init_input_best_effort_stream>:
 80177d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177d8:	8003      	strh	r3, [r0, #0]
 80177da:	4770      	bx	lr

080177dc <uxr_reset_input_best_effort_stream>:
 80177dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177e0:	8003      	strh	r3, [r0, #0]
 80177e2:	4770      	bx	lr

080177e4 <uxr_receive_best_effort_message>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4604      	mov	r4, r0
 80177e8:	8800      	ldrh	r0, [r0, #0]
 80177ea:	460d      	mov	r5, r1
 80177ec:	f000 fd42 	bl	8018274 <uxr_seq_num_cmp>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80177f8:	bfb8      	it	lt
 80177fa:	8025      	strhlt	r5, [r4, #0]
 80177fc:	bd38      	pop	{r3, r4, r5, pc}
 80177fe:	bf00      	nop

08017800 <on_full_input_buffer>:
 8017800:	b570      	push	{r4, r5, r6, lr}
 8017802:	4605      	mov	r5, r0
 8017804:	460c      	mov	r4, r1
 8017806:	682b      	ldr	r3, [r5, #0]
 8017808:	6809      	ldr	r1, [r1, #0]
 801780a:	8920      	ldrh	r0, [r4, #8]
 801780c:	6862      	ldr	r2, [r4, #4]
 801780e:	fbb2 f2f0 	udiv	r2, r2, r0
 8017812:	eba3 0c01 	sub.w	ip, r3, r1
 8017816:	fbbc fcf2 	udiv	ip, ip, r2
 801781a:	f10c 0c01 	add.w	ip, ip, #1
 801781e:	fa1f f38c 	uxth.w	r3, ip
 8017822:	fbb3 f6f0 	udiv	r6, r3, r0
 8017826:	fb00 3316 	mls	r3, r0, r6, r3
 801782a:	b29b      	uxth	r3, r3
 801782c:	fb02 f303 	mul.w	r3, r2, r3
 8017830:	1d18      	adds	r0, r3, #4
 8017832:	4408      	add	r0, r1
 8017834:	7d26      	ldrb	r6, [r4, #20]
 8017836:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801783a:	b116      	cbz	r6, 8017842 <on_full_input_buffer+0x42>
 801783c:	2600      	movs	r6, #0
 801783e:	f840 6c04 	str.w	r6, [r0, #-4]
 8017842:	2a03      	cmp	r2, #3
 8017844:	d801      	bhi.n	801784a <on_full_input_buffer+0x4a>
 8017846:	2001      	movs	r0, #1
 8017848:	bd70      	pop	{r4, r5, r6, pc}
 801784a:	3308      	adds	r3, #8
 801784c:	4419      	add	r1, r3
 801784e:	4628      	mov	r0, r5
 8017850:	692b      	ldr	r3, [r5, #16]
 8017852:	3a04      	subs	r2, #4
 8017854:	f7f4 f884 	bl	800b960 <ucdr_init_buffer_origin>
 8017858:	4628      	mov	r0, r5
 801785a:	4903      	ldr	r1, [pc, #12]	@ (8017868 <on_full_input_buffer+0x68>)
 801785c:	4622      	mov	r2, r4
 801785e:	f7f4 f85b 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8017862:	2000      	movs	r0, #0
 8017864:	bd70      	pop	{r4, r5, r6, pc}
 8017866:	bf00      	nop
 8017868:	08017801 	.word	0x08017801

0801786c <uxr_init_input_reliable_stream>:
 801786c:	b500      	push	{lr}
 801786e:	e9c0 1200 	strd	r1, r2, [r0]
 8017872:	f04f 0e00 	mov.w	lr, #0
 8017876:	9a01      	ldr	r2, [sp, #4]
 8017878:	8103      	strh	r3, [r0, #8]
 801787a:	6102      	str	r2, [r0, #16]
 801787c:	f880 e014 	strb.w	lr, [r0, #20]
 8017880:	b1d3      	cbz	r3, 80178b8 <uxr_init_input_reliable_stream+0x4c>
 8017882:	f8c1 e000 	str.w	lr, [r1]
 8017886:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801788a:	f1bc 0f01 	cmp.w	ip, #1
 801788e:	d913      	bls.n	80178b8 <uxr_init_input_reliable_stream+0x4c>
 8017890:	2301      	movs	r3, #1
 8017892:	fbb3 f1fc 	udiv	r1, r3, ip
 8017896:	fb0c 3111 	mls	r1, ip, r1, r3
 801789a:	b289      	uxth	r1, r1
 801789c:	6842      	ldr	r2, [r0, #4]
 801789e:	fbb2 f2fc 	udiv	r2, r2, ip
 80178a2:	fb01 f202 	mul.w	r2, r1, r2
 80178a6:	6801      	ldr	r1, [r0, #0]
 80178a8:	f841 e002 	str.w	lr, [r1, r2]
 80178ac:	3301      	adds	r3, #1
 80178ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	459c      	cmp	ip, r3
 80178b6:	d8ec      	bhi.n	8017892 <uxr_init_input_reliable_stream+0x26>
 80178b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178bc:	60c3      	str	r3, [r0, #12]
 80178be:	f85d fb04 	ldr.w	pc, [sp], #4
 80178c2:	bf00      	nop

080178c4 <uxr_reset_input_reliable_stream>:
 80178c4:	8901      	ldrh	r1, [r0, #8]
 80178c6:	b1e9      	cbz	r1, 8017904 <uxr_reset_input_reliable_stream+0x40>
 80178c8:	f04f 0c00 	mov.w	ip, #0
 80178cc:	b500      	push	{lr}
 80178ce:	4663      	mov	r3, ip
 80178d0:	46e6      	mov	lr, ip
 80178d2:	fbb3 f2f1 	udiv	r2, r3, r1
 80178d6:	fb01 3312 	mls	r3, r1, r2, r3
 80178da:	b29b      	uxth	r3, r3
 80178dc:	6842      	ldr	r2, [r0, #4]
 80178de:	fbb2 f2f1 	udiv	r2, r2, r1
 80178e2:	fb02 f303 	mul.w	r3, r2, r3
 80178e6:	6802      	ldr	r2, [r0, #0]
 80178e8:	f842 e003 	str.w	lr, [r2, r3]
 80178ec:	f10c 0c01 	add.w	ip, ip, #1
 80178f0:	8901      	ldrh	r1, [r0, #8]
 80178f2:	fa1f f38c 	uxth.w	r3, ip
 80178f6:	4299      	cmp	r1, r3
 80178f8:	d8eb      	bhi.n	80178d2 <uxr_reset_input_reliable_stream+0xe>
 80178fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178fe:	60c3      	str	r3, [r0, #12]
 8017900:	f85d fb04 	ldr.w	pc, [sp], #4
 8017904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017908:	60c3      	str	r3, [r0, #12]
 801790a:	4770      	bx	lr

0801790c <uxr_receive_reliable_message>:
 801790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017910:	4604      	mov	r4, r0
 8017912:	460d      	mov	r5, r1
 8017914:	8901      	ldrh	r1, [r0, #8]
 8017916:	8980      	ldrh	r0, [r0, #12]
 8017918:	4690      	mov	r8, r2
 801791a:	461f      	mov	r7, r3
 801791c:	f000 fca2 	bl	8018264 <uxr_seq_num_add>
 8017920:	4629      	mov	r1, r5
 8017922:	4606      	mov	r6, r0
 8017924:	89a0      	ldrh	r0, [r4, #12]
 8017926:	f000 fca5 	bl	8018274 <uxr_seq_num_cmp>
 801792a:	2800      	cmp	r0, #0
 801792c:	db0a      	blt.n	8017944 <uxr_receive_reliable_message+0x38>
 801792e:	2600      	movs	r6, #0
 8017930:	89e0      	ldrh	r0, [r4, #14]
 8017932:	4629      	mov	r1, r5
 8017934:	f000 fc9e 	bl	8018274 <uxr_seq_num_cmp>
 8017938:	2800      	cmp	r0, #0
 801793a:	da00      	bge.n	801793e <uxr_receive_reliable_message+0x32>
 801793c:	81e5      	strh	r5, [r4, #14]
 801793e:	4630      	mov	r0, r6
 8017940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017944:	4630      	mov	r0, r6
 8017946:	4629      	mov	r1, r5
 8017948:	f000 fc94 	bl	8018274 <uxr_seq_num_cmp>
 801794c:	2800      	cmp	r0, #0
 801794e:	dbee      	blt.n	801792e <uxr_receive_reliable_message+0x22>
 8017950:	6923      	ldr	r3, [r4, #16]
 8017952:	4640      	mov	r0, r8
 8017954:	4798      	blx	r3
 8017956:	2101      	movs	r1, #1
 8017958:	4681      	mov	r9, r0
 801795a:	89a0      	ldrh	r0, [r4, #12]
 801795c:	f000 fc82 	bl	8018264 <uxr_seq_num_add>
 8017960:	f1b9 0f00 	cmp.w	r9, #0
 8017964:	d101      	bne.n	801796a <uxr_receive_reliable_message+0x5e>
 8017966:	4285      	cmp	r5, r0
 8017968:	d047      	beq.n	80179fa <uxr_receive_reliable_message+0xee>
 801796a:	8922      	ldrh	r2, [r4, #8]
 801796c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017970:	fb02 5010 	mls	r0, r2, r0, r5
 8017974:	b280      	uxth	r0, r0
 8017976:	6863      	ldr	r3, [r4, #4]
 8017978:	fbb3 f3f2 	udiv	r3, r3, r2
 801797c:	fb00 f303 	mul.w	r3, r0, r3
 8017980:	6820      	ldr	r0, [r4, #0]
 8017982:	3304      	adds	r3, #4
 8017984:	4418      	add	r0, r3
 8017986:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1cf      	bne.n	801792e <uxr_receive_reliable_message+0x22>
 801798e:	4641      	mov	r1, r8
 8017990:	463a      	mov	r2, r7
 8017992:	f001 fdea 	bl	801956a <memcpy>
 8017996:	8921      	ldrh	r1, [r4, #8]
 8017998:	fbb5 f2f1 	udiv	r2, r5, r1
 801799c:	fb01 5212 	mls	r2, r1, r2, r5
 80179a0:	b292      	uxth	r2, r2
 80179a2:	6863      	ldr	r3, [r4, #4]
 80179a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80179a8:	fb02 f303 	mul.w	r3, r2, r3
 80179ac:	6822      	ldr	r2, [r4, #0]
 80179ae:	50d7      	str	r7, [r2, r3]
 80179b0:	9a08      	ldr	r2, [sp, #32]
 80179b2:	2301      	movs	r3, #1
 80179b4:	7013      	strb	r3, [r2, #0]
 80179b6:	f1b9 0f00 	cmp.w	r9, #0
 80179ba:	d0b8      	beq.n	801792e <uxr_receive_reliable_message+0x22>
 80179bc:	89a6      	ldrh	r6, [r4, #12]
 80179be:	4630      	mov	r0, r6
 80179c0:	2101      	movs	r1, #1
 80179c2:	f000 fc4f 	bl	8018264 <uxr_seq_num_add>
 80179c6:	8922      	ldrh	r2, [r4, #8]
 80179c8:	6863      	ldr	r3, [r4, #4]
 80179ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80179ce:	4606      	mov	r6, r0
 80179d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80179d4:	fb02 6010 	mls	r0, r2, r0, r6
 80179d8:	b280      	uxth	r0, r0
 80179da:	fb00 f303 	mul.w	r3, r0, r3
 80179de:	6820      	ldr	r0, [r4, #0]
 80179e0:	3304      	adds	r3, #4
 80179e2:	4418      	add	r0, r3
 80179e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d0a0      	beq.n	801792e <uxr_receive_reliable_message+0x22>
 80179ec:	6923      	ldr	r3, [r4, #16]
 80179ee:	4798      	blx	r3
 80179f0:	2802      	cmp	r0, #2
 80179f2:	d008      	beq.n	8017a06 <uxr_receive_reliable_message+0xfa>
 80179f4:	2801      	cmp	r0, #1
 80179f6:	d0e2      	beq.n	80179be <uxr_receive_reliable_message+0xb2>
 80179f8:	e799      	b.n	801792e <uxr_receive_reliable_message+0x22>
 80179fa:	9b08      	ldr	r3, [sp, #32]
 80179fc:	81a5      	strh	r5, [r4, #12]
 80179fe:	2601      	movs	r6, #1
 8017a00:	f883 9000 	strb.w	r9, [r3]
 8017a04:	e794      	b.n	8017930 <uxr_receive_reliable_message+0x24>
 8017a06:	2601      	movs	r6, #1
 8017a08:	e792      	b.n	8017930 <uxr_receive_reliable_message+0x24>
 8017a0a:	bf00      	nop

08017a0c <uxr_next_input_reliable_buffer_available>:
 8017a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a10:	4604      	mov	r4, r0
 8017a12:	460f      	mov	r7, r1
 8017a14:	8980      	ldrh	r0, [r0, #12]
 8017a16:	2101      	movs	r1, #1
 8017a18:	4690      	mov	r8, r2
 8017a1a:	f000 fc23 	bl	8018264 <uxr_seq_num_add>
 8017a1e:	8922      	ldrh	r2, [r4, #8]
 8017a20:	fbb0 f6f2 	udiv	r6, r0, r2
 8017a24:	fb02 0616 	mls	r6, r2, r6, r0
 8017a28:	b2b6      	uxth	r6, r6
 8017a2a:	6863      	ldr	r3, [r4, #4]
 8017a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017a30:	fb06 f303 	mul.w	r3, r6, r3
 8017a34:	6826      	ldr	r6, [r4, #0]
 8017a36:	3304      	adds	r3, #4
 8017a38:	441e      	add	r6, r3
 8017a3a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017a3e:	f1b9 0f00 	cmp.w	r9, #0
 8017a42:	d023      	beq.n	8017a8c <uxr_next_input_reliable_buffer_available+0x80>
 8017a44:	6923      	ldr	r3, [r4, #16]
 8017a46:	4605      	mov	r5, r0
 8017a48:	4630      	mov	r0, r6
 8017a4a:	4798      	blx	r3
 8017a4c:	4682      	mov	sl, r0
 8017a4e:	b300      	cbz	r0, 8017a92 <uxr_next_input_reliable_buffer_available+0x86>
 8017a50:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017a54:	2101      	movs	r1, #1
 8017a56:	4650      	mov	r0, sl
 8017a58:	f000 fc04 	bl	8018264 <uxr_seq_num_add>
 8017a5c:	8921      	ldrh	r1, [r4, #8]
 8017a5e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017a62:	4682      	mov	sl, r0
 8017a64:	fb01 0212 	mls	r2, r1, r2, r0
 8017a68:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017a6c:	b292      	uxth	r2, r2
 8017a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a72:	fb02 f303 	mul.w	r3, r2, r3
 8017a76:	3304      	adds	r3, #4
 8017a78:	4418      	add	r0, r3
 8017a7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017a7e:	b12b      	cbz	r3, 8017a8c <uxr_next_input_reliable_buffer_available+0x80>
 8017a80:	6923      	ldr	r3, [r4, #16]
 8017a82:	4798      	blx	r3
 8017a84:	2802      	cmp	r0, #2
 8017a86:	d01b      	beq.n	8017ac0 <uxr_next_input_reliable_buffer_available+0xb4>
 8017a88:	2801      	cmp	r0, #1
 8017a8a:	d0e3      	beq.n	8017a54 <uxr_next_input_reliable_buffer_available+0x48>
 8017a8c:	2000      	movs	r0, #0
 8017a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a92:	464a      	mov	r2, r9
 8017a94:	4631      	mov	r1, r6
 8017a96:	4638      	mov	r0, r7
 8017a98:	f7f3 ff6a 	bl	800b970 <ucdr_init_buffer>
 8017a9c:	8921      	ldrh	r1, [r4, #8]
 8017a9e:	fbb5 f2f1 	udiv	r2, r5, r1
 8017aa2:	fb01 5212 	mls	r2, r1, r2, r5
 8017aa6:	b292      	uxth	r2, r2
 8017aa8:	6863      	ldr	r3, [r4, #4]
 8017aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8017aae:	fb02 f303 	mul.w	r3, r2, r3
 8017ab2:	6822      	ldr	r2, [r4, #0]
 8017ab4:	f842 a003 	str.w	sl, [r2, r3]
 8017ab8:	2001      	movs	r0, #1
 8017aba:	81a5      	strh	r5, [r4, #12]
 8017abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac0:	8920      	ldrh	r0, [r4, #8]
 8017ac2:	fbb5 f3f0 	udiv	r3, r5, r0
 8017ac6:	fb00 5513 	mls	r5, r0, r3, r5
 8017aca:	b2ad      	uxth	r5, r5
 8017acc:	6863      	ldr	r3, [r4, #4]
 8017ace:	fbb3 f3f0 	udiv	r3, r3, r0
 8017ad2:	fb03 f505 	mul.w	r5, r3, r5
 8017ad6:	6823      	ldr	r3, [r4, #0]
 8017ad8:	2000      	movs	r0, #0
 8017ada:	5158      	str	r0, [r3, r5]
 8017adc:	eb06 0108 	add.w	r1, r6, r8
 8017ae0:	eba9 0208 	sub.w	r2, r9, r8
 8017ae4:	4638      	mov	r0, r7
 8017ae6:	f7f3 ff43 	bl	800b970 <ucdr_init_buffer>
 8017aea:	4638      	mov	r0, r7
 8017aec:	4903      	ldr	r1, [pc, #12]	@ (8017afc <uxr_next_input_reliable_buffer_available+0xf0>)
 8017aee:	4622      	mov	r2, r4
 8017af0:	f7f3 ff12 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8017af4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017af8:	2001      	movs	r0, #1
 8017afa:	e7c8      	b.n	8017a8e <uxr_next_input_reliable_buffer_available+0x82>
 8017afc:	08017801 	.word	0x08017801

08017b00 <uxr_process_heartbeat>:
 8017b00:	b538      	push	{r3, r4, r5, lr}
 8017b02:	4611      	mov	r1, r2
 8017b04:	4604      	mov	r4, r0
 8017b06:	89c0      	ldrh	r0, [r0, #14]
 8017b08:	4615      	mov	r5, r2
 8017b0a:	f000 fbb3 	bl	8018274 <uxr_seq_num_cmp>
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	bfb8      	it	lt
 8017b12:	81e5      	strhlt	r5, [r4, #14]
 8017b14:	bd38      	pop	{r3, r4, r5, pc}
 8017b16:	bf00      	nop

08017b18 <uxr_compute_acknack>:
 8017b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b1c:	8903      	ldrh	r3, [r0, #8]
 8017b1e:	8985      	ldrh	r5, [r0, #12]
 8017b20:	4604      	mov	r4, r0
 8017b22:	460e      	mov	r6, r1
 8017b24:	b1d3      	cbz	r3, 8017b5c <uxr_compute_acknack+0x44>
 8017b26:	4628      	mov	r0, r5
 8017b28:	2701      	movs	r7, #1
 8017b2a:	e003      	b.n	8017b34 <uxr_compute_acknack+0x1c>
 8017b2c:	4567      	cmp	r7, ip
 8017b2e:	d215      	bcs.n	8017b5c <uxr_compute_acknack+0x44>
 8017b30:	89a0      	ldrh	r0, [r4, #12]
 8017b32:	3701      	adds	r7, #1
 8017b34:	b2b9      	uxth	r1, r7
 8017b36:	f000 fb95 	bl	8018264 <uxr_seq_num_add>
 8017b3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017b3e:	fbb0 f3fc 	udiv	r3, r0, ip
 8017b42:	fb0c 0313 	mls	r3, ip, r3, r0
 8017b46:	b29a      	uxth	r2, r3
 8017b48:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017b4c:	fbb3 f3fc 	udiv	r3, r3, ip
 8017b50:	fb02 f303 	mul.w	r3, r2, r3
 8017b54:	58cb      	ldr	r3, [r1, r3]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d1e8      	bne.n	8017b2c <uxr_compute_acknack+0x14>
 8017b5a:	4605      	mov	r5, r0
 8017b5c:	8035      	strh	r5, [r6, #0]
 8017b5e:	2101      	movs	r1, #1
 8017b60:	4628      	mov	r0, r5
 8017b62:	89e7      	ldrh	r7, [r4, #14]
 8017b64:	f000 fb82 	bl	801826c <uxr_seq_num_sub>
 8017b68:	4601      	mov	r1, r0
 8017b6a:	4638      	mov	r0, r7
 8017b6c:	f000 fb7e 	bl	801826c <uxr_seq_num_sub>
 8017b70:	4605      	mov	r5, r0
 8017b72:	b318      	cbz	r0, 8017bbc <uxr_compute_acknack+0xa4>
 8017b74:	f04f 0900 	mov.w	r9, #0
 8017b78:	464f      	mov	r7, r9
 8017b7a:	f04f 0801 	mov.w	r8, #1
 8017b7e:	fa1f f189 	uxth.w	r1, r9
 8017b82:	8830      	ldrh	r0, [r6, #0]
 8017b84:	f000 fb6e 	bl	8018264 <uxr_seq_num_add>
 8017b88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017b8c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017b90:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017b94:	fb03 001c 	mls	r0, r3, ip, r0
 8017b98:	b283      	uxth	r3, r0
 8017b9a:	fbb2 f2fc 	udiv	r2, r2, ip
 8017b9e:	fb02 f303 	mul.w	r3, r2, r3
 8017ba2:	fa08 f209 	lsl.w	r2, r8, r9
 8017ba6:	58cb      	ldr	r3, [r1, r3]
 8017ba8:	f109 0901 	add.w	r9, r9, #1
 8017bac:	b90b      	cbnz	r3, 8017bb2 <uxr_compute_acknack+0x9a>
 8017bae:	4317      	orrs	r7, r2
 8017bb0:	b2bf      	uxth	r7, r7
 8017bb2:	454d      	cmp	r5, r9
 8017bb4:	d1e3      	bne.n	8017b7e <uxr_compute_acknack+0x66>
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bbc:	4607      	mov	r7, r0
 8017bbe:	4638      	mov	r0, r7
 8017bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017bc4 <uxr_init_output_best_effort_stream>:
 8017bc4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017bc8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017bcc:	6001      	str	r1, [r0, #0]
 8017bce:	7303      	strb	r3, [r0, #12]
 8017bd0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop

08017bd8 <uxr_reset_output_best_effort_stream>:
 8017bd8:	7b02      	ldrb	r2, [r0, #12]
 8017bda:	6042      	str	r2, [r0, #4]
 8017bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017be0:	81c3      	strh	r3, [r0, #14]
 8017be2:	4770      	bx	lr

08017be4 <uxr_prepare_best_effort_buffer_to_write>:
 8017be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017be6:	4604      	mov	r4, r0
 8017be8:	b083      	sub	sp, #12
 8017bea:	6840      	ldr	r0, [r0, #4]
 8017bec:	460d      	mov	r5, r1
 8017bee:	4616      	mov	r6, r2
 8017bf0:	f7fa fa9a 	bl	8012128 <uxr_submessage_padding>
 8017bf4:	6863      	ldr	r3, [r4, #4]
 8017bf6:	4418      	add	r0, r3
 8017bf8:	68a3      	ldr	r3, [r4, #8]
 8017bfa:	1942      	adds	r2, r0, r5
 8017bfc:	4293      	cmp	r3, r2
 8017bfe:	bf2c      	ite	cs
 8017c00:	2701      	movcs	r7, #1
 8017c02:	2700      	movcc	r7, #0
 8017c04:	d202      	bcs.n	8017c0c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017c06:	4638      	mov	r0, r7
 8017c08:	b003      	add	sp, #12
 8017c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0c:	9000      	str	r0, [sp, #0]
 8017c0e:	6821      	ldr	r1, [r4, #0]
 8017c10:	4630      	mov	r0, r6
 8017c12:	2300      	movs	r3, #0
 8017c14:	f7f3 fe9a 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8017c18:	6861      	ldr	r1, [r4, #4]
 8017c1a:	4638      	mov	r0, r7
 8017c1c:	4429      	add	r1, r5
 8017c1e:	6061      	str	r1, [r4, #4]
 8017c20:	b003      	add	sp, #12
 8017c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c24 <uxr_prepare_best_effort_buffer_to_send>:
 8017c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c28:	4604      	mov	r4, r0
 8017c2a:	461d      	mov	r5, r3
 8017c2c:	6840      	ldr	r0, [r0, #4]
 8017c2e:	7b23      	ldrb	r3, [r4, #12]
 8017c30:	4298      	cmp	r0, r3
 8017c32:	bf8c      	ite	hi
 8017c34:	2601      	movhi	r6, #1
 8017c36:	2600      	movls	r6, #0
 8017c38:	d802      	bhi.n	8017c40 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017c3a:	4630      	mov	r0, r6
 8017c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c40:	4688      	mov	r8, r1
 8017c42:	89e0      	ldrh	r0, [r4, #14]
 8017c44:	2101      	movs	r1, #1
 8017c46:	4617      	mov	r7, r2
 8017c48:	f000 fb0c 	bl	8018264 <uxr_seq_num_add>
 8017c4c:	6823      	ldr	r3, [r4, #0]
 8017c4e:	81e0      	strh	r0, [r4, #14]
 8017c50:	8028      	strh	r0, [r5, #0]
 8017c52:	f8c8 3000 	str.w	r3, [r8]
 8017c56:	6863      	ldr	r3, [r4, #4]
 8017c58:	603b      	str	r3, [r7, #0]
 8017c5a:	7b23      	ldrb	r3, [r4, #12]
 8017c5c:	6063      	str	r3, [r4, #4]
 8017c5e:	4630      	mov	r0, r6
 8017c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c64 <on_full_output_buffer>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	6802      	ldr	r2, [r0, #0]
 8017c68:	460c      	mov	r4, r1
 8017c6a:	6809      	ldr	r1, [r1, #0]
 8017c6c:	8923      	ldrh	r3, [r4, #8]
 8017c6e:	eba2 0c01 	sub.w	ip, r2, r1
 8017c72:	6862      	ldr	r2, [r4, #4]
 8017c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8017c78:	fbbc fcf2 	udiv	ip, ip, r2
 8017c7c:	f10c 0c01 	add.w	ip, ip, #1
 8017c80:	fa1f fc8c 	uxth.w	ip, ip
 8017c84:	fbbc fef3 	udiv	lr, ip, r3
 8017c88:	fb03 c31e 	mls	r3, r3, lr, ip
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	fb02 f303 	mul.w	r3, r2, r3
 8017c92:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017c96:	58ca      	ldr	r2, [r1, r3]
 8017c98:	4463      	add	r3, ip
 8017c9a:	eba2 020c 	sub.w	r2, r2, ip
 8017c9e:	3308      	adds	r3, #8
 8017ca0:	4605      	mov	r5, r0
 8017ca2:	4419      	add	r1, r3
 8017ca4:	3a04      	subs	r2, #4
 8017ca6:	6903      	ldr	r3, [r0, #16]
 8017ca8:	f7f3 fe5a 	bl	800b960 <ucdr_init_buffer_origin>
 8017cac:	4628      	mov	r0, r5
 8017cae:	4903      	ldr	r1, [pc, #12]	@ (8017cbc <on_full_output_buffer+0x58>)
 8017cb0:	4622      	mov	r2, r4
 8017cb2:	f7f3 fe31 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8017cb6:	2000      	movs	r0, #0
 8017cb8:	bd38      	pop	{r3, r4, r5, pc}
 8017cba:	bf00      	nop
 8017cbc:	08017c65 	.word	0x08017c65

08017cc0 <uxr_init_output_reliable_stream>:
 8017cc0:	b410      	push	{r4}
 8017cc2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017cc6:	8103      	strh	r3, [r0, #8]
 8017cc8:	e9c0 1200 	strd	r1, r2, [r0]
 8017ccc:	f880 c00c 	strb.w	ip, [r0, #12]
 8017cd0:	b1d3      	cbz	r3, 8017d08 <uxr_init_output_reliable_stream+0x48>
 8017cd2:	f8c1 c000 	str.w	ip, [r1]
 8017cd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017cda:	f1bc 0f01 	cmp.w	ip, #1
 8017cde:	d913      	bls.n	8017d08 <uxr_init_output_reliable_stream+0x48>
 8017ce0:	2301      	movs	r3, #1
 8017ce2:	fbb3 f1fc 	udiv	r1, r3, ip
 8017ce6:	fb0c 3111 	mls	r1, ip, r1, r3
 8017cea:	b289      	uxth	r1, r1
 8017cec:	6842      	ldr	r2, [r0, #4]
 8017cee:	6804      	ldr	r4, [r0, #0]
 8017cf0:	fbb2 f2fc 	udiv	r2, r2, ip
 8017cf4:	fb01 f202 	mul.w	r2, r1, r2
 8017cf8:	7b01      	ldrb	r1, [r0, #12]
 8017cfa:	50a1      	str	r1, [r4, r2]
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	459c      	cmp	ip, r3
 8017d06:	d8ec      	bhi.n	8017ce2 <uxr_init_output_reliable_stream+0x22>
 8017d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d10:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017d14:	4905      	ldr	r1, [pc, #20]	@ (8017d2c <uxr_init_output_reliable_stream+0x6c>)
 8017d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d1a:	f8c0 100e 	str.w	r1, [r0, #14]
 8017d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d22:	2300      	movs	r3, #0
 8017d24:	8242      	strh	r2, [r0, #18]
 8017d26:	8403      	strh	r3, [r0, #32]
 8017d28:	4770      	bx	lr
 8017d2a:	bf00      	nop
 8017d2c:	ffff0000 	.word	0xffff0000

08017d30 <uxr_reset_output_reliable_stream>:
 8017d30:	8901      	ldrh	r1, [r0, #8]
 8017d32:	b1b1      	cbz	r1, 8017d62 <uxr_reset_output_reliable_stream+0x32>
 8017d34:	f04f 0c00 	mov.w	ip, #0
 8017d38:	4663      	mov	r3, ip
 8017d3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8017d3e:	fb01 3312 	mls	r3, r1, r2, r3
 8017d42:	b29b      	uxth	r3, r3
 8017d44:	6842      	ldr	r2, [r0, #4]
 8017d46:	fbb2 f2f1 	udiv	r2, r2, r1
 8017d4a:	6801      	ldr	r1, [r0, #0]
 8017d4c:	fb02 f303 	mul.w	r3, r2, r3
 8017d50:	7b02      	ldrb	r2, [r0, #12]
 8017d52:	50ca      	str	r2, [r1, r3]
 8017d54:	f10c 0c01 	add.w	ip, ip, #1
 8017d58:	8901      	ldrh	r1, [r0, #8]
 8017d5a:	fa1f f38c 	uxth.w	r3, ip
 8017d5e:	4299      	cmp	r1, r3
 8017d60:	d8eb      	bhi.n	8017d3a <uxr_reset_output_reliable_stream+0xa>
 8017d62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d66:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d6a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017d6e:	4904      	ldr	r1, [pc, #16]	@ (8017d80 <uxr_reset_output_reliable_stream+0x50>)
 8017d70:	f8c0 100e 	str.w	r1, [r0, #14]
 8017d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d78:	2300      	movs	r3, #0
 8017d7a:	8242      	strh	r2, [r0, #18]
 8017d7c:	8403      	strh	r3, [r0, #32]
 8017d7e:	4770      	bx	lr
 8017d80:	ffff0000 	.word	0xffff0000

08017d84 <uxr_prepare_reliable_buffer_to_write>:
 8017d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d88:	4604      	mov	r4, r0
 8017d8a:	b091      	sub	sp, #68	@ 0x44
 8017d8c:	8900      	ldrh	r0, [r0, #8]
 8017d8e:	89e6      	ldrh	r6, [r4, #14]
 8017d90:	6823      	ldr	r3, [r4, #0]
 8017d92:	9204      	str	r2, [sp, #16]
 8017d94:	fbb6 f2f0 	udiv	r2, r6, r0
 8017d98:	fb00 6212 	mls	r2, r0, r2, r6
 8017d9c:	b292      	uxth	r2, r2
 8017d9e:	6865      	ldr	r5, [r4, #4]
 8017da0:	fbb5 f5f0 	udiv	r5, r5, r0
 8017da4:	fb05 3202 	mla	r2, r5, r2, r3
 8017da8:	3204      	adds	r2, #4
 8017daa:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017dae:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017db2:	9203      	str	r2, [sp, #12]
 8017db4:	468b      	mov	fp, r1
 8017db6:	1f2f      	subs	r7, r5, #4
 8017db8:	2800      	cmp	r0, #0
 8017dba:	f000 814c 	beq.w	8018056 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017dbe:	f04f 0c00 	mov.w	ip, #0
 8017dc2:	46e2      	mov	sl, ip
 8017dc4:	4661      	mov	r1, ip
 8017dc6:	fbb1 f2f0 	udiv	r2, r1, r0
 8017dca:	fb00 1212 	mls	r2, r0, r2, r1
 8017dce:	b292      	uxth	r2, r2
 8017dd0:	fb05 f202 	mul.w	r2, r5, r2
 8017dd4:	f10c 0c01 	add.w	ip, ip, #1
 8017dd8:	589a      	ldr	r2, [r3, r2]
 8017dda:	454a      	cmp	r2, r9
 8017ddc:	bf08      	it	eq
 8017dde:	f10a 0a01 	addeq.w	sl, sl, #1
 8017de2:	fa1f f18c 	uxth.w	r1, ip
 8017de6:	bf08      	it	eq
 8017de8:	fa1f fa8a 	uxtheq.w	sl, sl
 8017dec:	4281      	cmp	r1, r0
 8017dee:	d3ea      	bcc.n	8017dc6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017df0:	4640      	mov	r0, r8
 8017df2:	2104      	movs	r1, #4
 8017df4:	f8cd a014 	str.w	sl, [sp, #20]
 8017df8:	f7f3 fdbe 	bl	800b978 <ucdr_alignment>
 8017dfc:	4480      	add	r8, r0
 8017dfe:	eb08 020b 	add.w	r2, r8, fp
 8017e02:	42ba      	cmp	r2, r7
 8017e04:	f240 80cd 	bls.w	8017fa2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017e08:	7b22      	ldrb	r2, [r4, #12]
 8017e0a:	445a      	add	r2, fp
 8017e0c:	42ba      	cmp	r2, r7
 8017e0e:	f240 80b5 	bls.w	8017f7c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017e12:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017e16:	33fc      	adds	r3, #252	@ 0xfc
 8017e18:	b2ba      	uxth	r2, r7
 8017e1a:	4413      	add	r3, r2
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	fb0a f903 	mul.w	r9, sl, r3
 8017e22:	45d9      	cmp	r9, fp
 8017e24:	9305      	str	r3, [sp, #20]
 8017e26:	9306      	str	r3, [sp, #24]
 8017e28:	f0c0 80b7 	bcc.w	8017f9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017e2c:	f108 0304 	add.w	r3, r8, #4
 8017e30:	42bb      	cmp	r3, r7
 8017e32:	f080 80db 	bcs.w	8017fec <uxr_prepare_reliable_buffer_to_write+0x268>
 8017e36:	f1a2 0904 	sub.w	r9, r2, #4
 8017e3a:	eba9 0908 	sub.w	r9, r9, r8
 8017e3e:	9b05      	ldr	r3, [sp, #20]
 8017e40:	fa1f f989 	uxth.w	r9, r9
 8017e44:	ebab 0b09 	sub.w	fp, fp, r9
 8017e48:	fbbb f2f3 	udiv	r2, fp, r3
 8017e4c:	fb03 b312 	mls	r3, r3, r2, fp
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f000 80c8 	beq.w	8017fe6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8017e56:	3201      	adds	r2, #1
 8017e58:	b292      	uxth	r2, r2
 8017e5a:	9306      	str	r3, [sp, #24]
 8017e5c:	4552      	cmp	r2, sl
 8017e5e:	f200 809c 	bhi.w	8017f9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017e62:	f10d 0b20 	add.w	fp, sp, #32
 8017e66:	2a00      	cmp	r2, #0
 8017e68:	d042      	beq.n	8017ef0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017e6a:	f8cd 801c 	str.w	r8, [sp, #28]
 8017e6e:	f04f 0a00 	mov.w	sl, #0
 8017e72:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017e76:	9505      	str	r5, [sp, #20]
 8017e78:	f10d 0b20 	add.w	fp, sp, #32
 8017e7c:	4615      	mov	r5, r2
 8017e7e:	e000      	b.n	8017e82 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017e80:	46c1      	mov	r9, r8
 8017e82:	8920      	ldrh	r0, [r4, #8]
 8017e84:	fbb6 f2f0 	udiv	r2, r6, r0
 8017e88:	fb00 6112 	mls	r1, r0, r2, r6
 8017e8c:	b28a      	uxth	r2, r1
 8017e8e:	6863      	ldr	r3, [r4, #4]
 8017e90:	fbb3 f1f0 	udiv	r1, r3, r0
 8017e94:	6823      	ldr	r3, [r4, #0]
 8017e96:	fb02 f101 	mul.w	r1, r2, r1
 8017e9a:	3104      	adds	r1, #4
 8017e9c:	4419      	add	r1, r3
 8017e9e:	4658      	mov	r0, fp
 8017ea0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017ea4:	9200      	str	r2, [sp, #0]
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	463a      	mov	r2, r7
 8017eaa:	f7f3 fd4f 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8017eae:	464a      	mov	r2, r9
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	210d      	movs	r1, #13
 8017eb4:	4658      	mov	r0, fp
 8017eb6:	f7fa f8f7 	bl	80120a8 <uxr_buffer_submessage_header>
 8017eba:	8921      	ldrh	r1, [r4, #8]
 8017ebc:	fbb6 f2f1 	udiv	r2, r6, r1
 8017ec0:	fb01 6212 	mls	r2, r1, r2, r6
 8017ec4:	b292      	uxth	r2, r2
 8017ec6:	6863      	ldr	r3, [r4, #4]
 8017ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ecc:	fb02 f303 	mul.w	r3, r2, r3
 8017ed0:	6822      	ldr	r2, [r4, #0]
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	50d7      	str	r7, [r2, r3]
 8017ed6:	2101      	movs	r1, #1
 8017ed8:	f000 f9c4 	bl	8018264 <uxr_seq_num_add>
 8017edc:	f10a 0a01 	add.w	sl, sl, #1
 8017ee0:	fa1f f38a 	uxth.w	r3, sl
 8017ee4:	429d      	cmp	r5, r3
 8017ee6:	4606      	mov	r6, r0
 8017ee8:	d8ca      	bhi.n	8017e80 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017eea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017eee:	9d05      	ldr	r5, [sp, #20]
 8017ef0:	8920      	ldrh	r0, [r4, #8]
 8017ef2:	fbb6 f3f0 	udiv	r3, r6, r0
 8017ef6:	fb00 6313 	mls	r3, r0, r3, r6
 8017efa:	b299      	uxth	r1, r3
 8017efc:	6863      	ldr	r3, [r4, #4]
 8017efe:	fbb3 f3f0 	udiv	r3, r3, r0
 8017f02:	fb01 f303 	mul.w	r3, r1, r3
 8017f06:	6821      	ldr	r1, [r4, #0]
 8017f08:	3304      	adds	r3, #4
 8017f0a:	4419      	add	r1, r3
 8017f0c:	463a      	mov	r2, r7
 8017f0e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017f12:	9000      	str	r0, [sp, #0]
 8017f14:	2300      	movs	r3, #0
 8017f16:	4658      	mov	r0, fp
 8017f18:	f7f3 fd18 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8017f1c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017f20:	4658      	mov	r0, fp
 8017f22:	fa1f f289 	uxth.w	r2, r9
 8017f26:	2302      	movs	r3, #2
 8017f28:	210d      	movs	r1, #13
 8017f2a:	f7fa f8bd 	bl	80120a8 <uxr_buffer_submessage_header>
 8017f2e:	9b03      	ldr	r3, [sp, #12]
 8017f30:	8927      	ldrh	r7, [r4, #8]
 8017f32:	7b20      	ldrb	r0, [r4, #12]
 8017f34:	f108 0104 	add.w	r1, r8, #4
 8017f38:	440b      	add	r3, r1
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017f40:	fb07 6313 	mls	r3, r7, r3, r6
 8017f44:	f1a5 0208 	sub.w	r2, r5, #8
 8017f48:	b29d      	uxth	r5, r3
 8017f4a:	3004      	adds	r0, #4
 8017f4c:	6863      	ldr	r3, [r4, #4]
 8017f4e:	fbb3 f3f7 	udiv	r3, r3, r7
 8017f52:	fb05 f303 	mul.w	r3, r5, r3
 8017f56:	6825      	ldr	r5, [r4, #0]
 8017f58:	4448      	add	r0, r9
 8017f5a:	50e8      	str	r0, [r5, r3]
 8017f5c:	9d04      	ldr	r5, [sp, #16]
 8017f5e:	eba2 0208 	sub.w	r2, r2, r8
 8017f62:	4628      	mov	r0, r5
 8017f64:	f7f3 fd04 	bl	800b970 <ucdr_init_buffer>
 8017f68:	4628      	mov	r0, r5
 8017f6a:	493c      	ldr	r1, [pc, #240]	@ (801805c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017f6c:	4622      	mov	r2, r4
 8017f6e:	f7f3 fcd3 	bl	800b918 <ucdr_set_on_full_buffer_callback>
 8017f72:	2001      	movs	r0, #1
 8017f74:	81e6      	strh	r6, [r4, #14]
 8017f76:	b011      	add	sp, #68	@ 0x44
 8017f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f7c:	2101      	movs	r1, #1
 8017f7e:	89e0      	ldrh	r0, [r4, #14]
 8017f80:	f000 f970 	bl	8018264 <uxr_seq_num_add>
 8017f84:	8921      	ldrh	r1, [r4, #8]
 8017f86:	4605      	mov	r5, r0
 8017f88:	8a60      	ldrh	r0, [r4, #18]
 8017f8a:	f000 f96b 	bl	8018264 <uxr_seq_num_add>
 8017f8e:	4601      	mov	r1, r0
 8017f90:	4628      	mov	r0, r5
 8017f92:	f000 f96f 	bl	8018274 <uxr_seq_num_cmp>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	dd42      	ble.n	8018020 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	b011      	add	sp, #68	@ 0x44
 8017f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa2:	8921      	ldrh	r1, [r4, #8]
 8017fa4:	8a60      	ldrh	r0, [r4, #18]
 8017fa6:	9205      	str	r2, [sp, #20]
 8017fa8:	f000 f95c 	bl	8018264 <uxr_seq_num_add>
 8017fac:	4601      	mov	r1, r0
 8017fae:	4630      	mov	r0, r6
 8017fb0:	f000 f960 	bl	8018274 <uxr_seq_num_cmp>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	9a05      	ldr	r2, [sp, #20]
 8017fb8:	dcef      	bgt.n	8017f9a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017fba:	8927      	ldrh	r7, [r4, #8]
 8017fbc:	fbb6 f3f7 	udiv	r3, r6, r7
 8017fc0:	fb07 6313 	mls	r3, r7, r3, r6
 8017fc4:	b29d      	uxth	r5, r3
 8017fc6:	6863      	ldr	r3, [r4, #4]
 8017fc8:	6824      	ldr	r4, [r4, #0]
 8017fca:	fbb3 f3f7 	udiv	r3, r3, r7
 8017fce:	fb05 f303 	mul.w	r3, r5, r3
 8017fd2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017fd6:	50e2      	str	r2, [r4, r3]
 8017fd8:	2300      	movs	r3, #0
 8017fda:	f8cd 8000 	str.w	r8, [sp]
 8017fde:	f7f3 fcb5 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8017fe2:	2001      	movs	r0, #1
 8017fe4:	e7da      	b.n	8017f9c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017fe6:	b293      	uxth	r3, r2
 8017fe8:	461a      	mov	r2, r3
 8017fea:	e737      	b.n	8017e5c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017fec:	4630      	mov	r0, r6
 8017fee:	2101      	movs	r1, #1
 8017ff0:	9207      	str	r2, [sp, #28]
 8017ff2:	f000 f937 	bl	8018264 <uxr_seq_num_add>
 8017ff6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017ffa:	fbb0 f1fc 	udiv	r1, r0, ip
 8017ffe:	fb0c 0111 	mls	r1, ip, r1, r0
 8018002:	4606      	mov	r6, r0
 8018004:	b288      	uxth	r0, r1
 8018006:	6863      	ldr	r3, [r4, #4]
 8018008:	fbb3 f1fc 	udiv	r1, r3, ip
 801800c:	6823      	ldr	r3, [r4, #0]
 801800e:	9a07      	ldr	r2, [sp, #28]
 8018010:	fb00 f101 	mul.w	r1, r0, r1
 8018014:	3104      	adds	r1, #4
 8018016:	440b      	add	r3, r1
 8018018:	9303      	str	r3, [sp, #12]
 801801a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801801e:	e70a      	b.n	8017e36 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018020:	8921      	ldrh	r1, [r4, #8]
 8018022:	fbb5 f3f1 	udiv	r3, r5, r1
 8018026:	fb01 5313 	mls	r3, r1, r3, r5
 801802a:	b29a      	uxth	r2, r3
 801802c:	6863      	ldr	r3, [r4, #4]
 801802e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018032:	6821      	ldr	r1, [r4, #0]
 8018034:	9804      	ldr	r0, [sp, #16]
 8018036:	fb02 f303 	mul.w	r3, r2, r3
 801803a:	3304      	adds	r3, #4
 801803c:	7b22      	ldrb	r2, [r4, #12]
 801803e:	4419      	add	r1, r3
 8018040:	445a      	add	r2, fp
 8018042:	f841 2c04 	str.w	r2, [r1, #-4]
 8018046:	7b23      	ldrb	r3, [r4, #12]
 8018048:	9300      	str	r3, [sp, #0]
 801804a:	2300      	movs	r3, #0
 801804c:	f7f3 fc7e 	bl	800b94c <ucdr_init_buffer_origin_offset>
 8018050:	81e5      	strh	r5, [r4, #14]
 8018052:	2001      	movs	r0, #1
 8018054:	e7a2      	b.n	8017f9c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018056:	4682      	mov	sl, r0
 8018058:	e6ca      	b.n	8017df0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801805a:	bf00      	nop
 801805c:	08017c65 	.word	0x08017c65

08018060 <uxr_prepare_next_reliable_buffer_to_send>:
 8018060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018062:	4604      	mov	r4, r0
 8018064:	460f      	mov	r7, r1
 8018066:	8a00      	ldrh	r0, [r0, #16]
 8018068:	2101      	movs	r1, #1
 801806a:	4616      	mov	r6, r2
 801806c:	461d      	mov	r5, r3
 801806e:	f000 f8f9 	bl	8018264 <uxr_seq_num_add>
 8018072:	8028      	strh	r0, [r5, #0]
 8018074:	8922      	ldrh	r2, [r4, #8]
 8018076:	fbb0 f3f2 	udiv	r3, r0, r2
 801807a:	fb02 0c13 	mls	ip, r2, r3, r0
 801807e:	fa1f fc8c 	uxth.w	ip, ip
 8018082:	6863      	ldr	r3, [r4, #4]
 8018084:	fbb3 f3f2 	udiv	r3, r3, r2
 8018088:	fb0c fc03 	mul.w	ip, ip, r3
 801808c:	6823      	ldr	r3, [r4, #0]
 801808e:	89e1      	ldrh	r1, [r4, #14]
 8018090:	f10c 0c04 	add.w	ip, ip, #4
 8018094:	4463      	add	r3, ip
 8018096:	603b      	str	r3, [r7, #0]
 8018098:	6823      	ldr	r3, [r4, #0]
 801809a:	449c      	add	ip, r3
 801809c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80180a0:	6033      	str	r3, [r6, #0]
 80180a2:	f000 f8e7 	bl	8018274 <uxr_seq_num_cmp>
 80180a6:	2800      	cmp	r0, #0
 80180a8:	dd01      	ble.n	80180ae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80180aa:	2000      	movs	r0, #0
 80180ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180ae:	7b23      	ldrb	r3, [r4, #12]
 80180b0:	6832      	ldr	r2, [r6, #0]
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d9f9      	bls.n	80180aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80180b6:	8a61      	ldrh	r1, [r4, #18]
 80180b8:	8a20      	ldrh	r0, [r4, #16]
 80180ba:	f000 f8d7 	bl	801826c <uxr_seq_num_sub>
 80180be:	8923      	ldrh	r3, [r4, #8]
 80180c0:	4283      	cmp	r3, r0
 80180c2:	d0f2      	beq.n	80180aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80180c4:	8828      	ldrh	r0, [r5, #0]
 80180c6:	89e3      	ldrh	r3, [r4, #14]
 80180c8:	8220      	strh	r0, [r4, #16]
 80180ca:	4298      	cmp	r0, r3
 80180cc:	d001      	beq.n	80180d2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80180ce:	2001      	movs	r0, #1
 80180d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180d2:	2101      	movs	r1, #1
 80180d4:	f000 f8c6 	bl	8018264 <uxr_seq_num_add>
 80180d8:	81e0      	strh	r0, [r4, #14]
 80180da:	2001      	movs	r0, #1
 80180dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180de:	bf00      	nop

080180e0 <uxr_update_output_stream_heartbeat_timestamp>:
 80180e0:	b570      	push	{r4, r5, r6, lr}
 80180e2:	8a01      	ldrh	r1, [r0, #16]
 80180e4:	4604      	mov	r4, r0
 80180e6:	8a40      	ldrh	r0, [r0, #18]
 80180e8:	4615      	mov	r5, r2
 80180ea:	461e      	mov	r6, r3
 80180ec:	f000 f8c2 	bl	8018274 <uxr_seq_num_cmp>
 80180f0:	2800      	cmp	r0, #0
 80180f2:	db07      	blt.n	8018104 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80180f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80180f8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80180fc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018100:	2000      	movs	r0, #0
 8018102:	bd70      	pop	{r4, r5, r6, pc}
 8018104:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018108:	b940      	cbnz	r0, 801811c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801810a:	2301      	movs	r3, #1
 801810c:	f884 3020 	strb.w	r3, [r4, #32]
 8018110:	3564      	adds	r5, #100	@ 0x64
 8018112:	f146 0600 	adc.w	r6, r6, #0
 8018116:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018120:	4295      	cmp	r5, r2
 8018122:	eb76 0303 	sbcs.w	r3, r6, r3
 8018126:	bfa5      	ittet	ge
 8018128:	3001      	addge	r0, #1
 801812a:	f884 0020 	strbge.w	r0, [r4, #32]
 801812e:	2000      	movlt	r0, #0
 8018130:	2001      	movge	r0, #1
 8018132:	e7ed      	b.n	8018110 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018134 <uxr_begin_output_nack_buffer_it>:
 8018134:	8a40      	ldrh	r0, [r0, #18]
 8018136:	4770      	bx	lr

08018138 <uxr_next_reliable_nack_buffer_to_send>:
 8018138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801813c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018140:	b082      	sub	sp, #8
 8018142:	f1b8 0f00 	cmp.w	r8, #0
 8018146:	d011      	beq.n	801816c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018148:	4604      	mov	r4, r0
 801814a:	8818      	ldrh	r0, [r3, #0]
 801814c:	460e      	mov	r6, r1
 801814e:	4617      	mov	r7, r2
 8018150:	461d      	mov	r5, r3
 8018152:	2101      	movs	r1, #1
 8018154:	f000 f886 	bl	8018264 <uxr_seq_num_add>
 8018158:	8028      	strh	r0, [r5, #0]
 801815a:	8a21      	ldrh	r1, [r4, #16]
 801815c:	f000 f88a 	bl	8018274 <uxr_seq_num_cmp>
 8018160:	2800      	cmp	r0, #0
 8018162:	dd07      	ble.n	8018174 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018164:	f04f 0800 	mov.w	r8, #0
 8018168:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801816c:	4640      	mov	r0, r8
 801816e:	b002      	add	sp, #8
 8018170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018174:	8921      	ldrh	r1, [r4, #8]
 8018176:	8828      	ldrh	r0, [r5, #0]
 8018178:	6823      	ldr	r3, [r4, #0]
 801817a:	fbb0 f2f1 	udiv	r2, r0, r1
 801817e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018182:	fa1f f28c 	uxth.w	r2, ip
 8018186:	9301      	str	r3, [sp, #4]
 8018188:	6863      	ldr	r3, [r4, #4]
 801818a:	fbb3 fcf1 	udiv	ip, r3, r1
 801818e:	9b01      	ldr	r3, [sp, #4]
 8018190:	fb02 fc0c 	mul.w	ip, r2, ip
 8018194:	f10c 0c04 	add.w	ip, ip, #4
 8018198:	4463      	add	r3, ip
 801819a:	6033      	str	r3, [r6, #0]
 801819c:	6823      	ldr	r3, [r4, #0]
 801819e:	4463      	add	r3, ip
 80181a0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80181a4:	603b      	str	r3, [r7, #0]
 80181a6:	7b22      	ldrb	r2, [r4, #12]
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d0d2      	beq.n	8018152 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80181ac:	4640      	mov	r0, r8
 80181ae:	b002      	add	sp, #8
 80181b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181b4 <uxr_process_acknack>:
 80181b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181b6:	4604      	mov	r4, r0
 80181b8:	460e      	mov	r6, r1
 80181ba:	4610      	mov	r0, r2
 80181bc:	2101      	movs	r1, #1
 80181be:	f000 f855 	bl	801826c <uxr_seq_num_sub>
 80181c2:	8a61      	ldrh	r1, [r4, #18]
 80181c4:	f000 f852 	bl	801826c <uxr_seq_num_sub>
 80181c8:	b1c0      	cbz	r0, 80181fc <uxr_process_acknack+0x48>
 80181ca:	4605      	mov	r5, r0
 80181cc:	2700      	movs	r7, #0
 80181ce:	2101      	movs	r1, #1
 80181d0:	8a60      	ldrh	r0, [r4, #18]
 80181d2:	f000 f847 	bl	8018264 <uxr_seq_num_add>
 80181d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80181da:	fbb0 f1fc 	udiv	r1, r0, ip
 80181de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80181e2:	fb0c 0111 	mls	r1, ip, r1, r0
 80181e6:	b289      	uxth	r1, r1
 80181e8:	3701      	adds	r7, #1
 80181ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80181ee:	fb01 f303 	mul.w	r3, r1, r3
 80181f2:	42bd      	cmp	r5, r7
 80181f4:	7b21      	ldrb	r1, [r4, #12]
 80181f6:	8260      	strh	r0, [r4, #18]
 80181f8:	50d1      	str	r1, [r2, r3]
 80181fa:	d1e8      	bne.n	80181ce <uxr_process_acknack+0x1a>
 80181fc:	3e00      	subs	r6, #0
 80181fe:	f04f 0300 	mov.w	r3, #0
 8018202:	bf18      	it	ne
 8018204:	2601      	movne	r6, #1
 8018206:	f884 3020 	strb.w	r3, [r4, #32]
 801820a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801820e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018210 <uxr_is_output_up_to_date>:
 8018210:	8a01      	ldrh	r1, [r0, #16]
 8018212:	8a40      	ldrh	r0, [r0, #18]
 8018214:	b508      	push	{r3, lr}
 8018216:	f000 f82d 	bl	8018274 <uxr_seq_num_cmp>
 801821a:	fab0 f080 	clz	r0, r0
 801821e:	0940      	lsrs	r0, r0, #5
 8018220:	bd08      	pop	{r3, pc}
 8018222:	bf00      	nop

08018224 <get_available_free_slots>:
 8018224:	8902      	ldrh	r2, [r0, #8]
 8018226:	b1da      	cbz	r2, 8018260 <get_available_free_slots+0x3c>
 8018228:	b530      	push	{r4, r5, lr}
 801822a:	2100      	movs	r1, #0
 801822c:	6843      	ldr	r3, [r0, #4]
 801822e:	6805      	ldr	r5, [r0, #0]
 8018230:	7b04      	ldrb	r4, [r0, #12]
 8018232:	fbb3 fef2 	udiv	lr, r3, r2
 8018236:	4608      	mov	r0, r1
 8018238:	460b      	mov	r3, r1
 801823a:	fbb3 fcf2 	udiv	ip, r3, r2
 801823e:	fb02 331c 	mls	r3, r2, ip, r3
 8018242:	b29b      	uxth	r3, r3
 8018244:	fb0e f303 	mul.w	r3, lr, r3
 8018248:	3101      	adds	r1, #1
 801824a:	f855 c003 	ldr.w	ip, [r5, r3]
 801824e:	4564      	cmp	r4, ip
 8018250:	bf08      	it	eq
 8018252:	3001      	addeq	r0, #1
 8018254:	b28b      	uxth	r3, r1
 8018256:	bf08      	it	eq
 8018258:	b280      	uxtheq	r0, r0
 801825a:	4293      	cmp	r3, r2
 801825c:	d3ed      	bcc.n	801823a <get_available_free_slots+0x16>
 801825e:	bd30      	pop	{r4, r5, pc}
 8018260:	4610      	mov	r0, r2
 8018262:	4770      	bx	lr

08018264 <uxr_seq_num_add>:
 8018264:	4408      	add	r0, r1
 8018266:	b280      	uxth	r0, r0
 8018268:	4770      	bx	lr
 801826a:	bf00      	nop

0801826c <uxr_seq_num_sub>:
 801826c:	1a40      	subs	r0, r0, r1
 801826e:	b280      	uxth	r0, r0
 8018270:	4770      	bx	lr
 8018272:	bf00      	nop

08018274 <uxr_seq_num_cmp>:
 8018274:	4288      	cmp	r0, r1
 8018276:	d011      	beq.n	801829c <uxr_seq_num_cmp+0x28>
 8018278:	d309      	bcc.n	801828e <uxr_seq_num_cmp+0x1a>
 801827a:	4288      	cmp	r0, r1
 801827c:	d910      	bls.n	80182a0 <uxr_seq_num_cmp+0x2c>
 801827e:	1a40      	subs	r0, r0, r1
 8018280:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018284:	bfd4      	ite	le
 8018286:	2001      	movle	r0, #1
 8018288:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801828c:	4770      	bx	lr
 801828e:	1a0b      	subs	r3, r1, r0
 8018290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018294:	daf1      	bge.n	801827a <uxr_seq_num_cmp+0x6>
 8018296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801829a:	4770      	bx	lr
 801829c:	2000      	movs	r0, #0
 801829e:	4770      	bx	lr
 80182a0:	2001      	movs	r0, #1
 80182a2:	4770      	bx	lr

080182a4 <rcl_get_default_domain_id>:
 80182a4:	b530      	push	{r4, r5, lr}
 80182a6:	b083      	sub	sp, #12
 80182a8:	2300      	movs	r3, #0
 80182aa:	9300      	str	r3, [sp, #0]
 80182ac:	b1d0      	cbz	r0, 80182e4 <rcl_get_default_domain_id+0x40>
 80182ae:	4604      	mov	r4, r0
 80182b0:	4669      	mov	r1, sp
 80182b2:	4815      	ldr	r0, [pc, #84]	@ (8018308 <rcl_get_default_domain_id+0x64>)
 80182b4:	f7f5 fb6c 	bl	800d990 <rcutils_get_env>
 80182b8:	4602      	mov	r2, r0
 80182ba:	b110      	cbz	r0, 80182c2 <rcl_get_default_domain_id+0x1e>
 80182bc:	2001      	movs	r0, #1
 80182be:	b003      	add	sp, #12
 80182c0:	bd30      	pop	{r4, r5, pc}
 80182c2:	9b00      	ldr	r3, [sp, #0]
 80182c4:	b18b      	cbz	r3, 80182ea <rcl_get_default_domain_id+0x46>
 80182c6:	7818      	ldrb	r0, [r3, #0]
 80182c8:	2800      	cmp	r0, #0
 80182ca:	d0f8      	beq.n	80182be <rcl_get_default_domain_id+0x1a>
 80182cc:	a901      	add	r1, sp, #4
 80182ce:	4618      	mov	r0, r3
 80182d0:	9201      	str	r2, [sp, #4]
 80182d2:	f000 fd7d 	bl	8018dd0 <strtoul>
 80182d6:	4605      	mov	r5, r0
 80182d8:	b150      	cbz	r0, 80182f0 <rcl_get_default_domain_id+0x4c>
 80182da:	1c43      	adds	r3, r0, #1
 80182dc:	d00d      	beq.n	80182fa <rcl_get_default_domain_id+0x56>
 80182de:	6025      	str	r5, [r4, #0]
 80182e0:	2000      	movs	r0, #0
 80182e2:	e7ec      	b.n	80182be <rcl_get_default_domain_id+0x1a>
 80182e4:	200b      	movs	r0, #11
 80182e6:	b003      	add	sp, #12
 80182e8:	bd30      	pop	{r4, r5, pc}
 80182ea:	4618      	mov	r0, r3
 80182ec:	b003      	add	sp, #12
 80182ee:	bd30      	pop	{r4, r5, pc}
 80182f0:	9b01      	ldr	r3, [sp, #4]
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d0f2      	beq.n	80182de <rcl_get_default_domain_id+0x3a>
 80182f8:	e7e0      	b.n	80182bc <rcl_get_default_domain_id+0x18>
 80182fa:	f001 f901 	bl	8019500 <__errno>
 80182fe:	6803      	ldr	r3, [r0, #0]
 8018300:	2b22      	cmp	r3, #34	@ 0x22
 8018302:	d1ec      	bne.n	80182de <rcl_get_default_domain_id+0x3a>
 8018304:	e7da      	b.n	80182bc <rcl_get_default_domain_id+0x18>
 8018306:	bf00      	nop
 8018308:	0801b2d8 	.word	0x0801b2d8

0801830c <rcl_expand_topic_name>:
 801830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018310:	b08b      	sub	sp, #44	@ 0x2c
 8018312:	9306      	str	r3, [sp, #24]
 8018314:	2800      	cmp	r0, #0
 8018316:	f000 80ad 	beq.w	8018474 <rcl_expand_topic_name+0x168>
 801831a:	460e      	mov	r6, r1
 801831c:	2900      	cmp	r1, #0
 801831e:	f000 80a9 	beq.w	8018474 <rcl_expand_topic_name+0x168>
 8018322:	4617      	mov	r7, r2
 8018324:	2a00      	cmp	r2, #0
 8018326:	f000 80a5 	beq.w	8018474 <rcl_expand_topic_name+0x168>
 801832a:	2b00      	cmp	r3, #0
 801832c:	f000 80a2 	beq.w	8018474 <rcl_expand_topic_name+0x168>
 8018330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018332:	2b00      	cmp	r3, #0
 8018334:	f000 809e 	beq.w	8018474 <rcl_expand_topic_name+0x168>
 8018338:	2200      	movs	r2, #0
 801833a:	a909      	add	r1, sp, #36	@ 0x24
 801833c:	4680      	mov	r8, r0
 801833e:	f000 f949 	bl	80185d4 <rcl_validate_topic_name>
 8018342:	4604      	mov	r4, r0
 8018344:	2800      	cmp	r0, #0
 8018346:	f040 8096 	bne.w	8018476 <rcl_expand_topic_name+0x16a>
 801834a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801834c:	2b00      	cmp	r3, #0
 801834e:	f040 809a 	bne.w	8018486 <rcl_expand_topic_name+0x17a>
 8018352:	4602      	mov	r2, r0
 8018354:	a909      	add	r1, sp, #36	@ 0x24
 8018356:	4630      	mov	r0, r6
 8018358:	f7f5 fda6 	bl	800dea8 <rmw_validate_node_name>
 801835c:	2800      	cmp	r0, #0
 801835e:	f040 808e 	bne.w	801847e <rcl_expand_topic_name+0x172>
 8018362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018364:	2a00      	cmp	r2, #0
 8018366:	f040 8093 	bne.w	8018490 <rcl_expand_topic_name+0x184>
 801836a:	a909      	add	r1, sp, #36	@ 0x24
 801836c:	4638      	mov	r0, r7
 801836e:	f7f5 fd7d 	bl	800de6c <rmw_validate_namespace>
 8018372:	2800      	cmp	r0, #0
 8018374:	f040 8083 	bne.w	801847e <rcl_expand_topic_name+0x172>
 8018378:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801837a:	2c00      	cmp	r4, #0
 801837c:	f040 80ed 	bne.w	801855a <rcl_expand_topic_name+0x24e>
 8018380:	217b      	movs	r1, #123	@ 0x7b
 8018382:	4640      	mov	r0, r8
 8018384:	f001 f830 	bl	80193e8 <strchr>
 8018388:	f898 3000 	ldrb.w	r3, [r8]
 801838c:	2b2f      	cmp	r3, #47	@ 0x2f
 801838e:	4605      	mov	r5, r0
 8018390:	f000 809e 	beq.w	80184d0 <rcl_expand_topic_name+0x1c4>
 8018394:	2b7e      	cmp	r3, #126	@ 0x7e
 8018396:	f040 80a2 	bne.w	80184de <rcl_expand_topic_name+0x1d2>
 801839a:	4638      	mov	r0, r7
 801839c:	f7e7 ff42 	bl	8000224 <strlen>
 80183a0:	4a82      	ldr	r2, [pc, #520]	@ (80185ac <rcl_expand_topic_name+0x2a0>)
 80183a2:	4b83      	ldr	r3, [pc, #524]	@ (80185b0 <rcl_expand_topic_name+0x2a4>)
 80183a4:	2801      	cmp	r0, #1
 80183a6:	bf18      	it	ne
 80183a8:	4613      	movne	r3, r2
 80183aa:	9302      	str	r3, [sp, #8]
 80183ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80183ae:	9300      	str	r3, [sp, #0]
 80183b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80183b4:	f108 0301 	add.w	r3, r8, #1
 80183b8:	9305      	str	r3, [sp, #20]
 80183ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80183be:	9301      	str	r3, [sp, #4]
 80183c0:	ab14      	add	r3, sp, #80	@ 0x50
 80183c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80183c4:	f7f5 fb30 	bl	800da28 <rcutils_format_string_limit>
 80183c8:	4682      	mov	sl, r0
 80183ca:	2800      	cmp	r0, #0
 80183cc:	f000 80c7 	beq.w	801855e <rcl_expand_topic_name+0x252>
 80183d0:	2d00      	cmp	r5, #0
 80183d2:	f000 80a2 	beq.w	801851a <rcl_expand_topic_name+0x20e>
 80183d6:	217b      	movs	r1, #123	@ 0x7b
 80183d8:	f001 f806 	bl	80193e8 <strchr>
 80183dc:	46d1      	mov	r9, sl
 80183de:	4605      	mov	r5, r0
 80183e0:	9407      	str	r4, [sp, #28]
 80183e2:	46d3      	mov	fp, sl
 80183e4:	464c      	mov	r4, r9
 80183e6:	2d00      	cmp	r5, #0
 80183e8:	f000 80be 	beq.w	8018568 <rcl_expand_topic_name+0x25c>
 80183ec:	217d      	movs	r1, #125	@ 0x7d
 80183ee:	4620      	mov	r0, r4
 80183f0:	f000 fffa 	bl	80193e8 <strchr>
 80183f4:	eba0 0905 	sub.w	r9, r0, r5
 80183f8:	f109 0a01 	add.w	sl, r9, #1
 80183fc:	486d      	ldr	r0, [pc, #436]	@ (80185b4 <rcl_expand_topic_name+0x2a8>)
 80183fe:	4652      	mov	r2, sl
 8018400:	4629      	mov	r1, r5
 8018402:	f000 fffe 	bl	8019402 <strncmp>
 8018406:	2800      	cmp	r0, #0
 8018408:	d067      	beq.n	80184da <rcl_expand_topic_name+0x1ce>
 801840a:	486b      	ldr	r0, [pc, #428]	@ (80185b8 <rcl_expand_topic_name+0x2ac>)
 801840c:	4652      	mov	r2, sl
 801840e:	4629      	mov	r1, r5
 8018410:	f000 fff7 	bl	8019402 <strncmp>
 8018414:	b130      	cbz	r0, 8018424 <rcl_expand_topic_name+0x118>
 8018416:	4869      	ldr	r0, [pc, #420]	@ (80185bc <rcl_expand_topic_name+0x2b0>)
 8018418:	4652      	mov	r2, sl
 801841a:	4629      	mov	r1, r5
 801841c:	f000 fff1 	bl	8019402 <strncmp>
 8018420:	2800      	cmp	r0, #0
 8018422:	d137      	bne.n	8018494 <rcl_expand_topic_name+0x188>
 8018424:	46b9      	mov	r9, r7
 8018426:	ab16      	add	r3, sp, #88	@ 0x58
 8018428:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801842c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018430:	ab14      	add	r3, sp, #80	@ 0x50
 8018432:	4628      	mov	r0, r5
 8018434:	cb0c      	ldmia	r3, {r2, r3}
 8018436:	4651      	mov	r1, sl
 8018438:	f7f5 fc32 	bl	800dca0 <rcutils_strndup>
 801843c:	4605      	mov	r5, r0
 801843e:	2800      	cmp	r0, #0
 8018440:	f000 809c 	beq.w	801857c <rcl_expand_topic_name+0x270>
 8018444:	464a      	mov	r2, r9
 8018446:	4620      	mov	r0, r4
 8018448:	ab14      	add	r3, sp, #80	@ 0x50
 801844a:	4629      	mov	r1, r5
 801844c:	f7f5 fb26 	bl	800da9c <rcutils_repl_str>
 8018450:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018452:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018454:	4604      	mov	r4, r0
 8018456:	4628      	mov	r0, r5
 8018458:	4798      	blx	r3
 801845a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801845c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801845e:	4658      	mov	r0, fp
 8018460:	4798      	blx	r3
 8018462:	2c00      	cmp	r4, #0
 8018464:	d07b      	beq.n	801855e <rcl_expand_topic_name+0x252>
 8018466:	217b      	movs	r1, #123	@ 0x7b
 8018468:	4620      	mov	r0, r4
 801846a:	f000 ffbd 	bl	80193e8 <strchr>
 801846e:	46a3      	mov	fp, r4
 8018470:	4605      	mov	r5, r0
 8018472:	e7b8      	b.n	80183e6 <rcl_expand_topic_name+0xda>
 8018474:	240b      	movs	r4, #11
 8018476:	4620      	mov	r0, r4
 8018478:	b00b      	add	sp, #44	@ 0x2c
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	f7fb f93d 	bl	80136fc <rcl_convert_rmw_ret_to_rcl_ret>
 8018482:	4604      	mov	r4, r0
 8018484:	e7f7      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 8018486:	2467      	movs	r4, #103	@ 0x67
 8018488:	4620      	mov	r0, r4
 801848a:	b00b      	add	sp, #44	@ 0x2c
 801848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018490:	24c9      	movs	r4, #201	@ 0xc9
 8018492:	e7f0      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 8018494:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018498:	9806      	ldr	r0, [sp, #24]
 801849a:	1c69      	adds	r1, r5, #1
 801849c:	f7fd fda2 	bl	8015fe4 <rcutils_string_map_getn>
 80184a0:	4681      	mov	r9, r0
 80184a2:	2800      	cmp	r0, #0
 80184a4:	d1bf      	bne.n	8018426 <rcl_expand_topic_name+0x11a>
 80184a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80184a8:	aa16      	add	r2, sp, #88	@ 0x58
 80184aa:	6018      	str	r0, [r3, #0]
 80184ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80184ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80184b2:	ab14      	add	r3, sp, #80	@ 0x50
 80184b4:	cb0c      	ldmia	r3, {r2, r3}
 80184b6:	4651      	mov	r1, sl
 80184b8:	4628      	mov	r0, r5
 80184ba:	f7f5 fbf1 	bl	800dca0 <rcutils_strndup>
 80184be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80184c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80184c2:	4798      	blx	r3
 80184c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80184c6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80184c8:	4658      	mov	r0, fp
 80184ca:	2469      	movs	r4, #105	@ 0x69
 80184cc:	4798      	blx	r3
 80184ce:	e7d2      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 80184d0:	2800      	cmp	r0, #0
 80184d2:	d05b      	beq.n	801858c <rcl_expand_topic_name+0x280>
 80184d4:	46c1      	mov	r9, r8
 80184d6:	46a2      	mov	sl, r4
 80184d8:	e782      	b.n	80183e0 <rcl_expand_topic_name+0xd4>
 80184da:	46b1      	mov	r9, r6
 80184dc:	e7a3      	b.n	8018426 <rcl_expand_topic_name+0x11a>
 80184de:	2800      	cmp	r0, #0
 80184e0:	d1f8      	bne.n	80184d4 <rcl_expand_topic_name+0x1c8>
 80184e2:	4638      	mov	r0, r7
 80184e4:	f7e7 fe9e 	bl	8000224 <strlen>
 80184e8:	4a35      	ldr	r2, [pc, #212]	@ (80185c0 <rcl_expand_topic_name+0x2b4>)
 80184ea:	4b36      	ldr	r3, [pc, #216]	@ (80185c4 <rcl_expand_topic_name+0x2b8>)
 80184ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80184f0:	2801      	cmp	r0, #1
 80184f2:	bf18      	it	ne
 80184f4:	4613      	movne	r3, r2
 80184f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80184fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80184fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018500:	9703      	str	r7, [sp, #12]
 8018502:	9200      	str	r2, [sp, #0]
 8018504:	ab14      	add	r3, sp, #80	@ 0x50
 8018506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018508:	f7f5 fa8e 	bl	800da28 <rcutils_format_string_limit>
 801850c:	4682      	mov	sl, r0
 801850e:	4653      	mov	r3, sl
 8018510:	b32b      	cbz	r3, 801855e <rcl_expand_topic_name+0x252>
 8018512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018514:	f8c3 a000 	str.w	sl, [r3]
 8018518:	e7ad      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 801851a:	f89a 3000 	ldrb.w	r3, [sl]
 801851e:	2b2f      	cmp	r3, #47	@ 0x2f
 8018520:	d0f7      	beq.n	8018512 <rcl_expand_topic_name+0x206>
 8018522:	4638      	mov	r0, r7
 8018524:	f7e7 fe7e 	bl	8000224 <strlen>
 8018528:	4a25      	ldr	r2, [pc, #148]	@ (80185c0 <rcl_expand_topic_name+0x2b4>)
 801852a:	4b26      	ldr	r3, [pc, #152]	@ (80185c4 <rcl_expand_topic_name+0x2b8>)
 801852c:	f8cd a010 	str.w	sl, [sp, #16]
 8018530:	2801      	cmp	r0, #1
 8018532:	bf18      	it	ne
 8018534:	4613      	movne	r3, r2
 8018536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801853a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801853e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018540:	9703      	str	r7, [sp, #12]
 8018542:	9200      	str	r2, [sp, #0]
 8018544:	ab14      	add	r3, sp, #80	@ 0x50
 8018546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018548:	f7f5 fa6e 	bl	800da28 <rcutils_format_string_limit>
 801854c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801854e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018550:	4605      	mov	r5, r0
 8018552:	4650      	mov	r0, sl
 8018554:	4798      	blx	r3
 8018556:	46aa      	mov	sl, r5
 8018558:	e7d9      	b.n	801850e <rcl_expand_topic_name+0x202>
 801855a:	24ca      	movs	r4, #202	@ 0xca
 801855c:	e78b      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 801855e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018560:	2300      	movs	r3, #0
 8018562:	6013      	str	r3, [r2, #0]
 8018564:	240a      	movs	r4, #10
 8018566:	e786      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 8018568:	465b      	mov	r3, fp
 801856a:	9c07      	ldr	r4, [sp, #28]
 801856c:	46da      	mov	sl, fp
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1d3      	bne.n	801851a <rcl_expand_topic_name+0x20e>
 8018572:	f898 3000 	ldrb.w	r3, [r8]
 8018576:	2b2f      	cmp	r3, #47	@ 0x2f
 8018578:	d0cb      	beq.n	8018512 <rcl_expand_topic_name+0x206>
 801857a:	e7b2      	b.n	80184e2 <rcl_expand_topic_name+0x1d6>
 801857c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018580:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018582:	6015      	str	r5, [r2, #0]
 8018584:	4658      	mov	r0, fp
 8018586:	4798      	blx	r3
 8018588:	240a      	movs	r4, #10
 801858a:	e774      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 801858c:	ab17      	add	r3, sp, #92	@ 0x5c
 801858e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018592:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018596:	ab14      	add	r3, sp, #80	@ 0x50
 8018598:	cb0e      	ldmia	r3, {r1, r2, r3}
 801859a:	4640      	mov	r0, r8
 801859c:	f7f5 fb5e 	bl	800dc5c <rcutils_strdup>
 80185a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80185a2:	2800      	cmp	r0, #0
 80185a4:	6018      	str	r0, [r3, #0]
 80185a6:	bf08      	it	eq
 80185a8:	240a      	moveq	r4, #10
 80185aa:	e764      	b.n	8018476 <rcl_expand_topic_name+0x16a>
 80185ac:	0801b2e8 	.word	0x0801b2e8
 80185b0:	0801ab88 	.word	0x0801ab88
 80185b4:	0801b2f0 	.word	0x0801b2f0
 80185b8:	0801b2f8 	.word	0x0801b2f8
 80185bc:	0801b300 	.word	0x0801b300
 80185c0:	0801a628 	.word	0x0801a628
 80185c4:	0801a620 	.word	0x0801a620

080185c8 <rcl_get_default_topic_name_substitutions>:
 80185c8:	2800      	cmp	r0, #0
 80185ca:	bf0c      	ite	eq
 80185cc:	200b      	moveq	r0, #11
 80185ce:	2000      	movne	r0, #0
 80185d0:	4770      	bx	lr
 80185d2:	bf00      	nop

080185d4 <rcl_validate_topic_name>:
 80185d4:	2800      	cmp	r0, #0
 80185d6:	d07a      	beq.n	80186ce <rcl_validate_topic_name+0xfa>
 80185d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185dc:	460e      	mov	r6, r1
 80185de:	2900      	cmp	r1, #0
 80185e0:	d07c      	beq.n	80186dc <rcl_validate_topic_name+0x108>
 80185e2:	4617      	mov	r7, r2
 80185e4:	4605      	mov	r5, r0
 80185e6:	f7e7 fe1d 	bl	8000224 <strlen>
 80185ea:	b1b0      	cbz	r0, 801861a <rcl_validate_topic_name+0x46>
 80185ec:	f895 9000 	ldrb.w	r9, [r5]
 80185f0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018774 <rcl_validate_topic_name+0x1a0>
 80185f4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80185f8:	f013 0304 	ands.w	r3, r3, #4
 80185fc:	d169      	bne.n	80186d2 <rcl_validate_topic_name+0xfe>
 80185fe:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018602:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018606:	2a2f      	cmp	r2, #47	@ 0x2f
 8018608:	d10e      	bne.n	8018628 <rcl_validate_topic_name+0x54>
 801860a:	2202      	movs	r2, #2
 801860c:	6032      	str	r2, [r6, #0]
 801860e:	b36f      	cbz	r7, 801866c <rcl_validate_topic_name+0x98>
 8018610:	f8c7 8000 	str.w	r8, [r7]
 8018614:	4618      	mov	r0, r3
 8018616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801861a:	2301      	movs	r3, #1
 801861c:	6033      	str	r3, [r6, #0]
 801861e:	b32f      	cbz	r7, 801866c <rcl_validate_topic_name+0x98>
 8018620:	2000      	movs	r0, #0
 8018622:	6038      	str	r0, [r7, #0]
 8018624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018628:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801862c:	461c      	mov	r4, r3
 801862e:	4619      	mov	r1, r3
 8018630:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018634:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018638:	f1be 0f09 	cmp.w	lr, #9
 801863c:	d919      	bls.n	8018672 <rcl_validate_topic_name+0x9e>
 801863e:	f022 0e20 	bic.w	lr, r2, #32
 8018642:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018646:	f1be 0f19 	cmp.w	lr, #25
 801864a:	d912      	bls.n	8018672 <rcl_validate_topic_name+0x9e>
 801864c:	2a5f      	cmp	r2, #95	@ 0x5f
 801864e:	d019      	beq.n	8018684 <rcl_validate_topic_name+0xb0>
 8018650:	2a2f      	cmp	r2, #47	@ 0x2f
 8018652:	d051      	beq.n	80186f8 <rcl_validate_topic_name+0x124>
 8018654:	2a7e      	cmp	r2, #126	@ 0x7e
 8018656:	d048      	beq.n	80186ea <rcl_validate_topic_name+0x116>
 8018658:	2a7b      	cmp	r2, #123	@ 0x7b
 801865a:	d054      	beq.n	8018706 <rcl_validate_topic_name+0x132>
 801865c:	2a7d      	cmp	r2, #125	@ 0x7d
 801865e:	d161      	bne.n	8018724 <rcl_validate_topic_name+0x150>
 8018660:	2c00      	cmp	r4, #0
 8018662:	d155      	bne.n	8018710 <rcl_validate_topic_name+0x13c>
 8018664:	2305      	movs	r3, #5
 8018666:	6033      	str	r3, [r6, #0]
 8018668:	b107      	cbz	r7, 801866c <rcl_validate_topic_name+0x98>
 801866a:	6039      	str	r1, [r7, #0]
 801866c:	2000      	movs	r0, #0
 801866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018672:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018676:	0752      	lsls	r2, r2, #29
 8018678:	d504      	bpl.n	8018684 <rcl_validate_topic_name+0xb0>
 801867a:	b11c      	cbz	r4, 8018684 <rcl_validate_topic_name+0xb0>
 801867c:	b111      	cbz	r1, 8018684 <rcl_validate_topic_name+0xb0>
 801867e:	1e4a      	subs	r2, r1, #1
 8018680:	429a      	cmp	r2, r3
 8018682:	d02d      	beq.n	80186e0 <rcl_validate_topic_name+0x10c>
 8018684:	3101      	adds	r1, #1
 8018686:	4288      	cmp	r0, r1
 8018688:	d1d2      	bne.n	8018630 <rcl_validate_topic_name+0x5c>
 801868a:	2c00      	cmp	r4, #0
 801868c:	d145      	bne.n	801871a <rcl_validate_topic_name+0x146>
 801868e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018692:	d04f      	beq.n	8018734 <rcl_validate_topic_name+0x160>
 8018694:	4620      	mov	r0, r4
 8018696:	2301      	movs	r3, #1
 8018698:	e006      	b.n	80186a8 <rcl_validate_topic_name+0xd4>
 801869a:	428b      	cmp	r3, r1
 801869c:	f105 0501 	add.w	r5, r5, #1
 80186a0:	f103 0201 	add.w	r2, r3, #1
 80186a4:	d236      	bcs.n	8018714 <rcl_validate_topic_name+0x140>
 80186a6:	4613      	mov	r3, r2
 80186a8:	4580      	cmp	r8, r0
 80186aa:	f100 0001 	add.w	r0, r0, #1
 80186ae:	d0f4      	beq.n	801869a <rcl_validate_topic_name+0xc6>
 80186b0:	782a      	ldrb	r2, [r5, #0]
 80186b2:	2a2f      	cmp	r2, #47	@ 0x2f
 80186b4:	d1f1      	bne.n	801869a <rcl_validate_topic_name+0xc6>
 80186b6:	786a      	ldrb	r2, [r5, #1]
 80186b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80186bc:	0754      	lsls	r4, r2, #29
 80186be:	d5ec      	bpl.n	801869a <rcl_validate_topic_name+0xc6>
 80186c0:	2204      	movs	r2, #4
 80186c2:	6032      	str	r2, [r6, #0]
 80186c4:	2f00      	cmp	r7, #0
 80186c6:	d0d1      	beq.n	801866c <rcl_validate_topic_name+0x98>
 80186c8:	603b      	str	r3, [r7, #0]
 80186ca:	2000      	movs	r0, #0
 80186cc:	e7aa      	b.n	8018624 <rcl_validate_topic_name+0x50>
 80186ce:	200b      	movs	r0, #11
 80186d0:	4770      	bx	lr
 80186d2:	2304      	movs	r3, #4
 80186d4:	6033      	str	r3, [r6, #0]
 80186d6:	2f00      	cmp	r7, #0
 80186d8:	d1a2      	bne.n	8018620 <rcl_validate_topic_name+0x4c>
 80186da:	e7c7      	b.n	801866c <rcl_validate_topic_name+0x98>
 80186dc:	200b      	movs	r0, #11
 80186de:	e7a1      	b.n	8018624 <rcl_validate_topic_name+0x50>
 80186e0:	2309      	movs	r3, #9
 80186e2:	6033      	str	r3, [r6, #0]
 80186e4:	2f00      	cmp	r7, #0
 80186e6:	d1c0      	bne.n	801866a <rcl_validate_topic_name+0x96>
 80186e8:	e7c0      	b.n	801866c <rcl_validate_topic_name+0x98>
 80186ea:	2900      	cmp	r1, #0
 80186ec:	d0ca      	beq.n	8018684 <rcl_validate_topic_name+0xb0>
 80186ee:	2306      	movs	r3, #6
 80186f0:	6033      	str	r3, [r6, #0]
 80186f2:	2f00      	cmp	r7, #0
 80186f4:	d1b9      	bne.n	801866a <rcl_validate_topic_name+0x96>
 80186f6:	e7b9      	b.n	801866c <rcl_validate_topic_name+0x98>
 80186f8:	2c00      	cmp	r4, #0
 80186fa:	d0c3      	beq.n	8018684 <rcl_validate_topic_name+0xb0>
 80186fc:	2308      	movs	r3, #8
 80186fe:	6033      	str	r3, [r6, #0]
 8018700:	2f00      	cmp	r7, #0
 8018702:	d1b2      	bne.n	801866a <rcl_validate_topic_name+0x96>
 8018704:	e7b2      	b.n	801866c <rcl_validate_topic_name+0x98>
 8018706:	2c00      	cmp	r4, #0
 8018708:	d1f8      	bne.n	80186fc <rcl_validate_topic_name+0x128>
 801870a:	460b      	mov	r3, r1
 801870c:	2401      	movs	r4, #1
 801870e:	e7b9      	b.n	8018684 <rcl_validate_topic_name+0xb0>
 8018710:	2400      	movs	r4, #0
 8018712:	e7b7      	b.n	8018684 <rcl_validate_topic_name+0xb0>
 8018714:	2000      	movs	r0, #0
 8018716:	6030      	str	r0, [r6, #0]
 8018718:	e784      	b.n	8018624 <rcl_validate_topic_name+0x50>
 801871a:	2205      	movs	r2, #5
 801871c:	6032      	str	r2, [r6, #0]
 801871e:	2f00      	cmp	r7, #0
 8018720:	d1d2      	bne.n	80186c8 <rcl_validate_topic_name+0xf4>
 8018722:	e7a3      	b.n	801866c <rcl_validate_topic_name+0x98>
 8018724:	2c00      	cmp	r4, #0
 8018726:	bf14      	ite	ne
 8018728:	2308      	movne	r3, #8
 801872a:	2303      	moveq	r3, #3
 801872c:	6033      	str	r3, [r6, #0]
 801872e:	2f00      	cmp	r7, #0
 8018730:	d19b      	bne.n	801866a <rcl_validate_topic_name+0x96>
 8018732:	e79b      	b.n	801866c <rcl_validate_topic_name+0x98>
 8018734:	2301      	movs	r3, #1
 8018736:	e00a      	b.n	801874e <rcl_validate_topic_name+0x17a>
 8018738:	2c01      	cmp	r4, #1
 801873a:	d013      	beq.n	8018764 <rcl_validate_topic_name+0x190>
 801873c:	4299      	cmp	r1, r3
 801873e:	f104 0401 	add.w	r4, r4, #1
 8018742:	f105 0501 	add.w	r5, r5, #1
 8018746:	f103 0201 	add.w	r2, r3, #1
 801874a:	d9e3      	bls.n	8018714 <rcl_validate_topic_name+0x140>
 801874c:	4613      	mov	r3, r2
 801874e:	45a0      	cmp	r8, r4
 8018750:	d0f4      	beq.n	801873c <rcl_validate_topic_name+0x168>
 8018752:	782a      	ldrb	r2, [r5, #0]
 8018754:	2a2f      	cmp	r2, #47	@ 0x2f
 8018756:	d1ef      	bne.n	8018738 <rcl_validate_topic_name+0x164>
 8018758:	786a      	ldrb	r2, [r5, #1]
 801875a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801875e:	0752      	lsls	r2, r2, #29
 8018760:	d5ec      	bpl.n	801873c <rcl_validate_topic_name+0x168>
 8018762:	e7ad      	b.n	80186c0 <rcl_validate_topic_name+0xec>
 8018764:	2307      	movs	r3, #7
 8018766:	6033      	str	r3, [r6, #0]
 8018768:	2f00      	cmp	r7, #0
 801876a:	f43f af7f 	beq.w	801866c <rcl_validate_topic_name+0x98>
 801876e:	603c      	str	r4, [r7, #0]
 8018770:	2000      	movs	r0, #0
 8018772:	e757      	b.n	8018624 <rcl_validate_topic_name+0x50>
 8018774:	0801b37c 	.word	0x0801b37c

08018778 <on_status>:
 8018778:	b082      	sub	sp, #8
 801877a:	b002      	add	sp, #8
 801877c:	4770      	bx	lr
 801877e:	bf00      	nop

08018780 <on_topic>:
 8018780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018784:	4a22      	ldr	r2, [pc, #136]	@ (8018810 <on_topic+0x90>)
 8018786:	b094      	sub	sp, #80	@ 0x50
 8018788:	6812      	ldr	r2, [r2, #0]
 801878a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801878c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018790:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8018794:	b3c2      	cbz	r2, 8018808 <on_topic+0x88>
 8018796:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801879a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801879e:	e001      	b.n	80187a4 <on_topic+0x24>
 80187a0:	6852      	ldr	r2, [r2, #4]
 80187a2:	b38a      	cbz	r2, 8018808 <on_topic+0x88>
 80187a4:	6894      	ldr	r4, [r2, #8]
 80187a6:	8aa3      	ldrh	r3, [r4, #20]
 80187a8:	428b      	cmp	r3, r1
 80187aa:	d1f9      	bne.n	80187a0 <on_topic+0x20>
 80187ac:	7da3      	ldrb	r3, [r4, #22]
 80187ae:	4283      	cmp	r3, r0
 80187b0:	d1f6      	bne.n	80187a0 <on_topic+0x20>
 80187b2:	2248      	movs	r2, #72	@ 0x48
 80187b4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80187b8:	4668      	mov	r0, sp
 80187ba:	f000 fed6 	bl	801956a <memcpy>
 80187be:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80187c2:	cb0c      	ldmia	r3, {r2, r3}
 80187c4:	4620      	mov	r0, r4
 80187c6:	f7f6 fad7 	bl	800ed78 <rmw_uxrce_get_static_input_buffer_for_entity>
 80187ca:	4607      	mov	r7, r0
 80187cc:	b1e0      	cbz	r0, 8018808 <on_topic+0x88>
 80187ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80187d2:	4632      	mov	r2, r6
 80187d4:	4628      	mov	r0, r5
 80187d6:	f108 0110 	add.w	r1, r8, #16
 80187da:	f7fe fed5 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 80187de:	b930      	cbnz	r0, 80187ee <on_topic+0x6e>
 80187e0:	480c      	ldr	r0, [pc, #48]	@ (8018814 <on_topic+0x94>)
 80187e2:	4639      	mov	r1, r7
 80187e4:	b014      	add	sp, #80	@ 0x50
 80187e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187ea:	f7fd bd57 	b.w	801629c <put_memory>
 80187ee:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80187f2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80187f6:	f7f6 f8cf 	bl	800e998 <rmw_uros_epoch_nanos>
 80187fa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80187fe:	2305      	movs	r3, #5
 8018800:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018804:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018808:	b014      	add	sp, #80	@ 0x50
 801880a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801880e:	bf00      	nop
 8018810:	2000e214 	.word	0x2000e214
 8018814:	2000e204 	.word	0x2000e204

08018818 <on_request>:
 8018818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801881c:	4823      	ldr	r0, [pc, #140]	@ (80188ac <on_request+0x94>)
 801881e:	b094      	sub	sp, #80	@ 0x50
 8018820:	6800      	ldr	r0, [r0, #0]
 8018822:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018824:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018828:	9113      	str	r1, [sp, #76]	@ 0x4c
 801882a:	2800      	cmp	r0, #0
 801882c:	d03b      	beq.n	80188a6 <on_request+0x8e>
 801882e:	461d      	mov	r5, r3
 8018830:	e001      	b.n	8018836 <on_request+0x1e>
 8018832:	6840      	ldr	r0, [r0, #4]
 8018834:	b3b8      	cbz	r0, 80188a6 <on_request+0x8e>
 8018836:	6884      	ldr	r4, [r0, #8]
 8018838:	8b21      	ldrh	r1, [r4, #24]
 801883a:	4291      	cmp	r1, r2
 801883c:	d1f9      	bne.n	8018832 <on_request+0x1a>
 801883e:	2248      	movs	r2, #72	@ 0x48
 8018840:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018844:	4668      	mov	r0, sp
 8018846:	f000 fe90 	bl	801956a <memcpy>
 801884a:	f104 0320 	add.w	r3, r4, #32
 801884e:	cb0c      	ldmia	r3, {r2, r3}
 8018850:	4620      	mov	r0, r4
 8018852:	f7f6 fa91 	bl	800ed78 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018856:	4680      	mov	r8, r0
 8018858:	b328      	cbz	r0, 80188a6 <on_request+0x8e>
 801885a:	4638      	mov	r0, r7
 801885c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018860:	4632      	mov	r2, r6
 8018862:	f107 0110 	add.w	r1, r7, #16
 8018866:	f7fe fe8f 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 801886a:	b930      	cbnz	r0, 801887a <on_request+0x62>
 801886c:	4810      	ldr	r0, [pc, #64]	@ (80188b0 <on_request+0x98>)
 801886e:	4641      	mov	r1, r8
 8018870:	b014      	add	sp, #80	@ 0x50
 8018872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018876:	f7fd bd11 	b.w	801629c <put_memory>
 801887a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801887c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018880:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018884:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801888c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018890:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018894:	f7f6 f880 	bl	800e998 <rmw_uros_epoch_nanos>
 8018898:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801889c:	2303      	movs	r3, #3
 801889e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80188a2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80188a6:	b014      	add	sp, #80	@ 0x50
 80188a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188ac:	2000e1e4 	.word	0x2000e1e4
 80188b0:	2000e204 	.word	0x2000e204

080188b4 <on_reply>:
 80188b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b8:	4821      	ldr	r0, [pc, #132]	@ (8018940 <on_reply+0x8c>)
 80188ba:	b094      	sub	sp, #80	@ 0x50
 80188bc:	6800      	ldr	r0, [r0, #0]
 80188be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80188c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80188c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80188c6:	b3b8      	cbz	r0, 8018938 <on_reply+0x84>
 80188c8:	461d      	mov	r5, r3
 80188ca:	e001      	b.n	80188d0 <on_reply+0x1c>
 80188cc:	6840      	ldr	r0, [r0, #4]
 80188ce:	b398      	cbz	r0, 8018938 <on_reply+0x84>
 80188d0:	6884      	ldr	r4, [r0, #8]
 80188d2:	8b21      	ldrh	r1, [r4, #24]
 80188d4:	4291      	cmp	r1, r2
 80188d6:	d1f9      	bne.n	80188cc <on_reply+0x18>
 80188d8:	2248      	movs	r2, #72	@ 0x48
 80188da:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80188de:	4668      	mov	r0, sp
 80188e0:	f000 fe43 	bl	801956a <memcpy>
 80188e4:	f104 0320 	add.w	r3, r4, #32
 80188e8:	cb0c      	ldmia	r3, {r2, r3}
 80188ea:	4620      	mov	r0, r4
 80188ec:	f7f6 fa44 	bl	800ed78 <rmw_uxrce_get_static_input_buffer_for_entity>
 80188f0:	4680      	mov	r8, r0
 80188f2:	b308      	cbz	r0, 8018938 <on_reply+0x84>
 80188f4:	4638      	mov	r0, r7
 80188f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80188fa:	4632      	mov	r2, r6
 80188fc:	f107 0110 	add.w	r1, r7, #16
 8018900:	f7fe fe42 	bl	8017588 <ucdr_deserialize_array_uint8_t>
 8018904:	b930      	cbnz	r0, 8018914 <on_reply+0x60>
 8018906:	480f      	ldr	r0, [pc, #60]	@ (8018944 <on_reply+0x90>)
 8018908:	4641      	mov	r1, r8
 801890a:	b014      	add	sp, #80	@ 0x50
 801890c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018910:	f7fd bcc4 	b.w	801629c <put_memory>
 8018914:	2200      	movs	r2, #0
 8018916:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801891a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801891e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018922:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8018926:	f7f6 f837 	bl	800e998 <rmw_uros_epoch_nanos>
 801892a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801892e:	2304      	movs	r3, #4
 8018930:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018934:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018938:	b014      	add	sp, #80	@ 0x50
 801893a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801893e:	bf00      	nop
 8018940:	200098f4 	.word	0x200098f4
 8018944:	2000e204 	.word	0x2000e204

08018948 <calloc>:
 8018948:	4b02      	ldr	r3, [pc, #8]	@ (8018954 <calloc+0xc>)
 801894a:	460a      	mov	r2, r1
 801894c:	4601      	mov	r1, r0
 801894e:	6818      	ldr	r0, [r3, #0]
 8018950:	f000 b802 	b.w	8018958 <_calloc_r>
 8018954:	200004b0 	.word	0x200004b0

08018958 <_calloc_r>:
 8018958:	b570      	push	{r4, r5, r6, lr}
 801895a:	fba1 5402 	umull	r5, r4, r1, r2
 801895e:	b93c      	cbnz	r4, 8018970 <_calloc_r+0x18>
 8018960:	4629      	mov	r1, r5
 8018962:	f000 f899 	bl	8018a98 <_malloc_r>
 8018966:	4606      	mov	r6, r0
 8018968:	b928      	cbnz	r0, 8018976 <_calloc_r+0x1e>
 801896a:	2600      	movs	r6, #0
 801896c:	4630      	mov	r0, r6
 801896e:	bd70      	pop	{r4, r5, r6, pc}
 8018970:	220c      	movs	r2, #12
 8018972:	6002      	str	r2, [r0, #0]
 8018974:	e7f9      	b.n	801896a <_calloc_r+0x12>
 8018976:	462a      	mov	r2, r5
 8018978:	4621      	mov	r1, r4
 801897a:	f000 fd2d 	bl	80193d8 <memset>
 801897e:	e7f5      	b.n	801896c <_calloc_r+0x14>

08018980 <exit>:
 8018980:	b508      	push	{r3, lr}
 8018982:	4b06      	ldr	r3, [pc, #24]	@ (801899c <exit+0x1c>)
 8018984:	4604      	mov	r4, r0
 8018986:	b113      	cbz	r3, 801898e <exit+0xe>
 8018988:	2100      	movs	r1, #0
 801898a:	f3af 8000 	nop.w
 801898e:	4b04      	ldr	r3, [pc, #16]	@ (80189a0 <exit+0x20>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	b103      	cbz	r3, 8018996 <exit+0x16>
 8018994:	4798      	blx	r3
 8018996:	4620      	mov	r0, r4
 8018998:	f7e9 ff44 	bl	8002824 <_exit>
 801899c:	00000000 	.word	0x00000000
 80189a0:	2000e444 	.word	0x2000e444

080189a4 <getenv>:
 80189a4:	b507      	push	{r0, r1, r2, lr}
 80189a6:	4b04      	ldr	r3, [pc, #16]	@ (80189b8 <getenv+0x14>)
 80189a8:	4601      	mov	r1, r0
 80189aa:	aa01      	add	r2, sp, #4
 80189ac:	6818      	ldr	r0, [r3, #0]
 80189ae:	f000 f805 	bl	80189bc <_findenv_r>
 80189b2:	b003      	add	sp, #12
 80189b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80189b8:	200004b0 	.word	0x200004b0

080189bc <_findenv_r>:
 80189bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018a30 <_findenv_r+0x74>
 80189c4:	4606      	mov	r6, r0
 80189c6:	4689      	mov	r9, r1
 80189c8:	4617      	mov	r7, r2
 80189ca:	f000 fdfb 	bl	80195c4 <__env_lock>
 80189ce:	f8da 4000 	ldr.w	r4, [sl]
 80189d2:	b134      	cbz	r4, 80189e2 <_findenv_r+0x26>
 80189d4:	464b      	mov	r3, r9
 80189d6:	4698      	mov	r8, r3
 80189d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189dc:	b13a      	cbz	r2, 80189ee <_findenv_r+0x32>
 80189de:	2a3d      	cmp	r2, #61	@ 0x3d
 80189e0:	d1f9      	bne.n	80189d6 <_findenv_r+0x1a>
 80189e2:	4630      	mov	r0, r6
 80189e4:	f000 fdf4 	bl	80195d0 <__env_unlock>
 80189e8:	2000      	movs	r0, #0
 80189ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ee:	eba8 0809 	sub.w	r8, r8, r9
 80189f2:	46a3      	mov	fp, r4
 80189f4:	f854 0b04 	ldr.w	r0, [r4], #4
 80189f8:	2800      	cmp	r0, #0
 80189fa:	d0f2      	beq.n	80189e2 <_findenv_r+0x26>
 80189fc:	4642      	mov	r2, r8
 80189fe:	4649      	mov	r1, r9
 8018a00:	f000 fcff 	bl	8019402 <strncmp>
 8018a04:	2800      	cmp	r0, #0
 8018a06:	d1f4      	bne.n	80189f2 <_findenv_r+0x36>
 8018a08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018a0c:	eb03 0508 	add.w	r5, r3, r8
 8018a10:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018a14:	2b3d      	cmp	r3, #61	@ 0x3d
 8018a16:	d1ec      	bne.n	80189f2 <_findenv_r+0x36>
 8018a18:	f8da 3000 	ldr.w	r3, [sl]
 8018a1c:	ebab 0303 	sub.w	r3, fp, r3
 8018a20:	109b      	asrs	r3, r3, #2
 8018a22:	4630      	mov	r0, r6
 8018a24:	603b      	str	r3, [r7, #0]
 8018a26:	f000 fdd3 	bl	80195d0 <__env_unlock>
 8018a2a:	1c68      	adds	r0, r5, #1
 8018a2c:	e7dd      	b.n	80189ea <_findenv_r+0x2e>
 8018a2e:	bf00      	nop
 8018a30:	20000000 	.word	0x20000000

08018a34 <malloc>:
 8018a34:	4b02      	ldr	r3, [pc, #8]	@ (8018a40 <malloc+0xc>)
 8018a36:	4601      	mov	r1, r0
 8018a38:	6818      	ldr	r0, [r3, #0]
 8018a3a:	f000 b82d 	b.w	8018a98 <_malloc_r>
 8018a3e:	bf00      	nop
 8018a40:	200004b0 	.word	0x200004b0

08018a44 <free>:
 8018a44:	4b02      	ldr	r3, [pc, #8]	@ (8018a50 <free+0xc>)
 8018a46:	4601      	mov	r1, r0
 8018a48:	6818      	ldr	r0, [r3, #0]
 8018a4a:	f000 bdc7 	b.w	80195dc <_free_r>
 8018a4e:	bf00      	nop
 8018a50:	200004b0 	.word	0x200004b0

08018a54 <sbrk_aligned>:
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	4e0f      	ldr	r6, [pc, #60]	@ (8018a94 <sbrk_aligned+0x40>)
 8018a58:	460c      	mov	r4, r1
 8018a5a:	6831      	ldr	r1, [r6, #0]
 8018a5c:	4605      	mov	r5, r0
 8018a5e:	b911      	cbnz	r1, 8018a66 <sbrk_aligned+0x12>
 8018a60:	f000 fd2c 	bl	80194bc <_sbrk_r>
 8018a64:	6030      	str	r0, [r6, #0]
 8018a66:	4621      	mov	r1, r4
 8018a68:	4628      	mov	r0, r5
 8018a6a:	f000 fd27 	bl	80194bc <_sbrk_r>
 8018a6e:	1c43      	adds	r3, r0, #1
 8018a70:	d103      	bne.n	8018a7a <sbrk_aligned+0x26>
 8018a72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018a76:	4620      	mov	r0, r4
 8018a78:	bd70      	pop	{r4, r5, r6, pc}
 8018a7a:	1cc4      	adds	r4, r0, #3
 8018a7c:	f024 0403 	bic.w	r4, r4, #3
 8018a80:	42a0      	cmp	r0, r4
 8018a82:	d0f8      	beq.n	8018a76 <sbrk_aligned+0x22>
 8018a84:	1a21      	subs	r1, r4, r0
 8018a86:	4628      	mov	r0, r5
 8018a88:	f000 fd18 	bl	80194bc <_sbrk_r>
 8018a8c:	3001      	adds	r0, #1
 8018a8e:	d1f2      	bne.n	8018a76 <sbrk_aligned+0x22>
 8018a90:	e7ef      	b.n	8018a72 <sbrk_aligned+0x1e>
 8018a92:	bf00      	nop
 8018a94:	2000e304 	.word	0x2000e304

08018a98 <_malloc_r>:
 8018a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a9c:	1ccd      	adds	r5, r1, #3
 8018a9e:	f025 0503 	bic.w	r5, r5, #3
 8018aa2:	3508      	adds	r5, #8
 8018aa4:	2d0c      	cmp	r5, #12
 8018aa6:	bf38      	it	cc
 8018aa8:	250c      	movcc	r5, #12
 8018aaa:	2d00      	cmp	r5, #0
 8018aac:	4606      	mov	r6, r0
 8018aae:	db01      	blt.n	8018ab4 <_malloc_r+0x1c>
 8018ab0:	42a9      	cmp	r1, r5
 8018ab2:	d904      	bls.n	8018abe <_malloc_r+0x26>
 8018ab4:	230c      	movs	r3, #12
 8018ab6:	6033      	str	r3, [r6, #0]
 8018ab8:	2000      	movs	r0, #0
 8018aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018b94 <_malloc_r+0xfc>
 8018ac2:	f000 f869 	bl	8018b98 <__malloc_lock>
 8018ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8018aca:	461c      	mov	r4, r3
 8018acc:	bb44      	cbnz	r4, 8018b20 <_malloc_r+0x88>
 8018ace:	4629      	mov	r1, r5
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	f7ff ffbf 	bl	8018a54 <sbrk_aligned>
 8018ad6:	1c43      	adds	r3, r0, #1
 8018ad8:	4604      	mov	r4, r0
 8018ada:	d158      	bne.n	8018b8e <_malloc_r+0xf6>
 8018adc:	f8d8 4000 	ldr.w	r4, [r8]
 8018ae0:	4627      	mov	r7, r4
 8018ae2:	2f00      	cmp	r7, #0
 8018ae4:	d143      	bne.n	8018b6e <_malloc_r+0xd6>
 8018ae6:	2c00      	cmp	r4, #0
 8018ae8:	d04b      	beq.n	8018b82 <_malloc_r+0xea>
 8018aea:	6823      	ldr	r3, [r4, #0]
 8018aec:	4639      	mov	r1, r7
 8018aee:	4630      	mov	r0, r6
 8018af0:	eb04 0903 	add.w	r9, r4, r3
 8018af4:	f000 fce2 	bl	80194bc <_sbrk_r>
 8018af8:	4581      	cmp	r9, r0
 8018afa:	d142      	bne.n	8018b82 <_malloc_r+0xea>
 8018afc:	6821      	ldr	r1, [r4, #0]
 8018afe:	1a6d      	subs	r5, r5, r1
 8018b00:	4629      	mov	r1, r5
 8018b02:	4630      	mov	r0, r6
 8018b04:	f7ff ffa6 	bl	8018a54 <sbrk_aligned>
 8018b08:	3001      	adds	r0, #1
 8018b0a:	d03a      	beq.n	8018b82 <_malloc_r+0xea>
 8018b0c:	6823      	ldr	r3, [r4, #0]
 8018b0e:	442b      	add	r3, r5
 8018b10:	6023      	str	r3, [r4, #0]
 8018b12:	f8d8 3000 	ldr.w	r3, [r8]
 8018b16:	685a      	ldr	r2, [r3, #4]
 8018b18:	bb62      	cbnz	r2, 8018b74 <_malloc_r+0xdc>
 8018b1a:	f8c8 7000 	str.w	r7, [r8]
 8018b1e:	e00f      	b.n	8018b40 <_malloc_r+0xa8>
 8018b20:	6822      	ldr	r2, [r4, #0]
 8018b22:	1b52      	subs	r2, r2, r5
 8018b24:	d420      	bmi.n	8018b68 <_malloc_r+0xd0>
 8018b26:	2a0b      	cmp	r2, #11
 8018b28:	d917      	bls.n	8018b5a <_malloc_r+0xc2>
 8018b2a:	1961      	adds	r1, r4, r5
 8018b2c:	42a3      	cmp	r3, r4
 8018b2e:	6025      	str	r5, [r4, #0]
 8018b30:	bf18      	it	ne
 8018b32:	6059      	strne	r1, [r3, #4]
 8018b34:	6863      	ldr	r3, [r4, #4]
 8018b36:	bf08      	it	eq
 8018b38:	f8c8 1000 	streq.w	r1, [r8]
 8018b3c:	5162      	str	r2, [r4, r5]
 8018b3e:	604b      	str	r3, [r1, #4]
 8018b40:	4630      	mov	r0, r6
 8018b42:	f000 f82f 	bl	8018ba4 <__malloc_unlock>
 8018b46:	f104 000b 	add.w	r0, r4, #11
 8018b4a:	1d23      	adds	r3, r4, #4
 8018b4c:	f020 0007 	bic.w	r0, r0, #7
 8018b50:	1ac2      	subs	r2, r0, r3
 8018b52:	bf1c      	itt	ne
 8018b54:	1a1b      	subne	r3, r3, r0
 8018b56:	50a3      	strne	r3, [r4, r2]
 8018b58:	e7af      	b.n	8018aba <_malloc_r+0x22>
 8018b5a:	6862      	ldr	r2, [r4, #4]
 8018b5c:	42a3      	cmp	r3, r4
 8018b5e:	bf0c      	ite	eq
 8018b60:	f8c8 2000 	streq.w	r2, [r8]
 8018b64:	605a      	strne	r2, [r3, #4]
 8018b66:	e7eb      	b.n	8018b40 <_malloc_r+0xa8>
 8018b68:	4623      	mov	r3, r4
 8018b6a:	6864      	ldr	r4, [r4, #4]
 8018b6c:	e7ae      	b.n	8018acc <_malloc_r+0x34>
 8018b6e:	463c      	mov	r4, r7
 8018b70:	687f      	ldr	r7, [r7, #4]
 8018b72:	e7b6      	b.n	8018ae2 <_malloc_r+0x4a>
 8018b74:	461a      	mov	r2, r3
 8018b76:	685b      	ldr	r3, [r3, #4]
 8018b78:	42a3      	cmp	r3, r4
 8018b7a:	d1fb      	bne.n	8018b74 <_malloc_r+0xdc>
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	6053      	str	r3, [r2, #4]
 8018b80:	e7de      	b.n	8018b40 <_malloc_r+0xa8>
 8018b82:	230c      	movs	r3, #12
 8018b84:	6033      	str	r3, [r6, #0]
 8018b86:	4630      	mov	r0, r6
 8018b88:	f000 f80c 	bl	8018ba4 <__malloc_unlock>
 8018b8c:	e794      	b.n	8018ab8 <_malloc_r+0x20>
 8018b8e:	6005      	str	r5, [r0, #0]
 8018b90:	e7d6      	b.n	8018b40 <_malloc_r+0xa8>
 8018b92:	bf00      	nop
 8018b94:	2000e308 	.word	0x2000e308

08018b98 <__malloc_lock>:
 8018b98:	4801      	ldr	r0, [pc, #4]	@ (8018ba0 <__malloc_lock+0x8>)
 8018b9a:	f000 bcdc 	b.w	8019556 <__retarget_lock_acquire_recursive>
 8018b9e:	bf00      	nop
 8018ba0:	2000e44d 	.word	0x2000e44d

08018ba4 <__malloc_unlock>:
 8018ba4:	4801      	ldr	r0, [pc, #4]	@ (8018bac <__malloc_unlock+0x8>)
 8018ba6:	f000 bcd7 	b.w	8019558 <__retarget_lock_release_recursive>
 8018baa:	bf00      	nop
 8018bac:	2000e44d 	.word	0x2000e44d

08018bb0 <srand>:
 8018bb0:	b538      	push	{r3, r4, r5, lr}
 8018bb2:	4b10      	ldr	r3, [pc, #64]	@ (8018bf4 <srand+0x44>)
 8018bb4:	681d      	ldr	r5, [r3, #0]
 8018bb6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018bb8:	4604      	mov	r4, r0
 8018bba:	b9b3      	cbnz	r3, 8018bea <srand+0x3a>
 8018bbc:	2018      	movs	r0, #24
 8018bbe:	f7ff ff39 	bl	8018a34 <malloc>
 8018bc2:	4602      	mov	r2, r0
 8018bc4:	6328      	str	r0, [r5, #48]	@ 0x30
 8018bc6:	b920      	cbnz	r0, 8018bd2 <srand+0x22>
 8018bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8018bf8 <srand+0x48>)
 8018bca:	480c      	ldr	r0, [pc, #48]	@ (8018bfc <srand+0x4c>)
 8018bcc:	2146      	movs	r1, #70	@ 0x46
 8018bce:	f000 fcdb 	bl	8019588 <__assert_func>
 8018bd2:	490b      	ldr	r1, [pc, #44]	@ (8018c00 <srand+0x50>)
 8018bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8018c04 <srand+0x54>)
 8018bd6:	e9c0 1300 	strd	r1, r3, [r0]
 8018bda:	4b0b      	ldr	r3, [pc, #44]	@ (8018c08 <srand+0x58>)
 8018bdc:	6083      	str	r3, [r0, #8]
 8018bde:	230b      	movs	r3, #11
 8018be0:	8183      	strh	r3, [r0, #12]
 8018be2:	2100      	movs	r1, #0
 8018be4:	2001      	movs	r0, #1
 8018be6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018bea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018bec:	2200      	movs	r2, #0
 8018bee:	611c      	str	r4, [r3, #16]
 8018bf0:	615a      	str	r2, [r3, #20]
 8018bf2:	bd38      	pop	{r3, r4, r5, pc}
 8018bf4:	200004b0 	.word	0x200004b0
 8018bf8:	0801b30c 	.word	0x0801b30c
 8018bfc:	0801b323 	.word	0x0801b323
 8018c00:	abcd330e 	.word	0xabcd330e
 8018c04:	e66d1234 	.word	0xe66d1234
 8018c08:	0005deec 	.word	0x0005deec

08018c0c <rand>:
 8018c0c:	4b16      	ldr	r3, [pc, #88]	@ (8018c68 <rand+0x5c>)
 8018c0e:	b510      	push	{r4, lr}
 8018c10:	681c      	ldr	r4, [r3, #0]
 8018c12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c14:	b9b3      	cbnz	r3, 8018c44 <rand+0x38>
 8018c16:	2018      	movs	r0, #24
 8018c18:	f7ff ff0c 	bl	8018a34 <malloc>
 8018c1c:	4602      	mov	r2, r0
 8018c1e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018c20:	b920      	cbnz	r0, 8018c2c <rand+0x20>
 8018c22:	4b12      	ldr	r3, [pc, #72]	@ (8018c6c <rand+0x60>)
 8018c24:	4812      	ldr	r0, [pc, #72]	@ (8018c70 <rand+0x64>)
 8018c26:	2152      	movs	r1, #82	@ 0x52
 8018c28:	f000 fcae 	bl	8019588 <__assert_func>
 8018c2c:	4911      	ldr	r1, [pc, #68]	@ (8018c74 <rand+0x68>)
 8018c2e:	4b12      	ldr	r3, [pc, #72]	@ (8018c78 <rand+0x6c>)
 8018c30:	e9c0 1300 	strd	r1, r3, [r0]
 8018c34:	4b11      	ldr	r3, [pc, #68]	@ (8018c7c <rand+0x70>)
 8018c36:	6083      	str	r3, [r0, #8]
 8018c38:	230b      	movs	r3, #11
 8018c3a:	8183      	strh	r3, [r0, #12]
 8018c3c:	2100      	movs	r1, #0
 8018c3e:	2001      	movs	r0, #1
 8018c40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018c44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018c46:	480e      	ldr	r0, [pc, #56]	@ (8018c80 <rand+0x74>)
 8018c48:	690b      	ldr	r3, [r1, #16]
 8018c4a:	694c      	ldr	r4, [r1, #20]
 8018c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8018c84 <rand+0x78>)
 8018c4e:	4358      	muls	r0, r3
 8018c50:	fb02 0004 	mla	r0, r2, r4, r0
 8018c54:	fba3 3202 	umull	r3, r2, r3, r2
 8018c58:	3301      	adds	r3, #1
 8018c5a:	eb40 0002 	adc.w	r0, r0, r2
 8018c5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018c62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018c66:	bd10      	pop	{r4, pc}
 8018c68:	200004b0 	.word	0x200004b0
 8018c6c:	0801b30c 	.word	0x0801b30c
 8018c70:	0801b323 	.word	0x0801b323
 8018c74:	abcd330e 	.word	0xabcd330e
 8018c78:	e66d1234 	.word	0xe66d1234
 8018c7c:	0005deec 	.word	0x0005deec
 8018c80:	5851f42d 	.word	0x5851f42d
 8018c84:	4c957f2d 	.word	0x4c957f2d

08018c88 <realloc>:
 8018c88:	4b02      	ldr	r3, [pc, #8]	@ (8018c94 <realloc+0xc>)
 8018c8a:	460a      	mov	r2, r1
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	6818      	ldr	r0, [r3, #0]
 8018c90:	f000 b802 	b.w	8018c98 <_realloc_r>
 8018c94:	200004b0 	.word	0x200004b0

08018c98 <_realloc_r>:
 8018c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c9c:	4680      	mov	r8, r0
 8018c9e:	4615      	mov	r5, r2
 8018ca0:	460c      	mov	r4, r1
 8018ca2:	b921      	cbnz	r1, 8018cae <_realloc_r+0x16>
 8018ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca8:	4611      	mov	r1, r2
 8018caa:	f7ff bef5 	b.w	8018a98 <_malloc_r>
 8018cae:	b92a      	cbnz	r2, 8018cbc <_realloc_r+0x24>
 8018cb0:	f000 fc94 	bl	80195dc <_free_r>
 8018cb4:	2400      	movs	r4, #0
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cbc:	f000 fcd8 	bl	8019670 <_malloc_usable_size_r>
 8018cc0:	4285      	cmp	r5, r0
 8018cc2:	4606      	mov	r6, r0
 8018cc4:	d802      	bhi.n	8018ccc <_realloc_r+0x34>
 8018cc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018cca:	d8f4      	bhi.n	8018cb6 <_realloc_r+0x1e>
 8018ccc:	4629      	mov	r1, r5
 8018cce:	4640      	mov	r0, r8
 8018cd0:	f7ff fee2 	bl	8018a98 <_malloc_r>
 8018cd4:	4607      	mov	r7, r0
 8018cd6:	2800      	cmp	r0, #0
 8018cd8:	d0ec      	beq.n	8018cb4 <_realloc_r+0x1c>
 8018cda:	42b5      	cmp	r5, r6
 8018cdc:	462a      	mov	r2, r5
 8018cde:	4621      	mov	r1, r4
 8018ce0:	bf28      	it	cs
 8018ce2:	4632      	movcs	r2, r6
 8018ce4:	f000 fc41 	bl	801956a <memcpy>
 8018ce8:	4621      	mov	r1, r4
 8018cea:	4640      	mov	r0, r8
 8018cec:	f000 fc76 	bl	80195dc <_free_r>
 8018cf0:	463c      	mov	r4, r7
 8018cf2:	e7e0      	b.n	8018cb6 <_realloc_r+0x1e>

08018cf4 <_strtoul_l.constprop.0>:
 8018cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cf8:	4e34      	ldr	r6, [pc, #208]	@ (8018dcc <_strtoul_l.constprop.0+0xd8>)
 8018cfa:	4686      	mov	lr, r0
 8018cfc:	460d      	mov	r5, r1
 8018cfe:	4628      	mov	r0, r5
 8018d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d04:	5d37      	ldrb	r7, [r6, r4]
 8018d06:	f017 0708 	ands.w	r7, r7, #8
 8018d0a:	d1f8      	bne.n	8018cfe <_strtoul_l.constprop.0+0xa>
 8018d0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8018d0e:	d12f      	bne.n	8018d70 <_strtoul_l.constprop.0+0x7c>
 8018d10:	782c      	ldrb	r4, [r5, #0]
 8018d12:	2701      	movs	r7, #1
 8018d14:	1c85      	adds	r5, r0, #2
 8018d16:	f033 0010 	bics.w	r0, r3, #16
 8018d1a:	d109      	bne.n	8018d30 <_strtoul_l.constprop.0+0x3c>
 8018d1c:	2c30      	cmp	r4, #48	@ 0x30
 8018d1e:	d12c      	bne.n	8018d7a <_strtoul_l.constprop.0+0x86>
 8018d20:	7828      	ldrb	r0, [r5, #0]
 8018d22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018d26:	2858      	cmp	r0, #88	@ 0x58
 8018d28:	d127      	bne.n	8018d7a <_strtoul_l.constprop.0+0x86>
 8018d2a:	786c      	ldrb	r4, [r5, #1]
 8018d2c:	2310      	movs	r3, #16
 8018d2e:	3502      	adds	r5, #2
 8018d30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018d34:	2600      	movs	r6, #0
 8018d36:	fbb8 f8f3 	udiv	r8, r8, r3
 8018d3a:	fb03 f908 	mul.w	r9, r3, r8
 8018d3e:	ea6f 0909 	mvn.w	r9, r9
 8018d42:	4630      	mov	r0, r6
 8018d44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018d48:	f1bc 0f09 	cmp.w	ip, #9
 8018d4c:	d81c      	bhi.n	8018d88 <_strtoul_l.constprop.0+0x94>
 8018d4e:	4664      	mov	r4, ip
 8018d50:	42a3      	cmp	r3, r4
 8018d52:	dd2a      	ble.n	8018daa <_strtoul_l.constprop.0+0xb6>
 8018d54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018d58:	d007      	beq.n	8018d6a <_strtoul_l.constprop.0+0x76>
 8018d5a:	4580      	cmp	r8, r0
 8018d5c:	d322      	bcc.n	8018da4 <_strtoul_l.constprop.0+0xb0>
 8018d5e:	d101      	bne.n	8018d64 <_strtoul_l.constprop.0+0x70>
 8018d60:	45a1      	cmp	r9, r4
 8018d62:	db1f      	blt.n	8018da4 <_strtoul_l.constprop.0+0xb0>
 8018d64:	fb00 4003 	mla	r0, r0, r3, r4
 8018d68:	2601      	movs	r6, #1
 8018d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d6e:	e7e9      	b.n	8018d44 <_strtoul_l.constprop.0+0x50>
 8018d70:	2c2b      	cmp	r4, #43	@ 0x2b
 8018d72:	bf04      	itt	eq
 8018d74:	782c      	ldrbeq	r4, [r5, #0]
 8018d76:	1c85      	addeq	r5, r0, #2
 8018d78:	e7cd      	b.n	8018d16 <_strtoul_l.constprop.0+0x22>
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d1d8      	bne.n	8018d30 <_strtoul_l.constprop.0+0x3c>
 8018d7e:	2c30      	cmp	r4, #48	@ 0x30
 8018d80:	bf0c      	ite	eq
 8018d82:	2308      	moveq	r3, #8
 8018d84:	230a      	movne	r3, #10
 8018d86:	e7d3      	b.n	8018d30 <_strtoul_l.constprop.0+0x3c>
 8018d88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018d8c:	f1bc 0f19 	cmp.w	ip, #25
 8018d90:	d801      	bhi.n	8018d96 <_strtoul_l.constprop.0+0xa2>
 8018d92:	3c37      	subs	r4, #55	@ 0x37
 8018d94:	e7dc      	b.n	8018d50 <_strtoul_l.constprop.0+0x5c>
 8018d96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018d9a:	f1bc 0f19 	cmp.w	ip, #25
 8018d9e:	d804      	bhi.n	8018daa <_strtoul_l.constprop.0+0xb6>
 8018da0:	3c57      	subs	r4, #87	@ 0x57
 8018da2:	e7d5      	b.n	8018d50 <_strtoul_l.constprop.0+0x5c>
 8018da4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018da8:	e7df      	b.n	8018d6a <_strtoul_l.constprop.0+0x76>
 8018daa:	1c73      	adds	r3, r6, #1
 8018dac:	d106      	bne.n	8018dbc <_strtoul_l.constprop.0+0xc8>
 8018dae:	2322      	movs	r3, #34	@ 0x22
 8018db0:	f8ce 3000 	str.w	r3, [lr]
 8018db4:	4630      	mov	r0, r6
 8018db6:	b932      	cbnz	r2, 8018dc6 <_strtoul_l.constprop.0+0xd2>
 8018db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dbc:	b107      	cbz	r7, 8018dc0 <_strtoul_l.constprop.0+0xcc>
 8018dbe:	4240      	negs	r0, r0
 8018dc0:	2a00      	cmp	r2, #0
 8018dc2:	d0f9      	beq.n	8018db8 <_strtoul_l.constprop.0+0xc4>
 8018dc4:	b106      	cbz	r6, 8018dc8 <_strtoul_l.constprop.0+0xd4>
 8018dc6:	1e69      	subs	r1, r5, #1
 8018dc8:	6011      	str	r1, [r2, #0]
 8018dca:	e7f5      	b.n	8018db8 <_strtoul_l.constprop.0+0xc4>
 8018dcc:	0801b37c 	.word	0x0801b37c

08018dd0 <strtoul>:
 8018dd0:	4613      	mov	r3, r2
 8018dd2:	460a      	mov	r2, r1
 8018dd4:	4601      	mov	r1, r0
 8018dd6:	4802      	ldr	r0, [pc, #8]	@ (8018de0 <strtoul+0x10>)
 8018dd8:	6800      	ldr	r0, [r0, #0]
 8018dda:	f7ff bf8b 	b.w	8018cf4 <_strtoul_l.constprop.0>
 8018dde:	bf00      	nop
 8018de0:	200004b0 	.word	0x200004b0

08018de4 <std>:
 8018de4:	2300      	movs	r3, #0
 8018de6:	b510      	push	{r4, lr}
 8018de8:	4604      	mov	r4, r0
 8018dea:	e9c0 3300 	strd	r3, r3, [r0]
 8018dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018df2:	6083      	str	r3, [r0, #8]
 8018df4:	8181      	strh	r1, [r0, #12]
 8018df6:	6643      	str	r3, [r0, #100]	@ 0x64
 8018df8:	81c2      	strh	r2, [r0, #14]
 8018dfa:	6183      	str	r3, [r0, #24]
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	2208      	movs	r2, #8
 8018e00:	305c      	adds	r0, #92	@ 0x5c
 8018e02:	f000 fae9 	bl	80193d8 <memset>
 8018e06:	4b0d      	ldr	r3, [pc, #52]	@ (8018e3c <std+0x58>)
 8018e08:	6263      	str	r3, [r4, #36]	@ 0x24
 8018e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8018e40 <std+0x5c>)
 8018e0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8018e44 <std+0x60>)
 8018e10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018e12:	4b0d      	ldr	r3, [pc, #52]	@ (8018e48 <std+0x64>)
 8018e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8018e16:	4b0d      	ldr	r3, [pc, #52]	@ (8018e4c <std+0x68>)
 8018e18:	6224      	str	r4, [r4, #32]
 8018e1a:	429c      	cmp	r4, r3
 8018e1c:	d006      	beq.n	8018e2c <std+0x48>
 8018e1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018e22:	4294      	cmp	r4, r2
 8018e24:	d002      	beq.n	8018e2c <std+0x48>
 8018e26:	33d0      	adds	r3, #208	@ 0xd0
 8018e28:	429c      	cmp	r4, r3
 8018e2a:	d105      	bne.n	8018e38 <std+0x54>
 8018e2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e34:	f000 bb8e 	b.w	8019554 <__retarget_lock_init_recursive>
 8018e38:	bd10      	pop	{r4, pc}
 8018e3a:	bf00      	nop
 8018e3c:	08019165 	.word	0x08019165
 8018e40:	08019187 	.word	0x08019187
 8018e44:	080191bf 	.word	0x080191bf
 8018e48:	080191e3 	.word	0x080191e3
 8018e4c:	2000e30c 	.word	0x2000e30c

08018e50 <stdio_exit_handler>:
 8018e50:	4a02      	ldr	r2, [pc, #8]	@ (8018e5c <stdio_exit_handler+0xc>)
 8018e52:	4903      	ldr	r1, [pc, #12]	@ (8018e60 <stdio_exit_handler+0x10>)
 8018e54:	4803      	ldr	r0, [pc, #12]	@ (8018e64 <stdio_exit_handler+0x14>)
 8018e56:	f000 b869 	b.w	8018f2c <_fwalk_sglue>
 8018e5a:	bf00      	nop
 8018e5c:	200004a4 	.word	0x200004a4
 8018e60:	08019fd9 	.word	0x08019fd9
 8018e64:	200004b4 	.word	0x200004b4

08018e68 <cleanup_stdio>:
 8018e68:	6841      	ldr	r1, [r0, #4]
 8018e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8018e9c <cleanup_stdio+0x34>)
 8018e6c:	4299      	cmp	r1, r3
 8018e6e:	b510      	push	{r4, lr}
 8018e70:	4604      	mov	r4, r0
 8018e72:	d001      	beq.n	8018e78 <cleanup_stdio+0x10>
 8018e74:	f001 f8b0 	bl	8019fd8 <_fflush_r>
 8018e78:	68a1      	ldr	r1, [r4, #8]
 8018e7a:	4b09      	ldr	r3, [pc, #36]	@ (8018ea0 <cleanup_stdio+0x38>)
 8018e7c:	4299      	cmp	r1, r3
 8018e7e:	d002      	beq.n	8018e86 <cleanup_stdio+0x1e>
 8018e80:	4620      	mov	r0, r4
 8018e82:	f001 f8a9 	bl	8019fd8 <_fflush_r>
 8018e86:	68e1      	ldr	r1, [r4, #12]
 8018e88:	4b06      	ldr	r3, [pc, #24]	@ (8018ea4 <cleanup_stdio+0x3c>)
 8018e8a:	4299      	cmp	r1, r3
 8018e8c:	d004      	beq.n	8018e98 <cleanup_stdio+0x30>
 8018e8e:	4620      	mov	r0, r4
 8018e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e94:	f001 b8a0 	b.w	8019fd8 <_fflush_r>
 8018e98:	bd10      	pop	{r4, pc}
 8018e9a:	bf00      	nop
 8018e9c:	2000e30c 	.word	0x2000e30c
 8018ea0:	2000e374 	.word	0x2000e374
 8018ea4:	2000e3dc 	.word	0x2000e3dc

08018ea8 <global_stdio_init.part.0>:
 8018ea8:	b510      	push	{r4, lr}
 8018eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8018ed8 <global_stdio_init.part.0+0x30>)
 8018eac:	4c0b      	ldr	r4, [pc, #44]	@ (8018edc <global_stdio_init.part.0+0x34>)
 8018eae:	4a0c      	ldr	r2, [pc, #48]	@ (8018ee0 <global_stdio_init.part.0+0x38>)
 8018eb0:	601a      	str	r2, [r3, #0]
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	2104      	movs	r1, #4
 8018eb8:	f7ff ff94 	bl	8018de4 <std>
 8018ebc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018ec0:	2201      	movs	r2, #1
 8018ec2:	2109      	movs	r1, #9
 8018ec4:	f7ff ff8e 	bl	8018de4 <std>
 8018ec8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018ecc:	2202      	movs	r2, #2
 8018ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ed2:	2112      	movs	r1, #18
 8018ed4:	f7ff bf86 	b.w	8018de4 <std>
 8018ed8:	2000e444 	.word	0x2000e444
 8018edc:	2000e30c 	.word	0x2000e30c
 8018ee0:	08018e51 	.word	0x08018e51

08018ee4 <__sfp_lock_acquire>:
 8018ee4:	4801      	ldr	r0, [pc, #4]	@ (8018eec <__sfp_lock_acquire+0x8>)
 8018ee6:	f000 bb36 	b.w	8019556 <__retarget_lock_acquire_recursive>
 8018eea:	bf00      	nop
 8018eec:	2000e44e 	.word	0x2000e44e

08018ef0 <__sfp_lock_release>:
 8018ef0:	4801      	ldr	r0, [pc, #4]	@ (8018ef8 <__sfp_lock_release+0x8>)
 8018ef2:	f000 bb31 	b.w	8019558 <__retarget_lock_release_recursive>
 8018ef6:	bf00      	nop
 8018ef8:	2000e44e 	.word	0x2000e44e

08018efc <__sinit>:
 8018efc:	b510      	push	{r4, lr}
 8018efe:	4604      	mov	r4, r0
 8018f00:	f7ff fff0 	bl	8018ee4 <__sfp_lock_acquire>
 8018f04:	6a23      	ldr	r3, [r4, #32]
 8018f06:	b11b      	cbz	r3, 8018f10 <__sinit+0x14>
 8018f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f0c:	f7ff bff0 	b.w	8018ef0 <__sfp_lock_release>
 8018f10:	4b04      	ldr	r3, [pc, #16]	@ (8018f24 <__sinit+0x28>)
 8018f12:	6223      	str	r3, [r4, #32]
 8018f14:	4b04      	ldr	r3, [pc, #16]	@ (8018f28 <__sinit+0x2c>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d1f5      	bne.n	8018f08 <__sinit+0xc>
 8018f1c:	f7ff ffc4 	bl	8018ea8 <global_stdio_init.part.0>
 8018f20:	e7f2      	b.n	8018f08 <__sinit+0xc>
 8018f22:	bf00      	nop
 8018f24:	08018e69 	.word	0x08018e69
 8018f28:	2000e444 	.word	0x2000e444

08018f2c <_fwalk_sglue>:
 8018f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f30:	4607      	mov	r7, r0
 8018f32:	4688      	mov	r8, r1
 8018f34:	4614      	mov	r4, r2
 8018f36:	2600      	movs	r6, #0
 8018f38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f3c:	f1b9 0901 	subs.w	r9, r9, #1
 8018f40:	d505      	bpl.n	8018f4e <_fwalk_sglue+0x22>
 8018f42:	6824      	ldr	r4, [r4, #0]
 8018f44:	2c00      	cmp	r4, #0
 8018f46:	d1f7      	bne.n	8018f38 <_fwalk_sglue+0xc>
 8018f48:	4630      	mov	r0, r6
 8018f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f4e:	89ab      	ldrh	r3, [r5, #12]
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	d907      	bls.n	8018f64 <_fwalk_sglue+0x38>
 8018f54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	d003      	beq.n	8018f64 <_fwalk_sglue+0x38>
 8018f5c:	4629      	mov	r1, r5
 8018f5e:	4638      	mov	r0, r7
 8018f60:	47c0      	blx	r8
 8018f62:	4306      	orrs	r6, r0
 8018f64:	3568      	adds	r5, #104	@ 0x68
 8018f66:	e7e9      	b.n	8018f3c <_fwalk_sglue+0x10>

08018f68 <_fwrite_r>:
 8018f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f6c:	9c08      	ldr	r4, [sp, #32]
 8018f6e:	468a      	mov	sl, r1
 8018f70:	4690      	mov	r8, r2
 8018f72:	fb02 f903 	mul.w	r9, r2, r3
 8018f76:	4606      	mov	r6, r0
 8018f78:	b118      	cbz	r0, 8018f82 <_fwrite_r+0x1a>
 8018f7a:	6a03      	ldr	r3, [r0, #32]
 8018f7c:	b90b      	cbnz	r3, 8018f82 <_fwrite_r+0x1a>
 8018f7e:	f7ff ffbd 	bl	8018efc <__sinit>
 8018f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018f84:	07dd      	lsls	r5, r3, #31
 8018f86:	d405      	bmi.n	8018f94 <_fwrite_r+0x2c>
 8018f88:	89a3      	ldrh	r3, [r4, #12]
 8018f8a:	0598      	lsls	r0, r3, #22
 8018f8c:	d402      	bmi.n	8018f94 <_fwrite_r+0x2c>
 8018f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f90:	f000 fae1 	bl	8019556 <__retarget_lock_acquire_recursive>
 8018f94:	89a3      	ldrh	r3, [r4, #12]
 8018f96:	0719      	lsls	r1, r3, #28
 8018f98:	d516      	bpl.n	8018fc8 <_fwrite_r+0x60>
 8018f9a:	6923      	ldr	r3, [r4, #16]
 8018f9c:	b1a3      	cbz	r3, 8018fc8 <_fwrite_r+0x60>
 8018f9e:	2500      	movs	r5, #0
 8018fa0:	454d      	cmp	r5, r9
 8018fa2:	d01f      	beq.n	8018fe4 <_fwrite_r+0x7c>
 8018fa4:	68a7      	ldr	r7, [r4, #8]
 8018fa6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018faa:	3f01      	subs	r7, #1
 8018fac:	2f00      	cmp	r7, #0
 8018fae:	60a7      	str	r7, [r4, #8]
 8018fb0:	da04      	bge.n	8018fbc <_fwrite_r+0x54>
 8018fb2:	69a3      	ldr	r3, [r4, #24]
 8018fb4:	429f      	cmp	r7, r3
 8018fb6:	db0f      	blt.n	8018fd8 <_fwrite_r+0x70>
 8018fb8:	290a      	cmp	r1, #10
 8018fba:	d00d      	beq.n	8018fd8 <_fwrite_r+0x70>
 8018fbc:	6823      	ldr	r3, [r4, #0]
 8018fbe:	1c5a      	adds	r2, r3, #1
 8018fc0:	6022      	str	r2, [r4, #0]
 8018fc2:	7019      	strb	r1, [r3, #0]
 8018fc4:	3501      	adds	r5, #1
 8018fc6:	e7eb      	b.n	8018fa0 <_fwrite_r+0x38>
 8018fc8:	4621      	mov	r1, r4
 8018fca:	4630      	mov	r0, r6
 8018fcc:	f000 f984 	bl	80192d8 <__swsetup_r>
 8018fd0:	2800      	cmp	r0, #0
 8018fd2:	d0e4      	beq.n	8018f9e <_fwrite_r+0x36>
 8018fd4:	2500      	movs	r5, #0
 8018fd6:	e005      	b.n	8018fe4 <_fwrite_r+0x7c>
 8018fd8:	4622      	mov	r2, r4
 8018fda:	4630      	mov	r0, r6
 8018fdc:	f000 f93e 	bl	801925c <__swbuf_r>
 8018fe0:	3001      	adds	r0, #1
 8018fe2:	d1ef      	bne.n	8018fc4 <_fwrite_r+0x5c>
 8018fe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018fe6:	07da      	lsls	r2, r3, #31
 8018fe8:	d405      	bmi.n	8018ff6 <_fwrite_r+0x8e>
 8018fea:	89a3      	ldrh	r3, [r4, #12]
 8018fec:	059b      	lsls	r3, r3, #22
 8018fee:	d402      	bmi.n	8018ff6 <_fwrite_r+0x8e>
 8018ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ff2:	f000 fab1 	bl	8019558 <__retarget_lock_release_recursive>
 8018ff6:	fbb5 f0f8 	udiv	r0, r5, r8
 8018ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019000 <fwrite>:
 8019000:	b507      	push	{r0, r1, r2, lr}
 8019002:	9300      	str	r3, [sp, #0]
 8019004:	4613      	mov	r3, r2
 8019006:	460a      	mov	r2, r1
 8019008:	4601      	mov	r1, r0
 801900a:	4803      	ldr	r0, [pc, #12]	@ (8019018 <fwrite+0x18>)
 801900c:	6800      	ldr	r0, [r0, #0]
 801900e:	f7ff ffab 	bl	8018f68 <_fwrite_r>
 8019012:	b003      	add	sp, #12
 8019014:	f85d fb04 	ldr.w	pc, [sp], #4
 8019018:	200004b0 	.word	0x200004b0

0801901c <iprintf>:
 801901c:	b40f      	push	{r0, r1, r2, r3}
 801901e:	b507      	push	{r0, r1, r2, lr}
 8019020:	4906      	ldr	r1, [pc, #24]	@ (801903c <iprintf+0x20>)
 8019022:	ab04      	add	r3, sp, #16
 8019024:	6808      	ldr	r0, [r1, #0]
 8019026:	f853 2b04 	ldr.w	r2, [r3], #4
 801902a:	6881      	ldr	r1, [r0, #8]
 801902c:	9301      	str	r3, [sp, #4]
 801902e:	f000 fca9 	bl	8019984 <_vfiprintf_r>
 8019032:	b003      	add	sp, #12
 8019034:	f85d eb04 	ldr.w	lr, [sp], #4
 8019038:	b004      	add	sp, #16
 801903a:	4770      	bx	lr
 801903c:	200004b0 	.word	0x200004b0

08019040 <_puts_r>:
 8019040:	6a03      	ldr	r3, [r0, #32]
 8019042:	b570      	push	{r4, r5, r6, lr}
 8019044:	6884      	ldr	r4, [r0, #8]
 8019046:	4605      	mov	r5, r0
 8019048:	460e      	mov	r6, r1
 801904a:	b90b      	cbnz	r3, 8019050 <_puts_r+0x10>
 801904c:	f7ff ff56 	bl	8018efc <__sinit>
 8019050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019052:	07db      	lsls	r3, r3, #31
 8019054:	d405      	bmi.n	8019062 <_puts_r+0x22>
 8019056:	89a3      	ldrh	r3, [r4, #12]
 8019058:	0598      	lsls	r0, r3, #22
 801905a:	d402      	bmi.n	8019062 <_puts_r+0x22>
 801905c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801905e:	f000 fa7a 	bl	8019556 <__retarget_lock_acquire_recursive>
 8019062:	89a3      	ldrh	r3, [r4, #12]
 8019064:	0719      	lsls	r1, r3, #28
 8019066:	d502      	bpl.n	801906e <_puts_r+0x2e>
 8019068:	6923      	ldr	r3, [r4, #16]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d135      	bne.n	80190da <_puts_r+0x9a>
 801906e:	4621      	mov	r1, r4
 8019070:	4628      	mov	r0, r5
 8019072:	f000 f931 	bl	80192d8 <__swsetup_r>
 8019076:	b380      	cbz	r0, 80190da <_puts_r+0x9a>
 8019078:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801907c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801907e:	07da      	lsls	r2, r3, #31
 8019080:	d405      	bmi.n	801908e <_puts_r+0x4e>
 8019082:	89a3      	ldrh	r3, [r4, #12]
 8019084:	059b      	lsls	r3, r3, #22
 8019086:	d402      	bmi.n	801908e <_puts_r+0x4e>
 8019088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801908a:	f000 fa65 	bl	8019558 <__retarget_lock_release_recursive>
 801908e:	4628      	mov	r0, r5
 8019090:	bd70      	pop	{r4, r5, r6, pc}
 8019092:	2b00      	cmp	r3, #0
 8019094:	da04      	bge.n	80190a0 <_puts_r+0x60>
 8019096:	69a2      	ldr	r2, [r4, #24]
 8019098:	429a      	cmp	r2, r3
 801909a:	dc17      	bgt.n	80190cc <_puts_r+0x8c>
 801909c:	290a      	cmp	r1, #10
 801909e:	d015      	beq.n	80190cc <_puts_r+0x8c>
 80190a0:	6823      	ldr	r3, [r4, #0]
 80190a2:	1c5a      	adds	r2, r3, #1
 80190a4:	6022      	str	r2, [r4, #0]
 80190a6:	7019      	strb	r1, [r3, #0]
 80190a8:	68a3      	ldr	r3, [r4, #8]
 80190aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80190ae:	3b01      	subs	r3, #1
 80190b0:	60a3      	str	r3, [r4, #8]
 80190b2:	2900      	cmp	r1, #0
 80190b4:	d1ed      	bne.n	8019092 <_puts_r+0x52>
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	da11      	bge.n	80190de <_puts_r+0x9e>
 80190ba:	4622      	mov	r2, r4
 80190bc:	210a      	movs	r1, #10
 80190be:	4628      	mov	r0, r5
 80190c0:	f000 f8cc 	bl	801925c <__swbuf_r>
 80190c4:	3001      	adds	r0, #1
 80190c6:	d0d7      	beq.n	8019078 <_puts_r+0x38>
 80190c8:	250a      	movs	r5, #10
 80190ca:	e7d7      	b.n	801907c <_puts_r+0x3c>
 80190cc:	4622      	mov	r2, r4
 80190ce:	4628      	mov	r0, r5
 80190d0:	f000 f8c4 	bl	801925c <__swbuf_r>
 80190d4:	3001      	adds	r0, #1
 80190d6:	d1e7      	bne.n	80190a8 <_puts_r+0x68>
 80190d8:	e7ce      	b.n	8019078 <_puts_r+0x38>
 80190da:	3e01      	subs	r6, #1
 80190dc:	e7e4      	b.n	80190a8 <_puts_r+0x68>
 80190de:	6823      	ldr	r3, [r4, #0]
 80190e0:	1c5a      	adds	r2, r3, #1
 80190e2:	6022      	str	r2, [r4, #0]
 80190e4:	220a      	movs	r2, #10
 80190e6:	701a      	strb	r2, [r3, #0]
 80190e8:	e7ee      	b.n	80190c8 <_puts_r+0x88>
	...

080190ec <puts>:
 80190ec:	4b02      	ldr	r3, [pc, #8]	@ (80190f8 <puts+0xc>)
 80190ee:	4601      	mov	r1, r0
 80190f0:	6818      	ldr	r0, [r3, #0]
 80190f2:	f7ff bfa5 	b.w	8019040 <_puts_r>
 80190f6:	bf00      	nop
 80190f8:	200004b0 	.word	0x200004b0

080190fc <sniprintf>:
 80190fc:	b40c      	push	{r2, r3}
 80190fe:	b530      	push	{r4, r5, lr}
 8019100:	4b17      	ldr	r3, [pc, #92]	@ (8019160 <sniprintf+0x64>)
 8019102:	1e0c      	subs	r4, r1, #0
 8019104:	681d      	ldr	r5, [r3, #0]
 8019106:	b09d      	sub	sp, #116	@ 0x74
 8019108:	da08      	bge.n	801911c <sniprintf+0x20>
 801910a:	238b      	movs	r3, #139	@ 0x8b
 801910c:	602b      	str	r3, [r5, #0]
 801910e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019112:	b01d      	add	sp, #116	@ 0x74
 8019114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019118:	b002      	add	sp, #8
 801911a:	4770      	bx	lr
 801911c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019120:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019124:	bf14      	ite	ne
 8019126:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801912a:	4623      	moveq	r3, r4
 801912c:	9304      	str	r3, [sp, #16]
 801912e:	9307      	str	r3, [sp, #28]
 8019130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019134:	9002      	str	r0, [sp, #8]
 8019136:	9006      	str	r0, [sp, #24]
 8019138:	f8ad 3016 	strh.w	r3, [sp, #22]
 801913c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801913e:	ab21      	add	r3, sp, #132	@ 0x84
 8019140:	a902      	add	r1, sp, #8
 8019142:	4628      	mov	r0, r5
 8019144:	9301      	str	r3, [sp, #4]
 8019146:	f000 faf7 	bl	8019738 <_svfiprintf_r>
 801914a:	1c43      	adds	r3, r0, #1
 801914c:	bfbc      	itt	lt
 801914e:	238b      	movlt	r3, #139	@ 0x8b
 8019150:	602b      	strlt	r3, [r5, #0]
 8019152:	2c00      	cmp	r4, #0
 8019154:	d0dd      	beq.n	8019112 <sniprintf+0x16>
 8019156:	9b02      	ldr	r3, [sp, #8]
 8019158:	2200      	movs	r2, #0
 801915a:	701a      	strb	r2, [r3, #0]
 801915c:	e7d9      	b.n	8019112 <sniprintf+0x16>
 801915e:	bf00      	nop
 8019160:	200004b0 	.word	0x200004b0

08019164 <__sread>:
 8019164:	b510      	push	{r4, lr}
 8019166:	460c      	mov	r4, r1
 8019168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801916c:	f000 f994 	bl	8019498 <_read_r>
 8019170:	2800      	cmp	r0, #0
 8019172:	bfab      	itete	ge
 8019174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019176:	89a3      	ldrhlt	r3, [r4, #12]
 8019178:	181b      	addge	r3, r3, r0
 801917a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801917e:	bfac      	ite	ge
 8019180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019182:	81a3      	strhlt	r3, [r4, #12]
 8019184:	bd10      	pop	{r4, pc}

08019186 <__swrite>:
 8019186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801918a:	461f      	mov	r7, r3
 801918c:	898b      	ldrh	r3, [r1, #12]
 801918e:	05db      	lsls	r3, r3, #23
 8019190:	4605      	mov	r5, r0
 8019192:	460c      	mov	r4, r1
 8019194:	4616      	mov	r6, r2
 8019196:	d505      	bpl.n	80191a4 <__swrite+0x1e>
 8019198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801919c:	2302      	movs	r3, #2
 801919e:	2200      	movs	r2, #0
 80191a0:	f000 f968 	bl	8019474 <_lseek_r>
 80191a4:	89a3      	ldrh	r3, [r4, #12]
 80191a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80191ae:	81a3      	strh	r3, [r4, #12]
 80191b0:	4632      	mov	r2, r6
 80191b2:	463b      	mov	r3, r7
 80191b4:	4628      	mov	r0, r5
 80191b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191ba:	f000 b98f 	b.w	80194dc <_write_r>

080191be <__sseek>:
 80191be:	b510      	push	{r4, lr}
 80191c0:	460c      	mov	r4, r1
 80191c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191c6:	f000 f955 	bl	8019474 <_lseek_r>
 80191ca:	1c43      	adds	r3, r0, #1
 80191cc:	89a3      	ldrh	r3, [r4, #12]
 80191ce:	bf15      	itete	ne
 80191d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80191d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80191d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80191da:	81a3      	strheq	r3, [r4, #12]
 80191dc:	bf18      	it	ne
 80191de:	81a3      	strhne	r3, [r4, #12]
 80191e0:	bd10      	pop	{r4, pc}

080191e2 <__sclose>:
 80191e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191e6:	f000 b935 	b.w	8019454 <_close_r>

080191ea <_vsniprintf_r>:
 80191ea:	b530      	push	{r4, r5, lr}
 80191ec:	4614      	mov	r4, r2
 80191ee:	2c00      	cmp	r4, #0
 80191f0:	b09b      	sub	sp, #108	@ 0x6c
 80191f2:	4605      	mov	r5, r0
 80191f4:	461a      	mov	r2, r3
 80191f6:	da05      	bge.n	8019204 <_vsniprintf_r+0x1a>
 80191f8:	238b      	movs	r3, #139	@ 0x8b
 80191fa:	6003      	str	r3, [r0, #0]
 80191fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019200:	b01b      	add	sp, #108	@ 0x6c
 8019202:	bd30      	pop	{r4, r5, pc}
 8019204:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019208:	f8ad 300c 	strh.w	r3, [sp, #12]
 801920c:	bf14      	ite	ne
 801920e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019212:	4623      	moveq	r3, r4
 8019214:	9302      	str	r3, [sp, #8]
 8019216:	9305      	str	r3, [sp, #20]
 8019218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801921c:	9100      	str	r1, [sp, #0]
 801921e:	9104      	str	r1, [sp, #16]
 8019220:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019224:	4669      	mov	r1, sp
 8019226:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019228:	f000 fa86 	bl	8019738 <_svfiprintf_r>
 801922c:	1c43      	adds	r3, r0, #1
 801922e:	bfbc      	itt	lt
 8019230:	238b      	movlt	r3, #139	@ 0x8b
 8019232:	602b      	strlt	r3, [r5, #0]
 8019234:	2c00      	cmp	r4, #0
 8019236:	d0e3      	beq.n	8019200 <_vsniprintf_r+0x16>
 8019238:	9b00      	ldr	r3, [sp, #0]
 801923a:	2200      	movs	r2, #0
 801923c:	701a      	strb	r2, [r3, #0]
 801923e:	e7df      	b.n	8019200 <_vsniprintf_r+0x16>

08019240 <vsniprintf>:
 8019240:	b507      	push	{r0, r1, r2, lr}
 8019242:	9300      	str	r3, [sp, #0]
 8019244:	4613      	mov	r3, r2
 8019246:	460a      	mov	r2, r1
 8019248:	4601      	mov	r1, r0
 801924a:	4803      	ldr	r0, [pc, #12]	@ (8019258 <vsniprintf+0x18>)
 801924c:	6800      	ldr	r0, [r0, #0]
 801924e:	f7ff ffcc 	bl	80191ea <_vsniprintf_r>
 8019252:	b003      	add	sp, #12
 8019254:	f85d fb04 	ldr.w	pc, [sp], #4
 8019258:	200004b0 	.word	0x200004b0

0801925c <__swbuf_r>:
 801925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801925e:	460e      	mov	r6, r1
 8019260:	4614      	mov	r4, r2
 8019262:	4605      	mov	r5, r0
 8019264:	b118      	cbz	r0, 801926e <__swbuf_r+0x12>
 8019266:	6a03      	ldr	r3, [r0, #32]
 8019268:	b90b      	cbnz	r3, 801926e <__swbuf_r+0x12>
 801926a:	f7ff fe47 	bl	8018efc <__sinit>
 801926e:	69a3      	ldr	r3, [r4, #24]
 8019270:	60a3      	str	r3, [r4, #8]
 8019272:	89a3      	ldrh	r3, [r4, #12]
 8019274:	071a      	lsls	r2, r3, #28
 8019276:	d501      	bpl.n	801927c <__swbuf_r+0x20>
 8019278:	6923      	ldr	r3, [r4, #16]
 801927a:	b943      	cbnz	r3, 801928e <__swbuf_r+0x32>
 801927c:	4621      	mov	r1, r4
 801927e:	4628      	mov	r0, r5
 8019280:	f000 f82a 	bl	80192d8 <__swsetup_r>
 8019284:	b118      	cbz	r0, 801928e <__swbuf_r+0x32>
 8019286:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801928a:	4638      	mov	r0, r7
 801928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801928e:	6823      	ldr	r3, [r4, #0]
 8019290:	6922      	ldr	r2, [r4, #16]
 8019292:	1a98      	subs	r0, r3, r2
 8019294:	6963      	ldr	r3, [r4, #20]
 8019296:	b2f6      	uxtb	r6, r6
 8019298:	4283      	cmp	r3, r0
 801929a:	4637      	mov	r7, r6
 801929c:	dc05      	bgt.n	80192aa <__swbuf_r+0x4e>
 801929e:	4621      	mov	r1, r4
 80192a0:	4628      	mov	r0, r5
 80192a2:	f000 fe99 	bl	8019fd8 <_fflush_r>
 80192a6:	2800      	cmp	r0, #0
 80192a8:	d1ed      	bne.n	8019286 <__swbuf_r+0x2a>
 80192aa:	68a3      	ldr	r3, [r4, #8]
 80192ac:	3b01      	subs	r3, #1
 80192ae:	60a3      	str	r3, [r4, #8]
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	1c5a      	adds	r2, r3, #1
 80192b4:	6022      	str	r2, [r4, #0]
 80192b6:	701e      	strb	r6, [r3, #0]
 80192b8:	6962      	ldr	r2, [r4, #20]
 80192ba:	1c43      	adds	r3, r0, #1
 80192bc:	429a      	cmp	r2, r3
 80192be:	d004      	beq.n	80192ca <__swbuf_r+0x6e>
 80192c0:	89a3      	ldrh	r3, [r4, #12]
 80192c2:	07db      	lsls	r3, r3, #31
 80192c4:	d5e1      	bpl.n	801928a <__swbuf_r+0x2e>
 80192c6:	2e0a      	cmp	r6, #10
 80192c8:	d1df      	bne.n	801928a <__swbuf_r+0x2e>
 80192ca:	4621      	mov	r1, r4
 80192cc:	4628      	mov	r0, r5
 80192ce:	f000 fe83 	bl	8019fd8 <_fflush_r>
 80192d2:	2800      	cmp	r0, #0
 80192d4:	d0d9      	beq.n	801928a <__swbuf_r+0x2e>
 80192d6:	e7d6      	b.n	8019286 <__swbuf_r+0x2a>

080192d8 <__swsetup_r>:
 80192d8:	b538      	push	{r3, r4, r5, lr}
 80192da:	4b29      	ldr	r3, [pc, #164]	@ (8019380 <__swsetup_r+0xa8>)
 80192dc:	4605      	mov	r5, r0
 80192de:	6818      	ldr	r0, [r3, #0]
 80192e0:	460c      	mov	r4, r1
 80192e2:	b118      	cbz	r0, 80192ec <__swsetup_r+0x14>
 80192e4:	6a03      	ldr	r3, [r0, #32]
 80192e6:	b90b      	cbnz	r3, 80192ec <__swsetup_r+0x14>
 80192e8:	f7ff fe08 	bl	8018efc <__sinit>
 80192ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192f0:	0719      	lsls	r1, r3, #28
 80192f2:	d422      	bmi.n	801933a <__swsetup_r+0x62>
 80192f4:	06da      	lsls	r2, r3, #27
 80192f6:	d407      	bmi.n	8019308 <__swsetup_r+0x30>
 80192f8:	2209      	movs	r2, #9
 80192fa:	602a      	str	r2, [r5, #0]
 80192fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019300:	81a3      	strh	r3, [r4, #12]
 8019302:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019306:	e033      	b.n	8019370 <__swsetup_r+0x98>
 8019308:	0758      	lsls	r0, r3, #29
 801930a:	d512      	bpl.n	8019332 <__swsetup_r+0x5a>
 801930c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801930e:	b141      	cbz	r1, 8019322 <__swsetup_r+0x4a>
 8019310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019314:	4299      	cmp	r1, r3
 8019316:	d002      	beq.n	801931e <__swsetup_r+0x46>
 8019318:	4628      	mov	r0, r5
 801931a:	f000 f95f 	bl	80195dc <_free_r>
 801931e:	2300      	movs	r3, #0
 8019320:	6363      	str	r3, [r4, #52]	@ 0x34
 8019322:	89a3      	ldrh	r3, [r4, #12]
 8019324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019328:	81a3      	strh	r3, [r4, #12]
 801932a:	2300      	movs	r3, #0
 801932c:	6063      	str	r3, [r4, #4]
 801932e:	6923      	ldr	r3, [r4, #16]
 8019330:	6023      	str	r3, [r4, #0]
 8019332:	89a3      	ldrh	r3, [r4, #12]
 8019334:	f043 0308 	orr.w	r3, r3, #8
 8019338:	81a3      	strh	r3, [r4, #12]
 801933a:	6923      	ldr	r3, [r4, #16]
 801933c:	b94b      	cbnz	r3, 8019352 <__swsetup_r+0x7a>
 801933e:	89a3      	ldrh	r3, [r4, #12]
 8019340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019348:	d003      	beq.n	8019352 <__swsetup_r+0x7a>
 801934a:	4621      	mov	r1, r4
 801934c:	4628      	mov	r0, r5
 801934e:	f000 fea3 	bl	801a098 <__smakebuf_r>
 8019352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019356:	f013 0201 	ands.w	r2, r3, #1
 801935a:	d00a      	beq.n	8019372 <__swsetup_r+0x9a>
 801935c:	2200      	movs	r2, #0
 801935e:	60a2      	str	r2, [r4, #8]
 8019360:	6962      	ldr	r2, [r4, #20]
 8019362:	4252      	negs	r2, r2
 8019364:	61a2      	str	r2, [r4, #24]
 8019366:	6922      	ldr	r2, [r4, #16]
 8019368:	b942      	cbnz	r2, 801937c <__swsetup_r+0xa4>
 801936a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801936e:	d1c5      	bne.n	80192fc <__swsetup_r+0x24>
 8019370:	bd38      	pop	{r3, r4, r5, pc}
 8019372:	0799      	lsls	r1, r3, #30
 8019374:	bf58      	it	pl
 8019376:	6962      	ldrpl	r2, [r4, #20]
 8019378:	60a2      	str	r2, [r4, #8]
 801937a:	e7f4      	b.n	8019366 <__swsetup_r+0x8e>
 801937c:	2000      	movs	r0, #0
 801937e:	e7f7      	b.n	8019370 <__swsetup_r+0x98>
 8019380:	200004b0 	.word	0x200004b0

08019384 <memcmp>:
 8019384:	b510      	push	{r4, lr}
 8019386:	3901      	subs	r1, #1
 8019388:	4402      	add	r2, r0
 801938a:	4290      	cmp	r0, r2
 801938c:	d101      	bne.n	8019392 <memcmp+0xe>
 801938e:	2000      	movs	r0, #0
 8019390:	e005      	b.n	801939e <memcmp+0x1a>
 8019392:	7803      	ldrb	r3, [r0, #0]
 8019394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019398:	42a3      	cmp	r3, r4
 801939a:	d001      	beq.n	80193a0 <memcmp+0x1c>
 801939c:	1b18      	subs	r0, r3, r4
 801939e:	bd10      	pop	{r4, pc}
 80193a0:	3001      	adds	r0, #1
 80193a2:	e7f2      	b.n	801938a <memcmp+0x6>

080193a4 <memmove>:
 80193a4:	4288      	cmp	r0, r1
 80193a6:	b510      	push	{r4, lr}
 80193a8:	eb01 0402 	add.w	r4, r1, r2
 80193ac:	d902      	bls.n	80193b4 <memmove+0x10>
 80193ae:	4284      	cmp	r4, r0
 80193b0:	4623      	mov	r3, r4
 80193b2:	d807      	bhi.n	80193c4 <memmove+0x20>
 80193b4:	1e43      	subs	r3, r0, #1
 80193b6:	42a1      	cmp	r1, r4
 80193b8:	d008      	beq.n	80193cc <memmove+0x28>
 80193ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80193c2:	e7f8      	b.n	80193b6 <memmove+0x12>
 80193c4:	4402      	add	r2, r0
 80193c6:	4601      	mov	r1, r0
 80193c8:	428a      	cmp	r2, r1
 80193ca:	d100      	bne.n	80193ce <memmove+0x2a>
 80193cc:	bd10      	pop	{r4, pc}
 80193ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80193d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80193d6:	e7f7      	b.n	80193c8 <memmove+0x24>

080193d8 <memset>:
 80193d8:	4402      	add	r2, r0
 80193da:	4603      	mov	r3, r0
 80193dc:	4293      	cmp	r3, r2
 80193de:	d100      	bne.n	80193e2 <memset+0xa>
 80193e0:	4770      	bx	lr
 80193e2:	f803 1b01 	strb.w	r1, [r3], #1
 80193e6:	e7f9      	b.n	80193dc <memset+0x4>

080193e8 <strchr>:
 80193e8:	b2c9      	uxtb	r1, r1
 80193ea:	4603      	mov	r3, r0
 80193ec:	4618      	mov	r0, r3
 80193ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193f2:	b112      	cbz	r2, 80193fa <strchr+0x12>
 80193f4:	428a      	cmp	r2, r1
 80193f6:	d1f9      	bne.n	80193ec <strchr+0x4>
 80193f8:	4770      	bx	lr
 80193fa:	2900      	cmp	r1, #0
 80193fc:	bf18      	it	ne
 80193fe:	2000      	movne	r0, #0
 8019400:	4770      	bx	lr

08019402 <strncmp>:
 8019402:	b510      	push	{r4, lr}
 8019404:	b16a      	cbz	r2, 8019422 <strncmp+0x20>
 8019406:	3901      	subs	r1, #1
 8019408:	1884      	adds	r4, r0, r2
 801940a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801940e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019412:	429a      	cmp	r2, r3
 8019414:	d103      	bne.n	801941e <strncmp+0x1c>
 8019416:	42a0      	cmp	r0, r4
 8019418:	d001      	beq.n	801941e <strncmp+0x1c>
 801941a:	2a00      	cmp	r2, #0
 801941c:	d1f5      	bne.n	801940a <strncmp+0x8>
 801941e:	1ad0      	subs	r0, r2, r3
 8019420:	bd10      	pop	{r4, pc}
 8019422:	4610      	mov	r0, r2
 8019424:	e7fc      	b.n	8019420 <strncmp+0x1e>

08019426 <strstr>:
 8019426:	780a      	ldrb	r2, [r1, #0]
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	b96a      	cbnz	r2, 8019448 <strstr+0x22>
 801942c:	bd70      	pop	{r4, r5, r6, pc}
 801942e:	429a      	cmp	r2, r3
 8019430:	d109      	bne.n	8019446 <strstr+0x20>
 8019432:	460c      	mov	r4, r1
 8019434:	4605      	mov	r5, r0
 8019436:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801943a:	2b00      	cmp	r3, #0
 801943c:	d0f6      	beq.n	801942c <strstr+0x6>
 801943e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019442:	429e      	cmp	r6, r3
 8019444:	d0f7      	beq.n	8019436 <strstr+0x10>
 8019446:	3001      	adds	r0, #1
 8019448:	7803      	ldrb	r3, [r0, #0]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d1ef      	bne.n	801942e <strstr+0x8>
 801944e:	4618      	mov	r0, r3
 8019450:	e7ec      	b.n	801942c <strstr+0x6>
	...

08019454 <_close_r>:
 8019454:	b538      	push	{r3, r4, r5, lr}
 8019456:	4d06      	ldr	r5, [pc, #24]	@ (8019470 <_close_r+0x1c>)
 8019458:	2300      	movs	r3, #0
 801945a:	4604      	mov	r4, r0
 801945c:	4608      	mov	r0, r1
 801945e:	602b      	str	r3, [r5, #0]
 8019460:	f7e9 fa24 	bl	80028ac <_close>
 8019464:	1c43      	adds	r3, r0, #1
 8019466:	d102      	bne.n	801946e <_close_r+0x1a>
 8019468:	682b      	ldr	r3, [r5, #0]
 801946a:	b103      	cbz	r3, 801946e <_close_r+0x1a>
 801946c:	6023      	str	r3, [r4, #0]
 801946e:	bd38      	pop	{r3, r4, r5, pc}
 8019470:	2000e448 	.word	0x2000e448

08019474 <_lseek_r>:
 8019474:	b538      	push	{r3, r4, r5, lr}
 8019476:	4d07      	ldr	r5, [pc, #28]	@ (8019494 <_lseek_r+0x20>)
 8019478:	4604      	mov	r4, r0
 801947a:	4608      	mov	r0, r1
 801947c:	4611      	mov	r1, r2
 801947e:	2200      	movs	r2, #0
 8019480:	602a      	str	r2, [r5, #0]
 8019482:	461a      	mov	r2, r3
 8019484:	f7e9 fa39 	bl	80028fa <_lseek>
 8019488:	1c43      	adds	r3, r0, #1
 801948a:	d102      	bne.n	8019492 <_lseek_r+0x1e>
 801948c:	682b      	ldr	r3, [r5, #0]
 801948e:	b103      	cbz	r3, 8019492 <_lseek_r+0x1e>
 8019490:	6023      	str	r3, [r4, #0]
 8019492:	bd38      	pop	{r3, r4, r5, pc}
 8019494:	2000e448 	.word	0x2000e448

08019498 <_read_r>:
 8019498:	b538      	push	{r3, r4, r5, lr}
 801949a:	4d07      	ldr	r5, [pc, #28]	@ (80194b8 <_read_r+0x20>)
 801949c:	4604      	mov	r4, r0
 801949e:	4608      	mov	r0, r1
 80194a0:	4611      	mov	r1, r2
 80194a2:	2200      	movs	r2, #0
 80194a4:	602a      	str	r2, [r5, #0]
 80194a6:	461a      	mov	r2, r3
 80194a8:	f7e9 f9c7 	bl	800283a <_read>
 80194ac:	1c43      	adds	r3, r0, #1
 80194ae:	d102      	bne.n	80194b6 <_read_r+0x1e>
 80194b0:	682b      	ldr	r3, [r5, #0]
 80194b2:	b103      	cbz	r3, 80194b6 <_read_r+0x1e>
 80194b4:	6023      	str	r3, [r4, #0]
 80194b6:	bd38      	pop	{r3, r4, r5, pc}
 80194b8:	2000e448 	.word	0x2000e448

080194bc <_sbrk_r>:
 80194bc:	b538      	push	{r3, r4, r5, lr}
 80194be:	4d06      	ldr	r5, [pc, #24]	@ (80194d8 <_sbrk_r+0x1c>)
 80194c0:	2300      	movs	r3, #0
 80194c2:	4604      	mov	r4, r0
 80194c4:	4608      	mov	r0, r1
 80194c6:	602b      	str	r3, [r5, #0]
 80194c8:	f7e9 fa24 	bl	8002914 <_sbrk>
 80194cc:	1c43      	adds	r3, r0, #1
 80194ce:	d102      	bne.n	80194d6 <_sbrk_r+0x1a>
 80194d0:	682b      	ldr	r3, [r5, #0]
 80194d2:	b103      	cbz	r3, 80194d6 <_sbrk_r+0x1a>
 80194d4:	6023      	str	r3, [r4, #0]
 80194d6:	bd38      	pop	{r3, r4, r5, pc}
 80194d8:	2000e448 	.word	0x2000e448

080194dc <_write_r>:
 80194dc:	b538      	push	{r3, r4, r5, lr}
 80194de:	4d07      	ldr	r5, [pc, #28]	@ (80194fc <_write_r+0x20>)
 80194e0:	4604      	mov	r4, r0
 80194e2:	4608      	mov	r0, r1
 80194e4:	4611      	mov	r1, r2
 80194e6:	2200      	movs	r2, #0
 80194e8:	602a      	str	r2, [r5, #0]
 80194ea:	461a      	mov	r2, r3
 80194ec:	f7e9 f9c2 	bl	8002874 <_write>
 80194f0:	1c43      	adds	r3, r0, #1
 80194f2:	d102      	bne.n	80194fa <_write_r+0x1e>
 80194f4:	682b      	ldr	r3, [r5, #0]
 80194f6:	b103      	cbz	r3, 80194fa <_write_r+0x1e>
 80194f8:	6023      	str	r3, [r4, #0]
 80194fa:	bd38      	pop	{r3, r4, r5, pc}
 80194fc:	2000e448 	.word	0x2000e448

08019500 <__errno>:
 8019500:	4b01      	ldr	r3, [pc, #4]	@ (8019508 <__errno+0x8>)
 8019502:	6818      	ldr	r0, [r3, #0]
 8019504:	4770      	bx	lr
 8019506:	bf00      	nop
 8019508:	200004b0 	.word	0x200004b0

0801950c <__libc_init_array>:
 801950c:	b570      	push	{r4, r5, r6, lr}
 801950e:	4d0d      	ldr	r5, [pc, #52]	@ (8019544 <__libc_init_array+0x38>)
 8019510:	4c0d      	ldr	r4, [pc, #52]	@ (8019548 <__libc_init_array+0x3c>)
 8019512:	1b64      	subs	r4, r4, r5
 8019514:	10a4      	asrs	r4, r4, #2
 8019516:	2600      	movs	r6, #0
 8019518:	42a6      	cmp	r6, r4
 801951a:	d109      	bne.n	8019530 <__libc_init_array+0x24>
 801951c:	4d0b      	ldr	r5, [pc, #44]	@ (801954c <__libc_init_array+0x40>)
 801951e:	4c0c      	ldr	r4, [pc, #48]	@ (8019550 <__libc_init_array+0x44>)
 8019520:	f000 feb8 	bl	801a294 <_init>
 8019524:	1b64      	subs	r4, r4, r5
 8019526:	10a4      	asrs	r4, r4, #2
 8019528:	2600      	movs	r6, #0
 801952a:	42a6      	cmp	r6, r4
 801952c:	d105      	bne.n	801953a <__libc_init_array+0x2e>
 801952e:	bd70      	pop	{r4, r5, r6, pc}
 8019530:	f855 3b04 	ldr.w	r3, [r5], #4
 8019534:	4798      	blx	r3
 8019536:	3601      	adds	r6, #1
 8019538:	e7ee      	b.n	8019518 <__libc_init_array+0xc>
 801953a:	f855 3b04 	ldr.w	r3, [r5], #4
 801953e:	4798      	blx	r3
 8019540:	3601      	adds	r6, #1
 8019542:	e7f2      	b.n	801952a <__libc_init_array+0x1e>
 8019544:	0801b4f4 	.word	0x0801b4f4
 8019548:	0801b4f4 	.word	0x0801b4f4
 801954c:	0801b4f4 	.word	0x0801b4f4
 8019550:	0801b500 	.word	0x0801b500

08019554 <__retarget_lock_init_recursive>:
 8019554:	4770      	bx	lr

08019556 <__retarget_lock_acquire_recursive>:
 8019556:	4770      	bx	lr

08019558 <__retarget_lock_release_recursive>:
 8019558:	4770      	bx	lr

0801955a <strcpy>:
 801955a:	4603      	mov	r3, r0
 801955c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019560:	f803 2b01 	strb.w	r2, [r3], #1
 8019564:	2a00      	cmp	r2, #0
 8019566:	d1f9      	bne.n	801955c <strcpy+0x2>
 8019568:	4770      	bx	lr

0801956a <memcpy>:
 801956a:	440a      	add	r2, r1
 801956c:	4291      	cmp	r1, r2
 801956e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019572:	d100      	bne.n	8019576 <memcpy+0xc>
 8019574:	4770      	bx	lr
 8019576:	b510      	push	{r4, lr}
 8019578:	f811 4b01 	ldrb.w	r4, [r1], #1
 801957c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019580:	4291      	cmp	r1, r2
 8019582:	d1f9      	bne.n	8019578 <memcpy+0xe>
 8019584:	bd10      	pop	{r4, pc}
	...

08019588 <__assert_func>:
 8019588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801958a:	4614      	mov	r4, r2
 801958c:	461a      	mov	r2, r3
 801958e:	4b09      	ldr	r3, [pc, #36]	@ (80195b4 <__assert_func+0x2c>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	4605      	mov	r5, r0
 8019594:	68d8      	ldr	r0, [r3, #12]
 8019596:	b954      	cbnz	r4, 80195ae <__assert_func+0x26>
 8019598:	4b07      	ldr	r3, [pc, #28]	@ (80195b8 <__assert_func+0x30>)
 801959a:	461c      	mov	r4, r3
 801959c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80195a0:	9100      	str	r1, [sp, #0]
 80195a2:	462b      	mov	r3, r5
 80195a4:	4905      	ldr	r1, [pc, #20]	@ (80195bc <__assert_func+0x34>)
 80195a6:	f000 fd3f 	bl	801a028 <fiprintf>
 80195aa:	f000 fdd3 	bl	801a154 <abort>
 80195ae:	4b04      	ldr	r3, [pc, #16]	@ (80195c0 <__assert_func+0x38>)
 80195b0:	e7f4      	b.n	801959c <__assert_func+0x14>
 80195b2:	bf00      	nop
 80195b4:	200004b0 	.word	0x200004b0
 80195b8:	0801b4b7 	.word	0x0801b4b7
 80195bc:	0801b489 	.word	0x0801b489
 80195c0:	0801b47c 	.word	0x0801b47c

080195c4 <__env_lock>:
 80195c4:	4801      	ldr	r0, [pc, #4]	@ (80195cc <__env_lock+0x8>)
 80195c6:	f7ff bfc6 	b.w	8019556 <__retarget_lock_acquire_recursive>
 80195ca:	bf00      	nop
 80195cc:	2000e44c 	.word	0x2000e44c

080195d0 <__env_unlock>:
 80195d0:	4801      	ldr	r0, [pc, #4]	@ (80195d8 <__env_unlock+0x8>)
 80195d2:	f7ff bfc1 	b.w	8019558 <__retarget_lock_release_recursive>
 80195d6:	bf00      	nop
 80195d8:	2000e44c 	.word	0x2000e44c

080195dc <_free_r>:
 80195dc:	b538      	push	{r3, r4, r5, lr}
 80195de:	4605      	mov	r5, r0
 80195e0:	2900      	cmp	r1, #0
 80195e2:	d041      	beq.n	8019668 <_free_r+0x8c>
 80195e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195e8:	1f0c      	subs	r4, r1, #4
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	bfb8      	it	lt
 80195ee:	18e4      	addlt	r4, r4, r3
 80195f0:	f7ff fad2 	bl	8018b98 <__malloc_lock>
 80195f4:	4a1d      	ldr	r2, [pc, #116]	@ (801966c <_free_r+0x90>)
 80195f6:	6813      	ldr	r3, [r2, #0]
 80195f8:	b933      	cbnz	r3, 8019608 <_free_r+0x2c>
 80195fa:	6063      	str	r3, [r4, #4]
 80195fc:	6014      	str	r4, [r2, #0]
 80195fe:	4628      	mov	r0, r5
 8019600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019604:	f7ff bace 	b.w	8018ba4 <__malloc_unlock>
 8019608:	42a3      	cmp	r3, r4
 801960a:	d908      	bls.n	801961e <_free_r+0x42>
 801960c:	6820      	ldr	r0, [r4, #0]
 801960e:	1821      	adds	r1, r4, r0
 8019610:	428b      	cmp	r3, r1
 8019612:	bf01      	itttt	eq
 8019614:	6819      	ldreq	r1, [r3, #0]
 8019616:	685b      	ldreq	r3, [r3, #4]
 8019618:	1809      	addeq	r1, r1, r0
 801961a:	6021      	streq	r1, [r4, #0]
 801961c:	e7ed      	b.n	80195fa <_free_r+0x1e>
 801961e:	461a      	mov	r2, r3
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	b10b      	cbz	r3, 8019628 <_free_r+0x4c>
 8019624:	42a3      	cmp	r3, r4
 8019626:	d9fa      	bls.n	801961e <_free_r+0x42>
 8019628:	6811      	ldr	r1, [r2, #0]
 801962a:	1850      	adds	r0, r2, r1
 801962c:	42a0      	cmp	r0, r4
 801962e:	d10b      	bne.n	8019648 <_free_r+0x6c>
 8019630:	6820      	ldr	r0, [r4, #0]
 8019632:	4401      	add	r1, r0
 8019634:	1850      	adds	r0, r2, r1
 8019636:	4283      	cmp	r3, r0
 8019638:	6011      	str	r1, [r2, #0]
 801963a:	d1e0      	bne.n	80195fe <_free_r+0x22>
 801963c:	6818      	ldr	r0, [r3, #0]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	6053      	str	r3, [r2, #4]
 8019642:	4408      	add	r0, r1
 8019644:	6010      	str	r0, [r2, #0]
 8019646:	e7da      	b.n	80195fe <_free_r+0x22>
 8019648:	d902      	bls.n	8019650 <_free_r+0x74>
 801964a:	230c      	movs	r3, #12
 801964c:	602b      	str	r3, [r5, #0]
 801964e:	e7d6      	b.n	80195fe <_free_r+0x22>
 8019650:	6820      	ldr	r0, [r4, #0]
 8019652:	1821      	adds	r1, r4, r0
 8019654:	428b      	cmp	r3, r1
 8019656:	bf04      	itt	eq
 8019658:	6819      	ldreq	r1, [r3, #0]
 801965a:	685b      	ldreq	r3, [r3, #4]
 801965c:	6063      	str	r3, [r4, #4]
 801965e:	bf04      	itt	eq
 8019660:	1809      	addeq	r1, r1, r0
 8019662:	6021      	streq	r1, [r4, #0]
 8019664:	6054      	str	r4, [r2, #4]
 8019666:	e7ca      	b.n	80195fe <_free_r+0x22>
 8019668:	bd38      	pop	{r3, r4, r5, pc}
 801966a:	bf00      	nop
 801966c:	2000e308 	.word	0x2000e308

08019670 <_malloc_usable_size_r>:
 8019670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019674:	1f18      	subs	r0, r3, #4
 8019676:	2b00      	cmp	r3, #0
 8019678:	bfbc      	itt	lt
 801967a:	580b      	ldrlt	r3, [r1, r0]
 801967c:	18c0      	addlt	r0, r0, r3
 801967e:	4770      	bx	lr

08019680 <__ssputs_r>:
 8019680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019684:	688e      	ldr	r6, [r1, #8]
 8019686:	461f      	mov	r7, r3
 8019688:	42be      	cmp	r6, r7
 801968a:	680b      	ldr	r3, [r1, #0]
 801968c:	4682      	mov	sl, r0
 801968e:	460c      	mov	r4, r1
 8019690:	4690      	mov	r8, r2
 8019692:	d82d      	bhi.n	80196f0 <__ssputs_r+0x70>
 8019694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019698:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801969c:	d026      	beq.n	80196ec <__ssputs_r+0x6c>
 801969e:	6965      	ldr	r5, [r4, #20]
 80196a0:	6909      	ldr	r1, [r1, #16]
 80196a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80196a6:	eba3 0901 	sub.w	r9, r3, r1
 80196aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80196ae:	1c7b      	adds	r3, r7, #1
 80196b0:	444b      	add	r3, r9
 80196b2:	106d      	asrs	r5, r5, #1
 80196b4:	429d      	cmp	r5, r3
 80196b6:	bf38      	it	cc
 80196b8:	461d      	movcc	r5, r3
 80196ba:	0553      	lsls	r3, r2, #21
 80196bc:	d527      	bpl.n	801970e <__ssputs_r+0x8e>
 80196be:	4629      	mov	r1, r5
 80196c0:	f7ff f9ea 	bl	8018a98 <_malloc_r>
 80196c4:	4606      	mov	r6, r0
 80196c6:	b360      	cbz	r0, 8019722 <__ssputs_r+0xa2>
 80196c8:	6921      	ldr	r1, [r4, #16]
 80196ca:	464a      	mov	r2, r9
 80196cc:	f7ff ff4d 	bl	801956a <memcpy>
 80196d0:	89a3      	ldrh	r3, [r4, #12]
 80196d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80196d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80196da:	81a3      	strh	r3, [r4, #12]
 80196dc:	6126      	str	r6, [r4, #16]
 80196de:	6165      	str	r5, [r4, #20]
 80196e0:	444e      	add	r6, r9
 80196e2:	eba5 0509 	sub.w	r5, r5, r9
 80196e6:	6026      	str	r6, [r4, #0]
 80196e8:	60a5      	str	r5, [r4, #8]
 80196ea:	463e      	mov	r6, r7
 80196ec:	42be      	cmp	r6, r7
 80196ee:	d900      	bls.n	80196f2 <__ssputs_r+0x72>
 80196f0:	463e      	mov	r6, r7
 80196f2:	6820      	ldr	r0, [r4, #0]
 80196f4:	4632      	mov	r2, r6
 80196f6:	4641      	mov	r1, r8
 80196f8:	f7ff fe54 	bl	80193a4 <memmove>
 80196fc:	68a3      	ldr	r3, [r4, #8]
 80196fe:	1b9b      	subs	r3, r3, r6
 8019700:	60a3      	str	r3, [r4, #8]
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	4433      	add	r3, r6
 8019706:	6023      	str	r3, [r4, #0]
 8019708:	2000      	movs	r0, #0
 801970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801970e:	462a      	mov	r2, r5
 8019710:	f7ff fac2 	bl	8018c98 <_realloc_r>
 8019714:	4606      	mov	r6, r0
 8019716:	2800      	cmp	r0, #0
 8019718:	d1e0      	bne.n	80196dc <__ssputs_r+0x5c>
 801971a:	6921      	ldr	r1, [r4, #16]
 801971c:	4650      	mov	r0, sl
 801971e:	f7ff ff5d 	bl	80195dc <_free_r>
 8019722:	230c      	movs	r3, #12
 8019724:	f8ca 3000 	str.w	r3, [sl]
 8019728:	89a3      	ldrh	r3, [r4, #12]
 801972a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801972e:	81a3      	strh	r3, [r4, #12]
 8019730:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019734:	e7e9      	b.n	801970a <__ssputs_r+0x8a>
	...

08019738 <_svfiprintf_r>:
 8019738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801973c:	4698      	mov	r8, r3
 801973e:	898b      	ldrh	r3, [r1, #12]
 8019740:	061b      	lsls	r3, r3, #24
 8019742:	b09d      	sub	sp, #116	@ 0x74
 8019744:	4607      	mov	r7, r0
 8019746:	460d      	mov	r5, r1
 8019748:	4614      	mov	r4, r2
 801974a:	d510      	bpl.n	801976e <_svfiprintf_r+0x36>
 801974c:	690b      	ldr	r3, [r1, #16]
 801974e:	b973      	cbnz	r3, 801976e <_svfiprintf_r+0x36>
 8019750:	2140      	movs	r1, #64	@ 0x40
 8019752:	f7ff f9a1 	bl	8018a98 <_malloc_r>
 8019756:	6028      	str	r0, [r5, #0]
 8019758:	6128      	str	r0, [r5, #16]
 801975a:	b930      	cbnz	r0, 801976a <_svfiprintf_r+0x32>
 801975c:	230c      	movs	r3, #12
 801975e:	603b      	str	r3, [r7, #0]
 8019760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019764:	b01d      	add	sp, #116	@ 0x74
 8019766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801976a:	2340      	movs	r3, #64	@ 0x40
 801976c:	616b      	str	r3, [r5, #20]
 801976e:	2300      	movs	r3, #0
 8019770:	9309      	str	r3, [sp, #36]	@ 0x24
 8019772:	2320      	movs	r3, #32
 8019774:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019778:	f8cd 800c 	str.w	r8, [sp, #12]
 801977c:	2330      	movs	r3, #48	@ 0x30
 801977e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801991c <_svfiprintf_r+0x1e4>
 8019782:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019786:	f04f 0901 	mov.w	r9, #1
 801978a:	4623      	mov	r3, r4
 801978c:	469a      	mov	sl, r3
 801978e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019792:	b10a      	cbz	r2, 8019798 <_svfiprintf_r+0x60>
 8019794:	2a25      	cmp	r2, #37	@ 0x25
 8019796:	d1f9      	bne.n	801978c <_svfiprintf_r+0x54>
 8019798:	ebba 0b04 	subs.w	fp, sl, r4
 801979c:	d00b      	beq.n	80197b6 <_svfiprintf_r+0x7e>
 801979e:	465b      	mov	r3, fp
 80197a0:	4622      	mov	r2, r4
 80197a2:	4629      	mov	r1, r5
 80197a4:	4638      	mov	r0, r7
 80197a6:	f7ff ff6b 	bl	8019680 <__ssputs_r>
 80197aa:	3001      	adds	r0, #1
 80197ac:	f000 80a7 	beq.w	80198fe <_svfiprintf_r+0x1c6>
 80197b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80197b2:	445a      	add	r2, fp
 80197b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80197b6:	f89a 3000 	ldrb.w	r3, [sl]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	f000 809f 	beq.w	80198fe <_svfiprintf_r+0x1c6>
 80197c0:	2300      	movs	r3, #0
 80197c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80197c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80197ca:	f10a 0a01 	add.w	sl, sl, #1
 80197ce:	9304      	str	r3, [sp, #16]
 80197d0:	9307      	str	r3, [sp, #28]
 80197d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80197d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80197d8:	4654      	mov	r4, sl
 80197da:	2205      	movs	r2, #5
 80197dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197e0:	484e      	ldr	r0, [pc, #312]	@ (801991c <_svfiprintf_r+0x1e4>)
 80197e2:	f7e6 fd2d 	bl	8000240 <memchr>
 80197e6:	9a04      	ldr	r2, [sp, #16]
 80197e8:	b9d8      	cbnz	r0, 8019822 <_svfiprintf_r+0xea>
 80197ea:	06d0      	lsls	r0, r2, #27
 80197ec:	bf44      	itt	mi
 80197ee:	2320      	movmi	r3, #32
 80197f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80197f4:	0711      	lsls	r1, r2, #28
 80197f6:	bf44      	itt	mi
 80197f8:	232b      	movmi	r3, #43	@ 0x2b
 80197fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80197fe:	f89a 3000 	ldrb.w	r3, [sl]
 8019802:	2b2a      	cmp	r3, #42	@ 0x2a
 8019804:	d015      	beq.n	8019832 <_svfiprintf_r+0xfa>
 8019806:	9a07      	ldr	r2, [sp, #28]
 8019808:	4654      	mov	r4, sl
 801980a:	2000      	movs	r0, #0
 801980c:	f04f 0c0a 	mov.w	ip, #10
 8019810:	4621      	mov	r1, r4
 8019812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019816:	3b30      	subs	r3, #48	@ 0x30
 8019818:	2b09      	cmp	r3, #9
 801981a:	d94b      	bls.n	80198b4 <_svfiprintf_r+0x17c>
 801981c:	b1b0      	cbz	r0, 801984c <_svfiprintf_r+0x114>
 801981e:	9207      	str	r2, [sp, #28]
 8019820:	e014      	b.n	801984c <_svfiprintf_r+0x114>
 8019822:	eba0 0308 	sub.w	r3, r0, r8
 8019826:	fa09 f303 	lsl.w	r3, r9, r3
 801982a:	4313      	orrs	r3, r2
 801982c:	9304      	str	r3, [sp, #16]
 801982e:	46a2      	mov	sl, r4
 8019830:	e7d2      	b.n	80197d8 <_svfiprintf_r+0xa0>
 8019832:	9b03      	ldr	r3, [sp, #12]
 8019834:	1d19      	adds	r1, r3, #4
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	9103      	str	r1, [sp, #12]
 801983a:	2b00      	cmp	r3, #0
 801983c:	bfbb      	ittet	lt
 801983e:	425b      	neglt	r3, r3
 8019840:	f042 0202 	orrlt.w	r2, r2, #2
 8019844:	9307      	strge	r3, [sp, #28]
 8019846:	9307      	strlt	r3, [sp, #28]
 8019848:	bfb8      	it	lt
 801984a:	9204      	strlt	r2, [sp, #16]
 801984c:	7823      	ldrb	r3, [r4, #0]
 801984e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019850:	d10a      	bne.n	8019868 <_svfiprintf_r+0x130>
 8019852:	7863      	ldrb	r3, [r4, #1]
 8019854:	2b2a      	cmp	r3, #42	@ 0x2a
 8019856:	d132      	bne.n	80198be <_svfiprintf_r+0x186>
 8019858:	9b03      	ldr	r3, [sp, #12]
 801985a:	1d1a      	adds	r2, r3, #4
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	9203      	str	r2, [sp, #12]
 8019860:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019864:	3402      	adds	r4, #2
 8019866:	9305      	str	r3, [sp, #20]
 8019868:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801992c <_svfiprintf_r+0x1f4>
 801986c:	7821      	ldrb	r1, [r4, #0]
 801986e:	2203      	movs	r2, #3
 8019870:	4650      	mov	r0, sl
 8019872:	f7e6 fce5 	bl	8000240 <memchr>
 8019876:	b138      	cbz	r0, 8019888 <_svfiprintf_r+0x150>
 8019878:	9b04      	ldr	r3, [sp, #16]
 801987a:	eba0 000a 	sub.w	r0, r0, sl
 801987e:	2240      	movs	r2, #64	@ 0x40
 8019880:	4082      	lsls	r2, r0
 8019882:	4313      	orrs	r3, r2
 8019884:	3401      	adds	r4, #1
 8019886:	9304      	str	r3, [sp, #16]
 8019888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801988c:	4824      	ldr	r0, [pc, #144]	@ (8019920 <_svfiprintf_r+0x1e8>)
 801988e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019892:	2206      	movs	r2, #6
 8019894:	f7e6 fcd4 	bl	8000240 <memchr>
 8019898:	2800      	cmp	r0, #0
 801989a:	d036      	beq.n	801990a <_svfiprintf_r+0x1d2>
 801989c:	4b21      	ldr	r3, [pc, #132]	@ (8019924 <_svfiprintf_r+0x1ec>)
 801989e:	bb1b      	cbnz	r3, 80198e8 <_svfiprintf_r+0x1b0>
 80198a0:	9b03      	ldr	r3, [sp, #12]
 80198a2:	3307      	adds	r3, #7
 80198a4:	f023 0307 	bic.w	r3, r3, #7
 80198a8:	3308      	adds	r3, #8
 80198aa:	9303      	str	r3, [sp, #12]
 80198ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198ae:	4433      	add	r3, r6
 80198b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80198b2:	e76a      	b.n	801978a <_svfiprintf_r+0x52>
 80198b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80198b8:	460c      	mov	r4, r1
 80198ba:	2001      	movs	r0, #1
 80198bc:	e7a8      	b.n	8019810 <_svfiprintf_r+0xd8>
 80198be:	2300      	movs	r3, #0
 80198c0:	3401      	adds	r4, #1
 80198c2:	9305      	str	r3, [sp, #20]
 80198c4:	4619      	mov	r1, r3
 80198c6:	f04f 0c0a 	mov.w	ip, #10
 80198ca:	4620      	mov	r0, r4
 80198cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80198d0:	3a30      	subs	r2, #48	@ 0x30
 80198d2:	2a09      	cmp	r2, #9
 80198d4:	d903      	bls.n	80198de <_svfiprintf_r+0x1a6>
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d0c6      	beq.n	8019868 <_svfiprintf_r+0x130>
 80198da:	9105      	str	r1, [sp, #20]
 80198dc:	e7c4      	b.n	8019868 <_svfiprintf_r+0x130>
 80198de:	fb0c 2101 	mla	r1, ip, r1, r2
 80198e2:	4604      	mov	r4, r0
 80198e4:	2301      	movs	r3, #1
 80198e6:	e7f0      	b.n	80198ca <_svfiprintf_r+0x192>
 80198e8:	ab03      	add	r3, sp, #12
 80198ea:	9300      	str	r3, [sp, #0]
 80198ec:	462a      	mov	r2, r5
 80198ee:	4b0e      	ldr	r3, [pc, #56]	@ (8019928 <_svfiprintf_r+0x1f0>)
 80198f0:	a904      	add	r1, sp, #16
 80198f2:	4638      	mov	r0, r7
 80198f4:	f3af 8000 	nop.w
 80198f8:	1c42      	adds	r2, r0, #1
 80198fa:	4606      	mov	r6, r0
 80198fc:	d1d6      	bne.n	80198ac <_svfiprintf_r+0x174>
 80198fe:	89ab      	ldrh	r3, [r5, #12]
 8019900:	065b      	lsls	r3, r3, #25
 8019902:	f53f af2d 	bmi.w	8019760 <_svfiprintf_r+0x28>
 8019906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019908:	e72c      	b.n	8019764 <_svfiprintf_r+0x2c>
 801990a:	ab03      	add	r3, sp, #12
 801990c:	9300      	str	r3, [sp, #0]
 801990e:	462a      	mov	r2, r5
 8019910:	4b05      	ldr	r3, [pc, #20]	@ (8019928 <_svfiprintf_r+0x1f0>)
 8019912:	a904      	add	r1, sp, #16
 8019914:	4638      	mov	r0, r7
 8019916:	f000 f9bb 	bl	8019c90 <_printf_i>
 801991a:	e7ed      	b.n	80198f8 <_svfiprintf_r+0x1c0>
 801991c:	0801b4b8 	.word	0x0801b4b8
 8019920:	0801b4c2 	.word	0x0801b4c2
 8019924:	00000000 	.word	0x00000000
 8019928:	08019681 	.word	0x08019681
 801992c:	0801b4be 	.word	0x0801b4be

08019930 <__sfputc_r>:
 8019930:	6893      	ldr	r3, [r2, #8]
 8019932:	3b01      	subs	r3, #1
 8019934:	2b00      	cmp	r3, #0
 8019936:	b410      	push	{r4}
 8019938:	6093      	str	r3, [r2, #8]
 801993a:	da08      	bge.n	801994e <__sfputc_r+0x1e>
 801993c:	6994      	ldr	r4, [r2, #24]
 801993e:	42a3      	cmp	r3, r4
 8019940:	db01      	blt.n	8019946 <__sfputc_r+0x16>
 8019942:	290a      	cmp	r1, #10
 8019944:	d103      	bne.n	801994e <__sfputc_r+0x1e>
 8019946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801994a:	f7ff bc87 	b.w	801925c <__swbuf_r>
 801994e:	6813      	ldr	r3, [r2, #0]
 8019950:	1c58      	adds	r0, r3, #1
 8019952:	6010      	str	r0, [r2, #0]
 8019954:	7019      	strb	r1, [r3, #0]
 8019956:	4608      	mov	r0, r1
 8019958:	f85d 4b04 	ldr.w	r4, [sp], #4
 801995c:	4770      	bx	lr

0801995e <__sfputs_r>:
 801995e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019960:	4606      	mov	r6, r0
 8019962:	460f      	mov	r7, r1
 8019964:	4614      	mov	r4, r2
 8019966:	18d5      	adds	r5, r2, r3
 8019968:	42ac      	cmp	r4, r5
 801996a:	d101      	bne.n	8019970 <__sfputs_r+0x12>
 801996c:	2000      	movs	r0, #0
 801996e:	e007      	b.n	8019980 <__sfputs_r+0x22>
 8019970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019974:	463a      	mov	r2, r7
 8019976:	4630      	mov	r0, r6
 8019978:	f7ff ffda 	bl	8019930 <__sfputc_r>
 801997c:	1c43      	adds	r3, r0, #1
 801997e:	d1f3      	bne.n	8019968 <__sfputs_r+0xa>
 8019980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019984 <_vfiprintf_r>:
 8019984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	460d      	mov	r5, r1
 801998a:	b09d      	sub	sp, #116	@ 0x74
 801998c:	4614      	mov	r4, r2
 801998e:	4698      	mov	r8, r3
 8019990:	4606      	mov	r6, r0
 8019992:	b118      	cbz	r0, 801999c <_vfiprintf_r+0x18>
 8019994:	6a03      	ldr	r3, [r0, #32]
 8019996:	b90b      	cbnz	r3, 801999c <_vfiprintf_r+0x18>
 8019998:	f7ff fab0 	bl	8018efc <__sinit>
 801999c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801999e:	07d9      	lsls	r1, r3, #31
 80199a0:	d405      	bmi.n	80199ae <_vfiprintf_r+0x2a>
 80199a2:	89ab      	ldrh	r3, [r5, #12]
 80199a4:	059a      	lsls	r2, r3, #22
 80199a6:	d402      	bmi.n	80199ae <_vfiprintf_r+0x2a>
 80199a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199aa:	f7ff fdd4 	bl	8019556 <__retarget_lock_acquire_recursive>
 80199ae:	89ab      	ldrh	r3, [r5, #12]
 80199b0:	071b      	lsls	r3, r3, #28
 80199b2:	d501      	bpl.n	80199b8 <_vfiprintf_r+0x34>
 80199b4:	692b      	ldr	r3, [r5, #16]
 80199b6:	b99b      	cbnz	r3, 80199e0 <_vfiprintf_r+0x5c>
 80199b8:	4629      	mov	r1, r5
 80199ba:	4630      	mov	r0, r6
 80199bc:	f7ff fc8c 	bl	80192d8 <__swsetup_r>
 80199c0:	b170      	cbz	r0, 80199e0 <_vfiprintf_r+0x5c>
 80199c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80199c4:	07dc      	lsls	r4, r3, #31
 80199c6:	d504      	bpl.n	80199d2 <_vfiprintf_r+0x4e>
 80199c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199cc:	b01d      	add	sp, #116	@ 0x74
 80199ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d2:	89ab      	ldrh	r3, [r5, #12]
 80199d4:	0598      	lsls	r0, r3, #22
 80199d6:	d4f7      	bmi.n	80199c8 <_vfiprintf_r+0x44>
 80199d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80199da:	f7ff fdbd 	bl	8019558 <__retarget_lock_release_recursive>
 80199de:	e7f3      	b.n	80199c8 <_vfiprintf_r+0x44>
 80199e0:	2300      	movs	r3, #0
 80199e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80199e4:	2320      	movs	r3, #32
 80199e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80199ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80199ee:	2330      	movs	r3, #48	@ 0x30
 80199f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019ba0 <_vfiprintf_r+0x21c>
 80199f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80199f8:	f04f 0901 	mov.w	r9, #1
 80199fc:	4623      	mov	r3, r4
 80199fe:	469a      	mov	sl, r3
 8019a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a04:	b10a      	cbz	r2, 8019a0a <_vfiprintf_r+0x86>
 8019a06:	2a25      	cmp	r2, #37	@ 0x25
 8019a08:	d1f9      	bne.n	80199fe <_vfiprintf_r+0x7a>
 8019a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8019a0e:	d00b      	beq.n	8019a28 <_vfiprintf_r+0xa4>
 8019a10:	465b      	mov	r3, fp
 8019a12:	4622      	mov	r2, r4
 8019a14:	4629      	mov	r1, r5
 8019a16:	4630      	mov	r0, r6
 8019a18:	f7ff ffa1 	bl	801995e <__sfputs_r>
 8019a1c:	3001      	adds	r0, #1
 8019a1e:	f000 80a7 	beq.w	8019b70 <_vfiprintf_r+0x1ec>
 8019a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019a24:	445a      	add	r2, fp
 8019a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8019a28:	f89a 3000 	ldrb.w	r3, [sl]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	f000 809f 	beq.w	8019b70 <_vfiprintf_r+0x1ec>
 8019a32:	2300      	movs	r3, #0
 8019a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a3c:	f10a 0a01 	add.w	sl, sl, #1
 8019a40:	9304      	str	r3, [sp, #16]
 8019a42:	9307      	str	r3, [sp, #28]
 8019a44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019a48:	931a      	str	r3, [sp, #104]	@ 0x68
 8019a4a:	4654      	mov	r4, sl
 8019a4c:	2205      	movs	r2, #5
 8019a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a52:	4853      	ldr	r0, [pc, #332]	@ (8019ba0 <_vfiprintf_r+0x21c>)
 8019a54:	f7e6 fbf4 	bl	8000240 <memchr>
 8019a58:	9a04      	ldr	r2, [sp, #16]
 8019a5a:	b9d8      	cbnz	r0, 8019a94 <_vfiprintf_r+0x110>
 8019a5c:	06d1      	lsls	r1, r2, #27
 8019a5e:	bf44      	itt	mi
 8019a60:	2320      	movmi	r3, #32
 8019a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a66:	0713      	lsls	r3, r2, #28
 8019a68:	bf44      	itt	mi
 8019a6a:	232b      	movmi	r3, #43	@ 0x2b
 8019a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a70:	f89a 3000 	ldrb.w	r3, [sl]
 8019a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a76:	d015      	beq.n	8019aa4 <_vfiprintf_r+0x120>
 8019a78:	9a07      	ldr	r2, [sp, #28]
 8019a7a:	4654      	mov	r4, sl
 8019a7c:	2000      	movs	r0, #0
 8019a7e:	f04f 0c0a 	mov.w	ip, #10
 8019a82:	4621      	mov	r1, r4
 8019a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a88:	3b30      	subs	r3, #48	@ 0x30
 8019a8a:	2b09      	cmp	r3, #9
 8019a8c:	d94b      	bls.n	8019b26 <_vfiprintf_r+0x1a2>
 8019a8e:	b1b0      	cbz	r0, 8019abe <_vfiprintf_r+0x13a>
 8019a90:	9207      	str	r2, [sp, #28]
 8019a92:	e014      	b.n	8019abe <_vfiprintf_r+0x13a>
 8019a94:	eba0 0308 	sub.w	r3, r0, r8
 8019a98:	fa09 f303 	lsl.w	r3, r9, r3
 8019a9c:	4313      	orrs	r3, r2
 8019a9e:	9304      	str	r3, [sp, #16]
 8019aa0:	46a2      	mov	sl, r4
 8019aa2:	e7d2      	b.n	8019a4a <_vfiprintf_r+0xc6>
 8019aa4:	9b03      	ldr	r3, [sp, #12]
 8019aa6:	1d19      	adds	r1, r3, #4
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	9103      	str	r1, [sp, #12]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	bfbb      	ittet	lt
 8019ab0:	425b      	neglt	r3, r3
 8019ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8019ab6:	9307      	strge	r3, [sp, #28]
 8019ab8:	9307      	strlt	r3, [sp, #28]
 8019aba:	bfb8      	it	lt
 8019abc:	9204      	strlt	r2, [sp, #16]
 8019abe:	7823      	ldrb	r3, [r4, #0]
 8019ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ac2:	d10a      	bne.n	8019ada <_vfiprintf_r+0x156>
 8019ac4:	7863      	ldrb	r3, [r4, #1]
 8019ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ac8:	d132      	bne.n	8019b30 <_vfiprintf_r+0x1ac>
 8019aca:	9b03      	ldr	r3, [sp, #12]
 8019acc:	1d1a      	adds	r2, r3, #4
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	9203      	str	r2, [sp, #12]
 8019ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ad6:	3402      	adds	r4, #2
 8019ad8:	9305      	str	r3, [sp, #20]
 8019ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019bb0 <_vfiprintf_r+0x22c>
 8019ade:	7821      	ldrb	r1, [r4, #0]
 8019ae0:	2203      	movs	r2, #3
 8019ae2:	4650      	mov	r0, sl
 8019ae4:	f7e6 fbac 	bl	8000240 <memchr>
 8019ae8:	b138      	cbz	r0, 8019afa <_vfiprintf_r+0x176>
 8019aea:	9b04      	ldr	r3, [sp, #16]
 8019aec:	eba0 000a 	sub.w	r0, r0, sl
 8019af0:	2240      	movs	r2, #64	@ 0x40
 8019af2:	4082      	lsls	r2, r0
 8019af4:	4313      	orrs	r3, r2
 8019af6:	3401      	adds	r4, #1
 8019af8:	9304      	str	r3, [sp, #16]
 8019afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019afe:	4829      	ldr	r0, [pc, #164]	@ (8019ba4 <_vfiprintf_r+0x220>)
 8019b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019b04:	2206      	movs	r2, #6
 8019b06:	f7e6 fb9b 	bl	8000240 <memchr>
 8019b0a:	2800      	cmp	r0, #0
 8019b0c:	d03f      	beq.n	8019b8e <_vfiprintf_r+0x20a>
 8019b0e:	4b26      	ldr	r3, [pc, #152]	@ (8019ba8 <_vfiprintf_r+0x224>)
 8019b10:	bb1b      	cbnz	r3, 8019b5a <_vfiprintf_r+0x1d6>
 8019b12:	9b03      	ldr	r3, [sp, #12]
 8019b14:	3307      	adds	r3, #7
 8019b16:	f023 0307 	bic.w	r3, r3, #7
 8019b1a:	3308      	adds	r3, #8
 8019b1c:	9303      	str	r3, [sp, #12]
 8019b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b20:	443b      	add	r3, r7
 8019b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b24:	e76a      	b.n	80199fc <_vfiprintf_r+0x78>
 8019b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b2a:	460c      	mov	r4, r1
 8019b2c:	2001      	movs	r0, #1
 8019b2e:	e7a8      	b.n	8019a82 <_vfiprintf_r+0xfe>
 8019b30:	2300      	movs	r3, #0
 8019b32:	3401      	adds	r4, #1
 8019b34:	9305      	str	r3, [sp, #20]
 8019b36:	4619      	mov	r1, r3
 8019b38:	f04f 0c0a 	mov.w	ip, #10
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b42:	3a30      	subs	r2, #48	@ 0x30
 8019b44:	2a09      	cmp	r2, #9
 8019b46:	d903      	bls.n	8019b50 <_vfiprintf_r+0x1cc>
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d0c6      	beq.n	8019ada <_vfiprintf_r+0x156>
 8019b4c:	9105      	str	r1, [sp, #20]
 8019b4e:	e7c4      	b.n	8019ada <_vfiprintf_r+0x156>
 8019b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b54:	4604      	mov	r4, r0
 8019b56:	2301      	movs	r3, #1
 8019b58:	e7f0      	b.n	8019b3c <_vfiprintf_r+0x1b8>
 8019b5a:	ab03      	add	r3, sp, #12
 8019b5c:	9300      	str	r3, [sp, #0]
 8019b5e:	462a      	mov	r2, r5
 8019b60:	4b12      	ldr	r3, [pc, #72]	@ (8019bac <_vfiprintf_r+0x228>)
 8019b62:	a904      	add	r1, sp, #16
 8019b64:	4630      	mov	r0, r6
 8019b66:	f3af 8000 	nop.w
 8019b6a:	4607      	mov	r7, r0
 8019b6c:	1c78      	adds	r0, r7, #1
 8019b6e:	d1d6      	bne.n	8019b1e <_vfiprintf_r+0x19a>
 8019b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019b72:	07d9      	lsls	r1, r3, #31
 8019b74:	d405      	bmi.n	8019b82 <_vfiprintf_r+0x1fe>
 8019b76:	89ab      	ldrh	r3, [r5, #12]
 8019b78:	059a      	lsls	r2, r3, #22
 8019b7a:	d402      	bmi.n	8019b82 <_vfiprintf_r+0x1fe>
 8019b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019b7e:	f7ff fceb 	bl	8019558 <__retarget_lock_release_recursive>
 8019b82:	89ab      	ldrh	r3, [r5, #12]
 8019b84:	065b      	lsls	r3, r3, #25
 8019b86:	f53f af1f 	bmi.w	80199c8 <_vfiprintf_r+0x44>
 8019b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b8c:	e71e      	b.n	80199cc <_vfiprintf_r+0x48>
 8019b8e:	ab03      	add	r3, sp, #12
 8019b90:	9300      	str	r3, [sp, #0]
 8019b92:	462a      	mov	r2, r5
 8019b94:	4b05      	ldr	r3, [pc, #20]	@ (8019bac <_vfiprintf_r+0x228>)
 8019b96:	a904      	add	r1, sp, #16
 8019b98:	4630      	mov	r0, r6
 8019b9a:	f000 f879 	bl	8019c90 <_printf_i>
 8019b9e:	e7e4      	b.n	8019b6a <_vfiprintf_r+0x1e6>
 8019ba0:	0801b4b8 	.word	0x0801b4b8
 8019ba4:	0801b4c2 	.word	0x0801b4c2
 8019ba8:	00000000 	.word	0x00000000
 8019bac:	0801995f 	.word	0x0801995f
 8019bb0:	0801b4be 	.word	0x0801b4be

08019bb4 <_printf_common>:
 8019bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bb8:	4616      	mov	r6, r2
 8019bba:	4698      	mov	r8, r3
 8019bbc:	688a      	ldr	r2, [r1, #8]
 8019bbe:	690b      	ldr	r3, [r1, #16]
 8019bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019bc4:	4293      	cmp	r3, r2
 8019bc6:	bfb8      	it	lt
 8019bc8:	4613      	movlt	r3, r2
 8019bca:	6033      	str	r3, [r6, #0]
 8019bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019bd0:	4607      	mov	r7, r0
 8019bd2:	460c      	mov	r4, r1
 8019bd4:	b10a      	cbz	r2, 8019bda <_printf_common+0x26>
 8019bd6:	3301      	adds	r3, #1
 8019bd8:	6033      	str	r3, [r6, #0]
 8019bda:	6823      	ldr	r3, [r4, #0]
 8019bdc:	0699      	lsls	r1, r3, #26
 8019bde:	bf42      	ittt	mi
 8019be0:	6833      	ldrmi	r3, [r6, #0]
 8019be2:	3302      	addmi	r3, #2
 8019be4:	6033      	strmi	r3, [r6, #0]
 8019be6:	6825      	ldr	r5, [r4, #0]
 8019be8:	f015 0506 	ands.w	r5, r5, #6
 8019bec:	d106      	bne.n	8019bfc <_printf_common+0x48>
 8019bee:	f104 0a19 	add.w	sl, r4, #25
 8019bf2:	68e3      	ldr	r3, [r4, #12]
 8019bf4:	6832      	ldr	r2, [r6, #0]
 8019bf6:	1a9b      	subs	r3, r3, r2
 8019bf8:	42ab      	cmp	r3, r5
 8019bfa:	dc26      	bgt.n	8019c4a <_printf_common+0x96>
 8019bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019c00:	6822      	ldr	r2, [r4, #0]
 8019c02:	3b00      	subs	r3, #0
 8019c04:	bf18      	it	ne
 8019c06:	2301      	movne	r3, #1
 8019c08:	0692      	lsls	r2, r2, #26
 8019c0a:	d42b      	bmi.n	8019c64 <_printf_common+0xb0>
 8019c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019c10:	4641      	mov	r1, r8
 8019c12:	4638      	mov	r0, r7
 8019c14:	47c8      	blx	r9
 8019c16:	3001      	adds	r0, #1
 8019c18:	d01e      	beq.n	8019c58 <_printf_common+0xa4>
 8019c1a:	6823      	ldr	r3, [r4, #0]
 8019c1c:	6922      	ldr	r2, [r4, #16]
 8019c1e:	f003 0306 	and.w	r3, r3, #6
 8019c22:	2b04      	cmp	r3, #4
 8019c24:	bf02      	ittt	eq
 8019c26:	68e5      	ldreq	r5, [r4, #12]
 8019c28:	6833      	ldreq	r3, [r6, #0]
 8019c2a:	1aed      	subeq	r5, r5, r3
 8019c2c:	68a3      	ldr	r3, [r4, #8]
 8019c2e:	bf0c      	ite	eq
 8019c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019c34:	2500      	movne	r5, #0
 8019c36:	4293      	cmp	r3, r2
 8019c38:	bfc4      	itt	gt
 8019c3a:	1a9b      	subgt	r3, r3, r2
 8019c3c:	18ed      	addgt	r5, r5, r3
 8019c3e:	2600      	movs	r6, #0
 8019c40:	341a      	adds	r4, #26
 8019c42:	42b5      	cmp	r5, r6
 8019c44:	d11a      	bne.n	8019c7c <_printf_common+0xc8>
 8019c46:	2000      	movs	r0, #0
 8019c48:	e008      	b.n	8019c5c <_printf_common+0xa8>
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	4652      	mov	r2, sl
 8019c4e:	4641      	mov	r1, r8
 8019c50:	4638      	mov	r0, r7
 8019c52:	47c8      	blx	r9
 8019c54:	3001      	adds	r0, #1
 8019c56:	d103      	bne.n	8019c60 <_printf_common+0xac>
 8019c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c60:	3501      	adds	r5, #1
 8019c62:	e7c6      	b.n	8019bf2 <_printf_common+0x3e>
 8019c64:	18e1      	adds	r1, r4, r3
 8019c66:	1c5a      	adds	r2, r3, #1
 8019c68:	2030      	movs	r0, #48	@ 0x30
 8019c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019c6e:	4422      	add	r2, r4
 8019c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019c78:	3302      	adds	r3, #2
 8019c7a:	e7c7      	b.n	8019c0c <_printf_common+0x58>
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	4622      	mov	r2, r4
 8019c80:	4641      	mov	r1, r8
 8019c82:	4638      	mov	r0, r7
 8019c84:	47c8      	blx	r9
 8019c86:	3001      	adds	r0, #1
 8019c88:	d0e6      	beq.n	8019c58 <_printf_common+0xa4>
 8019c8a:	3601      	adds	r6, #1
 8019c8c:	e7d9      	b.n	8019c42 <_printf_common+0x8e>
	...

08019c90 <_printf_i>:
 8019c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c94:	7e0f      	ldrb	r7, [r1, #24]
 8019c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019c98:	2f78      	cmp	r7, #120	@ 0x78
 8019c9a:	4691      	mov	r9, r2
 8019c9c:	4680      	mov	r8, r0
 8019c9e:	460c      	mov	r4, r1
 8019ca0:	469a      	mov	sl, r3
 8019ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019ca6:	d807      	bhi.n	8019cb8 <_printf_i+0x28>
 8019ca8:	2f62      	cmp	r7, #98	@ 0x62
 8019caa:	d80a      	bhi.n	8019cc2 <_printf_i+0x32>
 8019cac:	2f00      	cmp	r7, #0
 8019cae:	f000 80d2 	beq.w	8019e56 <_printf_i+0x1c6>
 8019cb2:	2f58      	cmp	r7, #88	@ 0x58
 8019cb4:	f000 80b9 	beq.w	8019e2a <_printf_i+0x19a>
 8019cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019cc0:	e03a      	b.n	8019d38 <_printf_i+0xa8>
 8019cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019cc6:	2b15      	cmp	r3, #21
 8019cc8:	d8f6      	bhi.n	8019cb8 <_printf_i+0x28>
 8019cca:	a101      	add	r1, pc, #4	@ (adr r1, 8019cd0 <_printf_i+0x40>)
 8019ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019cd0:	08019d29 	.word	0x08019d29
 8019cd4:	08019d3d 	.word	0x08019d3d
 8019cd8:	08019cb9 	.word	0x08019cb9
 8019cdc:	08019cb9 	.word	0x08019cb9
 8019ce0:	08019cb9 	.word	0x08019cb9
 8019ce4:	08019cb9 	.word	0x08019cb9
 8019ce8:	08019d3d 	.word	0x08019d3d
 8019cec:	08019cb9 	.word	0x08019cb9
 8019cf0:	08019cb9 	.word	0x08019cb9
 8019cf4:	08019cb9 	.word	0x08019cb9
 8019cf8:	08019cb9 	.word	0x08019cb9
 8019cfc:	08019e3d 	.word	0x08019e3d
 8019d00:	08019d67 	.word	0x08019d67
 8019d04:	08019df7 	.word	0x08019df7
 8019d08:	08019cb9 	.word	0x08019cb9
 8019d0c:	08019cb9 	.word	0x08019cb9
 8019d10:	08019e5f 	.word	0x08019e5f
 8019d14:	08019cb9 	.word	0x08019cb9
 8019d18:	08019d67 	.word	0x08019d67
 8019d1c:	08019cb9 	.word	0x08019cb9
 8019d20:	08019cb9 	.word	0x08019cb9
 8019d24:	08019dff 	.word	0x08019dff
 8019d28:	6833      	ldr	r3, [r6, #0]
 8019d2a:	1d1a      	adds	r2, r3, #4
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	6032      	str	r2, [r6, #0]
 8019d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e09d      	b.n	8019e78 <_printf_i+0x1e8>
 8019d3c:	6833      	ldr	r3, [r6, #0]
 8019d3e:	6820      	ldr	r0, [r4, #0]
 8019d40:	1d19      	adds	r1, r3, #4
 8019d42:	6031      	str	r1, [r6, #0]
 8019d44:	0606      	lsls	r6, r0, #24
 8019d46:	d501      	bpl.n	8019d4c <_printf_i+0xbc>
 8019d48:	681d      	ldr	r5, [r3, #0]
 8019d4a:	e003      	b.n	8019d54 <_printf_i+0xc4>
 8019d4c:	0645      	lsls	r5, r0, #25
 8019d4e:	d5fb      	bpl.n	8019d48 <_printf_i+0xb8>
 8019d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019d54:	2d00      	cmp	r5, #0
 8019d56:	da03      	bge.n	8019d60 <_printf_i+0xd0>
 8019d58:	232d      	movs	r3, #45	@ 0x2d
 8019d5a:	426d      	negs	r5, r5
 8019d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d60:	4859      	ldr	r0, [pc, #356]	@ (8019ec8 <_printf_i+0x238>)
 8019d62:	230a      	movs	r3, #10
 8019d64:	e011      	b.n	8019d8a <_printf_i+0xfa>
 8019d66:	6821      	ldr	r1, [r4, #0]
 8019d68:	6833      	ldr	r3, [r6, #0]
 8019d6a:	0608      	lsls	r0, r1, #24
 8019d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019d70:	d402      	bmi.n	8019d78 <_printf_i+0xe8>
 8019d72:	0649      	lsls	r1, r1, #25
 8019d74:	bf48      	it	mi
 8019d76:	b2ad      	uxthmi	r5, r5
 8019d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8019d7a:	4853      	ldr	r0, [pc, #332]	@ (8019ec8 <_printf_i+0x238>)
 8019d7c:	6033      	str	r3, [r6, #0]
 8019d7e:	bf14      	ite	ne
 8019d80:	230a      	movne	r3, #10
 8019d82:	2308      	moveq	r3, #8
 8019d84:	2100      	movs	r1, #0
 8019d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019d8a:	6866      	ldr	r6, [r4, #4]
 8019d8c:	60a6      	str	r6, [r4, #8]
 8019d8e:	2e00      	cmp	r6, #0
 8019d90:	bfa2      	ittt	ge
 8019d92:	6821      	ldrge	r1, [r4, #0]
 8019d94:	f021 0104 	bicge.w	r1, r1, #4
 8019d98:	6021      	strge	r1, [r4, #0]
 8019d9a:	b90d      	cbnz	r5, 8019da0 <_printf_i+0x110>
 8019d9c:	2e00      	cmp	r6, #0
 8019d9e:	d04b      	beq.n	8019e38 <_printf_i+0x1a8>
 8019da0:	4616      	mov	r6, r2
 8019da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8019da6:	fb03 5711 	mls	r7, r3, r1, r5
 8019daa:	5dc7      	ldrb	r7, [r0, r7]
 8019dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019db0:	462f      	mov	r7, r5
 8019db2:	42bb      	cmp	r3, r7
 8019db4:	460d      	mov	r5, r1
 8019db6:	d9f4      	bls.n	8019da2 <_printf_i+0x112>
 8019db8:	2b08      	cmp	r3, #8
 8019dba:	d10b      	bne.n	8019dd4 <_printf_i+0x144>
 8019dbc:	6823      	ldr	r3, [r4, #0]
 8019dbe:	07df      	lsls	r7, r3, #31
 8019dc0:	d508      	bpl.n	8019dd4 <_printf_i+0x144>
 8019dc2:	6923      	ldr	r3, [r4, #16]
 8019dc4:	6861      	ldr	r1, [r4, #4]
 8019dc6:	4299      	cmp	r1, r3
 8019dc8:	bfde      	ittt	le
 8019dca:	2330      	movle	r3, #48	@ 0x30
 8019dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019dd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019dd4:	1b92      	subs	r2, r2, r6
 8019dd6:	6122      	str	r2, [r4, #16]
 8019dd8:	f8cd a000 	str.w	sl, [sp]
 8019ddc:	464b      	mov	r3, r9
 8019dde:	aa03      	add	r2, sp, #12
 8019de0:	4621      	mov	r1, r4
 8019de2:	4640      	mov	r0, r8
 8019de4:	f7ff fee6 	bl	8019bb4 <_printf_common>
 8019de8:	3001      	adds	r0, #1
 8019dea:	d14a      	bne.n	8019e82 <_printf_i+0x1f2>
 8019dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019df0:	b004      	add	sp, #16
 8019df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019df6:	6823      	ldr	r3, [r4, #0]
 8019df8:	f043 0320 	orr.w	r3, r3, #32
 8019dfc:	6023      	str	r3, [r4, #0]
 8019dfe:	4833      	ldr	r0, [pc, #204]	@ (8019ecc <_printf_i+0x23c>)
 8019e00:	2778      	movs	r7, #120	@ 0x78
 8019e02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019e06:	6823      	ldr	r3, [r4, #0]
 8019e08:	6831      	ldr	r1, [r6, #0]
 8019e0a:	061f      	lsls	r7, r3, #24
 8019e0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019e10:	d402      	bmi.n	8019e18 <_printf_i+0x188>
 8019e12:	065f      	lsls	r7, r3, #25
 8019e14:	bf48      	it	mi
 8019e16:	b2ad      	uxthmi	r5, r5
 8019e18:	6031      	str	r1, [r6, #0]
 8019e1a:	07d9      	lsls	r1, r3, #31
 8019e1c:	bf44      	itt	mi
 8019e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8019e22:	6023      	strmi	r3, [r4, #0]
 8019e24:	b11d      	cbz	r5, 8019e2e <_printf_i+0x19e>
 8019e26:	2310      	movs	r3, #16
 8019e28:	e7ac      	b.n	8019d84 <_printf_i+0xf4>
 8019e2a:	4827      	ldr	r0, [pc, #156]	@ (8019ec8 <_printf_i+0x238>)
 8019e2c:	e7e9      	b.n	8019e02 <_printf_i+0x172>
 8019e2e:	6823      	ldr	r3, [r4, #0]
 8019e30:	f023 0320 	bic.w	r3, r3, #32
 8019e34:	6023      	str	r3, [r4, #0]
 8019e36:	e7f6      	b.n	8019e26 <_printf_i+0x196>
 8019e38:	4616      	mov	r6, r2
 8019e3a:	e7bd      	b.n	8019db8 <_printf_i+0x128>
 8019e3c:	6833      	ldr	r3, [r6, #0]
 8019e3e:	6825      	ldr	r5, [r4, #0]
 8019e40:	6961      	ldr	r1, [r4, #20]
 8019e42:	1d18      	adds	r0, r3, #4
 8019e44:	6030      	str	r0, [r6, #0]
 8019e46:	062e      	lsls	r6, r5, #24
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	d501      	bpl.n	8019e50 <_printf_i+0x1c0>
 8019e4c:	6019      	str	r1, [r3, #0]
 8019e4e:	e002      	b.n	8019e56 <_printf_i+0x1c6>
 8019e50:	0668      	lsls	r0, r5, #25
 8019e52:	d5fb      	bpl.n	8019e4c <_printf_i+0x1bc>
 8019e54:	8019      	strh	r1, [r3, #0]
 8019e56:	2300      	movs	r3, #0
 8019e58:	6123      	str	r3, [r4, #16]
 8019e5a:	4616      	mov	r6, r2
 8019e5c:	e7bc      	b.n	8019dd8 <_printf_i+0x148>
 8019e5e:	6833      	ldr	r3, [r6, #0]
 8019e60:	1d1a      	adds	r2, r3, #4
 8019e62:	6032      	str	r2, [r6, #0]
 8019e64:	681e      	ldr	r6, [r3, #0]
 8019e66:	6862      	ldr	r2, [r4, #4]
 8019e68:	2100      	movs	r1, #0
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	f7e6 f9e8 	bl	8000240 <memchr>
 8019e70:	b108      	cbz	r0, 8019e76 <_printf_i+0x1e6>
 8019e72:	1b80      	subs	r0, r0, r6
 8019e74:	6060      	str	r0, [r4, #4]
 8019e76:	6863      	ldr	r3, [r4, #4]
 8019e78:	6123      	str	r3, [r4, #16]
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e80:	e7aa      	b.n	8019dd8 <_printf_i+0x148>
 8019e82:	6923      	ldr	r3, [r4, #16]
 8019e84:	4632      	mov	r2, r6
 8019e86:	4649      	mov	r1, r9
 8019e88:	4640      	mov	r0, r8
 8019e8a:	47d0      	blx	sl
 8019e8c:	3001      	adds	r0, #1
 8019e8e:	d0ad      	beq.n	8019dec <_printf_i+0x15c>
 8019e90:	6823      	ldr	r3, [r4, #0]
 8019e92:	079b      	lsls	r3, r3, #30
 8019e94:	d413      	bmi.n	8019ebe <_printf_i+0x22e>
 8019e96:	68e0      	ldr	r0, [r4, #12]
 8019e98:	9b03      	ldr	r3, [sp, #12]
 8019e9a:	4298      	cmp	r0, r3
 8019e9c:	bfb8      	it	lt
 8019e9e:	4618      	movlt	r0, r3
 8019ea0:	e7a6      	b.n	8019df0 <_printf_i+0x160>
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	4632      	mov	r2, r6
 8019ea6:	4649      	mov	r1, r9
 8019ea8:	4640      	mov	r0, r8
 8019eaa:	47d0      	blx	sl
 8019eac:	3001      	adds	r0, #1
 8019eae:	d09d      	beq.n	8019dec <_printf_i+0x15c>
 8019eb0:	3501      	adds	r5, #1
 8019eb2:	68e3      	ldr	r3, [r4, #12]
 8019eb4:	9903      	ldr	r1, [sp, #12]
 8019eb6:	1a5b      	subs	r3, r3, r1
 8019eb8:	42ab      	cmp	r3, r5
 8019eba:	dcf2      	bgt.n	8019ea2 <_printf_i+0x212>
 8019ebc:	e7eb      	b.n	8019e96 <_printf_i+0x206>
 8019ebe:	2500      	movs	r5, #0
 8019ec0:	f104 0619 	add.w	r6, r4, #25
 8019ec4:	e7f5      	b.n	8019eb2 <_printf_i+0x222>
 8019ec6:	bf00      	nop
 8019ec8:	0801b4c9 	.word	0x0801b4c9
 8019ecc:	0801b4da 	.word	0x0801b4da

08019ed0 <__sflush_r>:
 8019ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed8:	0716      	lsls	r6, r2, #28
 8019eda:	4605      	mov	r5, r0
 8019edc:	460c      	mov	r4, r1
 8019ede:	d454      	bmi.n	8019f8a <__sflush_r+0xba>
 8019ee0:	684b      	ldr	r3, [r1, #4]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	dc02      	bgt.n	8019eec <__sflush_r+0x1c>
 8019ee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	dd48      	ble.n	8019f7e <__sflush_r+0xae>
 8019eec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019eee:	2e00      	cmp	r6, #0
 8019ef0:	d045      	beq.n	8019f7e <__sflush_r+0xae>
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019ef8:	682f      	ldr	r7, [r5, #0]
 8019efa:	6a21      	ldr	r1, [r4, #32]
 8019efc:	602b      	str	r3, [r5, #0]
 8019efe:	d030      	beq.n	8019f62 <__sflush_r+0x92>
 8019f00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019f02:	89a3      	ldrh	r3, [r4, #12]
 8019f04:	0759      	lsls	r1, r3, #29
 8019f06:	d505      	bpl.n	8019f14 <__sflush_r+0x44>
 8019f08:	6863      	ldr	r3, [r4, #4]
 8019f0a:	1ad2      	subs	r2, r2, r3
 8019f0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019f0e:	b10b      	cbz	r3, 8019f14 <__sflush_r+0x44>
 8019f10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019f12:	1ad2      	subs	r2, r2, r3
 8019f14:	2300      	movs	r3, #0
 8019f16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019f18:	6a21      	ldr	r1, [r4, #32]
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	47b0      	blx	r6
 8019f1e:	1c43      	adds	r3, r0, #1
 8019f20:	89a3      	ldrh	r3, [r4, #12]
 8019f22:	d106      	bne.n	8019f32 <__sflush_r+0x62>
 8019f24:	6829      	ldr	r1, [r5, #0]
 8019f26:	291d      	cmp	r1, #29
 8019f28:	d82b      	bhi.n	8019f82 <__sflush_r+0xb2>
 8019f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8019fd4 <__sflush_r+0x104>)
 8019f2c:	410a      	asrs	r2, r1
 8019f2e:	07d6      	lsls	r6, r2, #31
 8019f30:	d427      	bmi.n	8019f82 <__sflush_r+0xb2>
 8019f32:	2200      	movs	r2, #0
 8019f34:	6062      	str	r2, [r4, #4]
 8019f36:	04d9      	lsls	r1, r3, #19
 8019f38:	6922      	ldr	r2, [r4, #16]
 8019f3a:	6022      	str	r2, [r4, #0]
 8019f3c:	d504      	bpl.n	8019f48 <__sflush_r+0x78>
 8019f3e:	1c42      	adds	r2, r0, #1
 8019f40:	d101      	bne.n	8019f46 <__sflush_r+0x76>
 8019f42:	682b      	ldr	r3, [r5, #0]
 8019f44:	b903      	cbnz	r3, 8019f48 <__sflush_r+0x78>
 8019f46:	6560      	str	r0, [r4, #84]	@ 0x54
 8019f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019f4a:	602f      	str	r7, [r5, #0]
 8019f4c:	b1b9      	cbz	r1, 8019f7e <__sflush_r+0xae>
 8019f4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019f52:	4299      	cmp	r1, r3
 8019f54:	d002      	beq.n	8019f5c <__sflush_r+0x8c>
 8019f56:	4628      	mov	r0, r5
 8019f58:	f7ff fb40 	bl	80195dc <_free_r>
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019f60:	e00d      	b.n	8019f7e <__sflush_r+0xae>
 8019f62:	2301      	movs	r3, #1
 8019f64:	4628      	mov	r0, r5
 8019f66:	47b0      	blx	r6
 8019f68:	4602      	mov	r2, r0
 8019f6a:	1c50      	adds	r0, r2, #1
 8019f6c:	d1c9      	bne.n	8019f02 <__sflush_r+0x32>
 8019f6e:	682b      	ldr	r3, [r5, #0]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d0c6      	beq.n	8019f02 <__sflush_r+0x32>
 8019f74:	2b1d      	cmp	r3, #29
 8019f76:	d001      	beq.n	8019f7c <__sflush_r+0xac>
 8019f78:	2b16      	cmp	r3, #22
 8019f7a:	d11e      	bne.n	8019fba <__sflush_r+0xea>
 8019f7c:	602f      	str	r7, [r5, #0]
 8019f7e:	2000      	movs	r0, #0
 8019f80:	e022      	b.n	8019fc8 <__sflush_r+0xf8>
 8019f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f86:	b21b      	sxth	r3, r3
 8019f88:	e01b      	b.n	8019fc2 <__sflush_r+0xf2>
 8019f8a:	690f      	ldr	r7, [r1, #16]
 8019f8c:	2f00      	cmp	r7, #0
 8019f8e:	d0f6      	beq.n	8019f7e <__sflush_r+0xae>
 8019f90:	0793      	lsls	r3, r2, #30
 8019f92:	680e      	ldr	r6, [r1, #0]
 8019f94:	bf08      	it	eq
 8019f96:	694b      	ldreq	r3, [r1, #20]
 8019f98:	600f      	str	r7, [r1, #0]
 8019f9a:	bf18      	it	ne
 8019f9c:	2300      	movne	r3, #0
 8019f9e:	eba6 0807 	sub.w	r8, r6, r7
 8019fa2:	608b      	str	r3, [r1, #8]
 8019fa4:	f1b8 0f00 	cmp.w	r8, #0
 8019fa8:	dde9      	ble.n	8019f7e <__sflush_r+0xae>
 8019faa:	6a21      	ldr	r1, [r4, #32]
 8019fac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019fae:	4643      	mov	r3, r8
 8019fb0:	463a      	mov	r2, r7
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	47b0      	blx	r6
 8019fb6:	2800      	cmp	r0, #0
 8019fb8:	dc08      	bgt.n	8019fcc <__sflush_r+0xfc>
 8019fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fc2:	81a3      	strh	r3, [r4, #12]
 8019fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fcc:	4407      	add	r7, r0
 8019fce:	eba8 0800 	sub.w	r8, r8, r0
 8019fd2:	e7e7      	b.n	8019fa4 <__sflush_r+0xd4>
 8019fd4:	dfbffffe 	.word	0xdfbffffe

08019fd8 <_fflush_r>:
 8019fd8:	b538      	push	{r3, r4, r5, lr}
 8019fda:	690b      	ldr	r3, [r1, #16]
 8019fdc:	4605      	mov	r5, r0
 8019fde:	460c      	mov	r4, r1
 8019fe0:	b913      	cbnz	r3, 8019fe8 <_fflush_r+0x10>
 8019fe2:	2500      	movs	r5, #0
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	bd38      	pop	{r3, r4, r5, pc}
 8019fe8:	b118      	cbz	r0, 8019ff2 <_fflush_r+0x1a>
 8019fea:	6a03      	ldr	r3, [r0, #32]
 8019fec:	b90b      	cbnz	r3, 8019ff2 <_fflush_r+0x1a>
 8019fee:	f7fe ff85 	bl	8018efc <__sinit>
 8019ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d0f3      	beq.n	8019fe2 <_fflush_r+0xa>
 8019ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019ffc:	07d0      	lsls	r0, r2, #31
 8019ffe:	d404      	bmi.n	801a00a <_fflush_r+0x32>
 801a000:	0599      	lsls	r1, r3, #22
 801a002:	d402      	bmi.n	801a00a <_fflush_r+0x32>
 801a004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a006:	f7ff faa6 	bl	8019556 <__retarget_lock_acquire_recursive>
 801a00a:	4628      	mov	r0, r5
 801a00c:	4621      	mov	r1, r4
 801a00e:	f7ff ff5f 	bl	8019ed0 <__sflush_r>
 801a012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a014:	07da      	lsls	r2, r3, #31
 801a016:	4605      	mov	r5, r0
 801a018:	d4e4      	bmi.n	8019fe4 <_fflush_r+0xc>
 801a01a:	89a3      	ldrh	r3, [r4, #12]
 801a01c:	059b      	lsls	r3, r3, #22
 801a01e:	d4e1      	bmi.n	8019fe4 <_fflush_r+0xc>
 801a020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a022:	f7ff fa99 	bl	8019558 <__retarget_lock_release_recursive>
 801a026:	e7dd      	b.n	8019fe4 <_fflush_r+0xc>

0801a028 <fiprintf>:
 801a028:	b40e      	push	{r1, r2, r3}
 801a02a:	b503      	push	{r0, r1, lr}
 801a02c:	4601      	mov	r1, r0
 801a02e:	ab03      	add	r3, sp, #12
 801a030:	4805      	ldr	r0, [pc, #20]	@ (801a048 <fiprintf+0x20>)
 801a032:	f853 2b04 	ldr.w	r2, [r3], #4
 801a036:	6800      	ldr	r0, [r0, #0]
 801a038:	9301      	str	r3, [sp, #4]
 801a03a:	f7ff fca3 	bl	8019984 <_vfiprintf_r>
 801a03e:	b002      	add	sp, #8
 801a040:	f85d eb04 	ldr.w	lr, [sp], #4
 801a044:	b003      	add	sp, #12
 801a046:	4770      	bx	lr
 801a048:	200004b0 	.word	0x200004b0

0801a04c <__swhatbuf_r>:
 801a04c:	b570      	push	{r4, r5, r6, lr}
 801a04e:	460c      	mov	r4, r1
 801a050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a054:	2900      	cmp	r1, #0
 801a056:	b096      	sub	sp, #88	@ 0x58
 801a058:	4615      	mov	r5, r2
 801a05a:	461e      	mov	r6, r3
 801a05c:	da0d      	bge.n	801a07a <__swhatbuf_r+0x2e>
 801a05e:	89a3      	ldrh	r3, [r4, #12]
 801a060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a064:	f04f 0100 	mov.w	r1, #0
 801a068:	bf14      	ite	ne
 801a06a:	2340      	movne	r3, #64	@ 0x40
 801a06c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a070:	2000      	movs	r0, #0
 801a072:	6031      	str	r1, [r6, #0]
 801a074:	602b      	str	r3, [r5, #0]
 801a076:	b016      	add	sp, #88	@ 0x58
 801a078:	bd70      	pop	{r4, r5, r6, pc}
 801a07a:	466a      	mov	r2, sp
 801a07c:	f000 f848 	bl	801a110 <_fstat_r>
 801a080:	2800      	cmp	r0, #0
 801a082:	dbec      	blt.n	801a05e <__swhatbuf_r+0x12>
 801a084:	9901      	ldr	r1, [sp, #4]
 801a086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a08a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a08e:	4259      	negs	r1, r3
 801a090:	4159      	adcs	r1, r3
 801a092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a096:	e7eb      	b.n	801a070 <__swhatbuf_r+0x24>

0801a098 <__smakebuf_r>:
 801a098:	898b      	ldrh	r3, [r1, #12]
 801a09a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a09c:	079d      	lsls	r5, r3, #30
 801a09e:	4606      	mov	r6, r0
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	d507      	bpl.n	801a0b4 <__smakebuf_r+0x1c>
 801a0a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a0a8:	6023      	str	r3, [r4, #0]
 801a0aa:	6123      	str	r3, [r4, #16]
 801a0ac:	2301      	movs	r3, #1
 801a0ae:	6163      	str	r3, [r4, #20]
 801a0b0:	b003      	add	sp, #12
 801a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0b4:	ab01      	add	r3, sp, #4
 801a0b6:	466a      	mov	r2, sp
 801a0b8:	f7ff ffc8 	bl	801a04c <__swhatbuf_r>
 801a0bc:	9f00      	ldr	r7, [sp, #0]
 801a0be:	4605      	mov	r5, r0
 801a0c0:	4639      	mov	r1, r7
 801a0c2:	4630      	mov	r0, r6
 801a0c4:	f7fe fce8 	bl	8018a98 <_malloc_r>
 801a0c8:	b948      	cbnz	r0, 801a0de <__smakebuf_r+0x46>
 801a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0ce:	059a      	lsls	r2, r3, #22
 801a0d0:	d4ee      	bmi.n	801a0b0 <__smakebuf_r+0x18>
 801a0d2:	f023 0303 	bic.w	r3, r3, #3
 801a0d6:	f043 0302 	orr.w	r3, r3, #2
 801a0da:	81a3      	strh	r3, [r4, #12]
 801a0dc:	e7e2      	b.n	801a0a4 <__smakebuf_r+0xc>
 801a0de:	89a3      	ldrh	r3, [r4, #12]
 801a0e0:	6020      	str	r0, [r4, #0]
 801a0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a0e6:	81a3      	strh	r3, [r4, #12]
 801a0e8:	9b01      	ldr	r3, [sp, #4]
 801a0ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a0ee:	b15b      	cbz	r3, 801a108 <__smakebuf_r+0x70>
 801a0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	f000 f81d 	bl	801a134 <_isatty_r>
 801a0fa:	b128      	cbz	r0, 801a108 <__smakebuf_r+0x70>
 801a0fc:	89a3      	ldrh	r3, [r4, #12]
 801a0fe:	f023 0303 	bic.w	r3, r3, #3
 801a102:	f043 0301 	orr.w	r3, r3, #1
 801a106:	81a3      	strh	r3, [r4, #12]
 801a108:	89a3      	ldrh	r3, [r4, #12]
 801a10a:	431d      	orrs	r5, r3
 801a10c:	81a5      	strh	r5, [r4, #12]
 801a10e:	e7cf      	b.n	801a0b0 <__smakebuf_r+0x18>

0801a110 <_fstat_r>:
 801a110:	b538      	push	{r3, r4, r5, lr}
 801a112:	4d07      	ldr	r5, [pc, #28]	@ (801a130 <_fstat_r+0x20>)
 801a114:	2300      	movs	r3, #0
 801a116:	4604      	mov	r4, r0
 801a118:	4608      	mov	r0, r1
 801a11a:	4611      	mov	r1, r2
 801a11c:	602b      	str	r3, [r5, #0]
 801a11e:	f7e8 fbd1 	bl	80028c4 <_fstat>
 801a122:	1c43      	adds	r3, r0, #1
 801a124:	d102      	bne.n	801a12c <_fstat_r+0x1c>
 801a126:	682b      	ldr	r3, [r5, #0]
 801a128:	b103      	cbz	r3, 801a12c <_fstat_r+0x1c>
 801a12a:	6023      	str	r3, [r4, #0]
 801a12c:	bd38      	pop	{r3, r4, r5, pc}
 801a12e:	bf00      	nop
 801a130:	2000e448 	.word	0x2000e448

0801a134 <_isatty_r>:
 801a134:	b538      	push	{r3, r4, r5, lr}
 801a136:	4d06      	ldr	r5, [pc, #24]	@ (801a150 <_isatty_r+0x1c>)
 801a138:	2300      	movs	r3, #0
 801a13a:	4604      	mov	r4, r0
 801a13c:	4608      	mov	r0, r1
 801a13e:	602b      	str	r3, [r5, #0]
 801a140:	f7e8 fbd0 	bl	80028e4 <_isatty>
 801a144:	1c43      	adds	r3, r0, #1
 801a146:	d102      	bne.n	801a14e <_isatty_r+0x1a>
 801a148:	682b      	ldr	r3, [r5, #0]
 801a14a:	b103      	cbz	r3, 801a14e <_isatty_r+0x1a>
 801a14c:	6023      	str	r3, [r4, #0]
 801a14e:	bd38      	pop	{r3, r4, r5, pc}
 801a150:	2000e448 	.word	0x2000e448

0801a154 <abort>:
 801a154:	b508      	push	{r3, lr}
 801a156:	2006      	movs	r0, #6
 801a158:	f000 f82c 	bl	801a1b4 <raise>
 801a15c:	2001      	movs	r0, #1
 801a15e:	f7e8 fb61 	bl	8002824 <_exit>

0801a162 <_raise_r>:
 801a162:	291f      	cmp	r1, #31
 801a164:	b538      	push	{r3, r4, r5, lr}
 801a166:	4605      	mov	r5, r0
 801a168:	460c      	mov	r4, r1
 801a16a:	d904      	bls.n	801a176 <_raise_r+0x14>
 801a16c:	2316      	movs	r3, #22
 801a16e:	6003      	str	r3, [r0, #0]
 801a170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a174:	bd38      	pop	{r3, r4, r5, pc}
 801a176:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a178:	b112      	cbz	r2, 801a180 <_raise_r+0x1e>
 801a17a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a17e:	b94b      	cbnz	r3, 801a194 <_raise_r+0x32>
 801a180:	4628      	mov	r0, r5
 801a182:	f000 f831 	bl	801a1e8 <_getpid_r>
 801a186:	4622      	mov	r2, r4
 801a188:	4601      	mov	r1, r0
 801a18a:	4628      	mov	r0, r5
 801a18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a190:	f000 b818 	b.w	801a1c4 <_kill_r>
 801a194:	2b01      	cmp	r3, #1
 801a196:	d00a      	beq.n	801a1ae <_raise_r+0x4c>
 801a198:	1c59      	adds	r1, r3, #1
 801a19a:	d103      	bne.n	801a1a4 <_raise_r+0x42>
 801a19c:	2316      	movs	r3, #22
 801a19e:	6003      	str	r3, [r0, #0]
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	e7e7      	b.n	801a174 <_raise_r+0x12>
 801a1a4:	2100      	movs	r1, #0
 801a1a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	4798      	blx	r3
 801a1ae:	2000      	movs	r0, #0
 801a1b0:	e7e0      	b.n	801a174 <_raise_r+0x12>
	...

0801a1b4 <raise>:
 801a1b4:	4b02      	ldr	r3, [pc, #8]	@ (801a1c0 <raise+0xc>)
 801a1b6:	4601      	mov	r1, r0
 801a1b8:	6818      	ldr	r0, [r3, #0]
 801a1ba:	f7ff bfd2 	b.w	801a162 <_raise_r>
 801a1be:	bf00      	nop
 801a1c0:	200004b0 	.word	0x200004b0

0801a1c4 <_kill_r>:
 801a1c4:	b538      	push	{r3, r4, r5, lr}
 801a1c6:	4d07      	ldr	r5, [pc, #28]	@ (801a1e4 <_kill_r+0x20>)
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	4608      	mov	r0, r1
 801a1ce:	4611      	mov	r1, r2
 801a1d0:	602b      	str	r3, [r5, #0]
 801a1d2:	f7e8 fb17 	bl	8002804 <_kill>
 801a1d6:	1c43      	adds	r3, r0, #1
 801a1d8:	d102      	bne.n	801a1e0 <_kill_r+0x1c>
 801a1da:	682b      	ldr	r3, [r5, #0]
 801a1dc:	b103      	cbz	r3, 801a1e0 <_kill_r+0x1c>
 801a1de:	6023      	str	r3, [r4, #0]
 801a1e0:	bd38      	pop	{r3, r4, r5, pc}
 801a1e2:	bf00      	nop
 801a1e4:	2000e448 	.word	0x2000e448

0801a1e8 <_getpid_r>:
 801a1e8:	f7e8 bb04 	b.w	80027f4 <_getpid>

0801a1ec <fmax>:
 801a1ec:	b508      	push	{r3, lr}
 801a1ee:	ed2d 8b04 	vpush	{d8-d9}
 801a1f2:	eeb0 8a40 	vmov.f32	s16, s0
 801a1f6:	eef0 8a60 	vmov.f32	s17, s1
 801a1fa:	eeb0 9a41 	vmov.f32	s18, s2
 801a1fe:	eef0 9a61 	vmov.f32	s19, s3
 801a202:	f000 f81d 	bl	801a240 <__fpclassifyd>
 801a206:	b950      	cbnz	r0, 801a21e <fmax+0x32>
 801a208:	eeb0 8a49 	vmov.f32	s16, s18
 801a20c:	eef0 8a69 	vmov.f32	s17, s19
 801a210:	eeb0 0a48 	vmov.f32	s0, s16
 801a214:	eef0 0a68 	vmov.f32	s1, s17
 801a218:	ecbd 8b04 	vpop	{d8-d9}
 801a21c:	bd08      	pop	{r3, pc}
 801a21e:	eeb0 0a49 	vmov.f32	s0, s18
 801a222:	eef0 0a69 	vmov.f32	s1, s19
 801a226:	f000 f80b 	bl	801a240 <__fpclassifyd>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	d0f0      	beq.n	801a210 <fmax+0x24>
 801a22e:	ec53 2b19 	vmov	r2, r3, d9
 801a232:	ec51 0b18 	vmov	r0, r1, d8
 801a236:	f7e6 fc9f 	bl	8000b78 <__aeabi_dcmpgt>
 801a23a:	2800      	cmp	r0, #0
 801a23c:	d0e4      	beq.n	801a208 <fmax+0x1c>
 801a23e:	e7e7      	b.n	801a210 <fmax+0x24>

0801a240 <__fpclassifyd>:
 801a240:	ec51 0b10 	vmov	r0, r1, d0
 801a244:	b510      	push	{r4, lr}
 801a246:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801a24a:	460b      	mov	r3, r1
 801a24c:	d019      	beq.n	801a282 <__fpclassifyd+0x42>
 801a24e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801a252:	490e      	ldr	r1, [pc, #56]	@ (801a28c <__fpclassifyd+0x4c>)
 801a254:	428a      	cmp	r2, r1
 801a256:	d90e      	bls.n	801a276 <__fpclassifyd+0x36>
 801a258:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801a25c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801a260:	428a      	cmp	r2, r1
 801a262:	d908      	bls.n	801a276 <__fpclassifyd+0x36>
 801a264:	4a0a      	ldr	r2, [pc, #40]	@ (801a290 <__fpclassifyd+0x50>)
 801a266:	4213      	tst	r3, r2
 801a268:	d007      	beq.n	801a27a <__fpclassifyd+0x3a>
 801a26a:	4294      	cmp	r4, r2
 801a26c:	d107      	bne.n	801a27e <__fpclassifyd+0x3e>
 801a26e:	fab0 f080 	clz	r0, r0
 801a272:	0940      	lsrs	r0, r0, #5
 801a274:	bd10      	pop	{r4, pc}
 801a276:	2004      	movs	r0, #4
 801a278:	e7fc      	b.n	801a274 <__fpclassifyd+0x34>
 801a27a:	2003      	movs	r0, #3
 801a27c:	e7fa      	b.n	801a274 <__fpclassifyd+0x34>
 801a27e:	2000      	movs	r0, #0
 801a280:	e7f8      	b.n	801a274 <__fpclassifyd+0x34>
 801a282:	2800      	cmp	r0, #0
 801a284:	d1ee      	bne.n	801a264 <__fpclassifyd+0x24>
 801a286:	2002      	movs	r0, #2
 801a288:	e7f4      	b.n	801a274 <__fpclassifyd+0x34>
 801a28a:	bf00      	nop
 801a28c:	7fdfffff 	.word	0x7fdfffff
 801a290:	7ff00000 	.word	0x7ff00000

0801a294 <_init>:
 801a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a296:	bf00      	nop
 801a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a29a:	bc08      	pop	{r3}
 801a29c:	469e      	mov	lr, r3
 801a29e:	4770      	bx	lr

0801a2a0 <_fini>:
 801a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2a2:	bf00      	nop
 801a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2a6:	bc08      	pop	{r3}
 801a2a8:	469e      	mov	lr, r3
 801a2aa:	4770      	bx	lr
